Command line: ./send_reminders.py '2022-02-12|Review 1|ss3808@srmist.edu.in'
Total duration: 0.242926s
File: /usr/lib/python3.10/enum.py
File duration: 0.0961924s (39.60%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|import sys
     2|         0|            0|            0|  0.00%|from types import MappingProxyType, DynamicClassAttribute
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|__all__ = [
     6|         0|            0|            0|  0.00%|        'EnumMeta',
     7|         0|            0|            0|  0.00%|        'Enum', 'IntEnum', 'Flag', 'IntFlag',
     8|         0|            0|            0|  0.00%|        'auto', 'unique',
     9|         0|            0|            0|  0.00%|        ]
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|       137|  0.000356197|  2.59998e-06|  0.15%|def _is_descriptor(obj):
    13|         0|            0|            0|  0.00%|    """
    14|         0|            0|            0|  0.00%|    Returns True if obj is a descriptor, False otherwise.
    15|         0|            0|            0|  0.00%|    """
    16|       137|  0.000376701|  2.74964e-06|  0.16%|    return (
    17|       274|  0.000794888|  2.90105e-06|  0.33%|            hasattr(obj, '__get__') or
    18|       137|  0.000394106|  2.87669e-06|  0.16%|            hasattr(obj, '__set__') or
    19|       137|  0.000391722|  2.85928e-06|  0.16%|            hasattr(obj, '__delete__')
    20|         0|            0|            0|  0.00%|            )
    21|         0|            0|            0|  0.00%|
    22|       170|   0.00045681|  2.68712e-06|  0.19%|def _is_dunder(name):
    23|         0|            0|            0|  0.00%|    """
    24|         0|            0|            0|  0.00%|    Returns True if a __dunder__ name, False otherwise.
    25|         0|            0|            0|  0.00%|    """
    26|       170|   0.00047636|  2.80212e-06|  0.20%|    return (
    27|       372|   0.00109959|  2.95588e-06|  0.45%|            len(name) > 4 and
    28|       170|  0.000556469|  3.27335e-06|  0.23%|            name[:2] == name[-2:] == '__' and
    29|        32|  9.39369e-05|  2.93553e-06|  0.04%|            name[2] != '_' and
    30|        32|  9.39369e-05|  2.93553e-06|  0.04%|            name[-3] != '_'
    31|         0|            0|            0|  0.00%|            )
    32|         0|            0|            0|  0.00%|
    33|       169|  0.000462294|  2.73547e-06|  0.19%|def _is_sunder(name):
    34|         0|            0|            0|  0.00%|    """
    35|         0|            0|            0|  0.00%|    Returns True if a _sunder_ name, False otherwise.
    36|         0|            0|            0|  0.00%|    """
    37|       169|  0.000479698|  2.83845e-06|  0.20%|    return (
    38|       370|   0.00109601|  2.96219e-06|  0.45%|            len(name) > 2 and
    39|       169|  0.000535011|  3.16575e-06|  0.22%|            name[0] == name[-1] == '_' and
    40|        32|  0.000111341|  3.47942e-06|  0.05%|            name[1:2] != '_' and
    41|        11|  3.24249e-05|  2.94772e-06|  0.01%|            name[-2:-1] != '_'
    42|         0|            0|            0|  0.00%|            )
    43|         0|            0|            0|  0.00%|
    44|       169|  0.000491381|  2.90758e-06|  0.20%|def _is_private(cls_name, name):
    45|         0|            0|            0|  0.00%|    # do not use `re` as `re` imports `enum`
    46|       169|  0.000591516|   3.5001e-06|  0.24%|    pattern = '_%s__' % (cls_name, )
    47|       169|  0.000538826|  3.18832e-06|  0.22%|    pat_len = len(pattern)
    48|       269|   0.00080514|  2.99308e-06|  0.33%|    if (
    49|       169|  0.000521898|  3.08816e-06|  0.21%|            len(name) > pat_len
    50|       100|  0.000315189|  3.15189e-06|  0.13%|            and name.startswith(pattern)
    51|         0|            0|            0|  0.00%|            and name[pat_len:pat_len+1] != ['_']
    52|         0|            0|            0|  0.00%|            and (name[-1] != '_' or name[-2] != '_')
    53|         0|            0|            0|  0.00%|        ):
    54|         0|            0|            0|  0.00%|        return True
    55|         0|            0|            0|  0.00%|    else:
    56|       169|  0.000489235|  2.89488e-06|  0.20%|        return False
    57|         0|            0|            0|  0.00%|
    58|         1|  4.76837e-06|  4.76837e-06|  0.00%|def _make_class_unpicklable(cls):
    59|         0|            0|            0|  0.00%|    """
    60|         0|            0|            0|  0.00%|    Make the given class un-picklable.
    61|         0|            0|            0|  0.00%|    """
    62|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def _break_on_call_reduce(self, proto):
    63|         0|            0|            0|  0.00%|        raise TypeError('%r cannot be pickled' % self)
    64|         1|  9.29832e-06|  9.29832e-06|  0.00%|    cls.__reduce_ex__ = _break_on_call_reduce
(call)|         1|  1.45435e-05|  1.45435e-05|  0.01%|# /usr/lib/python3.10/enum.py:470 __setattr__
    65|         1|  9.29832e-06|  9.29832e-06|  0.00%|    cls.__module__ = '<unknown>'
(call)|         1|   1.3113e-05|   1.3113e-05|  0.01%|# /usr/lib/python3.10/enum.py:470 __setattr__
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|_auto_null = object()
    68|         0|            0|            0|  0.00%|class auto:
    69|         0|            0|            0|  0.00%|    """
    70|         0|            0|            0|  0.00%|    Instances are replaced with an appropriate value in Enum class suites.
    71|         0|            0|            0|  0.00%|    """
    72|         0|            0|            0|  0.00%|    value = _auto_null
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|class _EnumDict(dict):
    76|         0|            0|            0|  0.00%|    """
    77|         0|            0|            0|  0.00%|    Track enum member order and ensure member names are not reused.
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|    EnumMeta will use the names found in self._member_names as the
    80|         0|            0|            0|  0.00%|    enumeration member names.
    81|         0|            0|            0|  0.00%|    """
    82|        11|  3.33786e-05|  3.03442e-06|  0.01%|    def __init__(self):
    83|        11|  4.81606e-05|  4.37823e-06|  0.02%|        super().__init__()
    84|        11|  3.76701e-05|  3.42456e-06|  0.02%|        self._member_names = []
    85|        11|  3.57628e-05|  3.25116e-06|  0.01%|        self._last_values = []
    86|        11|  3.48091e-05|  3.16446e-06|  0.01%|        self._ignore = []
    87|        11|  3.57628e-05|  3.25116e-06|  0.01%|        self._auto_called = False
    88|         0|            0|            0|  0.00%|
    89|       169|  0.000550747|  3.25886e-06|  0.23%|    def __setitem__(self, key, value):
    90|         0|            0|            0|  0.00%|        """
    91|         0|            0|            0|  0.00%|        Changes anything not dundered or not a descriptor.
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|        If an enum member name is used twice, an error is raised; duplicate
    94|         0|            0|            0|  0.00%|        values are not checked for.
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|        Single underscore (sunder) names are reserved.
    97|         0|            0|            0|  0.00%|        """
    98|       169|   0.00145888|  8.63245e-06|  0.60%|        if _is_private(self._cls_name, key):
(call)|       169|   0.00375319|  2.22082e-05|  1.54%|# /usr/lib/python3.10/enum.py:44 _is_private
    99|         0|            0|            0|  0.00%|            import warnings
   100|         0|            0|            0|  0.00%|            warnings.warn(
   101|         0|            0|            0|  0.00%|                    "private variables, such as %r, will be normal attributes in 3.11"
   102|         0|            0|            0|  0.00%|                        % (key, ),
   103|         0|            0|            0|  0.00%|                    DeprecationWarning,
   104|         0|            0|            0|  0.00%|                    stacklevel=2,
   105|         0|            0|            0|  0.00%|                    )
   106|       169|   0.00138903|  8.21909e-06|  0.57%|        if _is_sunder(key):
(call)|       169|   0.00271678|  1.60756e-05|  1.12%|# /usr/lib/python3.10/enum.py:33 _is_sunder
   107|        11|  4.19617e-05|   3.8147e-06|  0.02%|            if key not in (
   108|         0|            0|            0|  0.00%|                    '_order_', '_create_pseudo_member_',
   109|         0|            0|            0|  0.00%|                    '_generate_next_value_', '_missing_', '_ignore_',
   110|         0|            0|            0|  0.00%|                    ):
   111|         0|            0|            0|  0.00%|                raise ValueError('_names_ are reserved for future Enum use')
   112|        11|   3.8147e-05|  3.46791e-06|  0.02%|            if key == '_generate_next_value_':
   113|         0|            0|            0|  0.00%|                # check if members already defined as auto()
   114|        11|  3.83854e-05|  3.48958e-06|  0.02%|                if self._auto_called:
   115|         0|            0|            0|  0.00%|                    raise TypeError("_generate_next_value_ must be defined before members")
   116|        11|  4.22001e-05|  3.83637e-06|  0.02%|                setattr(self, '_generate_next_value', value)
   117|         0|            0|            0|  0.00%|            elif key == '_ignore_':
   118|         0|            0|            0|  0.00%|                if isinstance(value, str):
   119|         0|            0|            0|  0.00%|                    value = value.replace(',',' ').split()
   120|         0|            0|            0|  0.00%|                else:
   121|         0|            0|            0|  0.00%|                    value = list(value)
   122|         0|            0|            0|  0.00%|                self._ignore = value
   123|         0|            0|            0|  0.00%|                already = set(value) & set(self._member_names)
   124|         0|            0|            0|  0.00%|                if already:
   125|         0|            0|            0|  0.00%|                    raise ValueError(
   126|         0|            0|            0|  0.00%|                            '_ignore_ cannot specify already set names: %r'
   127|         0|            0|            0|  0.00%|                            % (already, )
   128|         0|            0|            0|  0.00%|                            )
   129|       158|   0.00129342|  8.18621e-06|  0.53%|        elif _is_dunder(key):
(call)|       158|   0.00249124|  1.57673e-05|  1.03%|# /usr/lib/python3.10/enum.py:22 _is_dunder
   130|        21|  7.27177e-05|  3.46275e-06|  0.03%|            if key == '__order__':
   131|         0|            0|            0|  0.00%|                key = '_order_'
   132|       137|  0.000486851|  3.55366e-06|  0.20%|        elif key in self._member_names:
   133|         0|            0|            0|  0.00%|            # descriptor overwriting an enum?
   134|         0|            0|            0|  0.00%|            raise TypeError('Attempted to reuse key: %r' % key)
   135|       137|  0.000455618|  3.32568e-06|  0.19%|        elif key in self._ignore:
   136|         0|            0|            0|  0.00%|            pass
   137|       137|   0.00111032|  8.10449e-06|  0.46%|        elif not _is_descriptor(value):
(call)|       137|   0.00231361|  1.68877e-05|  0.95%|# /usr/lib/python3.10/enum.py:12 _is_descriptor
   138|       137|  0.000478745|  3.49449e-06|  0.20%|            if key in self:
   139|         0|            0|            0|  0.00%|                # enum overwriting a descriptor?
   140|         0|            0|            0|  0.00%|                raise TypeError('%r already defined as: %r' % (key, self[key]))
   141|       137|  0.000478745|  3.49449e-06|  0.20%|            if isinstance(value, auto):
   142|         0|            0|            0|  0.00%|                if value.value == _auto_null:
   143|         0|            0|            0|  0.00%|                    value.value = self._generate_next_value(
   144|         0|            0|            0|  0.00%|                            key,
   145|         0|            0|            0|  0.00%|                            1,
   146|         0|            0|            0|  0.00%|                            len(self._member_names),
   147|         0|            0|            0|  0.00%|                            self._last_values[:],
   148|         0|            0|            0|  0.00%|                            )
   149|         0|            0|            0|  0.00%|                    self._auto_called = True
   150|         0|            0|            0|  0.00%|                value = value.value
   151|       137|  0.000478506|  3.49275e-06|  0.20%|            self._member_names.append(key)
   152|       137|  0.000466585|  3.40573e-06|  0.19%|            self._last_values.append(value)
   153|       169|  0.000669003|  3.95859e-06|  0.28%|        super().__setitem__(key, value)
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|# Dummy value for Enum as EnumMeta explicitly checks for it, but of course
   157|         0|            0|            0|  0.00%|# until EnumMeta finishes running the first time the Enum class doesn't exist.
   158|         0|            0|            0|  0.00%|# This is also why there are checks in EnumMeta like `if Enum is not None`
   159|         0|            0|            0|  0.00%|Enum = None
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|class EnumMeta(type):
   162|         0|            0|            0|  0.00%|    """
   163|         0|            0|            0|  0.00%|    Metaclass for Enum
   164|         0|            0|            0|  0.00%|    """
   165|        11|  9.87053e-05|  8.97321e-06|  0.04%|    @classmethod
   166|         0|            0|            0|  0.00%|    def __prepare__(metacls, cls, bases, **kwds):
   167|         0|            0|            0|  0.00%|        # check that previous enum members do not exist
   168|        11|  0.000102997|  9.36335e-06|  0.04%|        metacls._check_for_existing_members(cls, bases)
(call)|        11|  0.000462294|  4.20267e-05|  0.19%|# /usr/lib/python3.10/enum.py:569 _check_for_existing_members
   169|         0|            0|            0|  0.00%|        # create the namespace dict
   170|        11|  0.000100136|  9.10325e-06|  0.04%|        enum_dict = _EnumDict()
(call)|        11|  0.000225544|   2.0504e-05|  0.09%|# /usr/lib/python3.10/enum.py:82 __init__
   171|        11|  3.95775e-05|  3.59795e-06|  0.02%|        enum_dict._cls_name = cls
   172|         0|            0|            0|  0.00%|        # inherit previous flags and _generate_next_value_ function
   173|        11|  0.000103712|  9.42837e-06|  0.04%|        member_type, first_enum = metacls._get_mixins_(cls, bases)
(call)|        11|   0.00095129|  8.64809e-05|  0.39%|# /usr/lib/python3.10/enum.py:579 _get_mixins_
   174|        11|  3.62396e-05|  3.29451e-06|  0.01%|        if first_enum is not None:
   175|        22|  0.000143051|  6.50232e-06|  0.06%|            enum_dict['_generate_next_value_'] = getattr(
(call)|        11|   0.00102973|  9.36118e-05|  0.42%|# /usr/lib/python3.10/enum.py:89 __setitem__
   176|        11|  3.57628e-05|  3.25116e-06|  0.01%|                    first_enum, '_generate_next_value_', None,
   177|         0|            0|            0|  0.00%|                    )
   178|        11|  3.52859e-05|  3.20781e-06|  0.01%|        return enum_dict
   179|         0|            0|            0|  0.00%|
   180|        11|  0.000130177|  1.18342e-05|  0.05%|    def __new__(metacls, cls, bases, classdict, **kwds):
   181|         0|            0|            0|  0.00%|        # an Enum class is final once enumeration items have been defined; it
   182|         0|            0|            0|  0.00%|        # cannot be mixed with other types (int, float, etc.) if it has an
   183|         0|            0|            0|  0.00%|        # inherited __new__ unless a new __new__ is defined (or the resulting
   184|         0|            0|            0|  0.00%|        # class will fail).
   185|         0|            0|            0|  0.00%|        #
   186|         0|            0|            0|  0.00%|        # remove any keys listed in _ignore_
   187|        11|  7.89165e-05|  7.17423e-06|  0.03%|        classdict.setdefault('_ignore_', []).append('_ignore_')
   188|        11|  6.60419e-05|  6.00381e-06|  0.03%|        ignore = classdict['_ignore_']
   189|        22|  0.000125647|  5.71121e-06|  0.05%|        for key in ignore:
   190|        11|  6.62804e-05|  6.02549e-06|  0.03%|            classdict.pop(key, None)
   191|        11|  0.000136137|  1.23761e-05|  0.06%|        member_type, first_enum = metacls._get_mixins_(cls, bases)
(call)|        11|  0.000931263|  8.46603e-05|  0.38%|# /usr/lib/python3.10/enum.py:579 _get_mixins_
   192|        22|  0.000200987|  9.13577e-06|  0.08%|        __new__, save_new, use_args = metacls._find_new_(
(call)|        11|   0.00199413|  0.000181285|  0.82%|# /usr/lib/python3.10/enum.py:626 _find_new_
   193|        11|  5.91278e-05|  5.37526e-06|  0.02%|                classdict, member_type, first_enum,
   194|         0|            0|            0|  0.00%|                )
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|        # save enum items into separate mapping so they don't get baked into
   197|         0|            0|            0|  0.00%|        # the new class
   198|       170|  0.000632286|  3.71933e-06|  0.26%|        enum_members = {k: classdict[k] for k in classdict._member_names}
(call)|        11|  0.000505209|  4.59281e-05|  0.21%|# /usr/lib/python3.10/enum.py:198 <dictcomp>
   199|       148|  0.000725985|   4.9053e-06|  0.30%|        for name in classdict._member_names:
   200|       137|  0.000709772|  5.18082e-06|  0.29%|            del classdict[name]
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|        # adjust the sunders
   203|        11|  5.79357e-05|  5.26688e-06|  0.02%|        _order_ = classdict.pop('_order_', None)
   204|         0|            0|            0|  0.00%|
   205|         0|            0|            0|  0.00%|        # check for illegal enum names (any others?)
   206|        11|  7.15256e-05|  6.50232e-06|  0.03%|        invalid_names = set(enum_members) & {'mro', ''}
   207|        11|  5.76973e-05|  5.24521e-06|  0.02%|        if invalid_names:
   208|         0|            0|            0|  0.00%|            raise ValueError('Invalid enum member name: {0}'.format(
   209|         0|            0|            0|  0.00%|                ','.join(invalid_names)))
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|        # create a default docstring if one has not been provided
   212|        11|  5.74589e-05|  5.22353e-06|  0.02%|        if '__doc__' not in classdict:
   213|         7|   8.4877e-05|  1.21253e-05|  0.03%|            classdict['__doc__'] = 'An enumeration.'
(call)|         7|  0.000710726|  0.000101532|  0.29%|# /usr/lib/python3.10/enum.py:89 __setitem__
   214|         0|            0|            0|  0.00%|
   215|        11|  0.000240803|  2.18912e-05|  0.10%|        enum_class = super().__new__(metacls, cls, bases, classdict, **kwds)
   216|        11|  0.000128031|  1.16392e-05|  0.05%|        enum_class._member_names_ = []               # names in definition order
(call)|        11|  0.000178099|  1.61908e-05|  0.07%|# /usr/lib/python3.10/enum.py:470 __setattr__
   217|        11|  0.000119448|  1.08589e-05|  0.05%|        enum_class._member_map_ = {}                 # name->value map
(call)|        11|  0.000145912|  1.32647e-05|  0.06%|# /usr/lib/python3.10/enum.py:470 __setattr__
   218|        11|  0.000115395|  1.04904e-05|  0.05%|        enum_class._member_type_ = member_type
(call)|        11|  0.000143766|  1.30697e-05|  0.06%|# /usr/lib/python3.10/enum.py:470 __setattr__
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|        # save DynamicClassAttribute attributes from super classes so we know
   221|         0|            0|            0|  0.00%|        # if we can take the shortcut of storing members in the class dict
   222|      2896|   0.00851607|  2.94063e-06|  3.51%|        dynamic_attributes = {
(call)|        11|    0.0166736|   0.00151578|  6.86%|# /usr/lib/python3.10/enum.py:222 <setcomp>
   223|        91|  0.000329018|  3.61558e-06|  0.14%|                k for c in enum_class.mro()
   224|      1415|   0.00408936|     2.89e-06|  1.68%|                for k, v in c.__dict__.items()
   225|      1357|   0.00402308|  2.96468e-06|  1.66%|                if isinstance(v, DynamicClassAttribute)
   226|         0|            0|            0|  0.00%|                }
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|        # Reverse value->name map for hashable values.
   229|        11|  0.000121117|  1.10106e-05|  0.05%|        enum_class._value2member_map_ = {}
(call)|        11|  0.000151157|  1.37416e-05|  0.06%|# /usr/lib/python3.10/enum.py:470 __setattr__
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|        # If a custom type is mixed into the Enum, and it does not know how
   232|         0|            0|            0|  0.00%|        # to pickle itself, pickle.dumps will succeed but pickle.loads will
   233|         0|            0|            0|  0.00%|        # fail.  Rather than have the error show up later and possibly far
   234|         0|            0|            0|  0.00%|        # from the source, sabotage the pickle protocol for this class so
   235|         0|            0|            0|  0.00%|        # that pickle.dumps also fails.
   236|         0|            0|            0|  0.00%|        #
   237|         0|            0|            0|  0.00%|        # However, if the new class implements its own __reduce_ex__, do not
   238|         0|            0|            0|  0.00%|        # sabotage -- it's on them to make sure it works correctly.  We use
   239|         0|            0|            0|  0.00%|        # __reduce_ex__ instead of any of the others as it is preferred by
   240|         0|            0|            0|  0.00%|        # pickle over __reduce__, and it handles all pickle protocols.
   241|        11|  6.03199e-05|  5.48363e-06|  0.02%|        if '__reduce_ex__' not in classdict:
   242|        11|  5.53131e-05|  5.02846e-06|  0.02%|            if member_type is not object:
   243|        11|  5.43594e-05|  4.94177e-06|  0.02%|                methods = ('__getnewargs_ex__', '__getnewargs__',
   244|         0|            0|            0|  0.00%|                        '__reduce_ex__', '__reduce__')
   245|        71|  0.000466585|  6.57162e-06|  0.19%|                if not any(m in member_type.__dict__ for m in methods):
(call)|        35|  0.000203133|  5.80379e-06|  0.08%|# /usr/lib/python3.10/enum.py:245 <genexpr>
   246|         1|  4.76837e-06|  4.76837e-06|  0.00%|                    if '__new__' in classdict:
   247|         0|            0|            0|  0.00%|                        # too late, sabotage
   248|         0|            0|            0|  0.00%|                        _make_class_unpicklable(enum_class)
   249|         0|            0|            0|  0.00%|                    else:
   250|         0|            0|            0|  0.00%|                        # final attempt to verify that pickling would work:
   251|         0|            0|            0|  0.00%|                        # travel mro until __new__ is found, checking for
   252|         0|            0|            0|  0.00%|                        # __reduce__ and friends along the way -- if any of them
   253|         0|            0|            0|  0.00%|                        # are found before/when __new__ is found, pickling should
   254|         0|            0|            0|  0.00%|                        # work
   255|         1|  6.67572e-06|  6.67572e-06|  0.00%|                        sabotage = None
   256|         1|  6.67572e-06|  6.67572e-06|  0.00%|                        for chain in bases:
   257|         1|  5.72205e-06|  5.72205e-06|  0.00%|                            for base in chain.__mro__:
   258|         1|  5.96046e-06|  5.96046e-06|  0.00%|                                if base is object:
   259|         0|            0|            0|  0.00%|                                    continue
   260|        11|  7.00951e-05|  6.37228e-06|  0.03%|                                elif any(m in base.__dict__ for m in methods):
(call)|         5|  3.31402e-05|  6.62804e-06|  0.01%|# /usr/lib/python3.10/enum.py:260 <genexpr>
   261|         0|            0|            0|  0.00%|                                    # found one, we're good
   262|         0|            0|            0|  0.00%|                                    sabotage = False
   263|         0|            0|            0|  0.00%|                                    break
   264|         1|  5.72205e-06|  5.72205e-06|  0.00%|                                elif '__new__' in base.__dict__:
   265|         0|            0|            0|  0.00%|                                    # not good
   266|         1|  5.96046e-06|  5.96046e-06|  0.00%|                                    sabotage = True
   267|         1|  5.00679e-06|  5.00679e-06|  0.00%|                                    break
   268|         1|  6.67572e-06|  6.67572e-06|  0.00%|                            if sabotage is not None:
   269|         1|  5.48363e-06|  5.48363e-06|  0.00%|                                break
   270|         1|  5.00679e-06|  5.00679e-06|  0.00%|                        if sabotage:
   271|         1|  1.38283e-05|  1.38283e-05|  0.01%|                            _make_class_unpicklable(enum_class)
(call)|         1|  5.53131e-05|  5.53131e-05|  0.02%|# /usr/lib/python3.10/enum.py:58 _make_class_unpicklable
   272|         0|            0|            0|  0.00%|        # instantiate them, checking for duplicates as we go
   273|         0|            0|            0|  0.00%|        # we instantiate first instead of checking for duplicates first in case
   274|         0|            0|            0|  0.00%|        # a custom __new__ is doing something funky with the values -- such as
   275|         0|            0|            0|  0.00%|        # auto-numbering ;)
   276|       148|  0.000666618|  4.50418e-06|  0.27%|        for member_name in classdict._member_names:
   277|       137|  0.000631809|  4.61175e-06|  0.26%|            value = enum_members[member_name]
   278|       137|  0.000633001|  4.62045e-06|  0.26%|            if not isinstance(value, tuple):
   279|       137|  0.000619173|  4.51951e-06|  0.25%|                args = (value, )
   280|         0|            0|            0|  0.00%|            else:
   281|         0|            0|            0|  0.00%|                args = value
   282|       137|  0.000620365|  4.52821e-06|  0.26%|            if member_type is tuple:   # special case for tuple enums
   283|         0|            0|            0|  0.00%|                args = (args, )     # wrap it one more time
   284|       137|  0.000613213|    4.476e-06|  0.25%|            if not use_args:
   285|         0|            0|            0|  0.00%|                enum_member = __new__(enum_class)
   286|         0|            0|            0|  0.00%|                if not hasattr(enum_member, '_value_'):
   287|         0|            0|            0|  0.00%|                    enum_member._value_ = value
   288|         0|            0|            0|  0.00%|            else:
   289|       137|  0.000678539|  4.95284e-06|  0.28%|                enum_member = __new__(enum_class, *args)
(call)|         2|  6.46114e-05|  3.23057e-05|  0.03%|# /usr/lib/python3.10/ssl.py:456 __new__
   290|       137|  0.000648499|  4.73357e-06|  0.27%|                if not hasattr(enum_member, '_value_'):
   291|       137|  0.000614882|  4.48819e-06|  0.25%|                    if member_type is object:
   292|         0|            0|            0|  0.00%|                        enum_member._value_ = value
   293|         0|            0|            0|  0.00%|                    else:
   294|       137|  0.000672579|  4.90933e-06|  0.28%|                        enum_member._value_ = member_type(*args)
(call)|         2|  3.93391e-05|  1.96695e-05|  0.02%|# /usr/lib/python3.10/ssl.py:456 __new__
   295|       137|  0.000611305|  4.46208e-06|  0.25%|            value = enum_member._value_
   296|       137|  0.000627041|  4.57694e-06|  0.26%|            enum_member._name_ = member_name
   297|       137|  0.000623703|  4.55258e-06|  0.26%|            enum_member.__objclass__ = enum_class
   298|       137|  0.000639915|  4.67092e-06|  0.26%|            enum_member.__init__(*args)
   299|         0|            0|            0|  0.00%|            # If another member with the same value was already defined, the
   300|         0|            0|            0|  0.00%|            # new member becomes an alias to the existing one.
   301|      1480|   0.00666595|  4.50402e-06|  2.74%|            for name, canonical_member in enum_class._member_map_.items():
   302|      1345|   0.00611901|  4.54945e-06|  2.52%|                if canonical_member._value_ == enum_member._value_:
   303|         2|  9.53674e-06|  4.76837e-06|  0.00%|                    enum_member = canonical_member
   304|         2|  1.09673e-05|  5.48363e-06|  0.00%|                    break
   305|         0|            0|            0|  0.00%|            else:
   306|         0|            0|            0|  0.00%|                # Aliases don't appear in member names (only in __members__).
   307|       135|  0.000655174|  4.85314e-06|  0.27%|                enum_class._member_names_.append(member_name)
   308|         0|            0|            0|  0.00%|            # performance boost for any member that would not shadow
   309|         0|            0|            0|  0.00%|            # a DynamicClassAttribute
   310|       137|  0.000617981|  4.51081e-06|  0.25%|            if member_name not in dynamic_attributes:
   311|       137|   0.00141716|  1.03442e-05|  0.58%|                setattr(enum_class, member_name, enum_member)
(call)|       137|   0.00187492|  1.36856e-05|  0.77%|# /usr/lib/python3.10/enum.py:470 __setattr__
   312|         0|            0|            0|  0.00%|            # now add to _member_map_
   313|       137|   0.00067687|  4.94066e-06|  0.28%|            enum_class._member_map_[member_name] = enum_member
   314|       137|  0.000614405|  4.48471e-06|  0.25%|            try:
   315|         0|            0|            0|  0.00%|                # This may fail if value is not hashable. We can't add the value
   316|         0|            0|            0|  0.00%|                # to the map, and by-value lookups for this value will be
   317|         0|            0|            0|  0.00%|                # linear.
   318|       137|  0.000664473|  4.85016e-06|  0.27%|                enum_class._value2member_map_[value] = enum_member
   319|         0|            0|            0|  0.00%|            except TypeError:
   320|         0|            0|            0|  0.00%|                pass
   321|         0|            0|            0|  0.00%|
   322|         0|            0|            0|  0.00%|        # double check that repr and friends are not the mixin's or various
   323|         0|            0|            0|  0.00%|        # things break (such as pickle)
   324|         0|            0|            0|  0.00%|        # however, if the method is defined in the Enum itself, don't replace
   325|         0|            0|            0|  0.00%|        # it
   326|        55|  0.000244856|  4.45193e-06|  0.10%|        for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):
   327|        44|  0.000209808|  4.76837e-06|  0.09%|            if name in classdict:
   328|         0|            0|            0|  0.00%|                continue
   329|        44|  0.000212908|  4.83881e-06|  0.09%|            class_method = getattr(enum_class, name)
   330|        44|  0.000202179|  4.59498e-06|  0.08%|            obj_method = getattr(member_type, name, None)
   331|        44|  0.000201464|  4.57872e-06|  0.08%|            enum_method = getattr(first_enum, name, None)
   332|        44|  0.000198841|  4.51912e-06|  0.08%|            if obj_method is not None and obj_method is class_method:
   333|         1|  1.12057e-05|  1.12057e-05|  0.00%|                setattr(enum_class, name, enum_method)
(call)|         1|  1.33514e-05|  1.33514e-05|  0.01%|# /usr/lib/python3.10/enum.py:470 __setattr__
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|        # replace any other __new__ with our own (as long as Enum is not None,
   336|         0|            0|            0|  0.00%|        # anyway) -- again, this is to support pickle
   337|        11|    4.673e-05|  4.24819e-06|  0.02%|        if Enum is not None:
   338|         0|            0|            0|  0.00%|            # if the user defined their own __new__, save it before it gets
   339|         0|            0|            0|  0.00%|            # clobbered in case they subclass later
   340|        11|  4.76837e-05|  4.33488e-06|  0.02%|            if save_new:
   341|         0|            0|            0|  0.00%|                enum_class.__new_member__ = __new__
   342|        11|  0.000120163|  1.09239e-05|  0.05%|            enum_class.__new__ = Enum.__new__
(call)|        11|  0.000154734|  1.40667e-05|  0.06%|# /usr/lib/python3.10/enum.py:470 __setattr__
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|        # py3 support for definition order (helps keep py2/py3 code in sync)
   345|        11|  5.03063e-05|   4.5733e-06|  0.02%|        if _order_ is not None:
   346|         0|            0|            0|  0.00%|            if isinstance(_order_, str):
   347|         0|            0|            0|  0.00%|                _order_ = _order_.replace(',', ' ').split()
   348|         0|            0|            0|  0.00%|            if _order_ != enum_class._member_names_:
   349|         0|            0|            0|  0.00%|                raise TypeError('member order does not match _order_')
   350|         0|            0|            0|  0.00%|
   351|        11|  4.88758e-05|  4.44326e-06|  0.02%|        return enum_class
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|    def __bool__(self):
   354|         0|            0|            0|  0.00%|        """
   355|         0|            0|            0|  0.00%|        classes/types should always be True.
   356|         0|            0|            0|  0.00%|        """
   357|         0|            0|            0|  0.00%|        return True
   358|         0|            0|            0|  0.00%|
   359|        24|   7.1764e-05|  2.99017e-06|  0.03%|    def __call__(cls, value, names=None, *, module=None, qualname=None, type=None, start=1):
   360|         0|            0|            0|  0.00%|        """
   361|         0|            0|            0|  0.00%|        Either returns an existing member, or creates a new enum class.
   362|         0|            0|            0|  0.00%|
   363|         0|            0|            0|  0.00%|        This method is used both when an enum class is given a value to match
   364|         0|            0|            0|  0.00%|        to an enumeration member (i.e. Color(3)) and for the functional API
   365|         0|            0|            0|  0.00%|        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|        When used for the functional API:
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|        `value` will be the name of the new class.
   370|         0|            0|            0|  0.00%|
   371|         0|            0|            0|  0.00%|        `names` should be either a string of white-space/comma delimited names
   372|         0|            0|            0|  0.00%|        (values will start at `start`), or an iterator/mapping of name, value pairs.
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|        `module` should be set to the module this class is being created in;
   375|         0|            0|            0|  0.00%|        if it is not set, an attempt to find that module will be made, but if
   376|         0|            0|            0|  0.00%|        it fails the class will not be picklable.
   377|         0|            0|            0|  0.00%|
   378|         0|            0|            0|  0.00%|        `qualname` should be set to the actual location this class can be found
   379|         0|            0|            0|  0.00%|        at in its module; by default it is set to the global scope.  If this is
   380|         0|            0|            0|  0.00%|        not correct, unpickling will fail in some circumstances.
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|        `type`, if set, will be mixed in as the first base class.
   383|         0|            0|            0|  0.00%|        """
   384|        24|  8.08239e-05|  3.36766e-06|  0.03%|        if names is None:  # simple value lookup
   385|        18|  0.000201702|  1.12057e-05|  0.08%|            return cls.__new__(cls, value)
(call)|        18|  0.000253677|  1.40932e-05|  0.10%|# /usr/lib/python3.10/enum.py:678 __new__
   386|         0|            0|            0|  0.00%|        # otherwise, functional API: we're creating a new Enum type
   387|        12|  9.94205e-05|  8.28505e-06|  0.04%|        return cls._create_(
(call)|         6|    0.0408399|   0.00680665| 16.81%|# /usr/lib/python3.10/enum.py:483 _create_
   388|         6|  1.93119e-05|  3.21865e-06|  0.01%|                value,
   389|         6|  1.90735e-05|  3.17891e-06|  0.01%|                names,
   390|         6|  1.93119e-05|  3.21865e-06|  0.01%|                module=module,
   391|         6|   1.7643e-05|   2.9405e-06|  0.01%|                qualname=qualname,
   392|         6|  2.31266e-05|  3.85443e-06|  0.01%|                type=type,
   393|         6|  1.83582e-05|  3.05971e-06|  0.01%|                start=start,
   394|         0|            0|            0|  0.00%|                )
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|    def __contains__(cls, obj):
   397|         0|            0|            0|  0.00%|        if not isinstance(obj, Enum):
   398|         0|            0|            0|  0.00%|            import warnings
   399|         0|            0|            0|  0.00%|            warnings.warn(
   400|         0|            0|            0|  0.00%|                    "in 3.12 __contains__ will no longer raise TypeError, but will return True if\n"
   401|         0|            0|            0|  0.00%|                    "obj is a member or a member's value",
   402|         0|            0|            0|  0.00%|                    DeprecationWarning,
   403|         0|            0|            0|  0.00%|                    stacklevel=2,
   404|         0|            0|            0|  0.00%|                    )
   405|         0|            0|            0|  0.00%|            raise TypeError(
   406|         0|            0|            0|  0.00%|                "unsupported operand type(s) for 'in': '%s' and '%s'" % (
   407|         0|            0|            0|  0.00%|                    type(obj).__qualname__, cls.__class__.__qualname__))
   408|         0|            0|            0|  0.00%|        return isinstance(obj, cls) and obj._name_ in cls._member_map_
   409|         0|            0|            0|  0.00%|
   410|         0|            0|            0|  0.00%|    def __delattr__(cls, attr):
   411|         0|            0|            0|  0.00%|        # nicer error message when someone tries to delete an attribute
   412|         0|            0|            0|  0.00%|        # (see issue19025).
   413|         0|            0|            0|  0.00%|        if attr in cls._member_map_:
   414|         0|            0|            0|  0.00%|            raise AttributeError("%s: cannot delete Enum member." % cls.__name__)
   415|         0|            0|            0|  0.00%|        super().__delattr__(attr)
   416|         0|            0|            0|  0.00%|
   417|         0|            0|            0|  0.00%|    def __dir__(self):
   418|         0|            0|            0|  0.00%|        return (
   419|         0|            0|            0|  0.00%|                ['__class__', '__doc__', '__members__', '__module__']
   420|         0|            0|            0|  0.00%|                + self._member_names_
   421|         0|            0|            0|  0.00%|                )
   422|         0|            0|            0|  0.00%|
   423|        12|  5.29289e-05|  4.41074e-06|  0.02%|    def __getattr__(cls, name):
   424|         0|            0|            0|  0.00%|        """
   425|         0|            0|            0|  0.00%|        Return the enum member matching `name`
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|        We use __getattr__ instead of descriptors or inserting into the enum
   428|         0|            0|            0|  0.00%|        class' __dict__ in order to support `name` and `value` being both
   429|         0|            0|            0|  0.00%|        properties for enum members (which live in the class' __dict__) and
   430|         0|            0|            0|  0.00%|        enum members themselves.
   431|         0|            0|            0|  0.00%|        """
   432|        12|  9.87053e-05|  8.22544e-06|  0.04%|        if _is_dunder(name):
(call)|        12|  0.000285864|   2.3822e-05|  0.12%|# /usr/lib/python3.10/enum.py:22 _is_dunder
   433|        11|  5.17368e-05|  4.70335e-06|  0.02%|            raise AttributeError(name)
   434|         1|  3.09944e-06|  3.09944e-06|  0.00%|        try:
   435|         1|  4.76837e-06|  4.76837e-06|  0.00%|            return cls._member_map_[name]
   436|         1|  4.29153e-06|  4.29153e-06|  0.00%|        except KeyError:
   437|         1|  4.52995e-06|  4.52995e-06|  0.00%|            raise AttributeError(name) from None
   438|         0|            0|            0|  0.00%|
   439|         0|            0|            0|  0.00%|    def __getitem__(cls, name):
   440|         0|            0|            0|  0.00%|        return cls._member_map_[name]
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|    def __iter__(cls):
   443|         0|            0|            0|  0.00%|        """
   444|         0|            0|            0|  0.00%|        Returns members in definition order.
   445|         0|            0|            0|  0.00%|        """
   446|         0|            0|            0|  0.00%|        return (cls._member_map_[name] for name in cls._member_names_)
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|    def __len__(cls):
   449|         0|            0|            0|  0.00%|        return len(cls._member_names_)
   450|         0|            0|            0|  0.00%|
   451|         7|  3.91006e-05|  5.58581e-06|  0.02%|    @property
   452|         0|            0|            0|  0.00%|    def __members__(cls):
   453|         0|            0|            0|  0.00%|        """
   454|         0|            0|            0|  0.00%|        Returns a mapping of member name->value.
   455|         0|            0|            0|  0.00%|
   456|         0|            0|            0|  0.00%|        This mapping lists all enum members, including aliases. Note that this
   457|         0|            0|            0|  0.00%|        is a read-only view of the internal mapping.
   458|         0|            0|            0|  0.00%|        """
   459|         7|  2.67029e-05|   3.8147e-06|  0.01%|        return MappingProxyType(cls._member_map_)
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|    def __repr__(cls):
   462|         0|            0|            0|  0.00%|        return "<enum %r>" % cls.__name__
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|    def __reversed__(cls):
   465|         0|            0|            0|  0.00%|        """
   466|         0|            0|            0|  0.00%|        Returns members in reverse definition order.
   467|         0|            0|            0|  0.00%|        """
   468|         0|            0|            0|  0.00%|        return (cls._member_map_[name] for name in reversed(cls._member_names_))
   469|         0|            0|            0|  0.00%|
   470|       208|  0.000678539|  3.26221e-06|  0.28%|    def __setattr__(cls, name, value):
   471|         0|            0|            0|  0.00%|        """
   472|         0|            0|            0|  0.00%|        Block attempts to reassign Enum members.
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|        A simple assignment to the class namespace only changes one of the
   475|         0|            0|            0|  0.00%|        several possible ways to get an Enum member from the Enum class,
   476|         0|            0|            0|  0.00%|        resulting in an inconsistent Enumeration.
   477|         0|            0|            0|  0.00%|        """
   478|       208|  0.000780821|  3.75395e-06|  0.32%|        member_map = cls.__dict__.get('_member_map_', {})
   479|       208|  0.000655413|  3.15102e-06|  0.27%|        if name in member_map:
   480|         0|            0|            0|  0.00%|            raise AttributeError('Cannot reassign members.')
   481|       208|  0.000769615|  3.70007e-06|  0.32%|        super().__setattr__(name, value)
   482|         0|            0|            0|  0.00%|
   483|         6|  4.86374e-05|  8.10623e-06|  0.02%|    def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1):
   484|         0|            0|            0|  0.00%|        """
   485|         0|            0|            0|  0.00%|        Convenience method to create a new Enum class.
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|        `names` can be:
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|        * A string containing member names, separated either with spaces or
   490|         0|            0|            0|  0.00%|          commas.  Values are incremented by 1 from `start`.
   491|         0|            0|            0|  0.00%|        * An iterable of member names.  Values are incremented by 1 from `start`.
   492|         0|            0|            0|  0.00%|        * An iterable of (member name, value) pairs.
   493|         0|            0|            0|  0.00%|        * A mapping of member name -> value pairs.
   494|         0|            0|            0|  0.00%|        """
   495|         6|  3.05176e-05|  5.08626e-06|  0.01%|        metacls = cls.__class__
   496|         6|  2.76566e-05|  4.60943e-06|  0.01%|        bases = (cls, ) if type is None else (type, cls)
   497|         6|  6.86646e-05|  1.14441e-05|  0.03%|        _, first_enum = cls._get_mixins_(cls, bases)
(call)|         6|  0.000521421|  8.69036e-05|  0.21%|# /usr/lib/python3.10/enum.py:579 _get_mixins_
   498|         6|  6.69956e-05|  1.11659e-05|  0.03%|        classdict = metacls.__prepare__(class_name, bases)
(call)|         6|   0.00175738|  0.000292897|  0.72%|# /usr/lib/python3.10/enum.py:165 __prepare__
   499|         0|            0|            0|  0.00%|
   500|         0|            0|            0|  0.00%|        # special processing needed for names?
   501|         6|  2.88486e-05|  4.80811e-06|  0.01%|        if isinstance(names, str):
   502|         0|            0|            0|  0.00%|            names = names.replace(',', ' ').split()
   503|         6|  2.98023e-05|  4.96705e-06|  0.01%|        if isinstance(names, (tuple, list)) and names and isinstance(names[0], str):
   504|         0|            0|            0|  0.00%|            original_names, names = names, []
   505|         0|            0|            0|  0.00%|            last_values = []
   506|         0|            0|            0|  0.00%|            for count, name in enumerate(original_names):
   507|         0|            0|            0|  0.00%|                value = first_enum._generate_next_value_(name, start, count, last_values[:])
   508|         0|            0|            0|  0.00%|                last_values.append(value)
   509|         0|            0|            0|  0.00%|                names.append((name, value))
   510|         0|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|        # Here, names is either an iterable of (name, value) or a mapping.
   512|        72|   0.00028801|  4.00013e-06|  0.12%|        for item in names:
   513|        66|  0.000266552|  4.03867e-06|  0.11%|            if isinstance(item, str):
   514|         0|            0|            0|  0.00%|                member_name, member_value = item, names[item]
   515|         0|            0|            0|  0.00%|            else:
   516|        66|  0.000262976|  3.98448e-06|  0.11%|                member_name, member_value = item
   517|        66|  0.000634432|   9.6126e-06|  0.26%|            classdict[member_name] = member_value
(call)|        66|   0.00858283|  0.000130043|  3.53%|# /usr/lib/python3.10/enum.py:89 __setitem__
   518|         6|  9.15527e-05|  1.52588e-05|  0.04%|        enum_class = metacls.__new__(metacls, class_name, bases, classdict)
(call)|         6|    0.0278931|   0.00464884| 11.48%|# /usr/lib/python3.10/enum.py:180 __new__
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|        # TODO: replace the frame hack if a blessed way to know the calling
   521|         0|            0|            0|  0.00%|        # module is ever developed
   522|         6|  2.74181e-05|  4.56969e-06|  0.01%|        if module is None:
   523|         0|            0|            0|  0.00%|            try:
   524|         0|            0|            0|  0.00%|                module = sys._getframe(2).f_globals['__name__']
   525|         0|            0|            0|  0.00%|            except (AttributeError, ValueError, KeyError):
   526|         0|            0|            0|  0.00%|                pass
   527|         6|  2.47955e-05|  4.13259e-06|  0.01%|        if module is None:
   528|         0|            0|            0|  0.00%|            _make_class_unpicklable(enum_class)
   529|         0|            0|            0|  0.00%|        else:
   530|         6|  5.60284e-05|  9.33806e-06|  0.02%|            enum_class.__module__ = module
(call)|         6|  8.10623e-05|  1.35104e-05|  0.03%|# /usr/lib/python3.10/enum.py:470 __setattr__
   531|         6|  2.47955e-05|  4.13259e-06|  0.01%|        if qualname is not None:
   532|         0|            0|            0|  0.00%|            enum_class.__qualname__ = qualname
   533|         0|            0|            0|  0.00%|
   534|         6|  2.64645e-05|  4.41074e-06|  0.01%|        return enum_class
   535|         0|            0|            0|  0.00%|
   536|         6|  8.86917e-05|   1.4782e-05|  0.04%|    def _convert_(cls, name, module, filter, source=None):
   537|         0|            0|            0|  0.00%|        """
   538|         0|            0|            0|  0.00%|        Create a new Enum subclass that replaces a collection of global constants
   539|         0|            0|            0|  0.00%|        """
   540|         0|            0|            0|  0.00%|        # convert all constants from source (or module) that pass filter() to
   541|         0|            0|            0|  0.00%|        # a new Enum called name, and export the enum and its members back to
   542|         0|            0|            0|  0.00%|        # module;
   543|         0|            0|            0|  0.00%|        # also, replace the __reduce_ex__ method so unpickling works in
   544|         0|            0|            0|  0.00%|        # previous Python versions
   545|         6|  3.67165e-05|  6.11941e-06|  0.02%|        module_globals = vars(sys.modules[module])
   546|         6|  2.40803e-05|  4.01338e-06|  0.01%|        if source:
   547|         6|  2.21729e-05|  3.69549e-06|  0.01%|            source = vars(source)
   548|         0|            0|            0|  0.00%|        else:
   549|         0|            0|            0|  0.00%|            source = module_globals
   550|         0|            0|            0|  0.00%|        # _value2member_map_ is populated in the same order every time
   551|         0|            0|            0|  0.00%|        # for a consistent reverse mapping of number to name when there
   552|         0|            0|            0|  0.00%|        # are multiple names for the same number.
   553|      1614|   0.00481939|  2.98599e-06|  1.98%|        members = [
(call)|         6|    0.0166969|   0.00278282|  6.87%|# /usr/lib/python3.10/enum.py:553 <listcomp>
   554|        66|  0.000190496|  2.88631e-06|  0.08%|                (name, value)
   555|       768|   0.00225306|  2.93367e-06|  0.93%|                for name, value in source.items()
   556|       762|   0.00540328|  7.09092e-06|  2.22%|                if filter(name)]
(call)|       127|  0.000695467|  5.47612e-06|  0.29%|# /usr/lib/python3.10/ssl.py:124 <lambda>
(call)|       127|  0.000682116|  5.37099e-06|  0.28%|# /usr/lib/python3.10/ssl.py:129 <lambda>
(call)|       127|  0.000687361|  5.41229e-06|  0.28%|# /usr/lib/python3.10/ssl.py:134 <lambda>
(call)|       127|  0.000701904|  5.52681e-06|  0.29%|# /usr/lib/python3.10/ssl.py:139 <lambda>
(call)|       127|  0.000681877|  5.36911e-06|  0.28%|# /usr/lib/python3.10/ssl.py:144 <lambda>
(call)|       127|  0.000684738|  5.39164e-06|  0.28%|# /usr/lib/python3.10/ssl.py:149 <lambda>
   557|         6|  2.09808e-05|  3.49681e-06|  0.01%|        try:
   558|         0|            0|            0|  0.00%|            # sort by value
   559|       138|  0.000718594|   5.2072e-06|  0.30%|            members.sort(key=lambda t: (t[1], t[0]))
(call)|        66|  0.000368118|  5.57755e-06|  0.15%|# /usr/lib/python3.10/enum.py:559 <lambda>
   560|         0|            0|            0|  0.00%|        except TypeError:
   561|         0|            0|            0|  0.00%|            # unless some values aren't comparable, in which case sort by name
   562|         0|            0|            0|  0.00%|            members.sort(key=lambda t: t[0])
   563|         6|  7.41482e-05|   1.2358e-05|  0.03%|        cls = cls(name, members, module=module)
(call)|         6|    0.0410969|   0.00684949| 16.92%|# /usr/lib/python3.10/enum.py:359 __call__
   564|         6|  5.60284e-05|  9.33806e-06|  0.02%|        cls.__reduce_ex__ = _reduce_ex_by_name
(call)|         6|  8.03471e-05|  1.33912e-05|  0.03%|# /usr/lib/python3.10/enum.py:470 __setattr__
   565|         6|  0.000105619|  1.76032e-05|  0.04%|        module_globals.update(cls.__members__)
(call)|         6|  4.05312e-05|  6.75519e-06|  0.02%|# /usr/lib/python3.10/enum.py:451 __members__
   566|         6|   2.3365e-05|  3.89417e-06|  0.01%|        module_globals[name] = cls
   567|         6|  2.14577e-05|  3.57628e-06|  0.01%|        return cls
   568|         0|            0|            0|  0.00%|
   569|        11|  3.52859e-05|  3.20781e-06|  0.01%|    @staticmethod
   570|         0|            0|            0|  0.00%|    def _check_for_existing_members(class_name, bases):
   571|        23|  7.43866e-05|   3.2342e-06|  0.03%|        for chain in bases:
   572|        60|  0.000188351|  3.13918e-06|  0.08%|            for base in chain.__mro__:
   573|        48|   0.00016427|   3.4223e-06|  0.07%|                if issubclass(base, Enum) and base._member_names_:
   574|         0|            0|            0|  0.00%|                    raise TypeError(
   575|         0|            0|            0|  0.00%|                            "%s: cannot extend enumeration %r"
   576|         0|            0|            0|  0.00%|                            % (class_name, base.__name__)
   577|         0|            0|            0|  0.00%|                            )
   578|         0|            0|            0|  0.00%|
   579|        28|  0.000107765|  3.84876e-06|  0.04%|    @staticmethod
   580|         0|            0|            0|  0.00%|    def _get_mixins_(class_name, bases):
   581|         0|            0|            0|  0.00%|        """
   582|         0|            0|            0|  0.00%|        Returns the type for creating enum members, and the first inherited
   583|         0|            0|            0|  0.00%|        enum class.
   584|         0|            0|            0|  0.00%|
   585|         0|            0|            0|  0.00%|        bases: the tuple of bases that was given to __new__
   586|         0|            0|            0|  0.00%|        """
   587|        28|  0.000105143|  3.75509e-06|  0.04%|        if not bases:
   588|         0|            0|            0|  0.00%|            return object, Enum
   589|         0|            0|            0|  0.00%|
   590|        56|  0.000197649|  3.52945e-06|  0.08%|        def _find_data_type(bases):
   591|        28|   0.00010848|   3.8743e-06|  0.04%|            data_types = set()
   592|        58|  0.000197172|  3.39952e-06|  0.08%|            for chain in bases:
   593|        30|  9.84669e-05|  3.28223e-06|  0.04%|                candidate = None
   594|        34|  0.000123024|  3.61835e-06|  0.05%|                for base in chain.__mro__:
   595|        32|  0.000103712|    3.241e-06|  0.04%|                    if base is object:
   596|         2|  6.19888e-06|  3.09944e-06|  0.00%|                        continue
   597|        30|  9.48906e-05|  3.16302e-06|  0.04%|                    elif issubclass(base, Enum):
   598|        28|  9.44138e-05|  3.37192e-06|  0.04%|                        if base._member_type_ is not object:
   599|        26|  8.91685e-05|  3.42956e-06|  0.04%|                            data_types.add(base._member_type_)
   600|        26|  8.60691e-05|  3.31035e-06|  0.04%|                            break
   601|         2|  8.10623e-06|  4.05312e-06|  0.00%|                    elif '__new__' in base.__dict__:
   602|         2|  7.86781e-06|  3.93391e-06|  0.00%|                        if issubclass(base, Enum):
   603|         0|            0|            0|  0.00%|                            continue
   604|         2|  7.62939e-06|   3.8147e-06|  0.00%|                        data_types.add(candidate or base)
   605|         2|  3.79086e-05|  1.89543e-05|  0.02%|                        break
   606|         0|            0|            0|  0.00%|                    else:
   607|         0|            0|            0|  0.00%|                        candidate = candidate or base
   608|        28|  9.01222e-05|  3.21865e-06|  0.04%|            if len(data_types) > 1:
   609|         0|            0|            0|  0.00%|                raise TypeError('%r: too many data types: %r' % (class_name, data_types))
   610|        28|  8.98838e-05|  3.21014e-06|  0.04%|            elif data_types:
   611|        28|  9.15527e-05|  3.26974e-06|  0.04%|                return data_types.pop()
   612|         0|            0|            0|  0.00%|            else:
   613|         0|            0|            0|  0.00%|                return None
   614|         0|            0|            0|  0.00%|
   615|         0|            0|            0|  0.00%|        # ensure final parent class is an Enum derivative, find any concrete
   616|         0|            0|            0|  0.00%|        # data type, and check that Enum has no members
   617|        28|  0.000100613|  3.59331e-06|  0.04%|        first_enum = bases[-1]
   618|        28|  0.000108719|  3.88282e-06|  0.04%|        if not issubclass(first_enum, Enum):
   619|         0|            0|            0|  0.00%|            raise TypeError("new enumerations should be created as "
   620|         0|            0|            0|  0.00%|                    "`EnumName([mixin_type, ...] [data_type,] enum_type)`")
   621|        28|  0.000252485|  9.01733e-06|  0.10%|        member_type = _find_data_type(bases) or object
(call)|        28|   0.00142789|   5.0996e-05|  0.59%|# /usr/lib/python3.10/enum.py:590 _find_data_type
   622|        28|  0.000102758|  3.66994e-06|  0.04%|        if first_enum._member_names_:
   623|         0|            0|            0|  0.00%|            raise TypeError("Cannot extend enumerations")
   624|        28|  9.41753e-05|   3.3634e-06|  0.04%|        return member_type, first_enum
   625|         0|            0|            0|  0.00%|
   626|        11|  4.36306e-05|  3.96642e-06|  0.02%|    @staticmethod
   627|         0|            0|            0|  0.00%|    def _find_new_(classdict, member_type, first_enum):
   628|         0|            0|            0|  0.00%|        """
   629|         0|            0|            0|  0.00%|        Returns the __new__ to be used for creating the enum members.
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|        classdict: the class dictionary given to __new__
   632|         0|            0|            0|  0.00%|        member_type: the data type whose __new__ will be used by default
   633|         0|            0|            0|  0.00%|        first_enum: enumeration to check for an overriding __new__
   634|         0|            0|            0|  0.00%|        """
   635|         0|            0|            0|  0.00%|        # now find the correct __new__, checking to see of one was defined
   636|         0|            0|            0|  0.00%|        # by the user; also check earlier enum classes in case a __new__ was
   637|         0|            0|            0|  0.00%|        # saved as __new_member__
   638|        11|  4.86374e-05|  4.42158e-06|  0.02%|        __new__ = classdict.get('__new__', None)
   639|         0|            0|            0|  0.00%|
   640|         0|            0|            0|  0.00%|        # should __new__ be saved as __new_member__ later?
   641|        11|  4.22001e-05|  3.83637e-06|  0.02%|        save_new = __new__ is not None
   642|         0|            0|            0|  0.00%|
   643|        11|  3.88622e-05|  3.53293e-06|  0.02%|        if __new__ is None:
   644|         0|            0|            0|  0.00%|            # check all possibles for __new_member__ before falling back to
   645|         0|            0|            0|  0.00%|            # __new__
   646|        22|  7.70092e-05|  3.50042e-06|  0.03%|            for method in ('__new_member__', '__new__'):
   647|        44|  0.000145197|  3.29993e-06|  0.06%|                for possible in (member_type, first_enum):
   648|        33|  0.000200987|  6.09051e-06|  0.08%|                    target = getattr(possible, method, None)
(call)|        11|  0.000442266|   4.0206e-05|  0.18%|# /usr/lib/python3.10/enum.py:423 __getattr__
   649|        66|  0.000226736|  3.43539e-06|  0.09%|                    if target not in {
   650|        33|  0.000103712|  3.14279e-06|  0.04%|                            None,
   651|        33|  0.000107288|  3.25116e-06|  0.04%|                            None.__new__,
   652|        33|  0.000106812|  3.23671e-06|  0.04%|                            object.__new__,
   653|        33|  0.000118732|  3.59795e-06|  0.05%|                            Enum.__new__,
   654|         0|            0|            0|  0.00%|                            }:
   655|        11|  3.52859e-05|  3.20781e-06|  0.01%|                        __new__ = target
   656|        11|  3.74317e-05|  3.40288e-06|  0.02%|                        break
   657|        22|  7.24792e-05|  3.29451e-06|  0.03%|                if __new__ is not None:
   658|        11|  3.52859e-05|  3.20781e-06|  0.01%|                    break
   659|         0|            0|            0|  0.00%|            else:
   660|         0|            0|            0|  0.00%|                __new__ = object.__new__
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|        # if a non-object.__new__ is used then whatever value/tuple was
   663|         0|            0|            0|  0.00%|        # assigned to the enum member name will be passed to __new__ and to the
   664|         0|            0|            0|  0.00%|        # new enum member's __init__
   665|        11|  3.98159e-05|  3.61963e-06|  0.02%|        if __new__ is object.__new__:
   666|         0|            0|            0|  0.00%|            use_args = False
   667|         0|            0|            0|  0.00%|        else:
   668|        11|  3.50475e-05|  3.18614e-06|  0.01%|            use_args = True
   669|        11|  3.67165e-05|  3.33786e-06|  0.02%|        return __new__, save_new, use_args
   670|         0|            0|            0|  0.00%|
   671|         0|            0|            0|  0.00%|
   672|         0|            0|            0|  0.00%|class Enum(metaclass=EnumMeta):
   673|         0|            0|            0|  0.00%|    """
   674|         0|            0|            0|  0.00%|    Generic enumeration.
   675|         0|            0|            0|  0.00%|
   676|         0|            0|            0|  0.00%|    Derive from this class to define new enumerations.
   677|         0|            0|            0|  0.00%|    """
   678|        18|  5.79357e-05|  3.21865e-06|  0.02%|    def __new__(cls, value):
   679|         0|            0|            0|  0.00%|        # all enum instances are actually created during class construction
   680|         0|            0|            0|  0.00%|        # without calling this method; this method is called by the metaclass'
   681|         0|            0|            0|  0.00%|        # __call__ (i.e. Color(3) ), and by pickle
   682|        18|  6.50883e-05|  3.61602e-06|  0.03%|        if type(value) is cls:
   683|         0|            0|            0|  0.00%|            # For lookups like Color(Color.RED)
   684|         0|            0|            0|  0.00%|            return value
   685|         0|            0|            0|  0.00%|        # by-value search for a matching enum member
   686|         0|            0|            0|  0.00%|        # see if it's in the reverse mapping (for hashable values)
   687|        18|  6.19888e-05|  3.44382e-06|  0.03%|        try:
   688|        18|  6.86646e-05|   3.8147e-06|  0.03%|            return cls._value2member_map_[value]
   689|         0|            0|            0|  0.00%|        except KeyError:
   690|         0|            0|            0|  0.00%|            # Not found, no need to do long O(n) search
   691|         0|            0|            0|  0.00%|            pass
   692|         0|            0|            0|  0.00%|        except TypeError:
   693|         0|            0|            0|  0.00%|            # not there, now do long search -- O(n) behavior
   694|         0|            0|            0|  0.00%|            for member in cls._member_map_.values():
   695|         0|            0|            0|  0.00%|                if member._value_ == value:
   696|         0|            0|            0|  0.00%|                    return member
   697|         0|            0|            0|  0.00%|        # still not found -- try _missing_ hook
   698|         0|            0|            0|  0.00%|        try:
   699|         0|            0|            0|  0.00%|            exc = None
   700|         0|            0|            0|  0.00%|            result = cls._missing_(value)
   701|         0|            0|            0|  0.00%|        except Exception as e:
   702|         0|            0|            0|  0.00%|            exc = e
   703|         0|            0|            0|  0.00%|            result = None
   704|         0|            0|            0|  0.00%|        try:
   705|         0|            0|            0|  0.00%|            if isinstance(result, cls):
   706|         0|            0|            0|  0.00%|                return result
   707|         0|            0|            0|  0.00%|            else:
   708|         0|            0|            0|  0.00%|                ve_exc = ValueError("%r is not a valid %s" % (value, cls.__qualname__))
   709|         0|            0|            0|  0.00%|                if result is None and exc is None:
   710|         0|            0|            0|  0.00%|                    raise ve_exc
   711|         0|            0|            0|  0.00%|                elif exc is None:
   712|         0|            0|            0|  0.00%|                    exc = TypeError(
   713|         0|            0|            0|  0.00%|                            'error in %s._missing_: returned %r instead of None or a valid member'
   714|         0|            0|            0|  0.00%|                            % (cls.__name__, result)
   715|         0|            0|            0|  0.00%|                            )
   716|         0|            0|            0|  0.00%|                if not isinstance(exc, ValueError):
   717|         0|            0|            0|  0.00%|                    exc.__context__ = ve_exc
   718|         0|            0|            0|  0.00%|                raise exc
   719|         0|            0|            0|  0.00%|        finally:
   720|         0|            0|            0|  0.00%|            # ensure all variables that could hold an exception are destroyed
   721|         0|            0|            0|  0.00%|            exc = None
   722|         0|            0|            0|  0.00%|            ve_exc = None
   723|         0|            0|            0|  0.00%|
   724|         0|            0|            0|  0.00%|    def _generate_next_value_(name, start, count, last_values):
   725|         0|            0|            0|  0.00%|        """
   726|         0|            0|            0|  0.00%|        Generate the next value when not given.
   727|         0|            0|            0|  0.00%|
   728|         0|            0|            0|  0.00%|        name: the name of the member
   729|         0|            0|            0|  0.00%|        start: the initial start value or None
   730|         0|            0|            0|  0.00%|        count: the number of existing members
   731|         0|            0|            0|  0.00%|        last_value: the last value assigned or None
   732|         0|            0|            0|  0.00%|        """
   733|         0|            0|            0|  0.00%|        for last_value in reversed(last_values):
   734|         0|            0|            0|  0.00%|            try:
   735|         0|            0|            0|  0.00%|                return last_value + 1
   736|         0|            0|            0|  0.00%|            except TypeError:
   737|         0|            0|            0|  0.00%|                pass
   738|         0|            0|            0|  0.00%|        else:
   739|         0|            0|            0|  0.00%|            return start
   740|         0|            0|            0|  0.00%|
   741|         0|            0|            0|  0.00%|    @classmethod
   742|         0|            0|            0|  0.00%|    def _missing_(cls, value):
   743|         0|            0|            0|  0.00%|        return None
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    def __repr__(self):
   746|         0|            0|            0|  0.00%|        return "<%s.%s: %r>" % (
   747|         0|            0|            0|  0.00%|                self.__class__.__name__, self._name_, self._value_)
   748|         0|            0|            0|  0.00%|
   749|         0|            0|            0|  0.00%|    def __str__(self):
   750|         0|            0|            0|  0.00%|        return "%s.%s" % (self.__class__.__name__, self._name_)
   751|         0|            0|            0|  0.00%|
   752|         0|            0|            0|  0.00%|    def __dir__(self):
   753|         0|            0|            0|  0.00%|        """
   754|         0|            0|            0|  0.00%|        Returns all members and all public methods
   755|         0|            0|            0|  0.00%|        """
   756|         0|            0|            0|  0.00%|        added_behavior = [
   757|         0|            0|            0|  0.00%|                m
   758|         0|            0|            0|  0.00%|                for cls in self.__class__.mro()
   759|         0|            0|            0|  0.00%|                for m in cls.__dict__
   760|         0|            0|            0|  0.00%|                if m[0] != '_' and m not in self._member_map_
   761|         0|            0|            0|  0.00%|                ] + [m for m in self.__dict__ if m[0] != '_']
   762|         0|            0|            0|  0.00%|        return (['__class__', '__doc__', '__module__'] + added_behavior)
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|    def __format__(self, format_spec):
   765|         0|            0|            0|  0.00%|        """
   766|         0|            0|            0|  0.00%|        Returns format using actual value type unless __str__ has been overridden.
   767|         0|            0|            0|  0.00%|        """
   768|         0|            0|            0|  0.00%|        # mixed-in Enums should use the mixed-in type's __format__, otherwise
   769|         0|            0|            0|  0.00%|        # we can get strange results with the Enum name showing up instead of
   770|         0|            0|            0|  0.00%|        # the value
   771|         0|            0|            0|  0.00%|
   772|         0|            0|            0|  0.00%|        # pure Enum branch, or branch with __str__ explicitly overridden
   773|         0|            0|            0|  0.00%|        str_overridden = type(self).__str__ not in (Enum.__str__, Flag.__str__)
   774|         0|            0|            0|  0.00%|        if self._member_type_ is object or str_overridden:
   775|         0|            0|            0|  0.00%|            cls = str
   776|         0|            0|            0|  0.00%|            val = str(self)
   777|         0|            0|            0|  0.00%|        # mix-in branch
   778|         0|            0|            0|  0.00%|        else:
   779|         0|            0|            0|  0.00%|            cls = self._member_type_
   780|         0|            0|            0|  0.00%|            val = self._value_
   781|         0|            0|            0|  0.00%|        return cls.__format__(val, format_spec)
   782|         0|            0|            0|  0.00%|
   783|         0|            0|            0|  0.00%|    def __hash__(self):
   784|         0|            0|            0|  0.00%|        return hash(self._name_)
   785|         0|            0|            0|  0.00%|
   786|         0|            0|            0|  0.00%|    def __reduce_ex__(self, proto):
   787|         0|            0|            0|  0.00%|        return self.__class__, (self._value_, )
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|    # DynamicClassAttribute is used to provide access to the `name` and
   790|         0|            0|            0|  0.00%|    # `value` properties of enum members while keeping some measure of
   791|         0|            0|            0|  0.00%|    # protection from modification, while still allowing for an enumeration
   792|         0|            0|            0|  0.00%|    # to have members named `name` and `value`.  This works because enumeration
   793|         0|            0|            0|  0.00%|    # members are not set directly on the enum class -- __getattr__ is
   794|         0|            0|            0|  0.00%|    # used to look them up.
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|    @DynamicClassAttribute
   797|         0|            0|            0|  0.00%|    def name(self):
   798|         0|            0|            0|  0.00%|        """The name of the Enum member."""
   799|         0|            0|            0|  0.00%|        return self._name_
   800|         0|            0|            0|  0.00%|
   801|         3|  8.58307e-06|  2.86102e-06|  0.00%|    @DynamicClassAttribute
   802|         0|            0|            0|  0.00%|    def value(self):
   803|         0|            0|            0|  0.00%|        """The value of the Enum member."""
   804|         3|   1.0252e-05|  3.41733e-06|  0.00%|        return self._value_
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|class IntEnum(int, Enum):
   808|         0|            0|            0|  0.00%|    """Enum where members are also (and must be) ints"""
   809|         0|            0|            0|  0.00%|
   810|         0|            0|            0|  0.00%|
   811|         0|            0|            0|  0.00%|def _reduce_ex_by_name(self, proto):
   812|         0|            0|            0|  0.00%|    return self.name
   813|         0|            0|            0|  0.00%|
   814|         0|            0|            0|  0.00%|class Flag(Enum):
   815|         0|            0|            0|  0.00%|    """
   816|         0|            0|            0|  0.00%|    Support for flags
   817|         0|            0|            0|  0.00%|    """
   818|         0|            0|            0|  0.00%|
   819|         0|            0|            0|  0.00%|    def _generate_next_value_(name, start, count, last_values):
   820|         0|            0|            0|  0.00%|        """
   821|         0|            0|            0|  0.00%|        Generate the next value when not given.
   822|         0|            0|            0|  0.00%|
   823|         0|            0|            0|  0.00%|        name: the name of the member
   824|         0|            0|            0|  0.00%|        start: the initial start value or None
   825|         0|            0|            0|  0.00%|        count: the number of existing members
   826|         0|            0|            0|  0.00%|        last_value: the last value assigned or None
   827|         0|            0|            0|  0.00%|        """
   828|         0|            0|            0|  0.00%|        if not count:
   829|         0|            0|            0|  0.00%|            return start if start is not None else 1
   830|         0|            0|            0|  0.00%|        for last_value in reversed(last_values):
   831|         0|            0|            0|  0.00%|            try:
   832|         0|            0|            0|  0.00%|                high_bit = _high_bit(last_value)
   833|         0|            0|            0|  0.00%|                break
   834|         0|            0|            0|  0.00%|            except Exception:
   835|         0|            0|            0|  0.00%|                raise TypeError('Invalid Flag value: %r' % last_value) from None
   836|         0|            0|            0|  0.00%|        return 2 ** (high_bit+1)
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|    @classmethod
   839|         0|            0|            0|  0.00%|    def _missing_(cls, value):
   840|         0|            0|            0|  0.00%|        """
   841|         0|            0|            0|  0.00%|        Returns member (possibly creating it) if one can be found for value.
   842|         0|            0|            0|  0.00%|        """
   843|         0|            0|            0|  0.00%|        original_value = value
   844|         0|            0|            0|  0.00%|        if value < 0:
   845|         0|            0|            0|  0.00%|            value = ~value
   846|         0|            0|            0|  0.00%|        possible_member = cls._create_pseudo_member_(value)
   847|         0|            0|            0|  0.00%|        if original_value < 0:
   848|         0|            0|            0|  0.00%|            possible_member = ~possible_member
   849|         0|            0|            0|  0.00%|        return possible_member
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|    @classmethod
   852|         0|            0|            0|  0.00%|    def _create_pseudo_member_(cls, value):
   853|         0|            0|            0|  0.00%|        """
   854|         0|            0|            0|  0.00%|        Create a composite member iff value contains only members.
   855|         0|            0|            0|  0.00%|        """
   856|         0|            0|            0|  0.00%|        pseudo_member = cls._value2member_map_.get(value, None)
   857|         0|            0|            0|  0.00%|        if pseudo_member is None:
   858|         0|            0|            0|  0.00%|            # verify all bits are accounted for
   859|         0|            0|            0|  0.00%|            _, extra_flags = _decompose(cls, value)
   860|         0|            0|            0|  0.00%|            if extra_flags:
   861|         0|            0|            0|  0.00%|                raise ValueError("%r is not a valid %s" % (value, cls.__qualname__))
   862|         0|            0|            0|  0.00%|            # construct a singleton enum pseudo-member
   863|         0|            0|            0|  0.00%|            pseudo_member = object.__new__(cls)
   864|         0|            0|            0|  0.00%|            pseudo_member._name_ = None
   865|         0|            0|            0|  0.00%|            pseudo_member._value_ = value
   866|         0|            0|            0|  0.00%|            # use setdefault in case another thread already created a composite
   867|         0|            0|            0|  0.00%|            # with this value
   868|         0|            0|            0|  0.00%|            pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)
   869|         0|            0|            0|  0.00%|        return pseudo_member
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|    def __contains__(self, other):
   872|         0|            0|            0|  0.00%|        """
   873|         0|            0|            0|  0.00%|        Returns True if self has at least the same flags set as other.
   874|         0|            0|            0|  0.00%|        """
   875|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   876|         0|            0|            0|  0.00%|            raise TypeError(
   877|         0|            0|            0|  0.00%|                "unsupported operand type(s) for 'in': '%s' and '%s'" % (
   878|         0|            0|            0|  0.00%|                    type(other).__qualname__, self.__class__.__qualname__))
   879|         0|            0|            0|  0.00%|        return other._value_ & self._value_ == other._value_
   880|         0|            0|            0|  0.00%|
   881|         0|            0|            0|  0.00%|    def __repr__(self):
   882|         0|            0|            0|  0.00%|        cls = self.__class__
   883|         0|            0|            0|  0.00%|        if self._name_ is not None:
   884|         0|            0|            0|  0.00%|            return '<%s.%s: %r>' % (cls.__name__, self._name_, self._value_)
   885|         0|            0|            0|  0.00%|        members, uncovered = _decompose(cls, self._value_)
   886|         0|            0|            0|  0.00%|        return '<%s.%s: %r>' % (
   887|         0|            0|            0|  0.00%|                cls.__name__,
   888|         0|            0|            0|  0.00%|                '|'.join([str(m._name_ or m._value_) for m in members]),
   889|         0|            0|            0|  0.00%|                self._value_,
   890|         0|            0|            0|  0.00%|                )
   891|         0|            0|            0|  0.00%|
   892|         0|            0|            0|  0.00%|    def __str__(self):
   893|         0|            0|            0|  0.00%|        cls = self.__class__
   894|         0|            0|            0|  0.00%|        if self._name_ is not None:
   895|         0|            0|            0|  0.00%|            return '%s.%s' % (cls.__name__, self._name_)
   896|         0|            0|            0|  0.00%|        members, uncovered = _decompose(cls, self._value_)
   897|         0|            0|            0|  0.00%|        if len(members) == 1 and members[0]._name_ is None:
   898|         0|            0|            0|  0.00%|            return '%s.%r' % (cls.__name__, members[0]._value_)
   899|         0|            0|            0|  0.00%|        else:
   900|         0|            0|            0|  0.00%|            return '%s.%s' % (
   901|         0|            0|            0|  0.00%|                    cls.__name__,
   902|         0|            0|            0|  0.00%|                    '|'.join([str(m._name_ or m._value_) for m in members]),
   903|         0|            0|            0|  0.00%|                    )
   904|         0|            0|            0|  0.00%|
   905|         0|            0|            0|  0.00%|    def __bool__(self):
   906|         0|            0|            0|  0.00%|        return bool(self._value_)
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|    def __or__(self, other):
   909|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   910|         0|            0|            0|  0.00%|            return NotImplemented
   911|         0|            0|            0|  0.00%|        return self.__class__(self._value_ | other._value_)
   912|         0|            0|            0|  0.00%|
   913|         0|            0|            0|  0.00%|    def __and__(self, other):
   914|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   915|         0|            0|            0|  0.00%|            return NotImplemented
   916|         0|            0|            0|  0.00%|        return self.__class__(self._value_ & other._value_)
   917|         0|            0|            0|  0.00%|
   918|         0|            0|            0|  0.00%|    def __xor__(self, other):
   919|         0|            0|            0|  0.00%|        if not isinstance(other, self.__class__):
   920|         0|            0|            0|  0.00%|            return NotImplemented
   921|         0|            0|            0|  0.00%|        return self.__class__(self._value_ ^ other._value_)
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|    def __invert__(self):
   924|         0|            0|            0|  0.00%|        members, uncovered = _decompose(self.__class__, self._value_)
   925|         0|            0|            0|  0.00%|        inverted = self.__class__(0)
   926|         0|            0|            0|  0.00%|        for m in self.__class__:
   927|         0|            0|            0|  0.00%|            if m not in members and not (m._value_ & self._value_):
   928|         0|            0|            0|  0.00%|                inverted = inverted | m
   929|         0|            0|            0|  0.00%|        return self.__class__(inverted)
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|class IntFlag(int, Flag):
   933|         0|            0|            0|  0.00%|    """
   934|         0|            0|            0|  0.00%|    Support for integer-based Flags
   935|         0|            0|            0|  0.00%|    """
   936|         0|            0|            0|  0.00%|
   937|         0|            0|            0|  0.00%|    @classmethod
   938|         0|            0|            0|  0.00%|    def _missing_(cls, value):
   939|         0|            0|            0|  0.00%|        """
   940|         0|            0|            0|  0.00%|        Returns member (possibly creating it) if one can be found for value.
   941|         0|            0|            0|  0.00%|        """
   942|         0|            0|            0|  0.00%|        if not isinstance(value, int):
   943|         0|            0|            0|  0.00%|            raise ValueError("%r is not a valid %s" % (value, cls.__qualname__))
   944|         0|            0|            0|  0.00%|        new_member = cls._create_pseudo_member_(value)
   945|         0|            0|            0|  0.00%|        return new_member
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|    @classmethod
   948|         0|            0|            0|  0.00%|    def _create_pseudo_member_(cls, value):
   949|         0|            0|            0|  0.00%|        """
   950|         0|            0|            0|  0.00%|        Create a composite member iff value contains only members.
   951|         0|            0|            0|  0.00%|        """
   952|         0|            0|            0|  0.00%|        pseudo_member = cls._value2member_map_.get(value, None)
   953|         0|            0|            0|  0.00%|        if pseudo_member is None:
   954|         0|            0|            0|  0.00%|            need_to_create = [value]
   955|         0|            0|            0|  0.00%|            # get unaccounted for bits
   956|         0|            0|            0|  0.00%|            _, extra_flags = _decompose(cls, value)
   957|         0|            0|            0|  0.00%|            # timer = 10
   958|         0|            0|            0|  0.00%|            while extra_flags:
   959|         0|            0|            0|  0.00%|                # timer -= 1
   960|         0|            0|            0|  0.00%|                bit = _high_bit(extra_flags)
   961|         0|            0|            0|  0.00%|                flag_value = 2 ** bit
   962|         0|            0|            0|  0.00%|                if (flag_value not in cls._value2member_map_ and
   963|         0|            0|            0|  0.00%|                        flag_value not in need_to_create
   964|         0|            0|            0|  0.00%|                        ):
   965|         0|            0|            0|  0.00%|                    need_to_create.append(flag_value)
   966|         0|            0|            0|  0.00%|                if extra_flags == -flag_value:
   967|         0|            0|            0|  0.00%|                    extra_flags = 0
   968|         0|            0|            0|  0.00%|                else:
   969|         0|            0|            0|  0.00%|                    extra_flags ^= flag_value
   970|         0|            0|            0|  0.00%|            for value in reversed(need_to_create):
   971|         0|            0|            0|  0.00%|                # construct singleton pseudo-members
   972|         0|            0|            0|  0.00%|                pseudo_member = int.__new__(cls, value)
   973|         0|            0|            0|  0.00%|                pseudo_member._name_ = None
   974|         0|            0|            0|  0.00%|                pseudo_member._value_ = value
   975|         0|            0|            0|  0.00%|                # use setdefault in case another thread already created a composite
   976|         0|            0|            0|  0.00%|                # with this value
   977|         0|            0|            0|  0.00%|                pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)
   978|         0|            0|            0|  0.00%|        return pseudo_member
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|    def __or__(self, other):
   981|         0|            0|            0|  0.00%|        if not isinstance(other, (self.__class__, int)):
   982|         0|            0|            0|  0.00%|            return NotImplemented
   983|         0|            0|            0|  0.00%|        result = self.__class__(self._value_ | self.__class__(other)._value_)
   984|         0|            0|            0|  0.00%|        return result
   985|         0|            0|            0|  0.00%|
   986|         7|  2.09808e-05|  2.99726e-06|  0.01%|    def __and__(self, other):
   987|         7|  3.45707e-05|  4.93867e-06|  0.01%|        if not isinstance(other, (self.__class__, int)):
   988|         0|            0|            0|  0.00%|            return NotImplemented
   989|         7|  0.000109434|  1.56334e-05|  0.05%|        return self.__class__(self._value_ & self.__class__(other)._value_)
(call)|        14|  0.000450134|  3.21524e-05|  0.19%|# /usr/lib/python3.10/enum.py:359 __call__
   990|         0|            0|            0|  0.00%|
   991|         0|            0|            0|  0.00%|    def __xor__(self, other):
   992|         0|            0|            0|  0.00%|        if not isinstance(other, (self.__class__, int)):
   993|         0|            0|            0|  0.00%|            return NotImplemented
   994|         0|            0|            0|  0.00%|        return self.__class__(self._value_ ^ self.__class__(other)._value_)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    __ror__ = __or__
   997|         0|            0|            0|  0.00%|    __rand__ = __and__
   998|         0|            0|            0|  0.00%|    __rxor__ = __xor__
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|    def __invert__(self):
  1001|         0|            0|            0|  0.00%|        result = self.__class__(~self._value_)
  1002|         0|            0|            0|  0.00%|        return result
  1003|         0|            0|            0|  0.00%|
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|def _high_bit(value):
  1006|         0|            0|            0|  0.00%|    """
  1007|         0|            0|            0|  0.00%|    returns index of highest bit, or -1 if value is zero or negative
  1008|         0|            0|            0|  0.00%|    """
  1009|         0|            0|            0|  0.00%|    return value.bit_length() - 1
  1010|         0|            0|            0|  0.00%|
  1011|         0|            0|            0|  0.00%|def unique(enumeration):
  1012|         0|            0|            0|  0.00%|    """
  1013|         0|            0|            0|  0.00%|    Class decorator for enumerations ensuring unique member values.
  1014|         0|            0|            0|  0.00%|    """
  1015|         0|            0|            0|  0.00%|    duplicates = []
  1016|         0|            0|            0|  0.00%|    for name, member in enumeration.__members__.items():
  1017|         0|            0|            0|  0.00%|        if name != member.name:
  1018|         0|            0|            0|  0.00%|            duplicates.append((name, member.name))
  1019|         0|            0|            0|  0.00%|    if duplicates:
  1020|         0|            0|            0|  0.00%|        alias_details = ', '.join(
  1021|         0|            0|            0|  0.00%|                ["%s -> %s" % (alias, name) for (alias, name) in duplicates])
  1022|         0|            0|            0|  0.00%|        raise ValueError('duplicate values found in %r: %s' %
  1023|         0|            0|            0|  0.00%|                (enumeration, alias_details))
  1024|         0|            0|            0|  0.00%|    return enumeration
  1025|         0|            0|            0|  0.00%|
  1026|         0|            0|            0|  0.00%|def _decompose(flag, value):
  1027|         0|            0|            0|  0.00%|    """
  1028|         0|            0|            0|  0.00%|    Extract all members from the value.
  1029|         0|            0|            0|  0.00%|    """
  1030|         0|            0|            0|  0.00%|    # _decompose is only called if the value is not named
  1031|         0|            0|            0|  0.00%|    not_covered = value
  1032|         0|            0|            0|  0.00%|    negative = value < 0
  1033|         0|            0|            0|  0.00%|    members = []
  1034|         0|            0|            0|  0.00%|    for member in flag:
  1035|         0|            0|            0|  0.00%|        member_value = member.value
  1036|         0|            0|            0|  0.00%|        if member_value and member_value & value == member_value:
  1037|         0|            0|            0|  0.00%|            members.append(member)
  1038|         0|            0|            0|  0.00%|            not_covered &= ~member_value
  1039|         0|            0|            0|  0.00%|    if not negative:
  1040|         0|            0|            0|  0.00%|        tmp = not_covered
  1041|         0|            0|            0|  0.00%|        while tmp:
  1042|         0|            0|            0|  0.00%|            flag_value = 2 ** _high_bit(tmp)
  1043|         0|            0|            0|  0.00%|            if flag_value in flag._value2member_map_:
  1044|         0|            0|            0|  0.00%|                members.append(flag._value2member_map_[flag_value])
  1045|         0|            0|            0|  0.00%|                not_covered &= ~flag_value
  1046|         0|            0|            0|  0.00%|            tmp &= ~flag_value
  1047|         0|            0|            0|  0.00%|    if not members and value in flag._value2member_map_:
  1048|         0|            0|            0|  0.00%|        members.append(flag._value2member_map_[value])
  1049|         0|            0|            0|  0.00%|    members.sort(key=lambda m: m._value_, reverse=True)
  1050|         0|            0|            0|  0.00%|    if len(members) > 1 and members[0].value == value:
  1051|         0|            0|            0|  0.00%|        # we have the breakdown, don't need the value member itself
  1052|         0|            0|            0|  0.00%|        members.pop(0)
  1053|         0|            0|            0|  0.00%|    return members, not_covered
File: <frozen importlib._bootstrap_external>
File duration: 0.0312908s (12.88%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|
    71|        45|  0.000112772|  2.50604e-06|  0.05%|
    72|         0|            0|            0|  0.00%|
    73|        45|  0.000132561|  2.94579e-06|  0.05%|
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|
    84|         9|  2.55108e-05|  2.83453e-06|  0.01%|
    85|         0|            0|            0|  0.00%|
    86|         9|   3.0756e-05|  3.41733e-06|  0.01%|
    87|         9|  3.50475e-05|  3.89417e-06|  0.01%|
    88|         0|            0|            0|  0.00%|
    89|         0|            0|            0|  0.00%|
    90|         0|            0|            0|  0.00%|
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|
   101|         0|            0|            0|  0.00%|
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|
   111|         0|            0|            0|  0.00%|
   112|         0|            0|            0|  0.00%|
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|
   123|         0|            0|            0|  0.00%|
   124|         0|            0|            0|  0.00%|
   125|         0|            0|            0|  0.00%|
   126|       219|  0.000569582|  2.60083e-06|  0.23%|
   127|         0|            0|            0|  0.00%|
   128|      1788|   0.00632429|  3.53708e-06|  2.60%|
(call)|       219|   0.00530887|  2.42414e-05|  2.19%|# <frozen importlib._bootstrap_external>:128 <listcomp>
   129|       675|    0.0019834|  2.93838e-06|  0.82%|
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|
   132|        18|  5.57899e-05|  3.09944e-06|  0.02%|
   133|         0|            0|            0|  0.00%|
   134|        90|  0.000484705|  5.38561e-06|  0.20%|
(call)|        36|  0.000227928|  6.33134e-06|  0.09%|# <frozen importlib._bootstrap_external>:134 <genexpr>
   135|        18|  7.62939e-05|  4.23855e-06|  0.03%|
   136|         0|            0|            0|  0.00%|
   137|        18|  6.84261e-05|  3.80145e-06|  0.03%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|
   140|        69|  0.000181913|  2.63643e-06|  0.07%|
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|
   144|         0|            0|            0|  0.00%|
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|        69|  0.000504255|  7.30805e-06|  0.21%|
   148|         0|            0|            0|  0.00%|
   149|         0|            0|            0|  0.00%|
   150|        14|  3.83854e-05|  2.74181e-06|  0.02%|
   151|         0|            0|            0|  0.00%|
   152|        14|    4.673e-05|  3.33786e-06|  0.02%|
   153|        14|  0.000115156|  8.22544e-06|  0.05%|
(call)|        14|  0.000127792|  9.12803e-06|  0.05%|# <frozen importlib._bootstrap_external>:140 _path_stat
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|
   156|        14|  4.98295e-05|  3.55925e-06|  0.02%|
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|
   159|        13|  3.48091e-05|  2.67762e-06|  0.01%|
   160|         0|            0|            0|  0.00%|
   161|        13|   0.00010705|  8.23461e-06|  0.04%|
(call)|        13|  0.000347376|  2.67212e-05|  0.14%|# <frozen importlib._bootstrap_external>:150 _path_is_mode_type
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         1|  3.33786e-06|  3.33786e-06|  0.00%|
   165|         0|            0|            0|  0.00%|
   166|         1|   3.8147e-06|   3.8147e-06|  0.00%|
   167|         0|            0|            0|  0.00%|
   168|         1|  9.53674e-06|  9.53674e-06|  0.00%|
(call)|         1|  3.05176e-05|  3.05176e-05|  0.01%|# <frozen importlib._bootstrap_external>:150 _path_is_mode_type
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|
   171|         0|            0|            0|  0.00%|
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|
   174|         0|            0|            0|  0.00%|
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|
   177|         0|            0|            0|  0.00%|
   178|         0|            0|            0|  0.00%|
   179|         0|            0|            0|  0.00%|
   180|        14|  3.69549e-05|  2.63963e-06|  0.02%|
   181|         0|            0|            0|  0.00%|
   182|        14|  5.84126e-05|  4.17233e-06|  0.02%|
   183|         0|            0|            0|  0.00%|
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|
   186|         0|            0|            0|  0.00%|
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|
   193|         0|            0|            0|  0.00%|
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|
   198|         0|            0|            0|  0.00%|
   199|         0|            0|            0|  0.00%|
   200|         0|            0|            0|  0.00%|
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|
   208|         0|            0|            0|  0.00%|
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|
   222|         0|            0|            0|  0.00%|
   223|         0|            0|            0|  0.00%|
   224|         0|            0|            0|  0.00%|
   225|         0|            0|            0|  0.00%|
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|
   232|         0|            0|            0|  0.00%|
   233|         0|            0|            0|  0.00%|
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|
   286|         0|            0|            0|  0.00%|
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|
   290|         0|            0|            0|  0.00%|
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|
   294|         0|            0|            0|  0.00%|
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|
   300|         0|            0|            0|  0.00%|
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|
   303|         0|            0|            0|  0.00%|
   304|         0|            0|            0|  0.00%|
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|
   308|         0|            0|            0|  0.00%|
   309|         0|            0|            0|  0.00%|
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|
   313|         0|            0|            0|  0.00%|
   314|         0|            0|            0|  0.00%|
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|
   324|         0|            0|            0|  0.00%|
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|
   329|         0|            0|            0|  0.00%|
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|
   332|         0|            0|            0|  0.00%|
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|
   342|         0|            0|            0|  0.00%|
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|
   348|         0|            0|            0|  0.00%|
   349|         0|            0|            0|  0.00%|
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|
   354|         0|            0|            0|  0.00%|
   355|         0|            0|            0|  0.00%|
   356|         0|            0|            0|  0.00%|
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|
   359|         0|            0|            0|  0.00%|
   360|         0|            0|            0|  0.00%|
   361|         0|            0|            0|  0.00%|
   362|         0|            0|            0|  0.00%|
   363|         0|            0|            0|  0.00%|
   364|         0|            0|            0|  0.00%|
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|
   371|         0|            0|            0|  0.00%|
   372|         0|            0|            0|  0.00%|
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|
   375|         0|            0|            0|  0.00%|
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|
   378|         0|            0|            0|  0.00%|
   379|         0|            0|            0|  0.00%|
   380|        18|  7.15256e-05|  3.97364e-06|  0.03%|
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|
   397|         0|            0|            0|  0.00%|
   398|        18|  0.000100851|  5.60284e-06|  0.04%|
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|
   401|         0|            0|            0|  0.00%|
   402|         0|            0|            0|  0.00%|
   403|         0|            0|            0|  0.00%|
   404|         0|            0|            0|  0.00%|
   405|        18|  7.39098e-05|   4.1061e-06|  0.03%|
   406|        18|  0.000170946|  9.49701e-06|  0.07%|
(call)|        18|  0.000685215|  3.80675e-05|  0.28%|# <frozen importlib._bootstrap_external>:132 _path_split
   407|        18|  8.22544e-05|  4.56969e-06|  0.03%|
   408|        18|  7.53403e-05|  4.18557e-06|  0.03%|
   409|        18|  6.65188e-05|  3.69549e-06|  0.03%|
   410|         0|            0|            0|  0.00%|
   411|        18|  7.55787e-05|  4.19882e-06|  0.03%|
   412|        18|  6.48499e-05|  3.60277e-06|  0.03%|
   413|        18|  7.00951e-05|  3.89417e-06|  0.03%|
   414|        18|  6.41346e-05|  3.56303e-06|  0.03%|
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|
   417|        18|  6.55651e-05|  3.64251e-06|  0.03%|
   418|        18|  6.27041e-05|  3.48356e-06|  0.03%|
   419|         0|            0|            0|  0.00%|
   420|         0|            0|            0|  0.00%|
   421|         0|            0|            0|  0.00%|
   422|        18|  6.46114e-05|  3.58952e-06|  0.03%|
   423|        18|  6.91414e-05|  3.84119e-06|  0.03%|
   424|         0|            0|            0|  0.00%|
   425|         0|            0|            0|  0.00%|
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|
   428|         0|            0|            0|  0.00%|
   429|         0|            0|            0|  0.00%|
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|
   436|         0|            0|            0|  0.00%|
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|
   443|         0|            0|            0|  0.00%|
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|
   448|        18|  0.000169754|  9.43078e-06|  0.07%|
(call)|        18|  0.000886679|  4.92599e-05|  0.36%|# <frozen importlib._bootstrap_external>:126 _path_join
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|
   454|         0|            0|            0|  0.00%|
   455|         0|            0|            0|  0.00%|
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|
   459|         0|            0|            0|  0.00%|
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|
   462|         0|            0|            0|  0.00%|
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|
   469|         0|            0|            0|  0.00%|
   470|         0|            0|            0|  0.00%|
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|
   490|         0|            0|            0|  0.00%|
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|
   495|         0|            0|            0|  0.00%|
   496|         0|            0|            0|  0.00%|
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|
   499|         0|            0|            0|  0.00%|
   500|         0|            0|            0|  0.00%|
   501|         0|            0|            0|  0.00%|
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|
   504|         0|            0|            0|  0.00%|
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|
   508|         0|            0|            0|  0.00%|
   509|         0|            0|            0|  0.00%|
   510|        13|  3.62396e-05|  2.78766e-06|  0.01%|
   511|        13|  5.34058e-05|  4.10814e-06|  0.02%|
   512|         9|  2.67029e-05|  2.96699e-06|  0.01%|
   513|         9|   8.7738e-05|  9.74867e-06|  0.04%|
(call)|         9|    0.0015254|  0.000169489|  0.63%|# <frozen importlib._bootstrap_external>:380 cache_from_source
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|
   516|         4|  1.33514e-05|  3.33786e-06|  0.01%|
   517|         0|            0|            0|  0.00%|
   518|         0|            0|            0|  0.00%|
   519|         4|  1.50204e-05|  3.75509e-06|  0.01%|
   520|         0|            0|            0|  0.00%|
   521|         0|            0|            0|  0.00%|
   522|         0|            0|            0|  0.00%|
   523|         0|            0|            0|  0.00%|
   524|         0|            0|            0|  0.00%|
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|
   527|         0|            0|            0|  0.00%|
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|
   533|         0|            0|            0|  0.00%|
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|
   540|         0|            0|            0|  0.00%|
   541|         0|            0|            0|  0.00%|
   542|         9|  2.93255e-05|  3.25839e-06|  0.01%|
   543|         9|  3.12328e-05|  3.47031e-06|  0.01%|
   544|         0|            0|            0|  0.00%|
   545|         9|  3.00407e-05|  3.33786e-06|  0.01%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|
   548|         9|  8.10623e-05|  9.00692e-06|  0.03%|
(call)|         9|  5.38826e-05|  5.98696e-06|  0.02%|# <frozen importlib._bootstrap_external>:1065 get_filename
   549|         0|            0|            0|  0.00%|
   550|         0|            0|            0|  0.00%|
   551|         0|            0|            0|  0.00%|
   552|         0|            0|            0|  0.00%|
   553|         0|            0|            0|  0.00%|
   554|         0|            0|            0|  0.00%|
   555|         0|            0|            0|  0.00%|
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|
   558|         0|            0|            0|  0.00%|
   559|         0|            0|            0|  0.00%|
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|
   562|         0|            0|            0|  0.00%|
   563|         0|            0|            0|  0.00%|
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|
   567|         0|            0|            0|  0.00%|
   568|         0|            0|            0|  0.00%|
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|
   571|         0|            0|            0|  0.00%|
   572|         0|            0|            0|  0.00%|
   573|         0|            0|            0|  0.00%|
   574|         0|            0|            0|  0.00%|
   575|         0|            0|            0|  0.00%|
   576|         0|            0|            0|  0.00%|
   577|         0|            0|            0|  0.00%|
   578|         0|            0|            0|  0.00%|
   579|         0|            0|            0|  0.00%|
   580|         0|            0|            0|  0.00%|
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|
   583|         0|            0|            0|  0.00%|
   584|         0|            0|            0|  0.00%|
   585|         9|  3.19481e-05|  3.54979e-06|  0.01%|
   586|         0|            0|            0|  0.00%|
   587|         0|            0|            0|  0.00%|
   588|         0|            0|            0|  0.00%|
   589|         0|            0|            0|  0.00%|
   590|         0|            0|            0|  0.00%|
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|
   593|         0|            0|            0|  0.00%|
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|
   598|         0|            0|            0|  0.00%|
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|
   601|         9|  5.81741e-05|  6.46379e-06|  0.02%|
   602|         9|  3.29018e-05|  3.65575e-06|  0.01%|
   603|         0|            0|            0|  0.00%|
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|
   606|         9|  3.57628e-05|  3.97364e-06|  0.01%|
   607|         0|            0|            0|  0.00%|
   608|         0|            0|            0|  0.00%|
   609|         0|            0|            0|  0.00%|
   610|         9|  8.05855e-05|  8.95394e-06|  0.03%|
(call)|         9|  9.13143e-05|   1.0146e-05|  0.04%|# <frozen importlib._bootstrap_external>:84 _unpack_uint32
   611|         0|            0|            0|  0.00%|
   612|         9|  3.45707e-05|  3.84119e-06|  0.01%|
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|
   615|         9|   3.0756e-05|  3.41733e-06|  0.01%|
   616|         0|            0|            0|  0.00%|
   617|         0|            0|            0|  0.00%|
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|
   620|         0|            0|            0|  0.00%|
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|
   624|         0|            0|            0|  0.00%|
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|
   629|         0|            0|            0|  0.00%|
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|
   635|         0|            0|            0|  0.00%|
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|
   638|         0|            0|            0|  0.00%|
   639|         0|            0|            0|  0.00%|
   640|         0|            0|            0|  0.00%|
   641|         0|            0|            0|  0.00%|
   642|         0|            0|            0|  0.00%|
   643|         0|            0|            0|  0.00%|
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|
   646|         9|  2.86102e-05|  3.17891e-06|  0.01%|
   647|         0|            0|            0|  0.00%|
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|
   651|         0|            0|            0|  0.00%|
   652|         0|            0|            0|  0.00%|
   653|         0|            0|            0|  0.00%|
   654|         0|            0|            0|  0.00%|
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|
   663|         9|  3.33786e-05|  3.70873e-06|  0.01%|
   664|         0|            0|            0|  0.00%|
   665|         0|            0|            0|  0.00%|
   666|         0|            0|            0|  0.00%|
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|
   669|         0|            0|            0|  0.00%|
   670|         9|  2.83718e-05|  3.15242e-06|  0.01%|
   671|         0|            0|            0|  0.00%|
   672|         9|  0.000700951|  7.78834e-05|  0.29%|
   673|         9|  4.17233e-05|  4.63592e-06|  0.02%|
   674|         9|  8.63075e-05|  9.58973e-06|  0.04%|
(call)|         9|  6.03199e-05|  6.70221e-06|  0.02%|# <frozen importlib._bootstrap>:244 _verbose_message
   675|         9|   3.0756e-05|  3.41733e-06|  0.01%|
   676|         9|  3.14713e-05|  3.49681e-06|  0.01%|
   677|         9|  2.90871e-05|   3.2319e-06|  0.01%|
   678|         0|            0|            0|  0.00%|
   679|         0|            0|            0|  0.00%|
   680|         0|            0|            0|  0.00%|
   681|         0|            0|            0|  0.00%|
   682|         0|            0|            0|  0.00%|
   683|         0|            0|            0|  0.00%|
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|         0|            0|            0|  0.00%|
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|
   695|         0|            0|            0|  0.00%|
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|
   700|         0|            0|            0|  0.00%|
   701|         0|            0|            0|  0.00%|
   702|         0|            0|            0|  0.00%|
   703|         0|            0|            0|  0.00%|
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|
   709|         0|            0|            0|  0.00%|
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|
   718|         0|            0|            0|  0.00%|
   719|         0|            0|            0|  0.00%|
   720|         0|            0|            0|  0.00%|
   721|        13|  4.88758e-05|  3.75968e-06|  0.02%|
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|
   728|         0|            0|            0|  0.00%|
   729|         0|            0|            0|  0.00%|
   730|         0|            0|            0|  0.00%|
   731|         0|            0|            0|  0.00%|
   732|         0|            0|            0|  0.00%|
   733|        13|  4.86374e-05|  3.74134e-06|  0.02%|
   734|         0|            0|            0|  0.00%|
   735|         0|            0|            0|  0.00%|
   736|         0|            0|            0|  0.00%|
   737|         0|            0|            0|  0.00%|
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|
   740|         0|            0|            0|  0.00%|
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|
   745|        13|    5.126e-05|  3.94308e-06|  0.02%|
   746|        13|  0.000110388|  8.49137e-06|  0.05%|
(call)|        13|   8.7738e-05|  6.74908e-06|  0.04%|# <frozen importlib._bootstrap_external>:180 _path_isabs
   747|         0|            0|            0|  0.00%|
   748|         0|            0|            0|  0.00%|
   749|         0|            0|            0|  0.00%|
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|
   752|         0|            0|            0|  0.00%|
   753|         0|            0|            0|  0.00%|
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|
   758|        13|  0.000133038|  1.02337e-05|  0.05%|
(call)|        13|  0.000335217|  2.57859e-05|  0.14%|# <frozen importlib._bootstrap>:357 __init__
   759|        13|  4.74453e-05|  3.64964e-06|  0.02%|
   760|         0|            0|            0|  0.00%|
   761|         0|            0|            0|  0.00%|
   762|        13|  4.64916e-05|  3.57628e-06|  0.02%|
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|
   765|         0|            0|            0|  0.00%|
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|
   770|         0|            0|            0|  0.00%|
   771|         0|            0|            0|  0.00%|
   772|        13|  4.64916e-05|  3.57628e-06|  0.02%|
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|
   775|         0|            0|            0|  0.00%|
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|
   781|         0|            0|            0|  0.00%|
   782|         0|            0|            0|  0.00%|
   783|        13|  4.43459e-05|  3.41122e-06|  0.02%|
   784|        13|   4.8399e-05|    3.723e-06|  0.02%|
   785|         0|            0|            0|  0.00%|
   786|         0|            0|            0|  0.00%|
   787|         0|            0|            0|  0.00%|
   788|         0|            0|            0|  0.00%|
   789|        13|  4.52995e-05|  3.48458e-06|  0.02%|
   790|         0|            0|            0|  0.00%|
   791|         0|            0|            0|  0.00%|
   792|         0|            0|            0|  0.00%|
   793|         0|            0|            0|  0.00%|
   794|         0|            0|            0|  0.00%|
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|
   797|         0|            0|            0|  0.00%|
   798|         0|            0|            0|  0.00%|
   799|         0|            0|            0|  0.00%|
   800|         0|            0|            0|  0.00%|
   801|         0|            0|            0|  0.00%|
   802|         0|            0|            0|  0.00%|
   803|         0|            0|            0|  0.00%|
   804|         0|            0|            0|  0.00%|
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|
   810|         0|            0|            0|  0.00%|
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|
   813|         0|            0|            0|  0.00%|
   814|         0|            0|            0|  0.00%|
   815|         0|            0|            0|  0.00%|
   816|         0|            0|            0|  0.00%|
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|
   823|         0|            0|            0|  0.00%|
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|
   826|         0|            0|            0|  0.00%|
   827|         0|            0|            0|  0.00%|
   828|         0|            0|            0|  0.00%|
   829|         0|            0|            0|  0.00%|
   830|         0|            0|            0|  0.00%|
   831|         0|            0|            0|  0.00%|
   832|         0|            0|            0|  0.00%|
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|
   840|         0|            0|            0|  0.00%|
   841|         0|            0|            0|  0.00%|
   842|         0|            0|            0|  0.00%|
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|
   847|         0|            0|            0|  0.00%|
   848|         0|            0|            0|  0.00%|
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|
   857|         0|            0|            0|  0.00%|
   858|         0|            0|            0|  0.00%|
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|
   861|         0|            0|            0|  0.00%|
   862|         0|            0|            0|  0.00%|
   863|         0|            0|            0|  0.00%|
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|
   866|         0|            0|            0|  0.00%|
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|
   869|         0|            0|            0|  0.00%|
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|
   874|        18|  5.00679e-05|  2.78155e-06|  0.02%|
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|
   877|         9|  2.64645e-05|   2.9405e-06|  0.01%|
   878|         0|            0|            0|  0.00%|
   879|         9|  9.91821e-05|  1.10202e-05|  0.04%|
(call)|         9|   0.00610662|  0.000678513|  2.51%|# <frozen importlib._bootstrap_external>:950 get_code
   880|         9|  3.09944e-05|  3.44382e-06|  0.01%|
   881|         0|            0|            0|  0.00%|
   882|         0|            0|            0|  0.00%|
   883|         9|  0.000101328|  1.12587e-05|  0.04%|
(call)|         9|     0.201138|    0.0223487| 82.80%|# <frozen importlib._bootstrap>:233 _call_with_frames_removed
   884|         0|            0|            0|  0.00%|
   885|         0|            0|            0|  0.00%|
   886|         0|            0|            0|  0.00%|
   887|         0|            0|            0|  0.00%|
   888|         0|            0|            0|  0.00%|
   889|         0|            0|            0|  0.00%|
   890|         0|            0|            0|  0.00%|
   891|         0|            0|            0|  0.00%|
   892|         0|            0|            0|  0.00%|
   893|         0|            0|            0|  0.00%|
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|
   896|         0|            0|            0|  0.00%|
   897|         0|            0|            0|  0.00%|
   898|         0|            0|            0|  0.00%|
   899|         0|            0|            0|  0.00%|
   900|         0|            0|            0|  0.00%|
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|
   903|         0|            0|            0|  0.00%|
   904|         0|            0|            0|  0.00%|
   905|         0|            0|            0|  0.00%|
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|
   909|         0|            0|            0|  0.00%|
   910|         0|            0|            0|  0.00%|
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|
   915|         0|            0|            0|  0.00%|
   916|         0|            0|            0|  0.00%|
   917|         0|            0|            0|  0.00%|
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|
   921|         0|            0|            0|  0.00%|
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|
   926|         0|            0|            0|  0.00%|
   927|         0|            0|            0|  0.00%|
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|
   936|         0|            0|            0|  0.00%|
   937|         0|            0|            0|  0.00%|
   938|         0|            0|            0|  0.00%|
   939|         0|            0|            0|  0.00%|
   940|         0|            0|            0|  0.00%|
   941|         0|            0|            0|  0.00%|
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|
   948|         0|            0|            0|  0.00%|
   949|         0|            0|            0|  0.00%|
   950|         9|   4.1008e-05|  4.55644e-06|  0.02%|
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|
   953|         0|            0|            0|  0.00%|
   954|         0|            0|            0|  0.00%|
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|
   957|         9|  9.48906e-05|  1.05434e-05|  0.04%|
(call)|         9|  0.000225544|  2.50604e-05|  0.09%|# <frozen importlib._bootstrap_external>:542 _check_name_wrapper
   958|         9|  4.00543e-05|  4.45048e-06|  0.02%|
   959|         9|   3.8147e-05|  4.23855e-06|  0.02%|
   960|         9|  4.02927e-05|  4.47697e-06|  0.02%|
   961|         9|   3.8147e-05|  4.23855e-06|  0.02%|
   962|         9|  3.62396e-05|  4.02662e-06|  0.01%|
   963|         9|  3.57628e-05|  3.97364e-06|  0.01%|
   964|         9|  9.44138e-05|  1.04904e-05|  0.04%|
(call)|         9|   0.00139427|  0.000154919|  0.57%|# <frozen importlib._bootstrap_external>:380 cache_from_source
   965|         0|            0|            0|  0.00%|
   966|         0|            0|            0|  0.00%|
   967|         0|            0|            0|  0.00%|
   968|         9|  3.76701e-05|  4.18557e-06|  0.02%|
   969|         9|  9.13143e-05|   1.0146e-05|  0.04%|
(call)|         9|  0.000213861|  2.37624e-05|  0.09%|# <frozen importlib._bootstrap_external>:1089 path_stats
   970|         0|            0|            0|  0.00%|
   971|         0|            0|            0|  0.00%|
   972|         0|            0|            0|  0.00%|
   973|         9|  4.31538e-05|  4.79486e-06|  0.02%|
   974|         9|  3.45707e-05|  3.84119e-06|  0.01%|
   975|         9|  9.63211e-05|  1.07023e-05|  0.04%|
(call)|         9|   0.00044632|  4.95911e-05|  0.18%|# <frozen importlib._bootstrap_external>:1070 get_data
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|
   978|         0|            0|            0|  0.00%|
   979|         9|  3.52859e-05|  3.92066e-06|  0.01%|
   980|         9|   3.8147e-05|  4.23855e-06|  0.02%|
   981|         9|   3.3617e-05|  3.73522e-06|  0.01%|
   982|         0|            0|            0|  0.00%|
   983|         9|  3.40939e-05|  3.78821e-06|  0.01%|
   984|         9|  9.01222e-05|  1.00136e-05|  0.04%|
(call)|         9|  0.000396013|  4.40015e-05|  0.16%|# <frozen importlib._bootstrap_external>:585 _classify_pyc
   985|         9|  4.88758e-05|  5.43065e-06|  0.02%|
   986|         9|  3.55244e-05|  3.94715e-06|  0.01%|
   987|         9|  3.40939e-05|  3.78821e-06|  0.01%|
   988|         9|  3.26633e-05|  3.62926e-06|  0.01%|
   989|        18|  6.58035e-05|  3.65575e-06|  0.03%|
   990|         9|  3.21865e-05|  3.57628e-06|  0.01%|
   991|         0|            0|            0|  0.00%|
   992|         9|  8.72612e-05|  9.69569e-06|  0.04%|
(call)|         9|  0.000287294|  3.19216e-05|  0.12%|# <frozen importlib._bootstrap_external>:1070 get_data
   993|        18|  0.000140429|  7.80159e-06|  0.06%|
   994|         9|  3.21865e-05|  3.57628e-06|  0.01%|
   995|         9|  3.09944e-05|  3.44382e-06|  0.01%|
   996|         0|            0|            0|  0.00%|
   997|        18|  0.000114918|  6.38432e-06|  0.05%|
(call)|         9|  6.19888e-05|  6.88765e-06|  0.03%|# <frozen importlib._bootstrap_external>:646 _validate_hash_pyc
   998|         9|  3.31402e-05|  3.68224e-06|  0.01%|
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|
  1001|         0|            0|            0|  0.00%|
  1002|         0|            0|            0|  0.00%|
  1003|         0|            0|            0|  0.00%|
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|
  1007|         0|            0|            0|  0.00%|
  1008|         0|            0|            0|  0.00%|
  1009|         0|            0|            0|  0.00%|
  1010|        18|  0.000114202|  6.34458e-06|  0.05%|
(call)|         9|  5.81741e-05|  6.46379e-06|  0.02%|# <frozen importlib._bootstrap>:244 _verbose_message
  1011|         9|  3.43323e-05|   3.8147e-06|  0.01%|
  1012|        18|  0.000120878|  6.71546e-06|  0.05%|
(call)|         9|   0.00100899|   0.00011211|  0.42%|# <frozen importlib._bootstrap_external>:670 _compile_bytecode
  1013|         9|  3.05176e-05|  3.39084e-06|  0.01%|
  1014|         9|  3.29018e-05|  3.65575e-06|  0.01%|
  1015|         0|            0|            0|  0.00%|
  1016|         0|            0|            0|  0.00%|
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|
  1019|         0|            0|            0|  0.00%|
  1020|         0|            0|            0|  0.00%|
  1021|         0|            0|            0|  0.00%|
  1022|         0|            0|            0|  0.00%|
  1023|         0|            0|            0|  0.00%|
  1024|         0|            0|            0|  0.00%|
  1025|         0|            0|            0|  0.00%|
  1026|         0|            0|            0|  0.00%|
  1027|         0|            0|            0|  0.00%|
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|
  1032|         0|            0|            0|  0.00%|
  1033|         0|            0|            0|  0.00%|
  1034|         0|            0|            0|  0.00%|
  1035|         0|            0|            0|  0.00%|
  1036|         0|            0|            0|  0.00%|
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|
  1039|         0|            0|            0|  0.00%|
  1040|         9|  2.69413e-05|  2.99348e-06|  0.01%|
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|
  1043|         9|  3.12328e-05|  3.47031e-06|  0.01%|
  1044|         9|  3.09944e-05|  3.44382e-06|  0.01%|
  1045|         0|            0|            0|  0.00%|
  1046|         0|            0|            0|  0.00%|
  1047|         0|            0|            0|  0.00%|
  1048|         0|            0|            0|  0.00%|
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|
  1052|         0|            0|            0|  0.00%|
  1053|         0|            0|            0|  0.00%|
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|
  1056|         0|            0|            0|  0.00%|
  1057|         0|            0|            0|  0.00%|
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|
  1060|         0|            0|            0|  0.00%|
  1061|         0|            0|            0|  0.00%|
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|
  1064|         0|            0|            0|  0.00%|
  1065|         9|  2.52724e-05|  2.80804e-06|  0.01%|
  1066|         0|            0|            0|  0.00%|
  1067|         0|            0|            0|  0.00%|
  1068|         9|  2.86102e-05|  3.17891e-06|  0.01%|
  1069|         0|            0|            0|  0.00%|
  1070|        18|  5.22137e-05|  2.90076e-06|  0.02%|
  1071|         0|            0|            0|  0.00%|
  1072|        18|  6.50883e-05|  3.61602e-06|  0.03%|
  1073|        36|  0.000391722|  1.08812e-05|  0.16%|
  1074|        18|   0.00022459|  1.24772e-05|  0.09%|
  1075|         0|            0|            0|  0.00%|
  1076|         0|            0|            0|  0.00%|
  1077|         0|            0|            0|  0.00%|
  1078|         0|            0|            0|  0.00%|
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|
  1081|         0|            0|            0|  0.00%|
  1082|         0|            0|            0|  0.00%|
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|
  1087|         0|            0|            0|  0.00%|
  1088|         0|            0|            0|  0.00%|
  1089|         9|  2.74181e-05|  3.04646e-06|  0.01%|
  1090|         0|            0|            0|  0.00%|
  1091|         9|  7.43866e-05|  8.26518e-06|  0.03%|
(call)|         9|  7.77245e-05|  8.63605e-06|  0.03%|# <frozen importlib._bootstrap_external>:140 _path_stat
  1092|         9|  3.43323e-05|   3.8147e-06|  0.01%|
  1093|         0|            0|            0|  0.00%|
  1094|         0|            0|            0|  0.00%|
  1095|         0|            0|            0|  0.00%|
  1096|         0|            0|            0|  0.00%|
  1097|         0|            0|            0|  0.00%|
  1098|         0|            0|            0|  0.00%|
  1099|         0|            0|            0|  0.00%|
  1100|         0|            0|            0|  0.00%|
  1101|         0|            0|            0|  0.00%|
  1102|         0|            0|            0|  0.00%|
  1103|         0|            0|            0|  0.00%|
  1104|         0|            0|            0|  0.00%|
  1105|         0|            0|            0|  0.00%|
  1106|         0|            0|            0|  0.00%|
  1107|         0|            0|            0|  0.00%|
  1108|         0|            0|            0|  0.00%|
  1109|         0|            0|            0|  0.00%|
  1110|         0|            0|            0|  0.00%|
  1111|         0|            0|            0|  0.00%|
  1112|         0|            0|            0|  0.00%|
  1113|         0|            0|            0|  0.00%|
  1114|         0|            0|            0|  0.00%|
  1115|         0|            0|            0|  0.00%|
  1116|         0|            0|            0|  0.00%|
  1117|         0|            0|            0|  0.00%|
  1118|         0|            0|            0|  0.00%|
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|
  1121|         0|            0|            0|  0.00%|
  1122|         0|            0|            0|  0.00%|
  1123|         0|            0|            0|  0.00%|
  1124|         0|            0|            0|  0.00%|
  1125|         0|            0|            0|  0.00%|
  1126|         0|            0|            0|  0.00%|
  1127|         0|            0|            0|  0.00%|
  1128|         0|            0|            0|  0.00%|
  1129|         0|            0|            0|  0.00%|
  1130|         0|            0|            0|  0.00%|
  1131|         0|            0|            0|  0.00%|
  1132|         0|            0|            0|  0.00%|
  1133|         0|            0|            0|  0.00%|
  1134|         0|            0|            0|  0.00%|
  1135|         0|            0|            0|  0.00%|
  1136|         0|            0|            0|  0.00%|
  1137|         0|            0|            0|  0.00%|
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|
  1140|         0|            0|            0|  0.00%|
  1141|         0|            0|            0|  0.00%|
  1142|         0|            0|            0|  0.00%|
  1143|         0|            0|            0|  0.00%|
  1144|         0|            0|            0|  0.00%|
  1145|         0|            0|            0|  0.00%|
  1146|         0|            0|            0|  0.00%|
  1147|         0|            0|            0|  0.00%|
  1148|         0|            0|            0|  0.00%|
  1149|         0|            0|            0|  0.00%|
  1150|         0|            0|            0|  0.00%|
  1151|         0|            0|            0|  0.00%|
  1152|         0|            0|            0|  0.00%|
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|
  1155|         0|            0|            0|  0.00%|
  1156|         0|            0|            0|  0.00%|
  1157|         0|            0|            0|  0.00%|
  1158|         0|            0|            0|  0.00%|
  1159|         0|            0|            0|  0.00%|
  1160|         0|            0|            0|  0.00%|
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|
  1163|         4|  1.23978e-05|  3.09944e-06|  0.01%|
  1164|         4|  1.43051e-05|  3.57628e-06|  0.01%|
  1165|         4|  1.33514e-05|  3.33786e-06|  0.01%|
  1166|         0|            0|            0|  0.00%|
  1167|         0|            0|            0|  0.00%|
  1168|         0|            0|            0|  0.00%|
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|
  1171|         0|            0|            0|  0.00%|
  1172|         0|            0|            0|  0.00%|
  1173|         0|            0|            0|  0.00%|
  1174|         4|  1.12057e-05|  2.80142e-06|  0.00%|
  1175|         0|            0|            0|  0.00%|
  1176|         8|  6.91414e-05|  8.64267e-06|  0.03%|
(call)|         4|   0.00102472|  0.000256181|  0.42%|# <frozen importlib._bootstrap>:233 _call_with_frames_removed
  1177|         4|  1.33514e-05|  3.33786e-06|  0.01%|
  1178|         8|  5.03063e-05|  6.28829e-06|  0.02%|
(call)|         4|  2.88486e-05|  7.21216e-06|  0.01%|# <frozen importlib._bootstrap>:244 _verbose_message
  1179|         4|  1.52588e-05|   3.8147e-06|  0.01%|
  1180|         4|  1.19209e-05|  2.98023e-06|  0.00%|
  1181|         0|            0|            0|  0.00%|
  1182|         4|  1.19209e-05|  2.98023e-06|  0.00%|
  1183|         0|            0|            0|  0.00%|
  1184|         4|  3.93391e-05|  9.83477e-06|  0.02%|
(call)|         4|  0.000534773|  0.000133693|  0.22%|# <frozen importlib._bootstrap>:233 _call_with_frames_removed
  1185|         8|   4.8399e-05|  6.04987e-06|  0.02%|
(call)|         4|  2.76566e-05|  6.91414e-06|  0.01%|# <frozen importlib._bootstrap>:244 _verbose_message
  1186|         4|  1.28746e-05|  3.21865e-06|  0.01%|
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|
  1189|         0|            0|            0|  0.00%|
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|
  1192|         0|            0|            0|  0.00%|
  1193|         0|            0|            0|  0.00%|
  1194|         0|            0|            0|  0.00%|
  1195|         0|            0|            0|  0.00%|
  1196|         0|            0|            0|  0.00%|
  1197|         0|            0|            0|  0.00%|
  1198|         0|            0|            0|  0.00%|
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|
  1201|         0|            0|            0|  0.00%|
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|
  1206|         0|            0|            0|  0.00%|
  1207|         0|            0|            0|  0.00%|
  1208|         0|            0|            0|  0.00%|
  1209|         0|            0|            0|  0.00%|
  1210|         0|            0|            0|  0.00%|
  1211|         0|            0|            0|  0.00%|
  1212|         0|            0|            0|  0.00%|
  1213|         0|            0|            0|  0.00%|
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|
  1216|         0|            0|            0|  0.00%|
  1217|         0|            0|            0|  0.00%|
  1218|         0|            0|            0|  0.00%|
  1219|         0|            0|            0|  0.00%|
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|
  1222|         0|            0|            0|  0.00%|
  1223|         0|            0|            0|  0.00%|
  1224|         0|            0|            0|  0.00%|
  1225|         0|            0|            0|  0.00%|
  1226|         0|            0|            0|  0.00%|
  1227|         0|            0|            0|  0.00%|
  1228|         0|            0|            0|  0.00%|
  1229|         0|            0|            0|  0.00%|
  1230|         0|            0|            0|  0.00%|
  1231|         0|            0|            0|  0.00%|
  1232|         0|            0|            0|  0.00%|
  1233|         0|            0|            0|  0.00%|
  1234|         0|            0|            0|  0.00%|
  1235|         0|            0|            0|  0.00%|
  1236|         0|            0|            0|  0.00%|
  1237|         0|            0|            0|  0.00%|
  1238|         0|            0|            0|  0.00%|
  1239|         0|            0|            0|  0.00%|
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|
  1242|         0|            0|            0|  0.00%|
  1243|         0|            0|            0|  0.00%|
  1244|         0|            0|            0|  0.00%|
  1245|         0|            0|            0|  0.00%|
  1246|         0|            0|            0|  0.00%|
  1247|         0|            0|            0|  0.00%|
  1248|         0|            0|            0|  0.00%|
  1249|         0|            0|            0|  0.00%|
  1250|         0|            0|            0|  0.00%|
  1251|         0|            0|            0|  0.00%|
  1252|         0|            0|            0|  0.00%|
  1253|         0|            0|            0|  0.00%|
  1254|         0|            0|            0|  0.00%|
  1255|         0|            0|            0|  0.00%|
  1256|         0|            0|            0|  0.00%|
  1257|         0|            0|            0|  0.00%|
  1258|         0|            0|            0|  0.00%|
  1259|         0|            0|            0|  0.00%|
  1260|         0|            0|            0|  0.00%|
  1261|         0|            0|            0|  0.00%|
  1262|         0|            0|            0|  0.00%|
  1263|         0|            0|            0|  0.00%|
  1264|         0|            0|            0|  0.00%|
  1265|         0|            0|            0|  0.00%|
  1266|         0|            0|            0|  0.00%|
  1267|         0|            0|            0|  0.00%|
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|
  1270|         0|            0|            0|  0.00%|
  1271|         0|            0|            0|  0.00%|
  1272|         0|            0|            0|  0.00%|
  1273|         0|            0|            0|  0.00%|
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|
  1276|         0|            0|            0|  0.00%|
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|
  1279|         0|            0|            0|  0.00%|
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|
  1282|         0|            0|            0|  0.00%|
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|
  1285|         0|            0|            0|  0.00%|
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|
  1288|         0|            0|            0|  0.00%|
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|
  1291|         0|            0|            0|  0.00%|
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|
  1294|         0|            0|            0|  0.00%|
  1295|         0|            0|            0|  0.00%|
  1296|         0|            0|            0|  0.00%|
  1297|         0|            0|            0|  0.00%|
  1298|         0|            0|            0|  0.00%|
  1299|         0|            0|            0|  0.00%|
  1300|         0|            0|            0|  0.00%|
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|
  1303|         0|            0|            0|  0.00%|
  1304|         0|            0|            0|  0.00%|
  1305|         0|            0|            0|  0.00%|
  1306|         0|            0|            0|  0.00%|
  1307|         0|            0|            0|  0.00%|
  1308|         0|            0|            0|  0.00%|
  1309|         0|            0|            0|  0.00%|
  1310|         0|            0|            0|  0.00%|
  1311|         0|            0|            0|  0.00%|
  1312|         0|            0|            0|  0.00%|
  1313|         0|            0|            0|  0.00%|
  1314|         0|            0|            0|  0.00%|
  1315|         0|            0|            0|  0.00%|
  1316|         0|            0|            0|  0.00%|
  1317|         0|            0|            0|  0.00%|
  1318|         0|            0|            0|  0.00%|
  1319|         0|            0|            0|  0.00%|
  1320|         0|            0|            0|  0.00%|
  1321|         0|            0|            0|  0.00%|
  1322|         0|            0|            0|  0.00%|
  1323|         0|            0|            0|  0.00%|
  1324|         0|            0|            0|  0.00%|
  1325|         0|            0|            0|  0.00%|
  1326|         0|            0|            0|  0.00%|
  1327|         0|            0|            0|  0.00%|
  1328|         0|            0|            0|  0.00%|
  1329|         0|            0|            0|  0.00%|
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|
  1332|         0|            0|            0|  0.00%|
  1333|         0|            0|            0|  0.00%|
  1334|         1|  4.05312e-06|  4.05312e-06|  0.00%|
  1335|         0|            0|            0|  0.00%|
  1336|         0|            0|            0|  0.00%|
  1337|         1|  4.29153e-06|  4.29153e-06|  0.00%|
  1338|         0|            0|            0|  0.00%|
  1339|         2|  7.62939e-06|   3.8147e-06|  0.00%|
  1340|         2|   6.4373e-06|  3.21865e-06|  0.00%|
  1341|         2|  2.24113e-05|  1.12057e-05|  0.01%|
(call)|         1|   7.4625e-05|   7.4625e-05|  0.03%|# <frozen zipimport>:64 __init__
(call)|         1|  0.000352859|  0.000352859|  0.15%|# <frozen importlib._bootstrap_external>:1619 path_hook_for_FileFinder
  1342|         1|   3.8147e-06|   3.8147e-06|  0.00%|
  1343|         1|  5.72205e-06|  5.72205e-06|  0.00%|
  1344|         0|            0|            0|  0.00%|
  1345|         0|            0|            0|  0.00%|
  1346|         0|            0|            0|  0.00%|
  1347|        57|  0.000161171|  2.82756e-06|  0.07%|
  1348|         0|            0|            0|  0.00%|
  1349|         0|            0|            0|  0.00%|
  1350|         0|            0|            0|  0.00%|
  1351|         0|            0|            0|  0.00%|
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|
  1354|         0|            0|            0|  0.00%|
  1355|        57|  0.000180721|  3.17055e-06|  0.07%|
  1356|         0|            0|            0|  0.00%|
  1357|         0|            0|            0|  0.00%|
  1358|         0|            0|            0|  0.00%|
  1359|         0|            0|            0|  0.00%|
  1360|         0|            0|            0|  0.00%|
  1361|         0|            0|            0|  0.00%|
  1362|        57|  0.000173569|  3.04507e-06|  0.07%|
  1363|        57|  0.000185251|  3.25002e-06|  0.08%|
  1364|         1|  4.76837e-06|  4.76837e-06|  0.00%|
  1365|         1|  1.00136e-05|  1.00136e-05|  0.00%|
(call)|         1|  0.000481844|  0.000481844|  0.20%|# <frozen importlib._bootstrap_external>:1334 _path_hooks
  1366|         1|  4.52995e-06|  4.52995e-06|  0.00%|
  1367|        57|   0.00018239|  3.19983e-06|  0.08%|
  1368|         0|            0|            0|  0.00%|
  1369|         0|            0|            0|  0.00%|
  1370|         0|            0|            0|  0.00%|
  1371|         0|            0|            0|  0.00%|
  1372|         0|            0|            0|  0.00%|
  1373|         0|            0|            0|  0.00%|
  1374|         0|            0|            0|  0.00%|
  1375|         0|            0|            0|  0.00%|
  1376|         0|            0|            0|  0.00%|
  1377|         0|            0|            0|  0.00%|
  1378|         0|            0|            0|  0.00%|
  1379|         0|            0|            0|  0.00%|
  1380|         0|            0|            0|  0.00%|
  1381|         0|            0|            0|  0.00%|
  1382|         0|            0|            0|  0.00%|
  1383|         0|            0|            0|  0.00%|
  1384|         0|            0|            0|  0.00%|
  1385|         0|            0|            0|  0.00%|
  1386|         0|            0|            0|  0.00%|
  1387|         0|            0|            0|  0.00%|
  1388|         0|            0|            0|  0.00%|
  1389|         0|            0|            0|  0.00%|
  1390|        14|  4.76837e-05|  3.40598e-06|  0.02%|
  1391|         0|            0|            0|  0.00%|
  1392|         0|            0|            0|  0.00%|
  1393|         0|            0|            0|  0.00%|
  1394|         0|            0|            0|  0.00%|
  1395|        14|  5.36442e-05|  3.83173e-06|  0.02%|
  1396|        58|  0.000195742|  3.37486e-06|  0.08%|
  1397|        57|  0.000203609|   3.5721e-06|  0.08%|
  1398|         0|            0|            0|  0.00%|
  1399|        57|   0.00047493|   8.3321e-06|  0.20%|
(call)|        57|   0.00138426|  2.42852e-05|  0.57%|# <frozen importlib._bootstrap_external>:1347 _path_importer_cache
  1400|        57|   0.00018692|   3.2793e-06|  0.08%|
  1401|        45|  0.000164986|  3.66635e-06|  0.07%|
  1402|        45|  0.000449419|  9.98709e-06|  0.19%|
(call)|        45|    0.0205901|  0.000457557|  8.48%|# <frozen importlib._bootstrap_external>:1527 find_spec
  1403|         0|            0|            0|  0.00%|
  1404|         0|            0|            0|  0.00%|
  1405|        45|  0.000150442|  3.34316e-06|  0.06%|
  1406|        32|  0.000105858|  3.30806e-06|  0.04%|
  1407|        13|  4.14848e-05|  3.19114e-06|  0.02%|
  1408|        13|  4.29153e-05|  3.30118e-06|  0.02%|
  1409|         0|            0|            0|  0.00%|
  1410|         0|            0|            0|  0.00%|
  1411|         0|            0|            0|  0.00%|
  1412|         0|            0|            0|  0.00%|
  1413|         0|            0|            0|  0.00%|
  1414|         0|            0|            0|  0.00%|
  1415|         0|            0|            0|  0.00%|
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|
  1418|         1|  1.33514e-05|  1.33514e-05|  0.01%|
(call)|         1|  2.86102e-05|  2.86102e-05|  0.01%|# <frozen importlib._bootstrap>:357 __init__
  1419|         1|  6.67572e-06|  6.67572e-06|  0.00%|
  1420|         1|   3.8147e-06|   3.8147e-06|  0.00%|
  1421|         0|            0|            0|  0.00%|
  1422|        14|  4.43459e-05|  3.16756e-06|  0.02%|
  1423|         0|            0|            0|  0.00%|
  1424|         0|            0|            0|  0.00%|
  1425|         0|            0|            0|  0.00%|
  1426|         0|            0|            0|  0.00%|
  1427|         0|            0|            0|  0.00%|
  1428|        14|  5.03063e-05|  3.59331e-06|  0.02%|
  1429|        12|  4.19617e-05|  3.49681e-06|  0.02%|
  1430|        14|  0.000132084|  9.43456e-06|  0.05%|
(call)|        14|    0.0241444|    0.0017246|  9.94%|# <frozen importlib._bootstrap_external>:1390 _get_spec
  1431|        14|  4.79221e-05|  3.42301e-06|  0.02%|
  1432|         0|            0|            0|  0.00%|
  1433|        14|  4.52995e-05|  3.23568e-06|  0.02%|
  1434|         1|  3.33786e-06|  3.33786e-06|  0.00%|
  1435|         1|   3.8147e-06|   3.8147e-06|  0.00%|
  1436|         0|            0|            0|  0.00%|
  1437|         0|            0|            0|  0.00%|
  1438|         0|            0|            0|  0.00%|
  1439|         0|            0|            0|  0.00%|
  1440|         0|            0|            0|  0.00%|
  1441|         0|            0|            0|  0.00%|
  1442|         1|  3.57628e-06|  3.57628e-06|  0.00%|
  1443|         0|            0|            0|  0.00%|
  1444|        13|  4.02927e-05|  3.09944e-06|  0.02%|
  1445|         0|            0|            0|  0.00%|
  1446|         0|            0|            0|  0.00%|
  1447|         0|            0|            0|  0.00%|
  1448|         0|            0|            0|  0.00%|
  1449|         0|            0|            0|  0.00%|
  1450|         0|            0|            0|  0.00%|
  1451|         0|            0|            0|  0.00%|
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|
  1454|         0|            0|            0|  0.00%|
  1455|         0|            0|            0|  0.00%|
  1456|         0|            0|            0|  0.00%|
  1457|         0|            0|            0|  0.00%|
  1458|         0|            0|            0|  0.00%|
  1459|         0|            0|            0|  0.00%|
  1460|         0|            0|            0|  0.00%|
  1461|         0|            0|            0|  0.00%|
  1462|         0|            0|            0|  0.00%|
  1463|         0|            0|            0|  0.00%|
  1464|         0|            0|            0|  0.00%|
  1465|         0|            0|            0|  0.00%|
  1466|         0|            0|            0|  0.00%|
  1467|         0|            0|            0|  0.00%|
  1468|         0|            0|            0|  0.00%|
  1469|         0|            0|            0|  0.00%|
  1470|         0|            0|            0|  0.00%|
  1471|         0|            0|            0|  0.00%|
  1472|         0|            0|            0|  0.00%|
  1473|         0|            0|            0|  0.00%|
  1474|         0|            0|            0|  0.00%|
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|
  1477|         0|            0|            0|  0.00%|
  1478|         0|            0|            0|  0.00%|
  1479|         0|            0|            0|  0.00%|
  1480|         0|            0|            0|  0.00%|
  1481|         0|            0|            0|  0.00%|
  1482|         0|            0|            0|  0.00%|
  1483|         0|            0|            0|  0.00%|
  1484|         0|            0|            0|  0.00%|
  1485|         1|  4.52995e-06|  4.52995e-06|  0.00%|
  1486|         0|            0|            0|  0.00%|
  1487|         0|            0|            0|  0.00%|
  1488|         0|            0|            0|  0.00%|
  1489|         1|  5.00679e-06|  5.00679e-06|  0.00%|
  1490|         4|  1.50204e-05|  3.75509e-06|  0.01%|
  1491|        19|  0.000104189|  5.48363e-06|  0.04%|
(call)|         8|  5.05447e-05|  6.31809e-06|  0.02%|# <frozen importlib._bootstrap_external>:1491 <genexpr>
  1492|         1|   3.8147e-06|   3.8147e-06|  0.00%|
  1493|         0|            0|            0|  0.00%|
  1494|         1|  4.29153e-06|  4.29153e-06|  0.00%|
  1495|         1|  9.77516e-06|  9.77516e-06|  0.00%|
(call)|         1|  7.62939e-06|  7.62939e-06|  0.00%|# <frozen importlib._bootstrap_external>:180 _path_isabs
  1496|         1|   1.3113e-05|   1.3113e-05|  0.01%|
(call)|         1|  4.76837e-05|  4.76837e-05|  0.02%|# <frozen importlib._bootstrap_external>:126 _path_join
  1497|         1|  4.29153e-06|  4.29153e-06|  0.00%|
  1498|         1|  4.29153e-06|  4.29153e-06|  0.00%|
  1499|         1|  5.48363e-05|  5.48363e-05|  0.02%|
  1500|         0|            0|            0|  0.00%|
  1501|         0|            0|            0|  0.00%|
  1502|         0|            0|            0|  0.00%|
  1503|         0|            0|            0|  0.00%|
  1504|         0|            0|            0|  0.00%|
  1505|         0|            0|            0|  0.00%|
  1506|         0|            0|            0|  0.00%|
  1507|         0|            0|            0|  0.00%|
  1508|         0|            0|            0|  0.00%|
  1509|         0|            0|            0|  0.00%|
  1510|         0|            0|            0|  0.00%|
  1511|         0|            0|            0|  0.00%|
  1512|         0|            0|            0|  0.00%|
  1513|         0|            0|            0|  0.00%|
  1514|         0|            0|            0|  0.00%|
  1515|         0|            0|            0|  0.00%|
  1516|         0|            0|            0|  0.00%|
  1517|         0|            0|            0|  0.00%|
  1518|         0|            0|            0|  0.00%|
  1519|         0|            0|            0|  0.00%|
  1520|         0|            0|            0|  0.00%|
  1521|         0|            0|            0|  0.00%|
  1522|        13|  3.95775e-05|  3.04442e-06|  0.02%|
  1523|        13|  0.000119925|  9.22497e-06|  0.05%|
(call)|         9|  8.91685e-05|  9.90762e-06|  0.04%|# <frozen importlib._bootstrap_external>:1040 __init__
(call)|         4|  4.00543e-05|  1.00136e-05|  0.02%|# <frozen importlib._bootstrap_external>:1163 __init__
  1524|        26|  0.000161648|  6.21722e-06|  0.07%|
(call)|        13|   0.00109363|  8.41251e-05|  0.45%|# <frozen importlib._bootstrap_external>:721 spec_from_file_location
  1525|        13|  4.17233e-05|  3.20948e-06|  0.02%|
  1526|         0|            0|            0|  0.00%|
  1527|        45|  0.000168562|  3.74582e-06|  0.07%|
  1528|         0|            0|            0|  0.00%|
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|
  1531|         0|            0|            0|  0.00%|
  1532|        45|  0.000175238|  3.89417e-06|  0.07%|
  1533|        45|  0.000193119|  4.29153e-06|  0.08%|
  1534|        45|  0.000178814|  3.97364e-06|  0.07%|
  1535|        45|  0.000430346|  9.56323e-06|  0.18%|
(call)|        45|  0.000467777|  1.03951e-05|  0.19%|# <frozen importlib._bootstrap_external>:140 _path_stat
  1536|         0|            0|            0|  0.00%|
  1537|         0|            0|            0|  0.00%|
  1538|        45|  0.000188589|  4.19087e-06|  0.08%|
  1539|         1|  1.23978e-05|  1.23978e-05|  0.01%|
(call)|         1|  5.24521e-05|  5.24521e-05|  0.02%|# <frozen importlib._bootstrap_external>:1578 _fill_cache
  1540|         1|  5.00679e-06|  5.00679e-06|  0.00%|
  1541|         0|            0|            0|  0.00%|
  1542|        45|  0.000381231|  8.47181e-06|  0.16%|
(call)|        45|  0.000245333|  5.45184e-06|  0.10%|# <frozen importlib._bootstrap_external>:71 _relax_case
  1543|         0|            0|            0|  0.00%|
  1544|         0|            0|            0|  0.00%|
  1545|         0|            0|            0|  0.00%|
  1546|        45|  0.000173092|  3.84649e-06|  0.07%|
  1547|        45|  0.000165701|  3.68224e-06|  0.07%|
  1548|         0|            0|            0|  0.00%|
  1549|        45|  0.000173807|  3.86238e-06|  0.07%|
  1550|         0|            0|            0|  0.00%|
  1551|         0|            0|            0|  0.00%|
  1552|         0|            0|            0|  0.00%|
  1553|         0|            0|            0|  0.00%|
  1554|         0|            0|            0|  0.00%|
  1555|         0|            0|            0|  0.00%|
  1556|         0|            0|            0|  0.00%|
  1557|         0|            0|            0|  0.00%|
  1558|         0|            0|            0|  0.00%|
  1559|         0|            0|            0|  0.00%|
  1560|         0|            0|            0|  0.00%|
  1561|       232|  0.000846148|  3.64719e-06|  0.35%|
  1562|       200|  0.000714064|  3.57032e-06|  0.29%|
  1563|       200|    0.0017581|  8.79049e-06|  0.72%|
(call)|       200|   0.00794291|  3.97146e-05|  3.27%|# <frozen importlib._bootstrap_external>:126 _path_join
  1564|         0|            0|            0|  0.00%|
  1565|         0|            0|            0|  0.00%|
  1566|       200|   0.00172639|  8.63194e-06|  0.71%|
(call)|       200|   0.00117874|  5.89371e-06|  0.49%|# <frozen importlib._bootstrap>:244 _verbose_message
  1567|       200|  0.000778913|  3.89457e-06|  0.32%|
  1568|        13|  0.000114679|  8.82149e-06|  0.05%|
(call)|        13|  0.000489235|  3.76335e-05|  0.20%|# <frozen importlib._bootstrap_external>:159 _path_isfile
  1569|        26|  0.000172138|   6.6207e-06|  0.07%|
(call)|        13|   0.00158572|  0.000121979|  0.65%|# <frozen importlib._bootstrap_external>:1522 _get_spec
  1570|        13|  4.69685e-05|  3.61296e-06|  0.02%|
  1571|        32|  0.000112534|  3.51667e-06|  0.05%|
  1572|         0|            0|            0|  0.00%|
  1573|         0|            0|            0|  0.00%|
  1574|         0|            0|            0|  0.00%|
  1575|         0|            0|            0|  0.00%|
  1576|        32|  0.000112057|  3.50177e-06|  0.05%|
  1577|         0|            0|            0|  0.00%|
  1578|         1|  4.29153e-06|  4.29153e-06|  0.00%|
  1579|         0|            0|            0|  0.00%|
  1580|         1|  5.00679e-06|  5.00679e-06|  0.00%|
  1581|         1|  4.29153e-06|  4.29153e-06|  0.00%|
  1582|         1|  2.19345e-05|  2.19345e-05|  0.01%|
  1583|         0|            0|            0|  0.00%|
  1584|         0|            0|            0|  0.00%|
  1585|         0|            0|            0|  0.00%|
  1586|         0|            0|            0|  0.00%|
  1587|         0|            0|            0|  0.00%|
  1588|         0|            0|            0|  0.00%|
  1589|         1|  5.72205e-06|  5.72205e-06|  0.00%|
  1590|         1|  6.19888e-06|  6.19888e-06|  0.00%|
  1591|         0|            0|            0|  0.00%|
  1592|         0|            0|            0|  0.00%|
  1593|         0|            0|            0|  0.00%|
  1594|         0|            0|            0|  0.00%|
  1595|         0|            0|            0|  0.00%|
  1596|         0|            0|            0|  0.00%|
  1597|         0|            0|            0|  0.00%|
  1598|         0|            0|            0|  0.00%|
  1599|         0|            0|            0|  0.00%|
  1600|         0|            0|            0|  0.00%|
  1601|         0|            0|            0|  0.00%|
  1602|         0|            0|            0|  0.00%|
  1603|         0|            0|            0|  0.00%|
  1604|         0|            0|            0|  0.00%|
  1605|         0|            0|            0|  0.00%|
  1606|         1|  5.00679e-06|  5.00679e-06|  0.00%|
  1607|         0|            0|            0|  0.00%|
  1608|         0|            0|            0|  0.00%|
  1609|         0|            0|            0|  0.00%|
  1610|         0|            0|            0|  0.00%|
  1611|         0|            0|            0|  0.00%|
  1612|         0|            0|            0|  0.00%|
  1613|         0|            0|            0|  0.00%|
  1614|         0|            0|            0|  0.00%|
  1615|         0|            0|            0|  0.00%|
  1616|         0|            0|            0|  0.00%|
  1617|         0|            0|            0|  0.00%|
  1618|         0|            0|            0|  0.00%|
  1619|         1|   3.8147e-06|   3.8147e-06|  0.00%|
  1620|         0|            0|            0|  0.00%|
  1621|         1|   1.0252e-05|   1.0252e-05|  0.00%|
(call)|         1|  4.72069e-05|  4.72069e-05|  0.02%|# <frozen importlib._bootstrap_external>:164 _path_isdir
  1622|         0|            0|            0|  0.00%|
  1623|         1|   1.3113e-05|   1.3113e-05|  0.01%|
(call)|         1|  0.000278473|  0.000278473|  0.11%|# <frozen importlib._bootstrap_external>:1485 __init__
File: /usr/lib/python3.10/sre_parse.py
File duration: 0.0258954s (10.66%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|#
     2|         0|            0|            0|  0.00%|# Secret Labs' Regular Expression Engine
     3|         0|            0|            0|  0.00%|#
     4|         0|            0|            0|  0.00%|# convert re-style regular expression to sre pattern
     5|         0|            0|            0|  0.00%|#
     6|         0|            0|            0|  0.00%|# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.
     7|         0|            0|            0|  0.00%|#
     8|         0|            0|            0|  0.00%|# See the sre.py file for information on usage and redistribution.
     9|         0|            0|            0|  0.00%|#
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|"""Internal support module for sre"""
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|# XXX: show string offset and offending character for all errors
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|from sre_constants import *
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|SPECIAL_CHARS = ".\\[{()*+?^$|"
    18|         0|            0|            0|  0.00%|REPEAT_CHARS = "*+?{"
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|DIGITS = frozenset("0123456789")
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|OCTDIGITS = frozenset("01234567")
    23|         0|            0|            0|  0.00%|HEXDIGITS = frozenset("0123456789abcdefABCDEF")
    24|         0|            0|            0|  0.00%|ASCIILETTERS = frozenset("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|WHITESPACE = frozenset(" \t\n\r\v\f")
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})
    29|         0|            0|            0|  0.00%|_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|ESCAPES = {
    32|         0|            0|            0|  0.00%|    r"\a": (LITERAL, ord("\a")),
    33|         0|            0|            0|  0.00%|    r"\b": (LITERAL, ord("\b")),
    34|         0|            0|            0|  0.00%|    r"\f": (LITERAL, ord("\f")),
    35|         0|            0|            0|  0.00%|    r"\n": (LITERAL, ord("\n")),
    36|         0|            0|            0|  0.00%|    r"\r": (LITERAL, ord("\r")),
    37|         0|            0|            0|  0.00%|    r"\t": (LITERAL, ord("\t")),
    38|         0|            0|            0|  0.00%|    r"\v": (LITERAL, ord("\v")),
    39|         0|            0|            0|  0.00%|    r"\\": (LITERAL, ord("\\"))
    40|         0|            0|            0|  0.00%|}
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|CATEGORIES = {
    43|         0|            0|            0|  0.00%|    r"\A": (AT, AT_BEGINNING_STRING), # start of string
    44|         0|            0|            0|  0.00%|    r"\b": (AT, AT_BOUNDARY),
    45|         0|            0|            0|  0.00%|    r"\B": (AT, AT_NON_BOUNDARY),
    46|         0|            0|            0|  0.00%|    r"\d": (IN, [(CATEGORY, CATEGORY_DIGIT)]),
    47|         0|            0|            0|  0.00%|    r"\D": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),
    48|         0|            0|            0|  0.00%|    r"\s": (IN, [(CATEGORY, CATEGORY_SPACE)]),
    49|         0|            0|            0|  0.00%|    r"\S": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),
    50|         0|            0|            0|  0.00%|    r"\w": (IN, [(CATEGORY, CATEGORY_WORD)]),
    51|         0|            0|            0|  0.00%|    r"\W": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),
    52|         0|            0|            0|  0.00%|    r"\Z": (AT, AT_END_STRING), # end of string
    53|         0|            0|            0|  0.00%|}
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|FLAGS = {
    56|         0|            0|            0|  0.00%|    # standard flags
    57|         0|            0|            0|  0.00%|    "i": SRE_FLAG_IGNORECASE,
    58|         0|            0|            0|  0.00%|    "L": SRE_FLAG_LOCALE,
    59|         0|            0|            0|  0.00%|    "m": SRE_FLAG_MULTILINE,
    60|         0|            0|            0|  0.00%|    "s": SRE_FLAG_DOTALL,
    61|         0|            0|            0|  0.00%|    "x": SRE_FLAG_VERBOSE,
    62|         0|            0|            0|  0.00%|    # extensions
    63|         0|            0|            0|  0.00%|    "a": SRE_FLAG_ASCII,
    64|         0|            0|            0|  0.00%|    "t": SRE_FLAG_TEMPLATE,
    65|         0|            0|            0|  0.00%|    "u": SRE_FLAG_UNICODE,
    66|         0|            0|            0|  0.00%|}
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|TYPE_FLAGS = SRE_FLAG_ASCII | SRE_FLAG_LOCALE | SRE_FLAG_UNICODE
    69|         0|            0|            0|  0.00%|GLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|class Verbose(Exception):
    72|         0|            0|            0|  0.00%|    pass
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|class State:
    75|         0|            0|            0|  0.00%|    # keeps track of state for parsing
    76|         7|  2.09808e-05|  2.99726e-06|  0.01%|    def __init__(self):
    77|         7|  2.47955e-05|  3.54222e-06|  0.01%|        self.flags = 0
    78|         7|  2.28882e-05|  3.26974e-06|  0.01%|        self.groupdict = {}
    79|         7|  2.14577e-05|  3.06538e-06|  0.01%|        self.groupwidths = [None]  # group 0
    80|         7|  2.09808e-05|  2.99726e-06|  0.01%|        self.lookbehindgroups = None
    81|        24|  6.36578e-05|  2.65241e-06|  0.03%|    @property
    82|         0|            0|            0|  0.00%|    def groups(self):
    83|        24|  7.86781e-05|  3.27826e-06|  0.03%|        return len(self.groupwidths)
    84|         5|  1.83582e-05|  3.67165e-06|  0.01%|    def opengroup(self, name=None):
    85|         5|  3.93391e-05|  7.86781e-06|  0.02%|        gid = self.groups
(call)|         5|  3.02792e-05|  6.05583e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:81 groups
    86|         5|  2.07424e-05|  4.14848e-06|  0.01%|        self.groupwidths.append(None)
    87|         5|  3.98159e-05|  7.96318e-06|  0.02%|        if self.groups > MAXGROUPS:
(call)|         5|  2.74181e-05|  5.48363e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:81 groups
    88|         0|            0|            0|  0.00%|            raise error("too many groups")
    89|         5|  1.64509e-05|  3.29018e-06|  0.01%|        if name is not None:
    90|         3|  1.00136e-05|  3.33786e-06|  0.00%|            ogid = self.groupdict.get(name, None)
    91|         3|  9.77516e-06|  3.25839e-06|  0.00%|            if ogid is not None:
    92|         0|            0|            0|  0.00%|                raise error("redefinition of group name %r as group %d; "
    93|         0|            0|            0|  0.00%|                            "was group %d" % (name, gid,  ogid))
    94|         3|  1.00136e-05|  3.33786e-06|  0.00%|            self.groupdict[name] = gid
    95|         5|  1.95503e-05|  3.91006e-06|  0.01%|        return gid
    96|         5|  1.78814e-05|  3.57628e-06|  0.01%|    def closegroup(self, gid, p):
    97|         5|  4.57764e-05|  9.15527e-06|  0.02%|        self.groupwidths[gid] = p.getwidth()
(call)|         5|   0.00107193|  0.000214386|  0.44%|# /usr/lib/python3.10/sre_parse.py:174 getwidth
    98|         0|            0|            0|  0.00%|    def checkgroup(self, gid):
    99|         0|            0|            0|  0.00%|        return gid < self.groups and self.groupwidths[gid] is not None
   100|         0|            0|            0|  0.00%|
   101|         0|            0|            0|  0.00%|    def checklookbehindgroup(self, gid, source):
   102|         0|            0|            0|  0.00%|        if self.lookbehindgroups is not None:
   103|         0|            0|            0|  0.00%|            if not self.checkgroup(gid):
   104|         0|            0|            0|  0.00%|                raise source.error('cannot refer to an open group')
   105|         0|            0|            0|  0.00%|            if gid >= self.lookbehindgroups:
   106|         0|            0|            0|  0.00%|                raise source.error('cannot refer to group defined in the same '
   107|         0|            0|            0|  0.00%|                                   'lookbehind subpattern')
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|class SubPattern:
   110|         0|            0|            0|  0.00%|    # a subpattern, in intermediate form
   111|        25|  8.27312e-05|  3.30925e-06|  0.03%|    def __init__(self, state, data=None):
   112|        25|  8.01086e-05|  3.20435e-06|  0.03%|        self.state = state
   113|        25|  7.67708e-05|  3.07083e-06|  0.03%|        if data is None:
   114|        23|  7.12872e-05|  3.09944e-06|  0.03%|            data = []
   115|        25|  7.51019e-05|  3.00407e-06|  0.03%|        self.data = data
   116|        25|  7.39098e-05|  2.95639e-06|  0.03%|        self.width = None
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|    def dump(self, level=0):
   119|         0|            0|            0|  0.00%|        nl = True
   120|         0|            0|            0|  0.00%|        seqtypes = (tuple, list)
   121|         0|            0|            0|  0.00%|        for op, av in self.data:
   122|         0|            0|            0|  0.00%|            print(level*"  " + str(op), end='')
   123|         0|            0|            0|  0.00%|            if op is IN:
   124|         0|            0|            0|  0.00%|                # member sublanguage
   125|         0|            0|            0|  0.00%|                print()
   126|         0|            0|            0|  0.00%|                for op, a in av:
   127|         0|            0|            0|  0.00%|                    print((level+1)*"  " + str(op), a)
   128|         0|            0|            0|  0.00%|            elif op is BRANCH:
   129|         0|            0|            0|  0.00%|                print()
   130|         0|            0|            0|  0.00%|                for i, a in enumerate(av[1]):
   131|         0|            0|            0|  0.00%|                    if i:
   132|         0|            0|            0|  0.00%|                        print(level*"  " + "OR")
   133|         0|            0|            0|  0.00%|                    a.dump(level+1)
   134|         0|            0|            0|  0.00%|            elif op is GROUPREF_EXISTS:
   135|         0|            0|            0|  0.00%|                condgroup, item_yes, item_no = av
   136|         0|            0|            0|  0.00%|                print('', condgroup)
   137|         0|            0|            0|  0.00%|                item_yes.dump(level+1)
   138|         0|            0|            0|  0.00%|                if item_no:
   139|         0|            0|            0|  0.00%|                    print(level*"  " + "ELSE")
   140|         0|            0|            0|  0.00%|                    item_no.dump(level+1)
   141|         0|            0|            0|  0.00%|            elif isinstance(av, seqtypes):
   142|         0|            0|            0|  0.00%|                nl = False
   143|         0|            0|            0|  0.00%|                for a in av:
   144|         0|            0|            0|  0.00%|                    if isinstance(a, SubPattern):
   145|         0|            0|            0|  0.00%|                        if not nl:
   146|         0|            0|            0|  0.00%|                            print()
   147|         0|            0|            0|  0.00%|                        a.dump(level+1)
   148|         0|            0|            0|  0.00%|                        nl = True
   149|         0|            0|            0|  0.00%|                    else:
   150|         0|            0|            0|  0.00%|                        if not nl:
   151|         0|            0|            0|  0.00%|                            print(' ', end='')
   152|         0|            0|            0|  0.00%|                        print(a, end='')
   153|         0|            0|            0|  0.00%|                        nl = False
   154|         0|            0|            0|  0.00%|                if not nl:
   155|         0|            0|            0|  0.00%|                    print()
   156|         0|            0|            0|  0.00%|            else:
   157|         0|            0|            0|  0.00%|                print('', av)
   158|         0|            0|            0|  0.00%|    def __repr__(self):
   159|         0|            0|            0|  0.00%|        return repr(self.data)
   160|        39|  0.000118732|  3.04442e-06|  0.05%|    def __len__(self):
   161|        39|  0.000123739|   3.1728e-06|  0.05%|        return len(self.data)
   162|         0|            0|            0|  0.00%|    def __delitem__(self, index):
   163|         0|            0|            0|  0.00%|        del self.data[index]
   164|       110|  0.000332355|  3.02141e-06|  0.14%|    def __getitem__(self, index):
   165|       110|  0.000347137|   3.1558e-06|  0.14%|        if isinstance(index, slice):
   166|         2|  1.71661e-05|  8.58307e-06|  0.01%|            return SubPattern(self.state, self.data[index])
(call)|         2|  2.98023e-05|  1.49012e-05|  0.01%|# /usr/lib/python3.10/sre_parse.py:111 __init__
   167|       108|  0.000333786|  3.09061e-06|  0.14%|        return self.data[index]
   168|         2|  8.10623e-06|  4.05312e-06|  0.00%|    def __setitem__(self, index, code):
   169|         2|  7.15256e-06|  3.57628e-06|  0.00%|        self.data[index] = code
   170|         0|            0|            0|  0.00%|    def insert(self, index, code):
   171|         0|            0|            0|  0.00%|        self.data.insert(index, code)
   172|        47|  0.000151396|  3.22119e-06|  0.06%|    def append(self, code):
   173|        47|  0.000154734|  3.29221e-06|  0.06%|        self.data.append(code)
   174|        30|  9.98974e-05|  3.32991e-06|  0.04%|    def getwidth(self):
   175|         0|            0|            0|  0.00%|        # determine the width (min, max) for this subpattern
   176|        30|  0.000111818|  3.72728e-06|  0.05%|        if self.width is not None:
   177|         5|  1.78814e-05|  3.57628e-06|  0.01%|            return self.width
   178|        25|  9.15527e-05|  3.66211e-06|  0.04%|        lo = hi = 0
   179|        74|   0.00025773|  3.48284e-06|  0.11%|        for op, av in self.data:
   180|        49|  0.000166416|  3.39625e-06|  0.07%|            if op is BRANCH:
   181|         3|  1.21593e-05|  4.05312e-06|  0.01%|                i = MAXREPEAT - 1
   182|         3|  1.04904e-05|  3.49681e-06|  0.00%|                j = 0
   183|        14|  4.55379e-05|  3.25271e-06|  0.02%|                for av in av[1]:
   184|        11|  9.72748e-05|  8.84316e-06|  0.04%|                    l, h = av.getwidth()
(call)|        11|  0.000724554|  6.58686e-05|  0.30%|# /usr/lib/python3.10/sre_parse.py:174 getwidth
   185|        11|  3.79086e-05|  3.44623e-06|  0.02%|                    i = min(i, l)
   186|        11|  3.83854e-05|  3.48958e-06|  0.02%|                    j = max(j, h)
   187|         3|  1.00136e-05|  3.33786e-06|  0.00%|                lo = lo + i
   188|         3|  9.77516e-06|  3.25839e-06|  0.00%|                hi = hi + j
   189|        46|  0.000153542|  3.33786e-06|  0.06%|            elif op is CALL:
   190|         0|            0|            0|  0.00%|                i, j = av.getwidth()
   191|         0|            0|            0|  0.00%|                lo = lo + i
   192|         0|            0|            0|  0.00%|                hi = hi + j
   193|        46|  0.000155449|  3.37932e-06|  0.06%|            elif op is SUBPATTERN:
   194|         5|  4.91142e-05|  9.82285e-06|  0.02%|                i, j = av[-1].getwidth()
(call)|         5|  5.19753e-05|  1.03951e-05|  0.02%|# /usr/lib/python3.10/sre_parse.py:174 getwidth
   195|         5|  1.69277e-05|  3.38554e-06|  0.01%|                lo = lo + i
   196|         5|  1.97887e-05|  3.95775e-06|  0.01%|                hi = hi + j
   197|        41|  0.000136375|  3.32623e-06|  0.06%|            elif op in _REPEATCODES:
   198|         2|  2.00272e-05|  1.00136e-05|  0.01%|                i, j = av[2].getwidth()
(call)|         2|  9.75132e-05|  4.87566e-05|  0.04%|# /usr/lib/python3.10/sre_parse.py:174 getwidth
   199|         2|  9.05991e-06|  4.52995e-06|  0.00%|                lo = lo + i * av[0]
   200|         2|  9.29832e-06|  4.64916e-06|  0.00%|                hi = hi + j * av[1]
   201|        39|  0.000133514|  3.42345e-06|  0.05%|            elif op in _UNITCODES:
   202|        38|  0.000127077|  3.34413e-06|  0.05%|                lo = lo + 1
   203|        38|  0.000131369|  3.45707e-06|  0.05%|                hi = hi + 1
   204|         1|   3.8147e-06|   3.8147e-06|  0.00%|            elif op is GROUPREF:
   205|         0|            0|            0|  0.00%|                i, j = self.state.groupwidths[av]
   206|         0|            0|            0|  0.00%|                lo = lo + i
   207|         0|            0|            0|  0.00%|                hi = hi + j
   208|         1|  4.52995e-06|  4.52995e-06|  0.00%|            elif op is GROUPREF_EXISTS:
   209|         0|            0|            0|  0.00%|                i, j = av[1].getwidth()
   210|         0|            0|            0|  0.00%|                if av[2] is not None:
   211|         0|            0|            0|  0.00%|                    l, h = av[2].getwidth()
   212|         0|            0|            0|  0.00%|                    i = min(i, l)
   213|         0|            0|            0|  0.00%|                    j = max(j, h)
   214|         0|            0|            0|  0.00%|                else:
   215|         0|            0|            0|  0.00%|                    i = 0
   216|         0|            0|            0|  0.00%|                lo = lo + i
   217|         0|            0|            0|  0.00%|                hi = hi + j
   218|         1|  5.24521e-06|  5.24521e-06|  0.00%|            elif op is SUCCESS:
   219|         0|            0|            0|  0.00%|                break
   220|        25|  0.000101805|  4.07219e-06|  0.04%|        self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)
   221|        25|  8.63075e-05|   3.4523e-06|  0.04%|        return self.width
   222|         0|            0|            0|  0.00%|
   223|         0|            0|            0|  0.00%|class Tokenizer:
   224|         9|  2.83718e-05|  3.15242e-06|  0.01%|    def __init__(self, string):
   225|         9|  3.14713e-05|  3.49681e-06|  0.01%|        self.istext = isinstance(string, str)
   226|         9|  3.00407e-05|  3.33786e-06|  0.01%|        self.string = string
   227|         9|  2.83718e-05|  3.15242e-06|  0.01%|        if not self.istext:
   228|         0|            0|            0|  0.00%|            string = str(string, 'latin1')
   229|         9|  2.88486e-05|  3.20541e-06|  0.01%|        self.decoded_string = string
   230|         9|  2.86102e-05|  3.17891e-06|  0.01%|        self.index = 0
   231|         9|   2.6226e-05|    2.914e-06|  0.01%|        self.next = None
   232|         9|   7.4625e-05|  8.29167e-06|  0.03%|        self.__next()
(call)|         9|  0.000240326|  2.67029e-05|  0.10%|# /usr/lib/python3.10/sre_parse.py:233 __next
   233|       142|  0.000379801|  2.67465e-06|  0.16%|    def __next(self):
   234|       142|  0.000442028|  3.11287e-06|  0.18%|        index = self.index
   235|       142|  0.000423431|  2.98191e-06|  0.17%|        try:
   236|       142|  0.000445604|  3.13806e-06|  0.18%|            char = self.decoded_string[index]
   237|        11|  3.48091e-05|  3.16446e-06|  0.01%|        except IndexError:
   238|        11|  3.76701e-05|  3.42456e-06|  0.02%|            self.next = None
   239|        11|  3.74317e-05|  3.40288e-06|  0.02%|            return
   240|       131|   0.00039053|  2.98114e-06|  0.16%|        if char == "\\":
   241|        18|  5.07832e-05|  2.82129e-06|  0.02%|            index += 1
   242|        18|  5.26905e-05|  2.92725e-06|  0.02%|            try:
   243|        18|  5.60284e-05|  3.11269e-06|  0.02%|                char += self.decoded_string[index]
   244|         0|            0|            0|  0.00%|            except IndexError:
   245|         0|            0|            0|  0.00%|                raise error("bad escape (end of pattern)",
   246|         0|            0|            0|  0.00%|                            self.string, len(self.string) - 1) from None
   247|       131|  0.000400305|  3.05576e-06|  0.16%|        self.index = index + 1
   248|       131|  0.000391483|  2.98842e-06|  0.16%|        self.next = char
   249|        71|  0.000218868|  3.08265e-06|  0.09%|    def match(self, char):
   250|        71|  0.000222921|  3.13974e-06|  0.09%|        if char == self.next:
   251|        27|  0.000207663|  7.69121e-06|  0.09%|            self.__next()
(call)|        27|  0.000588417|  2.17932e-05|  0.24%|# /usr/lib/python3.10/sre_parse.py:233 __next
   252|        27|  8.08239e-05|  2.99348e-06|  0.03%|            return True
   253|        44|  0.000130177|  2.95856e-06|  0.05%|        return False
   254|       100|  0.000324249|  3.24249e-06|  0.13%|    def get(self):
   255|       100|  0.000303268|  3.03268e-06|  0.12%|        this = self.next
   256|       100|  0.000764847|  7.64847e-06|  0.31%|        self.__next()
(call)|       100|   0.00218225|  2.18225e-05|  0.90%|# /usr/lib/python3.10/sre_parse.py:233 __next
   257|       100|  0.000294209|  2.94209e-06|  0.12%|        return this
   258|         0|            0|            0|  0.00%|    def getwhile(self, n, charset):
   259|         0|            0|            0|  0.00%|        result = ''
   260|         0|            0|            0|  0.00%|        for _ in range(n):
   261|         0|            0|            0|  0.00%|            c = self.next
   262|         0|            0|            0|  0.00%|            if c not in charset:
   263|         0|            0|            0|  0.00%|                break
   264|         0|            0|            0|  0.00%|            result += c
   265|         0|            0|            0|  0.00%|            self.__next()
   266|         0|            0|            0|  0.00%|        return result
   267|         3|  1.21593e-05|  4.05312e-06|  0.01%|    def getuntil(self, terminator, name):
   268|         3|  1.04904e-05|  3.49681e-06|  0.00%|        result = ''
   269|         6|  2.02656e-05|   3.3776e-06|  0.01%|        while True:
   270|         6|  1.97887e-05|  3.29812e-06|  0.01%|            c = self.next
   271|         6|  4.95911e-05|  8.26518e-06|  0.02%|            self.__next()
(call)|         6|  0.000131607|  2.19345e-05|  0.05%|# /usr/lib/python3.10/sre_parse.py:233 __next
   272|         6|  2.09808e-05|  3.49681e-06|  0.01%|            if c is None:
   273|         0|            0|            0|  0.00%|                if not result:
   274|         0|            0|            0|  0.00%|                    raise self.error("missing " + name)
   275|         0|            0|            0|  0.00%|                raise self.error("missing %s, unterminated name" % terminator,
   276|         0|            0|            0|  0.00%|                                 len(result))
   277|         6|  1.88351e-05|  3.13918e-06|  0.01%|            if c == terminator:
   278|         3|  8.58307e-06|  2.86102e-06|  0.00%|                if not result:
   279|         0|            0|            0|  0.00%|                    raise self.error("missing " + name, 1)
   280|         3|  9.53674e-06|  3.17891e-06|  0.00%|                break
   281|         3|  9.29832e-06|  3.09944e-06|  0.00%|            result += c
   282|         3|  9.77516e-06|  3.25839e-06|  0.00%|        return result
   283|         0|            0|            0|  0.00%|    @property
   284|         0|            0|            0|  0.00%|    def pos(self):
   285|         0|            0|            0|  0.00%|        return self.index - len(self.next or '')
   286|        29|  8.91685e-05|  3.07478e-06|  0.04%|    def tell(self):
   287|        29|  9.82285e-05|  3.38719e-06|  0.04%|        return self.index - len(self.next or '')
   288|         0|            0|            0|  0.00%|    def seek(self, index):
   289|         0|            0|            0|  0.00%|        self.index = index
   290|         0|            0|            0|  0.00%|        self.__next()
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|    def error(self, msg, offset=0):
   293|         0|            0|            0|  0.00%|        return error(msg, self.string, self.tell() - offset)
   294|         0|            0|            0|  0.00%|
   295|         5|  2.19345e-05|   4.3869e-06|  0.01%|def _class_escape(source, escape):
   296|         0|            0|            0|  0.00%|    # handle escape code inside character class
   297|         5|  2.07424e-05|  4.14848e-06|  0.01%|    code = ESCAPES.get(escape)
   298|         5|  1.93119e-05|  3.86238e-06|  0.01%|    if code:
   299|         1|   3.8147e-06|   3.8147e-06|  0.00%|        return code
   300|         4|  1.43051e-05|  3.57628e-06|  0.01%|    code = CATEGORIES.get(escape)
   301|         4|   1.4782e-05|  3.69549e-06|  0.01%|    if code and code[0] is IN:
   302|         0|            0|            0|  0.00%|        return code
   303|         4|  1.40667e-05|  3.51667e-06|  0.01%|    try:
   304|         4|  1.54972e-05|   3.8743e-06|  0.01%|        c = escape[1:2]
   305|         4|  1.40667e-05|  3.51667e-06|  0.01%|        if c == "x":
   306|         0|            0|            0|  0.00%|            # hexadecimal escape (exactly two digits)
   307|         0|            0|            0|  0.00%|            escape += source.getwhile(2, HEXDIGITS)
   308|         0|            0|            0|  0.00%|            if len(escape) != 4:
   309|         0|            0|            0|  0.00%|                raise source.error("incomplete escape %s" % escape, len(escape))
   310|         0|            0|            0|  0.00%|            return LITERAL, int(escape[2:], 16)
   311|         4|  1.28746e-05|  3.21865e-06|  0.01%|        elif c == "u" and source.istext:
   312|         0|            0|            0|  0.00%|            # unicode escape (exactly four digits)
   313|         0|            0|            0|  0.00%|            escape += source.getwhile(4, HEXDIGITS)
   314|         0|            0|            0|  0.00%|            if len(escape) != 6:
   315|         0|            0|            0|  0.00%|                raise source.error("incomplete escape %s" % escape, len(escape))
   316|         0|            0|            0|  0.00%|            return LITERAL, int(escape[2:], 16)
   317|         4|  1.45435e-05|  3.63588e-06|  0.01%|        elif c == "U" and source.istext:
   318|         0|            0|            0|  0.00%|            # unicode escape (exactly eight digits)
   319|         0|            0|            0|  0.00%|            escape += source.getwhile(8, HEXDIGITS)
   320|         0|            0|            0|  0.00%|            if len(escape) != 10:
   321|         0|            0|            0|  0.00%|                raise source.error("incomplete escape %s" % escape, len(escape))
   322|         0|            0|            0|  0.00%|            c = int(escape[2:], 16)
   323|         0|            0|            0|  0.00%|            chr(c) # raise ValueError for invalid code
   324|         0|            0|            0|  0.00%|            return LITERAL, c
   325|         4|  1.40667e-05|  3.51667e-06|  0.01%|        elif c == "N" and source.istext:
   326|         0|            0|            0|  0.00%|            import unicodedata
   327|         0|            0|            0|  0.00%|            # named unicode escape e.g. \N{EM DASH}
   328|         0|            0|            0|  0.00%|            if not source.match('{'):
   329|         0|            0|            0|  0.00%|                raise source.error("missing {")
   330|         0|            0|            0|  0.00%|            charname = source.getuntil('}', 'character name')
   331|         0|            0|            0|  0.00%|            try:
   332|         0|            0|            0|  0.00%|                c = ord(unicodedata.lookup(charname))
   333|         0|            0|            0|  0.00%|            except KeyError:
   334|         0|            0|            0|  0.00%|                raise source.error("undefined character name %r" % charname,
   335|         0|            0|            0|  0.00%|                                   len(charname) + len(r'\N{}'))
   336|         0|            0|            0|  0.00%|            return LITERAL, c
   337|         4|  1.40667e-05|  3.51667e-06|  0.01%|        elif c in OCTDIGITS:
   338|         0|            0|            0|  0.00%|            # octal escape (up to three digits)
   339|         0|            0|            0|  0.00%|            escape += source.getwhile(2, OCTDIGITS)
   340|         0|            0|            0|  0.00%|            c = int(escape[1:], 8)
   341|         0|            0|            0|  0.00%|            if c > 0o377:
   342|         0|            0|            0|  0.00%|                raise source.error('octal escape value %s outside of '
   343|         0|            0|            0|  0.00%|                                   'range 0-0o377' % escape, len(escape))
   344|         0|            0|            0|  0.00%|            return LITERAL, c
   345|         4|  1.43051e-05|  3.57628e-06|  0.01%|        elif c in DIGITS:
   346|         0|            0|            0|  0.00%|            raise ValueError
   347|         4|  1.35899e-05|  3.39746e-06|  0.01%|        if len(escape) == 2:
   348|         4|  1.40667e-05|  3.51667e-06|  0.01%|            if c in ASCIILETTERS:
   349|         0|            0|            0|  0.00%|                raise source.error('bad escape %s' % escape, len(escape))
   350|         4|  1.71661e-05|  4.29153e-06|  0.01%|            return LITERAL, ord(escape[1])
   351|         0|            0|            0|  0.00%|    except ValueError:
   352|         0|            0|            0|  0.00%|        pass
   353|         0|            0|            0|  0.00%|    raise source.error("bad escape %s" % escape, len(escape))
   354|         0|            0|            0|  0.00%|
   355|        10|  4.14848e-05|  4.14848e-06|  0.02%|def _escape(source, escape, state):
   356|         0|            0|            0|  0.00%|    # handle escape code in expression
   357|        10|  4.07696e-05|  4.07696e-06|  0.02%|    code = CATEGORIES.get(escape)
   358|        10|  3.79086e-05|  3.79086e-06|  0.02%|    if code:
   359|         6|  2.14577e-05|  3.57628e-06|  0.01%|        return code
   360|         4|  1.62125e-05|  4.05312e-06|  0.01%|    code = ESCAPES.get(escape)
   361|         4|  1.45435e-05|  3.63588e-06|  0.01%|    if code:
   362|         4|  1.40667e-05|  3.51667e-06|  0.01%|        return code
   363|         0|            0|            0|  0.00%|    try:
   364|         0|            0|            0|  0.00%|        c = escape[1:2]
   365|         0|            0|            0|  0.00%|        if c == "x":
   366|         0|            0|            0|  0.00%|            # hexadecimal escape
   367|         0|            0|            0|  0.00%|            escape += source.getwhile(2, HEXDIGITS)
   368|         0|            0|            0|  0.00%|            if len(escape) != 4:
   369|         0|            0|            0|  0.00%|                raise source.error("incomplete escape %s" % escape, len(escape))
   370|         0|            0|            0|  0.00%|            return LITERAL, int(escape[2:], 16)
   371|         0|            0|            0|  0.00%|        elif c == "u" and source.istext:
   372|         0|            0|            0|  0.00%|            # unicode escape (exactly four digits)
   373|         0|            0|            0|  0.00%|            escape += source.getwhile(4, HEXDIGITS)
   374|         0|            0|            0|  0.00%|            if len(escape) != 6:
   375|         0|            0|            0|  0.00%|                raise source.error("incomplete escape %s" % escape, len(escape))
   376|         0|            0|            0|  0.00%|            return LITERAL, int(escape[2:], 16)
   377|         0|            0|            0|  0.00%|        elif c == "U" and source.istext:
   378|         0|            0|            0|  0.00%|            # unicode escape (exactly eight digits)
   379|         0|            0|            0|  0.00%|            escape += source.getwhile(8, HEXDIGITS)
   380|         0|            0|            0|  0.00%|            if len(escape) != 10:
   381|         0|            0|            0|  0.00%|                raise source.error("incomplete escape %s" % escape, len(escape))
   382|         0|            0|            0|  0.00%|            c = int(escape[2:], 16)
   383|         0|            0|            0|  0.00%|            chr(c) # raise ValueError for invalid code
   384|         0|            0|            0|  0.00%|            return LITERAL, c
   385|         0|            0|            0|  0.00%|        elif c == "N" and source.istext:
   386|         0|            0|            0|  0.00%|            import unicodedata
   387|         0|            0|            0|  0.00%|            # named unicode escape e.g. \N{EM DASH}
   388|         0|            0|            0|  0.00%|            if not source.match('{'):
   389|         0|            0|            0|  0.00%|                raise source.error("missing {")
   390|         0|            0|            0|  0.00%|            charname = source.getuntil('}', 'character name')
   391|         0|            0|            0|  0.00%|            try:
   392|         0|            0|            0|  0.00%|                c = ord(unicodedata.lookup(charname))
   393|         0|            0|            0|  0.00%|            except KeyError:
   394|         0|            0|            0|  0.00%|                raise source.error("undefined character name %r" % charname,
   395|         0|            0|            0|  0.00%|                                   len(charname) + len(r'\N{}'))
   396|         0|            0|            0|  0.00%|            return LITERAL, c
   397|         0|            0|            0|  0.00%|        elif c == "0":
   398|         0|            0|            0|  0.00%|            # octal escape
   399|         0|            0|            0|  0.00%|            escape += source.getwhile(2, OCTDIGITS)
   400|         0|            0|            0|  0.00%|            return LITERAL, int(escape[1:], 8)
   401|         0|            0|            0|  0.00%|        elif c in DIGITS:
   402|         0|            0|            0|  0.00%|            # octal escape *or* decimal group reference (sigh)
   403|         0|            0|            0|  0.00%|            if source.next in DIGITS:
   404|         0|            0|            0|  0.00%|                escape += source.get()
   405|         0|            0|            0|  0.00%|                if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and
   406|         0|            0|            0|  0.00%|                    source.next in OCTDIGITS):
   407|         0|            0|            0|  0.00%|                    # got three octal digits; this is an octal escape
   408|         0|            0|            0|  0.00%|                    escape += source.get()
   409|         0|            0|            0|  0.00%|                    c = int(escape[1:], 8)
   410|         0|            0|            0|  0.00%|                    if c > 0o377:
   411|         0|            0|            0|  0.00%|                        raise source.error('octal escape value %s outside of '
   412|         0|            0|            0|  0.00%|                                           'range 0-0o377' % escape,
   413|         0|            0|            0|  0.00%|                                           len(escape))
   414|         0|            0|            0|  0.00%|                    return LITERAL, c
   415|         0|            0|            0|  0.00%|            # not an octal escape, so this is a group reference
   416|         0|            0|            0|  0.00%|            group = int(escape[1:])
   417|         0|            0|            0|  0.00%|            if group < state.groups:
   418|         0|            0|            0|  0.00%|                if not state.checkgroup(group):
   419|         0|            0|            0|  0.00%|                    raise source.error("cannot refer to an open group",
   420|         0|            0|            0|  0.00%|                                       len(escape))
   421|         0|            0|            0|  0.00%|                state.checklookbehindgroup(group, source)
   422|         0|            0|            0|  0.00%|                return GROUPREF, group
   423|         0|            0|            0|  0.00%|            raise source.error("invalid group reference %d" % group, len(escape) - 1)
   424|         0|            0|            0|  0.00%|        if len(escape) == 2:
   425|         0|            0|            0|  0.00%|            if c in ASCIILETTERS:
   426|         0|            0|            0|  0.00%|                raise source.error("bad escape %s" % escape, len(escape))
   427|         0|            0|            0|  0.00%|            return LITERAL, ord(escape[1])
   428|         0|            0|            0|  0.00%|    except ValueError:
   429|         0|            0|            0|  0.00%|        pass
   430|         0|            0|            0|  0.00%|    raise source.error("bad escape %s" % escape, len(escape))
   431|         0|            0|            0|  0.00%|
   432|        10|  3.43323e-05|  3.43323e-06|  0.01%|def _uniq(items):
   433|        10|  5.45979e-05|  5.45979e-06|  0.02%|    return list(dict.fromkeys(items))
   434|         0|            0|            0|  0.00%|
   435|        12|  5.31673e-05|  4.43061e-06|  0.02%|def _parse_sub(source, state, verbose, nested):
   436|         0|            0|            0|  0.00%|    # parse an alternation: a|b|c
   437|         0|            0|            0|  0.00%|
   438|        12|  5.10216e-05|   4.2518e-06|  0.02%|    items = []
   439|        12|  5.05447e-05|  4.21206e-06|  0.02%|    itemsappend = items.append
   440|        12|  4.69685e-05|  3.91404e-06|  0.02%|    sourcematch = source.match
   441|        12|   0.00010848|  9.04004e-06|  0.04%|    start = source.tell()
(call)|        12|  7.62939e-05|  6.35783e-06|  0.03%|# /usr/lib/python3.10/sre_parse.py:286 tell
   442|        20|  7.72476e-05|  3.86238e-06|  0.03%|    while True:
   443|        40|  0.000366688|  9.16719e-06|  0.15%|        itemsappend(_parse(source, state, verbose, nested + 1,
(call)|        20|    0.0212502|   0.00106251|  8.75%|# /usr/lib/python3.10/sre_parse.py:493 _parse
   444|        20|  7.39098e-05|  3.69549e-06|  0.03%|                           not nested and not items))
   445|        20|  0.000170708|  8.53539e-06|  0.07%|        if not sourcematch("|"):
(call)|        20|  0.000431299|   2.1565e-05|  0.18%|# /usr/lib/python3.10/sre_parse.py:249 match
   446|        12|  4.22001e-05|  3.51667e-06|  0.02%|            break
   447|         0|            0|            0|  0.00%|
   448|        12|  5.88894e-05|  4.90745e-06|  0.02%|    if len(items) == 1:
   449|         9|  3.45707e-05|  3.84119e-06|  0.01%|        return items[0]
   450|         0|            0|            0|  0.00%|
   451|         3|  2.71797e-05|  9.05991e-06|  0.01%|    subpattern = SubPattern(state)
(call)|         3|  5.29289e-05|   1.7643e-05|  0.02%|# /usr/lib/python3.10/sre_parse.py:111 __init__
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|    # check if all items share a common prefix
   454|         3|  1.16825e-05|  3.89417e-06|  0.00%|    while True:
   455|         3|  3.67165e-05|  1.22388e-05|  0.02%|        prefix = None
   456|         7|  2.98023e-05|  4.25747e-06|  0.01%|        for item in items:
   457|         7|   5.8651e-05|  8.37871e-06|  0.02%|            if not item:
(call)|         7|  4.07696e-05|  5.82423e-06|  0.02%|# /usr/lib/python3.10/sre_parse.py:160 __len__
   458|         0|            0|            0|  0.00%|                break
   459|         7|  2.45571e-05|  3.50816e-06|  0.01%|            if prefix is None:
   460|         3|  2.52724e-05|  8.42412e-06|  0.01%|                prefix = item[0]
(call)|         3|  2.83718e-05|  9.45727e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   461|         4|  3.48091e-05|  8.70228e-06|  0.01%|            elif item[0] != prefix:
(call)|         4|  3.33786e-05|  8.34465e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   462|         3|   1.0252e-05|  3.41733e-06|  0.00%|                break
   463|         0|            0|            0|  0.00%|        else:
   464|         0|            0|            0|  0.00%|            # all subitems start with a common "prefix".
   465|         0|            0|            0|  0.00%|            # move it out of the branch
   466|         0|            0|            0|  0.00%|            for item in items:
   467|         0|            0|            0|  0.00%|                del item[0]
   468|         0|            0|            0|  0.00%|            subpattern.append(prefix)
   469|         0|            0|            0|  0.00%|            continue # check next one
   470|         3|  1.12057e-05|  3.73522e-06|  0.00%|        break
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|    # check if the branch can be replaced by a character set
   473|         3|  1.04904e-05|  3.49681e-06|  0.00%|    set = []
   474|         3|  1.12057e-05|  3.73522e-06|  0.00%|    for item in items:
   475|         3|  2.47955e-05|  8.26518e-06|  0.01%|        if len(item) != 1:
(call)|         3|  1.71661e-05|  5.72205e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:160 __len__
   476|         3|  1.14441e-05|   3.8147e-06|  0.00%|            break
   477|         0|            0|            0|  0.00%|        op, av = item[0]
   478|         0|            0|            0|  0.00%|        if op is LITERAL:
   479|         0|            0|            0|  0.00%|            set.append((op, av))
   480|         0|            0|            0|  0.00%|        elif op is IN and av[0][0] is not NEGATE:
   481|         0|            0|            0|  0.00%|            set.extend(av)
   482|         0|            0|            0|  0.00%|        else:
   483|         0|            0|            0|  0.00%|            break
   484|         0|            0|            0|  0.00%|    else:
   485|         0|            0|            0|  0.00%|        # we can store this as a character set instead of a
   486|         0|            0|            0|  0.00%|        # branch (the compiler may optimize this even more)
   487|         0|            0|            0|  0.00%|        subpattern.append((IN, _uniq(set)))
   488|         0|            0|            0|  0.00%|        return subpattern
   489|         0|            0|            0|  0.00%|
   490|         3|  2.57492e-05|  8.58307e-06|  0.01%|    subpattern.append((BRANCH, (None, items)))
(call)|         3|  1.78814e-05|  5.96046e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:172 append
   491|         3|  1.07288e-05|  3.57628e-06|  0.00%|    return subpattern
   492|         0|            0|            0|  0.00%|
   493|        20|  0.000147104|  7.35521e-06|  0.06%|def _parse(source, state, verbose, nested, first=False):
   494|         0|            0|            0|  0.00%|    # parse a simple pattern
   495|        20|  0.000276804|  1.38402e-05|  0.11%|    subpattern = SubPattern(state)
(call)|        20|  0.000377178|  1.88589e-05|  0.16%|# /usr/lib/python3.10/sre_parse.py:111 __init__
   496|         0|            0|            0|  0.00%|
   497|         0|            0|            0|  0.00%|    # precompute constants into local variables
   498|        20|   0.00014019|  7.00951e-06|  0.06%|    subpatternappend = subpattern.append
   499|        20|   0.00013876|  6.93798e-06|  0.06%|    sourceget = source.get
   500|        20|  0.000161648|  8.08239e-06|  0.07%|    sourcematch = source.match
   501|        20|   0.00014019|  7.00951e-06|  0.06%|    _len = len
   502|        20|  0.000148296|  7.41482e-06|  0.06%|    _ord = ord
   503|         0|            0|            0|  0.00%|
   504|        66|  0.000494957|  7.49935e-06|  0.20%|    while True:
   505|         0|            0|            0|  0.00%|
   506|        66|  0.000442743|  6.70823e-06|  0.18%|        this = source.next
   507|        66|  0.000415325|  6.29281e-06|  0.17%|        if this is None:
   508|         7|  4.74453e-05|   6.7779e-06|  0.02%|            break # end of pattern
   509|        59|  0.000373363|  6.32819e-06|  0.15%|        if this in "|)":
   510|        13|  8.72612e-05|   6.7124e-06|  0.04%|            break # end of subpattern
   511|        46|  0.000559568|  1.21645e-05|  0.23%|        sourceget()
(call)|        46|   0.00179315|  3.89814e-05|  0.74%|# /usr/lib/python3.10/sre_parse.py:254 get
   512|         0|            0|            0|  0.00%|
   513|        46|  0.000297546|   6.4684e-06|  0.12%|        if verbose:
   514|         0|            0|            0|  0.00%|            # skip whitespace and comments
   515|         0|            0|            0|  0.00%|            if this in WHITESPACE:
   516|         0|            0|            0|  0.00%|                continue
   517|         0|            0|            0|  0.00%|            if this == "#":
   518|         0|            0|            0|  0.00%|                while True:
   519|         0|            0|            0|  0.00%|                    this = sourceget()
   520|         0|            0|            0|  0.00%|                    if this is None or this == "\n":
   521|         0|            0|            0|  0.00%|                        break
   522|         0|            0|            0|  0.00%|                continue
   523|         0|            0|            0|  0.00%|
   524|        46|  0.000297308|  6.46322e-06|  0.12%|        if this[0] == "\\":
   525|        10|  0.000138044|  1.38044e-05|  0.06%|            code = _escape(source, this, state)
(call)|        10|  0.000186443|  1.86443e-05|  0.08%|# /usr/lib/python3.10/sre_parse.py:355 _escape
   526|        10|  0.000132322|  1.32322e-05|  0.05%|            subpatternappend(code)
(call)|        10|  6.48499e-05|  6.48499e-06|  0.03%|# /usr/lib/python3.10/sre_parse.py:172 append
   527|         0|            0|            0|  0.00%|
   528|        36|  0.000231504|  6.43068e-06|  0.10%|        elif this not in SPECIAL_CHARS:
   529|        17|  0.000221252|  1.30148e-05|  0.09%|            subpatternappend((LITERAL, _ord(this)))
(call)|        17|   0.00011158|  6.56352e-06|  0.05%|# /usr/lib/python3.10/sre_parse.py:172 append
   530|         0|            0|            0|  0.00%|
   531|        19|  0.000155687|  8.19407e-06|  0.06%|        elif this == "[":
   532|        10|  0.000127077|  1.27077e-05|  0.05%|            here = source.tell() - 1
(call)|        10|  6.46114e-05|  6.46114e-06|  0.03%|# /usr/lib/python3.10/sre_parse.py:286 tell
   533|         0|            0|            0|  0.00%|            # character set
   534|        10|  6.96182e-05|  6.96182e-06|  0.03%|            set = []
   535|        10|  6.50883e-05|  6.50883e-06|  0.03%|            setappend = set.append
   536|         0|            0|            0|  0.00%|##          if sourcematch(":"):
   537|         0|            0|            0|  0.00%|##              pass # handle character classes
   538|        10|  6.60419e-05|  6.60419e-06|  0.03%|            if source.next == '[':
   539|         0|            0|            0|  0.00%|                import warnings
   540|         0|            0|            0|  0.00%|                warnings.warn(
   541|         0|            0|            0|  0.00%|                    'Possible nested set at position %d' % source.tell(),
   542|         0|            0|            0|  0.00%|                    FutureWarning, stacklevel=nested + 6
   543|         0|            0|            0|  0.00%|                )
   544|        10|  0.000123501|  1.23501e-05|  0.05%|            negate = sourcematch("^")
(call)|        10|  9.39369e-05|  9.39369e-06|  0.04%|# /usr/lib/python3.10/sre_parse.py:249 match
   545|         0|            0|            0|  0.00%|            # check remaining characters
   546|        36|  0.000235081|  6.53002e-06|  0.10%|            while True:
   547|        36|  0.000433445|  1.20401e-05|  0.18%|                this = sourceget()
(call)|        36|   0.00138497|  3.84715e-05|  0.57%|# /usr/lib/python3.10/sre_parse.py:254 get
   548|        36|  0.000225782|  6.27173e-06|  0.09%|                if this is None:
   549|         0|            0|            0|  0.00%|                    raise source.error("unterminated character set",
   550|         0|            0|            0|  0.00%|                                       source.tell() - here)
   551|        36|  0.000228167|  6.33796e-06|  0.09%|                if this == "]" and set:
   552|        10|  6.19888e-05|  6.19888e-06|  0.03%|                    break
   553|        26|  0.000164032|  6.30892e-06|  0.07%|                elif this[0] == "\\":
   554|         5|  7.22408e-05|  1.44482e-05|  0.03%|                    code1 = _class_escape(source, this)
(call)|         5|  0.000253201|  5.06401e-05|  0.10%|# /usr/lib/python3.10/sre_parse.py:295 _class_escape
   555|         0|            0|            0|  0.00%|                else:
   556|        21|  0.000131845|  6.27836e-06|  0.05%|                    if set and this in '-&~|' and source.next == this:
   557|         0|            0|            0|  0.00%|                        import warnings
   558|         0|            0|            0|  0.00%|                        warnings.warn(
   559|         0|            0|            0|  0.00%|                            'Possible set %s at position %d' % (
   560|         0|            0|            0|  0.00%|                                'difference' if this == '-' else
   561|         0|            0|            0|  0.00%|                                'intersection' if this == '&' else
   562|         0|            0|            0|  0.00%|                                'symmetric difference' if this == '~' else
   563|         0|            0|            0|  0.00%|                                'union',
   564|         0|            0|            0|  0.00%|                                source.tell() - 1),
   565|         0|            0|            0|  0.00%|                            FutureWarning, stacklevel=nested + 6
   566|         0|            0|            0|  0.00%|                        )
   567|        21|  0.000134945|  6.42595e-06|  0.06%|                    code1 = LITERAL, _ord(this)
   568|        26|  0.000317097|   1.2196e-05|  0.13%|                if sourcematch("-"):
(call)|        26|  0.000463486|  1.78264e-05|  0.19%|# /usr/lib/python3.10/sre_parse.py:249 match
   569|         0|            0|            0|  0.00%|                    # potential range
   570|         8|   0.00012517|  1.56462e-05|  0.05%|                    that = sourceget()
(call)|         8|  0.000302076|  3.77595e-05|  0.12%|# /usr/lib/python3.10/sre_parse.py:254 get
   571|         8|  5.36442e-05|  6.70552e-06|  0.02%|                    if that is None:
   572|         0|            0|            0|  0.00%|                        raise source.error("unterminated character set",
   573|         0|            0|            0|  0.00%|                                           source.tell() - here)
   574|         8|  5.22137e-05|  6.52671e-06|  0.02%|                    if that == "]":
   575|         0|            0|            0|  0.00%|                        if code1[0] is IN:
   576|         0|            0|            0|  0.00%|                            code1 = code1[1][0]
   577|         0|            0|            0|  0.00%|                        setappend(code1)
   578|         0|            0|            0|  0.00%|                        setappend((LITERAL, _ord("-")))
   579|         0|            0|            0|  0.00%|                        break
   580|         8|  5.29289e-05|  6.61612e-06|  0.02%|                    if that[0] == "\\":
   581|         0|            0|            0|  0.00%|                        code2 = _class_escape(source, that)
   582|         0|            0|            0|  0.00%|                    else:
   583|         8|  4.98295e-05|  6.22869e-06|  0.02%|                        if that == '-':
   584|         0|            0|            0|  0.00%|                            import warnings
   585|         0|            0|            0|  0.00%|                            warnings.warn(
   586|         0|            0|            0|  0.00%|                                'Possible set difference at position %d' % (
   587|         0|            0|            0|  0.00%|                                    source.tell() - 2),
   588|         0|            0|            0|  0.00%|                                FutureWarning, stacklevel=nested + 6
   589|         0|            0|            0|  0.00%|                            )
   590|         8|  5.10216e-05|   6.3777e-06|  0.02%|                        code2 = LITERAL, _ord(that)
   591|         8|  5.48363e-05|  6.85453e-06|  0.02%|                    if code1[0] != LITERAL or code2[0] != LITERAL:
   592|         0|            0|            0|  0.00%|                        msg = "bad character range %s-%s" % (this, that)
   593|         0|            0|            0|  0.00%|                        raise source.error(msg, len(this) + 1 + len(that))
   594|         8|  5.05447e-05|  6.31809e-06|  0.02%|                    lo = code1[1]
   595|         8|  5.17368e-05|   6.4671e-06|  0.02%|                    hi = code2[1]
   596|         8|  5.10216e-05|   6.3777e-06|  0.02%|                    if hi < lo:
   597|         0|            0|            0|  0.00%|                        msg = "bad character range %s-%s" % (this, that)
   598|         0|            0|            0|  0.00%|                        raise source.error(msg, len(this) + 1 + len(that))
   599|         8|  5.22137e-05|  6.52671e-06|  0.02%|                    setappend((RANGE, (lo, hi)))
   600|         0|            0|            0|  0.00%|                else:
   601|        18|   0.00011611|  6.45055e-06|  0.05%|                    if code1[0] is IN:
   602|         0|            0|            0|  0.00%|                        code1 = code1[1][0]
   603|        18|  0.000113487|  6.30485e-06|  0.05%|                    setappend(code1)
   604|         0|            0|            0|  0.00%|
   605|        10|    0.0001297|    1.297e-05|  0.05%|            set = _uniq(set)
(call)|        10|  8.89301e-05|  8.89301e-06|  0.04%|# /usr/lib/python3.10/sre_parse.py:432 _uniq
   606|         0|            0|            0|  0.00%|            # XXX: <fl> should move set optimization to compiler!
   607|        10|  6.48499e-05|  6.48499e-06|  0.03%|            if _len(set) == 1 and set[0][0] is LITERAL:
   608|         0|            0|            0|  0.00%|                # optimization
   609|         0|            0|            0|  0.00%|                if negate:
   610|         0|            0|            0|  0.00%|                    subpatternappend((NOT_LITERAL, set[0][1]))
   611|         0|            0|            0|  0.00%|                else:
   612|         0|            0|            0|  0.00%|                    subpatternappend(set[0])
   613|         0|            0|            0|  0.00%|            else:
   614|        10|  6.36578e-05|  6.36578e-06|  0.03%|                if negate:
   615|         0|            0|            0|  0.00%|                    set.insert(0, (NEGATE, None))
   616|         0|            0|            0|  0.00%|                # charmap optimization can't be added here because
   617|         0|            0|            0|  0.00%|                # global flags still are not known
   618|        10|  0.000128984|  1.28984e-05|  0.05%|                subpatternappend((IN, set))
(call)|        10|  6.67572e-05|  6.67572e-06|  0.03%|# /usr/lib/python3.10/sre_parse.py:172 append
   619|         0|            0|            0|  0.00%|
   620|         9|  6.05583e-05|   6.7287e-06|  0.02%|        elif this in REPEAT_CHARS:
   621|         0|            0|            0|  0.00%|            # repeat previous item
   622|         2|  2.57492e-05|  1.28746e-05|  0.01%|            here = source.tell()
(call)|         2|  1.26362e-05|  6.31809e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:286 tell
   623|         2|  1.52588e-05|  7.62939e-06|  0.01%|            if this == "?":
   624|         0|            0|            0|  0.00%|                min, max = 0, 1
   625|         2|  1.40667e-05|  7.03335e-06|  0.01%|            elif this == "*":
   626|         1|  8.10623e-06|  8.10623e-06|  0.00%|                min, max = 0, MAXREPEAT
   627|         0|            0|            0|  0.00%|
   628|         1|  6.67572e-06|  6.67572e-06|  0.00%|            elif this == "+":
   629|         1|  8.10623e-06|  8.10623e-06|  0.00%|                min, max = 1, MAXREPEAT
   630|         0|            0|            0|  0.00%|            elif this == "{":
   631|         0|            0|            0|  0.00%|                if source.next == "}":
   632|         0|            0|            0|  0.00%|                    subpatternappend((LITERAL, _ord(this)))
   633|         0|            0|            0|  0.00%|                    continue
   634|         0|            0|            0|  0.00%|
   635|         0|            0|            0|  0.00%|                min, max = 0, MAXREPEAT
   636|         0|            0|            0|  0.00%|                lo = hi = ""
   637|         0|            0|            0|  0.00%|                while source.next in DIGITS:
   638|         0|            0|            0|  0.00%|                    lo += sourceget()
   639|         0|            0|            0|  0.00%|                if sourcematch(","):
   640|         0|            0|            0|  0.00%|                    while source.next in DIGITS:
   641|         0|            0|            0|  0.00%|                        hi += sourceget()
   642|         0|            0|            0|  0.00%|                else:
   643|         0|            0|            0|  0.00%|                    hi = lo
   644|         0|            0|            0|  0.00%|                if not sourcematch("}"):
   645|         0|            0|            0|  0.00%|                    subpatternappend((LITERAL, _ord(this)))
   646|         0|            0|            0|  0.00%|                    source.seek(here)
   647|         0|            0|            0|  0.00%|                    continue
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|                if lo:
   650|         0|            0|            0|  0.00%|                    min = int(lo)
   651|         0|            0|            0|  0.00%|                    if min >= MAXREPEAT:
   652|         0|            0|            0|  0.00%|                        raise OverflowError("the repetition number is too large")
   653|         0|            0|            0|  0.00%|                if hi:
   654|         0|            0|            0|  0.00%|                    max = int(hi)
   655|         0|            0|            0|  0.00%|                    if max >= MAXREPEAT:
   656|         0|            0|            0|  0.00%|                        raise OverflowError("the repetition number is too large")
   657|         0|            0|            0|  0.00%|                    if max < min:
   658|         0|            0|            0|  0.00%|                        raise source.error("min repeat greater than max repeat",
   659|         0|            0|            0|  0.00%|                                           source.tell() - here)
   660|         0|            0|            0|  0.00%|            else:
   661|         0|            0|            0|  0.00%|                raise AssertionError("unsupported quantifier %r" % (char,))
   662|         0|            0|            0|  0.00%|            # figure out which item to repeat
   663|         2|  2.86102e-05|  1.43051e-05|  0.01%|            if subpattern:
(call)|         2|  1.38283e-05|  6.91414e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:160 __len__
   664|         2|  2.98023e-05|  1.49012e-05|  0.01%|                item = subpattern[-1:]
(call)|         2|  5.98431e-05|  2.99215e-05|  0.02%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   665|         0|            0|            0|  0.00%|            else:
   666|         0|            0|            0|  0.00%|                item = None
   667|         2|  3.93391e-05|  1.96695e-05|  0.02%|            if not item or item[0][0] is AT:
(call)|         2|  1.28746e-05|   6.4373e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:160 __len__
(call)|         2|  1.93119e-05|  9.65595e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   668|         0|            0|            0|  0.00%|                raise source.error("nothing to repeat",
   669|         0|            0|            0|  0.00%|                                   source.tell() - here + len(this))
   670|         2|  2.81334e-05|  1.40667e-05|  0.01%|            if item[0][0] in _REPEATCODES:
(call)|         2|   1.7643e-05|  8.82149e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   671|         0|            0|            0|  0.00%|                raise source.error("multiple repeat",
   672|         0|            0|            0|  0.00%|                                   source.tell() - here + len(this))
   673|         2|  2.55108e-05|  1.27554e-05|  0.01%|            if item[0][0] is SUBPATTERN:
(call)|         2|  1.85966e-05|  9.29832e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   674|         0|            0|            0|  0.00%|                group, add_flags, del_flags, p = item[0][1]
   675|         0|            0|            0|  0.00%|                if group is None and not add_flags and not del_flags:
   676|         0|            0|            0|  0.00%|                    item = p
   677|         2|  3.09944e-05|  1.54972e-05|  0.01%|            if sourcematch("?"):
(call)|         2|  1.88351e-05|  9.41753e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:249 match
   678|         0|            0|            0|  0.00%|                subpattern[-1] = (MIN_REPEAT, (min, max, item))
   679|         0|            0|            0|  0.00%|            else:
   680|         2|  3.19481e-05|   1.5974e-05|  0.01%|                subpattern[-1] = (MAX_REPEAT, (min, max, item))
(call)|         2|  1.52588e-05|  7.62939e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:168 __setitem__
   681|         0|            0|            0|  0.00%|
   682|         7|  4.52995e-05|  6.47136e-06|  0.02%|        elif this == ".":
   683|         1|  1.38283e-05|  1.38283e-05|  0.01%|            subpatternappend((ANY, None))
(call)|         1|  6.67572e-06|  6.67572e-06|  0.00%|# /usr/lib/python3.10/sre_parse.py:172 append
   684|         0|            0|            0|  0.00%|
   685|         6|  3.83854e-05|  6.39757e-06|  0.02%|        elif this == "(":
   686|         5|  6.48499e-05|    1.297e-05|  0.03%|            start = source.tell() - 1
(call)|         5|  3.38554e-05|  6.77109e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:286 tell
   687|         5|  4.55379e-05|  9.10759e-06|  0.02%|            group = True
   688|         5|   3.3617e-05|   6.7234e-06|  0.01%|            name = None
   689|         5|  3.29018e-05|  6.58035e-06|  0.01%|            add_flags = 0
   690|         5|  3.24249e-05|  6.48499e-06|  0.01%|            del_flags = 0
   691|         5|  6.65188e-05|  1.33038e-05|  0.03%|            if sourcematch("?"):
(call)|         5|  0.000133514|  2.67029e-05|  0.05%|# /usr/lib/python3.10/sre_parse.py:249 match
   692|         0|            0|            0|  0.00%|                # options
   693|         3|   3.8147e-05|  1.27157e-05|  0.02%|                char = sourceget()
(call)|         3|  0.000110388|  3.67959e-05|  0.05%|# /usr/lib/python3.10/sre_parse.py:254 get
   694|         3|  2.07424e-05|  6.91414e-06|  0.01%|                if char is None:
   695|         0|            0|            0|  0.00%|                    raise source.error("unexpected end of pattern")
   696|         3|  1.93119e-05|   6.4373e-06|  0.01%|                if char == "P":
   697|         0|            0|            0|  0.00%|                    # python extensions
   698|         3|  3.91006e-05|  1.30335e-05|  0.02%|                    if sourcematch("<"):
(call)|         3|  0.000110865|  3.69549e-05|  0.05%|# /usr/lib/python3.10/sre_parse.py:249 match
   699|         0|            0|            0|  0.00%|                        # named group: skip forward to end of name
   700|         3|  4.07696e-05|  1.35899e-05|  0.02%|                        name = source.getuntil(">", "group name")
(call)|         3|  0.000320911|   0.00010697|  0.13%|# /usr/lib/python3.10/sre_parse.py:267 getuntil
   701|         3|  2.21729e-05|  7.39098e-06|  0.01%|                        if not name.isidentifier():
   702|         0|            0|            0|  0.00%|                            msg = "bad character in group name %r" % name
   703|         0|            0|            0|  0.00%|                            raise source.error(msg, len(name) + 1)
   704|         0|            0|            0|  0.00%|                    elif sourcematch("="):
   705|         0|            0|            0|  0.00%|                        # named backreference
   706|         0|            0|            0|  0.00%|                        name = source.getuntil(")", "group name")
   707|         0|            0|            0|  0.00%|                        if not name.isidentifier():
   708|         0|            0|            0|  0.00%|                            msg = "bad character in group name %r" % name
   709|         0|            0|            0|  0.00%|                            raise source.error(msg, len(name) + 1)
   710|         0|            0|            0|  0.00%|                        gid = state.groupdict.get(name)
   711|         0|            0|            0|  0.00%|                        if gid is None:
   712|         0|            0|            0|  0.00%|                            msg = "unknown group name %r" % name
   713|         0|            0|            0|  0.00%|                            raise source.error(msg, len(name) + 1)
   714|         0|            0|            0|  0.00%|                        if not state.checkgroup(gid):
   715|         0|            0|            0|  0.00%|                            raise source.error("cannot refer to an open group",
   716|         0|            0|            0|  0.00%|                                               len(name) + 1)
   717|         0|            0|            0|  0.00%|                        state.checklookbehindgroup(gid, source)
   718|         0|            0|            0|  0.00%|                        subpatternappend((GROUPREF, gid))
   719|         0|            0|            0|  0.00%|                        continue
   720|         0|            0|            0|  0.00%|
   721|         0|            0|            0|  0.00%|                    else:
   722|         0|            0|            0|  0.00%|                        char = sourceget()
   723|         0|            0|            0|  0.00%|                        if char is None:
   724|         0|            0|            0|  0.00%|                            raise source.error("unexpected end of pattern")
   725|         0|            0|            0|  0.00%|                        raise source.error("unknown extension ?P" + char,
   726|         0|            0|            0|  0.00%|                                           len(char) + 2)
   727|         0|            0|            0|  0.00%|                elif char == ":":
   728|         0|            0|            0|  0.00%|                    # non-capturing group
   729|         0|            0|            0|  0.00%|                    group = None
   730|         0|            0|            0|  0.00%|                elif char == "#":
   731|         0|            0|            0|  0.00%|                    # comment
   732|         0|            0|            0|  0.00%|                    while True:
   733|         0|            0|            0|  0.00%|                        if source.next is None:
   734|         0|            0|            0|  0.00%|                            raise source.error("missing ), unterminated comment",
   735|         0|            0|            0|  0.00%|                                               source.tell() - start)
   736|         0|            0|            0|  0.00%|                        if sourceget() == ")":
   737|         0|            0|            0|  0.00%|                            break
   738|         0|            0|            0|  0.00%|                    continue
   739|         0|            0|            0|  0.00%|
   740|         0|            0|            0|  0.00%|                elif char in "=!<":
   741|         0|            0|            0|  0.00%|                    # lookahead assertions
   742|         0|            0|            0|  0.00%|                    dir = 1
   743|         0|            0|            0|  0.00%|                    if char == "<":
   744|         0|            0|            0|  0.00%|                        char = sourceget()
   745|         0|            0|            0|  0.00%|                        if char is None:
   746|         0|            0|            0|  0.00%|                            raise source.error("unexpected end of pattern")
   747|         0|            0|            0|  0.00%|                        if char not in "=!":
   748|         0|            0|            0|  0.00%|                            raise source.error("unknown extension ?<" + char,
   749|         0|            0|            0|  0.00%|                                               len(char) + 2)
   750|         0|            0|            0|  0.00%|                        dir = -1 # lookbehind
   751|         0|            0|            0|  0.00%|                        lookbehindgroups = state.lookbehindgroups
   752|         0|            0|            0|  0.00%|                        if lookbehindgroups is None:
   753|         0|            0|            0|  0.00%|                            state.lookbehindgroups = state.groups
   754|         0|            0|            0|  0.00%|                    p = _parse_sub(source, state, verbose, nested + 1)
   755|         0|            0|            0|  0.00%|                    if dir < 0:
   756|         0|            0|            0|  0.00%|                        if lookbehindgroups is None:
   757|         0|            0|            0|  0.00%|                            state.lookbehindgroups = None
   758|         0|            0|            0|  0.00%|                    if not sourcematch(")"):
   759|         0|            0|            0|  0.00%|                        raise source.error("missing ), unterminated subpattern",
   760|         0|            0|            0|  0.00%|                                           source.tell() - start)
   761|         0|            0|            0|  0.00%|                    if char == "=":
   762|         0|            0|            0|  0.00%|                        subpatternappend((ASSERT, (dir, p)))
   763|         0|            0|            0|  0.00%|                    else:
   764|         0|            0|            0|  0.00%|                        subpatternappend((ASSERT_NOT, (dir, p)))
   765|         0|            0|            0|  0.00%|                    continue
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|                elif char == "(":
   768|         0|            0|            0|  0.00%|                    # conditional backreference group
   769|         0|            0|            0|  0.00%|                    condname = source.getuntil(")", "group name")
   770|         0|            0|            0|  0.00%|                    if condname.isidentifier():
   771|         0|            0|            0|  0.00%|                        condgroup = state.groupdict.get(condname)
   772|         0|            0|            0|  0.00%|                        if condgroup is None:
   773|         0|            0|            0|  0.00%|                            msg = "unknown group name %r" % condname
   774|         0|            0|            0|  0.00%|                            raise source.error(msg, len(condname) + 1)
   775|         0|            0|            0|  0.00%|                    else:
   776|         0|            0|            0|  0.00%|                        try:
   777|         0|            0|            0|  0.00%|                            condgroup = int(condname)
   778|         0|            0|            0|  0.00%|                            if condgroup < 0:
   779|         0|            0|            0|  0.00%|                                raise ValueError
   780|         0|            0|            0|  0.00%|                        except ValueError:
   781|         0|            0|            0|  0.00%|                            msg = "bad character in group name %r" % condname
   782|         0|            0|            0|  0.00%|                            raise source.error(msg, len(condname) + 1) from None
   783|         0|            0|            0|  0.00%|                        if not condgroup:
   784|         0|            0|            0|  0.00%|                            raise source.error("bad group number",
   785|         0|            0|            0|  0.00%|                                               len(condname) + 1)
   786|         0|            0|            0|  0.00%|                        if condgroup >= MAXGROUPS:
   787|         0|            0|            0|  0.00%|                            msg = "invalid group reference %d" % condgroup
   788|         0|            0|            0|  0.00%|                            raise source.error(msg, len(condname) + 1)
   789|         0|            0|            0|  0.00%|                    state.checklookbehindgroup(condgroup, source)
   790|         0|            0|            0|  0.00%|                    item_yes = _parse(source, state, verbose, nested + 1)
   791|         0|            0|            0|  0.00%|                    if source.match("|"):
   792|         0|            0|            0|  0.00%|                        item_no = _parse(source, state, verbose, nested + 1)
   793|         0|            0|            0|  0.00%|                        if source.next == "|":
   794|         0|            0|            0|  0.00%|                            raise source.error("conditional backref with more than two branches")
   795|         0|            0|            0|  0.00%|                    else:
   796|         0|            0|            0|  0.00%|                        item_no = None
   797|         0|            0|            0|  0.00%|                    if not source.match(")"):
   798|         0|            0|            0|  0.00%|                        raise source.error("missing ), unterminated subpattern",
   799|         0|            0|            0|  0.00%|                                           source.tell() - start)
   800|         0|            0|            0|  0.00%|                    subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))
   801|         0|            0|            0|  0.00%|                    continue
   802|         0|            0|            0|  0.00%|
   803|         0|            0|            0|  0.00%|                elif char in FLAGS or char == "-":
   804|         0|            0|            0|  0.00%|                    # flags
   805|         0|            0|            0|  0.00%|                    flags = _parse_flags(source, state, char)
   806|         0|            0|            0|  0.00%|                    if flags is None:  # global flags
   807|         0|            0|            0|  0.00%|                        if not first or subpattern:
   808|         0|            0|            0|  0.00%|                            import warnings
   809|         0|            0|            0|  0.00%|                            warnings.warn(
   810|         0|            0|            0|  0.00%|                                'Flags not at the start of the expression %r%s' % (
   811|         0|            0|            0|  0.00%|                                    source.string[:20],  # truncate long regexes
   812|         0|            0|            0|  0.00%|                                    ' (truncated)' if len(source.string) > 20 else '',
   813|         0|            0|            0|  0.00%|                                ),
   814|         0|            0|            0|  0.00%|                                DeprecationWarning, stacklevel=nested + 6
   815|         0|            0|            0|  0.00%|                            )
   816|         0|            0|            0|  0.00%|                        if (state.flags & SRE_FLAG_VERBOSE) and not verbose:
   817|         0|            0|            0|  0.00%|                            raise Verbose
   818|         0|            0|            0|  0.00%|                        continue
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|                    add_flags, del_flags = flags
   821|         0|            0|            0|  0.00%|                    group = None
   822|         0|            0|            0|  0.00%|                else:
   823|         0|            0|            0|  0.00%|                    raise source.error("unknown extension ?" + char,
   824|         0|            0|            0|  0.00%|                                       len(char) + 1)
   825|         0|            0|            0|  0.00%|
   826|         0|            0|            0|  0.00%|            # parse group contents
   827|         5|  3.33786e-05|  6.67572e-06|  0.01%|            if group is not None:
   828|         5|   3.0756e-05|   6.1512e-06|  0.01%|                try:
   829|         5|  7.15256e-05|  1.43051e-05|  0.03%|                    group = state.opengroup(name)
(call)|         5|  0.000241756|  4.83513e-05|  0.10%|# /usr/lib/python3.10/sre_parse.py:84 opengroup
   830|         0|            0|            0|  0.00%|                except error as err:
   831|         0|            0|            0|  0.00%|                    raise source.error(err.msg, len(name) + 1) from None
   832|         5|  3.52859e-05|  7.05719e-06|  0.01%|            sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and
   833|         0|            0|            0|  0.00%|                           not (del_flags & SRE_FLAG_VERBOSE))
   834|         5|  7.70092e-05|  1.54018e-05|  0.03%|            p = _parse_sub(source, state, sub_verbose, nested + 1)
(call)|         5|    0.0118229|   0.00236459|  4.87%|# /usr/lib/python3.10/sre_parse.py:435 _parse_sub
   835|         5|  7.03335e-05|  1.40667e-05|  0.03%|            if not source.match(")"):
(call)|         5|  0.000196934|  3.93867e-05|  0.08%|# /usr/lib/python3.10/sre_parse.py:249 match
   836|         0|            0|            0|  0.00%|                raise source.error("missing ), unterminated subpattern",
   837|         0|            0|            0|  0.00%|                                   source.tell() - start)
   838|         5|  3.33786e-05|  6.67572e-06|  0.01%|            if group is not None:
   839|         5|  7.27177e-05|  1.45435e-05|  0.03%|                state.closegroup(group, p)
(call)|         5|   0.00113559|  0.000227118|  0.47%|# /usr/lib/python3.10/sre_parse.py:96 closegroup
   840|         5|   6.8903e-05|  1.37806e-05|  0.03%|            subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))
(call)|         5|  3.21865e-05|   6.4373e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:172 append
   841|         0|            0|            0|  0.00%|
   842|         1|  7.62939e-06|  7.62939e-06|  0.00%|        elif this == "^":
   843|         1|  1.57356e-05|  1.57356e-05|  0.01%|            subpatternappend((AT, AT_BEGINNING))
(call)|         1|  6.19888e-06|  6.19888e-06|  0.00%|# /usr/lib/python3.10/sre_parse.py:172 append
   844|         0|            0|            0|  0.00%|
   845|         0|            0|            0|  0.00%|        elif this == "$":
   846|         0|            0|            0|  0.00%|            subpatternappend((AT, AT_END))
   847|         0|            0|            0|  0.00%|
   848|         0|            0|            0|  0.00%|        else:
   849|         0|            0|            0|  0.00%|            raise AssertionError("unsupported special character %r" % (char,))
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|    # unpack non-capturing groups
   852|        64|  0.000565052|  8.82894e-06|  0.23%|    for i in range(len(subpattern))[::-1]:
(call)|        20|  0.000128269|  6.41346e-06|  0.05%|# /usr/lib/python3.10/sre_parse.py:160 __len__
   853|        44|  0.000564814|  1.28367e-05|  0.23%|        op, av = subpattern[i]
(call)|        44|   0.00041461|  9.42295e-06|  0.17%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   854|        44|  0.000277996|  6.31809e-06|  0.11%|        if op is SUBPATTERN:
   855|         5|  3.00407e-05|  6.00815e-06|  0.01%|            group, add_flags, del_flags, p = av
   856|         5|  3.21865e-05|   6.4373e-06|  0.01%|            if group is None and not add_flags and not del_flags:
   857|         0|            0|            0|  0.00%|                subpattern[i: i+1] = p
   858|         0|            0|            0|  0.00%|
   859|        20|  0.000120878|  6.04391e-06|  0.05%|    return subpattern
   860|         0|            0|            0|  0.00%|
   861|         0|            0|            0|  0.00%|def _parse_flags(source, state, char):
   862|         0|            0|            0|  0.00%|    sourceget = source.get
   863|         0|            0|            0|  0.00%|    add_flags = 0
   864|         0|            0|            0|  0.00%|    del_flags = 0
   865|         0|            0|            0|  0.00%|    if char != "-":
   866|         0|            0|            0|  0.00%|        while True:
   867|         0|            0|            0|  0.00%|            flag = FLAGS[char]
   868|         0|            0|            0|  0.00%|            if source.istext:
   869|         0|            0|            0|  0.00%|                if char == 'L':
   870|         0|            0|            0|  0.00%|                    msg = "bad inline flags: cannot use 'L' flag with a str pattern"
   871|         0|            0|            0|  0.00%|                    raise source.error(msg)
   872|         0|            0|            0|  0.00%|            else:
   873|         0|            0|            0|  0.00%|                if char == 'u':
   874|         0|            0|            0|  0.00%|                    msg = "bad inline flags: cannot use 'u' flag with a bytes pattern"
   875|         0|            0|            0|  0.00%|                    raise source.error(msg)
   876|         0|            0|            0|  0.00%|            add_flags |= flag
   877|         0|            0|            0|  0.00%|            if (flag & TYPE_FLAGS) and (add_flags & TYPE_FLAGS) != flag:
   878|         0|            0|            0|  0.00%|                msg = "bad inline flags: flags 'a', 'u' and 'L' are incompatible"
   879|         0|            0|            0|  0.00%|                raise source.error(msg)
   880|         0|            0|            0|  0.00%|            char = sourceget()
   881|         0|            0|            0|  0.00%|            if char is None:
   882|         0|            0|            0|  0.00%|                raise source.error("missing -, : or )")
   883|         0|            0|            0|  0.00%|            if char in ")-:":
   884|         0|            0|            0|  0.00%|                break
   885|         0|            0|            0|  0.00%|            if char not in FLAGS:
   886|         0|            0|            0|  0.00%|                msg = "unknown flag" if char.isalpha() else "missing -, : or )"
   887|         0|            0|            0|  0.00%|                raise source.error(msg, len(char))
   888|         0|            0|            0|  0.00%|    if char == ")":
   889|         0|            0|            0|  0.00%|        state.flags |= add_flags
   890|         0|            0|            0|  0.00%|        return None
   891|         0|            0|            0|  0.00%|    if add_flags & GLOBAL_FLAGS:
   892|         0|            0|            0|  0.00%|        raise source.error("bad inline flags: cannot turn on global flag", 1)
   893|         0|            0|            0|  0.00%|    if char == "-":
   894|         0|            0|            0|  0.00%|        char = sourceget()
   895|         0|            0|            0|  0.00%|        if char is None:
   896|         0|            0|            0|  0.00%|            raise source.error("missing flag")
   897|         0|            0|            0|  0.00%|        if char not in FLAGS:
   898|         0|            0|            0|  0.00%|            msg = "unknown flag" if char.isalpha() else "missing flag"
   899|         0|            0|            0|  0.00%|            raise source.error(msg, len(char))
   900|         0|            0|            0|  0.00%|        while True:
   901|         0|            0|            0|  0.00%|            flag = FLAGS[char]
   902|         0|            0|            0|  0.00%|            if flag & TYPE_FLAGS:
   903|         0|            0|            0|  0.00%|                msg = "bad inline flags: cannot turn off flags 'a', 'u' and 'L'"
   904|         0|            0|            0|  0.00%|                raise source.error(msg)
   905|         0|            0|            0|  0.00%|            del_flags |= flag
   906|         0|            0|            0|  0.00%|            char = sourceget()
   907|         0|            0|            0|  0.00%|            if char is None:
   908|         0|            0|            0|  0.00%|                raise source.error("missing :")
   909|         0|            0|            0|  0.00%|            if char == ":":
   910|         0|            0|            0|  0.00%|                break
   911|         0|            0|            0|  0.00%|            if char not in FLAGS:
   912|         0|            0|            0|  0.00%|                msg = "unknown flag" if char.isalpha() else "missing :"
   913|         0|            0|            0|  0.00%|                raise source.error(msg, len(char))
   914|         0|            0|            0|  0.00%|    assert char == ":"
   915|         0|            0|            0|  0.00%|    if del_flags & GLOBAL_FLAGS:
   916|         0|            0|            0|  0.00%|        raise source.error("bad inline flags: cannot turn off global flag", 1)
   917|         0|            0|            0|  0.00%|    if add_flags & del_flags:
   918|         0|            0|            0|  0.00%|        raise source.error("bad inline flags: flag turned on and off", 1)
   919|         0|            0|            0|  0.00%|    return add_flags, del_flags
   920|         0|            0|            0|  0.00%|
   921|         7|  2.02656e-05|  2.89508e-06|  0.01%|def fix_flags(src, flags):
   922|         0|            0|            0|  0.00%|    # Check and fix flags according to the type of pattern (str or bytes)
   923|         7|  2.31266e-05|   3.3038e-06|  0.01%|    if isinstance(src, str):
   924|         7|  2.43187e-05|   3.4741e-06|  0.01%|        if flags & SRE_FLAG_LOCALE:
   925|         0|            0|            0|  0.00%|            raise ValueError("cannot use LOCALE flag with a str pattern")
   926|         7|  2.26498e-05|  3.23568e-06|  0.01%|        if not flags & SRE_FLAG_ASCII:
   927|         7|  2.38419e-05|  3.40598e-06|  0.01%|            flags |= SRE_FLAG_UNICODE
   928|         0|            0|            0|  0.00%|        elif flags & SRE_FLAG_UNICODE:
   929|         0|            0|            0|  0.00%|            raise ValueError("ASCII and UNICODE flags are incompatible")
   930|         0|            0|            0|  0.00%|    else:
   931|         0|            0|            0|  0.00%|        if flags & SRE_FLAG_UNICODE:
   932|         0|            0|            0|  0.00%|            raise ValueError("cannot use UNICODE flag with a bytes pattern")
   933|         0|            0|            0|  0.00%|        if flags & SRE_FLAG_LOCALE and flags & SRE_FLAG_ASCII:
   934|         0|            0|            0|  0.00%|            raise ValueError("ASCII and LOCALE flags are incompatible")
   935|         7|  2.02656e-05|  2.89508e-06|  0.01%|    return flags
   936|         0|            0|            0|  0.00%|
   937|         7|  2.31266e-05|   3.3038e-06|  0.01%|def parse(str, flags=0, state=None):
   938|         0|            0|            0|  0.00%|    # parse 're' pattern into list of (opcode, argument) tuples
   939|         0|            0|            0|  0.00%|
   940|         7|  6.96182e-05|  9.94546e-06|  0.03%|    source = Tokenizer(str)
(call)|         7|  0.000396013|  5.65733e-05|  0.16%|# /usr/lib/python3.10/sre_parse.py:224 __init__
   941|         0|            0|            0|  0.00%|
   942|         7|  2.36034e-05|  3.37192e-06|  0.01%|    if state is None:
   943|         7|  6.07967e-05|  8.68525e-06|  0.03%|        state = State()
(call)|         7|  0.000111103|  1.58719e-05|  0.05%|# /usr/lib/python3.10/sre_parse.py:76 __init__
   944|         7|  2.31266e-05|   3.3038e-06|  0.01%|    state.flags = flags
   945|         7|  2.36034e-05|  3.37192e-06|  0.01%|    state.str = str
   946|         0|            0|            0|  0.00%|
   947|         7|  2.45571e-05|  3.50816e-06|  0.01%|    try:
   948|         7|  7.65324e-05|  1.09332e-05|  0.03%|        p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
(call)|         7|    0.0222881|   0.00318401|  9.17%|# /usr/lib/python3.10/sre_parse.py:435 _parse_sub
   949|         0|            0|            0|  0.00%|    except Verbose:
   950|         0|            0|            0|  0.00%|        # the VERBOSE flag was switched on inside the pattern.  to be
   951|         0|            0|            0|  0.00%|        # on the safe side, we'll parse the whole thing again...
   952|         0|            0|            0|  0.00%|        state = State()
   953|         0|            0|            0|  0.00%|        state.flags = flags | SRE_FLAG_VERBOSE
   954|         0|            0|            0|  0.00%|        state.str = str
   955|         0|            0|            0|  0.00%|        source.seek(0)
   956|         0|            0|            0|  0.00%|        p = _parse_sub(source, state, True, 0)
   957|         0|            0|            0|  0.00%|
   958|         7|  6.36578e-05|  9.09397e-06|  0.03%|    p.state.flags = fix_flags(str, p.state.flags)
(call)|         7|  0.000134468|  1.92097e-05|  0.06%|# /usr/lib/python3.10/sre_parse.py:921 fix_flags
   959|         0|            0|            0|  0.00%|
   960|         7|   2.3365e-05|  3.33786e-06|  0.01%|    if source.next is not None:
   961|         0|            0|            0|  0.00%|        assert source.next == ")"
   962|         0|            0|            0|  0.00%|        raise source.error("unbalanced parenthesis")
   963|         0|            0|            0|  0.00%|
   964|         7|  2.38419e-05|  3.40598e-06|  0.01%|    if flags & SRE_FLAG_DEBUG:
   965|         0|            0|            0|  0.00%|        p.dump()
   966|         0|            0|            0|  0.00%|
   967|         7|  2.43187e-05|   3.4741e-06|  0.01%|    return p
   968|         0|            0|            0|  0.00%|
   969|         2|   1.0252e-05|    5.126e-06|  0.00%|def parse_template(source, state):
   970|         0|            0|            0|  0.00%|    # parse 're' replacement string into list of literals and
   971|         0|            0|            0|  0.00%|    # group references
   972|         2|  2.31266e-05|  1.15633e-05|  0.01%|    s = Tokenizer(source)
(call)|         2|  0.000120878|  6.04391e-05|  0.05%|# /usr/lib/python3.10/sre_parse.py:224 __init__
   973|         2|  1.00136e-05|  5.00679e-06|  0.00%|    sget = s.get
   974|         2|  1.00136e-05|  5.00679e-06|  0.00%|    groups = []
   975|         2|  1.00136e-05|  5.00679e-06|  0.00%|    literals = []
   976|         2|  9.29832e-06|  4.64916e-06|  0.00%|    literal = []
   977|         2|  8.82149e-06|  4.41074e-06|  0.00%|    lappend = literal.append
   978|         3|  1.40667e-05|   4.6889e-06|  0.01%|    def addgroup(index, pos):
   979|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if index > state.groups:
   980|         0|            0|            0|  0.00%|            raise s.error("invalid group reference %d" % index, pos)
   981|         1|  4.05312e-06|  4.05312e-06|  0.00%|        if literal:
   982|         1|   6.4373e-06|   6.4373e-06|  0.00%|            literals.append(''.join(literal))
   983|         1|  4.52995e-06|  4.52995e-06|  0.00%|            del literal[:]
   984|         1|  4.29153e-06|  4.29153e-06|  0.00%|        groups.append((len(literals), index))
   985|         1|  3.33786e-06|  3.33786e-06|  0.00%|        literals.append(None)
   986|         2|  8.82149e-06|  4.41074e-06|  0.00%|    groupindex = state.groupindex
   987|         7|  3.31402e-05|  4.73431e-06|  0.01%|    while True:
   988|         7|  6.36578e-05|  9.09397e-06|  0.03%|        this = sget()
(call)|         7|  0.000278234|  3.97478e-05|  0.11%|# /usr/lib/python3.10/sre_parse.py:254 get
   989|         7|  2.71797e-05|  3.88282e-06|  0.01%|        if this is None:
   990|         2|  8.10623e-06|  4.05312e-06|  0.00%|            break # end of replacement string
   991|         5|  2.07424e-05|  4.14848e-06|  0.01%|        if this[0] == "\\":
   992|         0|            0|            0|  0.00%|            # group
   993|         3|  1.21593e-05|  4.05312e-06|  0.01%|            c = this[1]
   994|         3|  1.21593e-05|  4.05312e-06|  0.01%|            if c == "g":
   995|         0|            0|            0|  0.00%|                name = ""
   996|         0|            0|            0|  0.00%|                if not s.match("<"):
   997|         0|            0|            0|  0.00%|                    raise s.error("missing <")
   998|         0|            0|            0|  0.00%|                name = s.getuntil(">", "group name")
   999|         0|            0|            0|  0.00%|                if name.isidentifier():
  1000|         0|            0|            0|  0.00%|                    try:
  1001|         0|            0|            0|  0.00%|                        index = groupindex[name]
  1002|         0|            0|            0|  0.00%|                    except KeyError:
  1003|         0|            0|            0|  0.00%|                        raise IndexError("unknown group name %r" % name)
  1004|         0|            0|            0|  0.00%|                else:
  1005|         0|            0|            0|  0.00%|                    try:
  1006|         0|            0|            0|  0.00%|                        index = int(name)
  1007|         0|            0|            0|  0.00%|                        if index < 0:
  1008|         0|            0|            0|  0.00%|                            raise ValueError
  1009|         0|            0|            0|  0.00%|                    except ValueError:
  1010|         0|            0|            0|  0.00%|                        raise s.error("bad character in group name %r" % name,
  1011|         0|            0|            0|  0.00%|                                      len(name) + 1) from None
  1012|         0|            0|            0|  0.00%|                    if index >= MAXGROUPS:
  1013|         0|            0|            0|  0.00%|                        raise s.error("invalid group reference %d" % index,
  1014|         0|            0|            0|  0.00%|                                      len(name) + 1)
  1015|         0|            0|            0|  0.00%|                addgroup(index, len(name) + 1)
  1016|         3|  1.21593e-05|  4.05312e-06|  0.01%|            elif c == "0":
  1017|         0|            0|            0|  0.00%|                if s.next in OCTDIGITS:
  1018|         0|            0|            0|  0.00%|                    this += sget()
  1019|         0|            0|            0|  0.00%|                    if s.next in OCTDIGITS:
  1020|         0|            0|            0|  0.00%|                        this += sget()
  1021|         0|            0|            0|  0.00%|                lappend(chr(int(this[1:], 8) & 0xff))
  1022|         3|  1.33514e-05|  4.45048e-06|  0.01%|            elif c in DIGITS:
  1023|         1|  4.05312e-06|  4.05312e-06|  0.00%|                isoctal = False
  1024|         1|  5.00679e-06|  5.00679e-06|  0.00%|                if s.next in DIGITS:
  1025|         0|            0|            0|  0.00%|                    this += sget()
  1026|         0|            0|            0|  0.00%|                    if (c in OCTDIGITS and this[2] in OCTDIGITS and
  1027|         0|            0|            0|  0.00%|                        s.next in OCTDIGITS):
  1028|         0|            0|            0|  0.00%|                        this += sget()
  1029|         0|            0|            0|  0.00%|                        isoctal = True
  1030|         0|            0|            0|  0.00%|                        c = int(this[1:], 8)
  1031|         0|            0|            0|  0.00%|                        if c > 0o377:
  1032|         0|            0|            0|  0.00%|                            raise s.error('octal escape value %s outside of '
  1033|         0|            0|            0|  0.00%|                                          'range 0-0o377' % this, len(this))
  1034|         0|            0|            0|  0.00%|                        lappend(chr(c))
  1035|         1|  4.29153e-06|  4.29153e-06|  0.00%|                if not isoctal:
  1036|         1|  1.40667e-05|  1.40667e-05|  0.01%|                    addgroup(int(this[1:]), len(this) - 1)
(call)|         1|  3.05176e-05|  3.05176e-05|  0.01%|# /usr/lib/python3.10/sre_parse.py:978 addgroup
  1037|         0|            0|            0|  0.00%|            else:
  1038|         2|  8.34465e-06|  4.17233e-06|  0.00%|                try:
  1039|         2|  9.29832e-06|  4.64916e-06|  0.00%|                    this = chr(ESCAPES[this][1])
  1040|         0|            0|            0|  0.00%|                except KeyError:
  1041|         0|            0|            0|  0.00%|                    if c in ASCIILETTERS:
  1042|         0|            0|            0|  0.00%|                        raise s.error('bad escape %s' % this, len(this))
  1043|         2|  9.05991e-06|  4.52995e-06|  0.00%|                lappend(this)
  1044|         0|            0|            0|  0.00%|        else:
  1045|         2|  6.91414e-06|  3.45707e-06|  0.00%|            lappend(this)
  1046|         2|  8.58307e-06|  4.29153e-06|  0.00%|    if literal:
  1047|         1|  4.05312e-06|  4.05312e-06|  0.00%|        literals.append(''.join(literal))
  1048|         2|   1.0252e-05|    5.126e-06|  0.00%|    if not isinstance(source, str):
  1049|         0|            0|            0|  0.00%|        # The tokenizer implicitly decodes bytes objects as latin-1, we must
  1050|         0|            0|            0|  0.00%|        # therefore re-encode the final representation.
  1051|         0|            0|            0|  0.00%|        literals = [None if s is None else s.encode('latin-1') for s in literals]
  1052|         2|  8.10623e-06|  4.05312e-06|  0.00%|    return groups, literals
  1053|         0|            0|            0|  0.00%|
  1054|         0|            0|            0|  0.00%|def expand_template(template, match):
  1055|         0|            0|            0|  0.00%|    g = match.group
  1056|         0|            0|            0|  0.00%|    empty = match.string[:0]
  1057|         0|            0|            0|  0.00%|    groups, literals = template
  1058|         0|            0|            0|  0.00%|    literals = literals[:]
  1059|         0|            0|            0|  0.00%|    try:
  1060|         0|            0|            0|  0.00%|        for index, group in groups:
  1061|         0|            0|            0|  0.00%|            literals[index] = g(group) or empty
  1062|         0|            0|            0|  0.00%|    except IndexError:
  1063|         0|            0|            0|  0.00%|        raise error("invalid group reference %d" % index)
  1064|         0|            0|            0|  0.00%|    return empty.join(literals)
File: /usr/lib/python3.10/sre_compile.py
File duration: 0.0226643s (9.33%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|#
     2|         0|            0|            0|  0.00%|# Secret Labs' Regular Expression Engine
     3|         0|            0|            0|  0.00%|#
     4|         0|            0|            0|  0.00%|# convert template to internal format
     5|         0|            0|            0|  0.00%|#
     6|         0|            0|            0|  0.00%|# Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.
     7|         0|            0|            0|  0.00%|#
     8|         0|            0|            0|  0.00%|# See the sre.py file for information on usage and redistribution.
     9|         0|            0|            0|  0.00%|#
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|"""Internal support module for sre"""
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|import _sre
    14|         0|            0|            0|  0.00%|import sre_parse
    15|         0|            0|            0|  0.00%|from sre_constants import *
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|assert _sre.MAGIC == MAGIC, "SRE module mismatch"
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|_LITERAL_CODES = {LITERAL, NOT_LITERAL}
    20|         0|            0|            0|  0.00%|_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}
    21|         0|            0|            0|  0.00%|_SUCCESS_CODES = {SUCCESS, FAILURE}
    22|         0|            0|            0|  0.00%|_ASSERT_CODES = {ASSERT, ASSERT_NOT}
    23|         0|            0|            0|  0.00%|_UNIT_CODES = _LITERAL_CODES | {ANY, IN}
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|# Sets of lowercase characters which have the same uppercase.
    26|         0|            0|            0|  0.00%|_equivalences = (
    27|         0|            0|            0|  0.00%|    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I
    28|         0|            0|            0|  0.00%|    (0x69, 0x131), # iı
    29|         0|            0|            0|  0.00%|    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S
    30|         0|            0|            0|  0.00%|    (0x73, 0x17f), # sſ
    31|         0|            0|            0|  0.00%|    # MICRO SIGN, GREEK SMALL LETTER MU
    32|         0|            0|            0|  0.00%|    (0xb5, 0x3bc), # µμ
    33|         0|            0|            0|  0.00%|    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI
    34|         0|            0|            0|  0.00%|    (0x345, 0x3b9, 0x1fbe), # \u0345ιι
    35|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA
    36|         0|            0|            0|  0.00%|    (0x390, 0x1fd3), # ΐΐ
    37|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA
    38|         0|            0|            0|  0.00%|    (0x3b0, 0x1fe3), # ΰΰ
    39|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER BETA, GREEK BETA SYMBOL
    40|         0|            0|            0|  0.00%|    (0x3b2, 0x3d0), # βϐ
    41|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER EPSILON, GREEK LUNATE EPSILON SYMBOL
    42|         0|            0|            0|  0.00%|    (0x3b5, 0x3f5), # εϵ
    43|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER THETA, GREEK THETA SYMBOL
    44|         0|            0|            0|  0.00%|    (0x3b8, 0x3d1), # θϑ
    45|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER KAPPA, GREEK KAPPA SYMBOL
    46|         0|            0|            0|  0.00%|    (0x3ba, 0x3f0), # κϰ
    47|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER PI, GREEK PI SYMBOL
    48|         0|            0|            0|  0.00%|    (0x3c0, 0x3d6), # πϖ
    49|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER RHO, GREEK RHO SYMBOL
    50|         0|            0|            0|  0.00%|    (0x3c1, 0x3f1), # ρϱ
    51|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER FINAL SIGMA, GREEK SMALL LETTER SIGMA
    52|         0|            0|            0|  0.00%|    (0x3c2, 0x3c3), # ςσ
    53|         0|            0|            0|  0.00%|    # GREEK SMALL LETTER PHI, GREEK PHI SYMBOL
    54|         0|            0|            0|  0.00%|    (0x3c6, 0x3d5), # φϕ
    55|         0|            0|            0|  0.00%|    # LATIN SMALL LETTER S WITH DOT ABOVE, LATIN SMALL LETTER LONG S WITH DOT ABOVE
    56|         0|            0|            0|  0.00%|    (0x1e61, 0x1e9b), # ṡẛ
    57|         0|            0|            0|  0.00%|    # LATIN SMALL LIGATURE LONG S T, LATIN SMALL LIGATURE ST
    58|         0|            0|            0|  0.00%|    (0xfb05, 0xfb06), # ﬅﬆ
    59|         0|            0|            0|  0.00%|)
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|# Maps the lowercase code to lowercase codes which have the same uppercase.
    62|         0|            0|            0|  0.00%|_ignorecase_fixes = {i: tuple(j for j in t if i != j)
    63|         0|            0|            0|  0.00%|                     for t in _equivalences for i in t}
    64|         0|            0|            0|  0.00%|
    65|         9|  2.95639e-05|  3.28488e-06|  0.01%|def _combine_flags(flags, add_flags, del_flags,
    66|         0|            0|            0|  0.00%|                   TYPE_FLAGS=sre_parse.TYPE_FLAGS):
    67|         9|  2.90871e-05|   3.2319e-06|  0.01%|    if add_flags & TYPE_FLAGS:
    68|         0|            0|            0|  0.00%|        flags &= ~TYPE_FLAGS
    69|         9|  3.24249e-05|  3.60277e-06|  0.01%|    return (flags | add_flags) & ~del_flags
    70|         0|            0|            0|  0.00%|
    71|        25|  0.000131607|  5.26428e-06|  0.05%|def _compile(code, pattern, flags):
    72|         0|            0|            0|  0.00%|    # internal: compile a (sub)pattern
    73|        25|  0.000134706|  5.38826e-06|  0.06%|    emit = code.append
    74|        25|  0.000134706|  5.38826e-06|  0.06%|    _len = len
    75|        25|   0.00013423|  5.36919e-06|  0.06%|    LITERAL_CODES = _LITERAL_CODES
    76|        25|  0.000127316|  5.09262e-06|  0.05%|    REPEATING_CODES = _REPEATING_CODES
    77|        25|  0.000126362|  5.05447e-06|  0.05%|    SUCCESS_CODES = _SUCCESS_CODES
    78|        25|  0.000125647|  5.02586e-06|  0.05%|    ASSERT_CODES = _ASSERT_CODES
    79|        25|  0.000122786|  4.91142e-06|  0.05%|    iscased = None
    80|        25|  0.000121117|  4.84467e-06|  0.05%|    tolower = None
    81|        25|  0.000120163|  4.80652e-06|  0.05%|    fixes = None
    82|        25|  0.000125885|   5.0354e-06|  0.05%|    if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:
    83|        15|  6.96182e-05|  4.64122e-06|  0.03%|        if flags & SRE_FLAG_UNICODE:
    84|        15|   7.1764e-05|  4.78427e-06|  0.03%|            iscased = _sre.unicode_iscased
    85|        15|  7.53403e-05|  5.02268e-06|  0.03%|            tolower = _sre.unicode_tolower
    86|        15|  7.08103e-05|  4.72069e-06|  0.03%|            fixes = _ignorecase_fixes
    87|         0|            0|            0|  0.00%|        else:
    88|         0|            0|            0|  0.00%|            iscased = _sre.ascii_iscased
    89|         0|            0|            0|  0.00%|            tolower = _sre.ascii_tolower
    90|        74|  0.000593185|  8.01602e-06|  0.24%|    for op, av in pattern:
(call)|        46|  0.000423908|   9.2154e-06|  0.17%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
    91|        49|  0.000231743|  4.72945e-06|  0.10%|        if op in LITERAL_CODES:
    92|        21|  9.48906e-05|   4.5186e-06|  0.04%|            if not flags & SRE_FLAG_IGNORECASE:
    93|         9|  4.29153e-05|  4.76837e-06|  0.02%|                emit(op)
    94|         9|  4.19617e-05|  4.66241e-06|  0.02%|                emit(av)
    95|        12|   5.6982e-05|   4.7485e-06|  0.02%|            elif flags & SRE_FLAG_LOCALE:
    96|         0|            0|            0|  0.00%|                emit(OP_LOCALE_IGNORE[op])
    97|         0|            0|            0|  0.00%|                emit(av)
    98|        12|  5.65052e-05|  4.70877e-06|  0.02%|            elif not iscased(av):
    99|         8|  3.55244e-05|  4.44055e-06|  0.01%|                emit(op)
   100|         8|  3.74317e-05|  4.67896e-06|  0.02%|                emit(av)
   101|         0|            0|            0|  0.00%|            else:
   102|         4|  1.90735e-05|  4.76837e-06|  0.01%|                lo = tolower(av)
   103|         4|  1.88351e-05|  4.70877e-06|  0.01%|                if not fixes:  # ascii
   104|         0|            0|            0|  0.00%|                    emit(OP_IGNORE[op])
   105|         0|            0|            0|  0.00%|                    emit(lo)
   106|         4|  1.93119e-05|  4.82798e-06|  0.01%|                elif lo not in fixes:
   107|         4|  1.88351e-05|  4.70877e-06|  0.01%|                    emit(OP_UNICODE_IGNORE[op])
   108|         4|  2.71797e-05|  6.79493e-06|  0.01%|                    emit(lo)
   109|         0|            0|            0|  0.00%|                else:
   110|         0|            0|            0|  0.00%|                    emit(IN_UNI_IGNORE)
   111|         0|            0|            0|  0.00%|                    skip = _len(code); emit(0)
   112|         0|            0|            0|  0.00%|                    if op is NOT_LITERAL:
   113|         0|            0|            0|  0.00%|                        emit(NEGATE)
   114|         0|            0|            0|  0.00%|                    for k in (lo,) + fixes[lo]:
   115|         0|            0|            0|  0.00%|                        emit(LITERAL)
   116|         0|            0|            0|  0.00%|                        emit(k)
   117|         0|            0|            0|  0.00%|                    emit(FAILURE)
   118|         0|            0|            0|  0.00%|                    code[skip] = _len(code) - skip
   119|        28|  0.000128269|  4.58104e-06|  0.05%|        elif op is IN:
   120|        16|   0.00019455|  1.21593e-05|  0.08%|            charset, hascased = _optimize_charset(av, iscased, tolower, fixes)
(call)|        16|   0.00782752|   0.00048922|  3.22%|# /usr/lib/python3.10/sre_compile.py:276 _optimize_charset
   121|        16|  8.24928e-05|   5.1558e-06|  0.03%|            if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
   122|         0|            0|            0|  0.00%|                emit(IN_LOC_IGNORE)
   123|        16|   7.1764e-05|  4.48525e-06|  0.03%|            elif not hascased:
   124|        16|  8.01086e-05|  5.00679e-06|  0.03%|                emit(IN)
   125|         0|            0|            0|  0.00%|            elif not fixes:  # ascii
   126|         0|            0|            0|  0.00%|                emit(IN_IGNORE)
   127|         0|            0|            0|  0.00%|            else:
   128|         0|            0|            0|  0.00%|                emit(IN_UNI_IGNORE)
   129|        16|  7.82013e-05|  4.88758e-06|  0.03%|            skip = _len(code); emit(0)
   130|        16|  0.000169277|  1.05798e-05|  0.07%|            _compile_charset(charset, flags, code)
(call)|        16|  0.000653028|  4.08143e-05|  0.27%|# /usr/lib/python3.10/sre_compile.py:249 _compile_charset
   131|        16|  7.86781e-05|  4.91738e-06|  0.03%|            code[skip] = _len(code) - skip
   132|        12|  5.29289e-05|  4.41074e-06|  0.02%|        elif op is ANY:
   133|         1|  4.29153e-06|  4.29153e-06|  0.00%|            if flags & SRE_FLAG_DOTALL:
   134|         0|            0|            0|  0.00%|                emit(ANY_ALL)
   135|         0|            0|            0|  0.00%|            else:
   136|         1|  5.72205e-06|  5.72205e-06|  0.00%|                emit(ANY)
   137|        11|  5.24521e-05|  4.76837e-06|  0.02%|        elif op in REPEATING_CODES:
   138|         2|  8.34465e-06|  4.17233e-06|  0.00%|            if flags & SRE_FLAG_TEMPLATE:
   139|         0|            0|            0|  0.00%|                raise error("internal: unsupported template operator %r" % (op,))
   140|         2|   2.3365e-05|  1.16825e-05|  0.01%|            if _simple(av[2]):
(call)|         2|  8.53539e-05|  4.26769e-05|  0.04%|# /usr/lib/python3.10/sre_compile.py:423 _simple
   141|         2|   1.0252e-05|    5.126e-06|  0.00%|                if op is MAX_REPEAT:
   142|         2|  1.14441e-05|  5.72205e-06|  0.00%|                    emit(REPEAT_ONE)
   143|         0|            0|            0|  0.00%|                else:
   144|         0|            0|            0|  0.00%|                    emit(MIN_REPEAT_ONE)
   145|         2|  1.00136e-05|  5.00679e-06|  0.00%|                skip = _len(code); emit(0)
   146|         2|   1.0252e-05|    5.126e-06|  0.00%|                emit(av[0])
   147|         2|   1.0252e-05|    5.126e-06|  0.00%|                emit(av[1])
   148|         2|  2.86102e-05|  1.43051e-05|  0.01%|                _compile(code, av[2], flags)
(call)|         2|  0.000451088|  0.000225544|  0.19%|# /usr/lib/python3.10/sre_compile.py:71 _compile
   149|         2|  1.00136e-05|  5.00679e-06|  0.00%|                emit(SUCCESS)
   150|         2|  1.09673e-05|  5.48363e-06|  0.00%|                code[skip] = _len(code) - skip
   151|         0|            0|            0|  0.00%|            else:
   152|         0|            0|            0|  0.00%|                emit(REPEAT)
   153|         0|            0|            0|  0.00%|                skip = _len(code); emit(0)
   154|         0|            0|            0|  0.00%|                emit(av[0])
   155|         0|            0|            0|  0.00%|                emit(av[1])
   156|         0|            0|            0|  0.00%|                _compile(code, av[2], flags)
   157|         0|            0|            0|  0.00%|                code[skip] = _len(code) - skip
   158|         0|            0|            0|  0.00%|                if op is MAX_REPEAT:
   159|         0|            0|            0|  0.00%|                    emit(MAX_UNTIL)
   160|         0|            0|            0|  0.00%|                else:
   161|         0|            0|            0|  0.00%|                    emit(MIN_UNTIL)
   162|         9|   4.1008e-05|  4.55644e-06|  0.02%|        elif op is SUBPATTERN:
   163|         5|  2.26498e-05|  4.52995e-06|  0.01%|            group, add_flags, del_flags, p = av
   164|         5|  2.45571e-05|  4.91142e-06|  0.01%|            if group:
   165|         5|  2.31266e-05|  4.62532e-06|  0.01%|                emit(MARK)
   166|         5|   2.3365e-05|    4.673e-06|  0.01%|                emit((group-1)*2)
   167|         0|            0|            0|  0.00%|            # _compile_info(code, p, _combine_flags(flags, add_flags, del_flags))
   168|         5|  9.75132e-05|  1.95026e-05|  0.04%|            _compile(code, p, _combine_flags(flags, add_flags, del_flags))
(call)|         5|  5.10216e-05|  1.02043e-05|  0.02%|# /usr/lib/python3.10/sre_compile.py:65 _combine_flags
(call)|         5|   0.00291395|   0.00058279|  1.20%|# /usr/lib/python3.10/sre_compile.py:71 _compile
   169|         5|  2.59876e-05|  5.19753e-06|  0.01%|            if group:
   170|         5|  2.40803e-05|  4.81606e-06|  0.01%|                emit(MARK)
   171|         5|   2.6226e-05|  5.24521e-06|  0.01%|                emit((group-1)*2+1)
   172|         4|  1.85966e-05|  4.64916e-06|  0.01%|        elif op in SUCCESS_CODES:
   173|         0|            0|            0|  0.00%|            emit(op)
   174|         4|  2.00272e-05|  5.00679e-06|  0.01%|        elif op in ASSERT_CODES:
   175|         0|            0|            0|  0.00%|            emit(op)
   176|         0|            0|            0|  0.00%|            skip = _len(code); emit(0)
   177|         0|            0|            0|  0.00%|            if av[0] >= 0:
   178|         0|            0|            0|  0.00%|                emit(0) # look ahead
   179|         0|            0|            0|  0.00%|            else:
   180|         0|            0|            0|  0.00%|                lo, hi = av[1].getwidth()
   181|         0|            0|            0|  0.00%|                if lo != hi:
   182|         0|            0|            0|  0.00%|                    raise error("look-behind requires fixed-width pattern")
   183|         0|            0|            0|  0.00%|                emit(lo) # look behind
   184|         0|            0|            0|  0.00%|            _compile(code, av[1], flags)
   185|         0|            0|            0|  0.00%|            emit(SUCCESS)
   186|         0|            0|            0|  0.00%|            code[skip] = _len(code) - skip
   187|         4|  1.88351e-05|  4.70877e-06|  0.01%|        elif op is CALL:
   188|         0|            0|            0|  0.00%|            emit(op)
   189|         0|            0|            0|  0.00%|            skip = _len(code); emit(0)
   190|         0|            0|            0|  0.00%|            _compile(code, av, flags)
   191|         0|            0|            0|  0.00%|            emit(SUCCESS)
   192|         0|            0|            0|  0.00%|            code[skip] = _len(code) - skip
   193|         4|  1.88351e-05|  4.70877e-06|  0.01%|        elif op is AT:
   194|         1|  4.76837e-06|  4.76837e-06|  0.00%|            emit(op)
   195|         1|  5.72205e-06|  5.72205e-06|  0.00%|            if flags & SRE_FLAG_MULTILINE:
   196|         1|  5.96046e-06|  5.96046e-06|  0.00%|                av = AT_MULTILINE.get(av, av)
   197|         1|  5.48363e-06|  5.48363e-06|  0.00%|            if flags & SRE_FLAG_LOCALE:
   198|         0|            0|            0|  0.00%|                av = AT_LOCALE.get(av, av)
   199|         1|  5.00679e-06|  5.00679e-06|  0.00%|            elif flags & SRE_FLAG_UNICODE:
   200|         1|  7.15256e-06|  7.15256e-06|  0.00%|                av = AT_UNICODE.get(av, av)
   201|         1|  5.72205e-06|  5.72205e-06|  0.00%|            emit(av)
   202|         3|  1.50204e-05|  5.00679e-06|  0.01%|        elif op is BRANCH:
   203|         3|  1.40667e-05|   4.6889e-06|  0.01%|            emit(op)
   204|         3|   1.4782e-05|  4.92732e-06|  0.01%|            tail = []
   205|         3|  1.33514e-05|  4.45048e-06|  0.01%|            tailappend = tail.append
   206|        14|  6.50883e-05|  4.64916e-06|  0.03%|            for av in av[1]:
   207|        11|  5.14984e-05|  4.68167e-06|  0.02%|                skip = _len(code); emit(0)
   208|         0|            0|            0|  0.00%|                # _compile_info(code, av, flags)
   209|        11|  0.000140905|  1.28096e-05|  0.06%|                _compile(code, av, flags)
(call)|        11|    0.0043757|  0.000397791|  1.80%|# /usr/lib/python3.10/sre_compile.py:71 _compile
   210|        11|  5.05447e-05|  4.59498e-06|  0.02%|                emit(JUMP)
   211|        11|  5.10216e-05|  4.63833e-06|  0.02%|                tailappend(_len(code)); emit(0)
   212|        11|  5.26905e-05|  4.79005e-06|  0.02%|                code[skip] = _len(code) - skip
   213|         3|  1.38283e-05|  4.60943e-06|  0.01%|            emit(FAILURE) # end of branch
   214|        14|  6.38962e-05|  4.56401e-06|  0.03%|            for tail in tail:
   215|        11|  5.00679e-05|  4.55163e-06|  0.02%|                code[tail] = _len(code) - tail
   216|         0|            0|            0|  0.00%|        elif op is CATEGORY:
   217|         0|            0|            0|  0.00%|            emit(op)
   218|         0|            0|            0|  0.00%|            if flags & SRE_FLAG_LOCALE:
   219|         0|            0|            0|  0.00%|                av = CH_LOCALE[av]
   220|         0|            0|            0|  0.00%|            elif flags & SRE_FLAG_UNICODE:
   221|         0|            0|            0|  0.00%|                av = CH_UNICODE[av]
   222|         0|            0|            0|  0.00%|            emit(av)
   223|         0|            0|            0|  0.00%|        elif op is GROUPREF:
   224|         0|            0|            0|  0.00%|            if not flags & SRE_FLAG_IGNORECASE:
   225|         0|            0|            0|  0.00%|                emit(op)
   226|         0|            0|            0|  0.00%|            elif flags & SRE_FLAG_LOCALE:
   227|         0|            0|            0|  0.00%|                emit(GROUPREF_LOC_IGNORE)
   228|         0|            0|            0|  0.00%|            elif not fixes:  # ascii
   229|         0|            0|            0|  0.00%|                emit(GROUPREF_IGNORE)
   230|         0|            0|            0|  0.00%|            else:
   231|         0|            0|            0|  0.00%|                emit(GROUPREF_UNI_IGNORE)
   232|         0|            0|            0|  0.00%|            emit(av-1)
   233|         0|            0|            0|  0.00%|        elif op is GROUPREF_EXISTS:
   234|         0|            0|            0|  0.00%|            emit(op)
   235|         0|            0|            0|  0.00%|            emit(av[0]-1)
   236|         0|            0|            0|  0.00%|            skipyes = _len(code); emit(0)
   237|         0|            0|            0|  0.00%|            _compile(code, av[1], flags)
   238|         0|            0|            0|  0.00%|            if av[2]:
   239|         0|            0|            0|  0.00%|                emit(JUMP)
   240|         0|            0|            0|  0.00%|                skipno = _len(code); emit(0)
   241|         0|            0|            0|  0.00%|                code[skipyes] = _len(code) - skipyes + 1
   242|         0|            0|            0|  0.00%|                _compile(code, av[2], flags)
   243|         0|            0|            0|  0.00%|                code[skipno] = _len(code) - skipno
   244|         0|            0|            0|  0.00%|            else:
   245|         0|            0|            0|  0.00%|                code[skipyes] = _len(code) - skipyes + 1
   246|         0|            0|            0|  0.00%|        else:
   247|         0|            0|            0|  0.00%|            raise error("internal: unsupported operand type %r" % (op,))
   248|         0|            0|            0|  0.00%|
   249|        20|  6.84261e-05|  3.42131e-06|  0.03%|def _compile_charset(charset, flags, code):
   250|         0|            0|            0|  0.00%|    # compile charset subprogram
   251|        20|  7.12872e-05|  3.56436e-06|  0.03%|    emit = code.append
   252|        41|   0.00014019|  3.41927e-06|  0.06%|    for op, av in charset:
   253|        21|  6.79493e-05|  3.23568e-06|  0.03%|        emit(op)
   254|        21|  6.93798e-05|   3.3038e-06|  0.03%|        if op is NEGATE:
   255|         0|            0|            0|  0.00%|            pass
   256|        21|  7.34329e-05|  3.49681e-06|  0.03%|        elif op is LITERAL:
   257|         2|  8.10623e-06|  4.05312e-06|  0.00%|            emit(av)
   258|        19|  5.98431e-05|  3.14963e-06|  0.02%|        elif op is RANGE or op is RANGE_UNI_IGNORE:
   259|         8|  2.43187e-05|  3.03984e-06|  0.01%|            emit(av[0])
   260|         8|  2.93255e-05|  3.66569e-06|  0.01%|            emit(av[1])
   261|        11|   3.8147e-05|  3.46791e-06|  0.02%|        elif op is CHARSET:
   262|         2|  8.82149e-06|  4.41074e-06|  0.00%|            code.extend(av)
   263|         9|  2.90871e-05|   3.2319e-06|  0.01%|        elif op is BIGCHARSET:
   264|         2|  8.82149e-06|  4.41074e-06|  0.00%|            code.extend(av)
   265|         7|  2.21729e-05|  3.16756e-06|  0.01%|        elif op is CATEGORY:
   266|         7|  2.24113e-05|  3.20162e-06|  0.01%|            if flags & SRE_FLAG_LOCALE:
   267|         0|            0|            0|  0.00%|                emit(CH_LOCALE[av])
   268|         7|  2.36034e-05|  3.37192e-06|  0.01%|            elif flags & SRE_FLAG_UNICODE:
   269|         7|  2.43187e-05|   3.4741e-06|  0.01%|                emit(CH_UNICODE[av])
   270|         0|            0|            0|  0.00%|            else:
   271|         0|            0|            0|  0.00%|                emit(av)
   272|         0|            0|            0|  0.00%|        else:
   273|         0|            0|            0|  0.00%|            raise error("internal: unsupported set operator %r" % (op,))
   274|        20|  6.27041e-05|   3.1352e-06|  0.03%|    emit(FAILURE)
   275|         0|            0|            0|  0.00%|
   276|        20|  9.60827e-05|  4.80413e-06|  0.04%|def _optimize_charset(charset, iscased=None, fixup=None, fixes=None):
   277|         0|            0|            0|  0.00%|    # internal: optimize character set
   278|        20|  9.75132e-05|  4.87566e-06|  0.04%|    out = []
   279|        20|  9.56059e-05|  4.78029e-06|  0.04%|    tail = []
   280|        20|  9.82285e-05|  4.91142e-06|  0.04%|    charmap = bytearray(256)
   281|        20|  9.03606e-05|  4.51803e-06|  0.04%|    hascased = False
   282|        74|   0.00031805|  4.29798e-06|  0.13%|    for op, av in charset:
   283|        56|  0.000234127|  4.18084e-06|  0.10%|        while True:
   284|        56|   0.00023222|  4.14678e-06|  0.10%|            try:
   285|        56|  0.000237942|  4.24896e-06|  0.10%|                if op is LITERAL:
   286|        41|  0.000184536|  4.50088e-06|  0.08%|                    if fixup:
   287|         0|            0|            0|  0.00%|                        lo = fixup(av)
   288|         0|            0|            0|  0.00%|                        charmap[lo] = 1
   289|         0|            0|            0|  0.00%|                        if fixes and lo in fixes:
   290|         0|            0|            0|  0.00%|                            for k in fixes[lo]:
   291|         0|            0|            0|  0.00%|                                charmap[k] = 1
   292|         0|            0|            0|  0.00%|                        if not hascased and iscased(av):
   293|         0|            0|            0|  0.00%|                            hascased = True
   294|         0|            0|            0|  0.00%|                    else:
   295|        41|  0.000182152|  4.44273e-06|  0.07%|                        charmap[av] = 1
   296|        15|  6.27041e-05|  4.18027e-06|  0.03%|                elif op is RANGE:
   297|         8|  3.86238e-05|  4.82798e-06|  0.02%|                    r = range(av[0], av[1]+1)
   298|         8|  3.74317e-05|  4.67896e-06|  0.02%|                    if fixup:
   299|         8|  3.45707e-05|  4.32134e-06|  0.01%|                        if fixes:
   300|        60|  0.000246525|  4.10875e-06|  0.10%|                            for i in map(fixup, r):
   301|        52|  0.000209808|  4.03478e-06|  0.09%|                                charmap[i] = 1
   302|        52|  0.000207186|  3.98434e-06|  0.09%|                                if i in fixes:
   303|         0|            0|            0|  0.00%|                                    for k in fixes[i]:
   304|         0|            0|            0|  0.00%|                                        charmap[k] = 1
   305|         0|            0|            0|  0.00%|                        else:
   306|         0|            0|            0|  0.00%|                            for i in map(fixup, r):
   307|         0|            0|            0|  0.00%|                                charmap[i] = 1
   308|         8|  3.21865e-05|  4.02331e-06|  0.01%|                        if not hascased:
   309|         8|  3.71933e-05|  4.64916e-06|  0.02%|                            hascased = any(map(iscased, r))
   310|         0|            0|            0|  0.00%|                    else:
   311|         0|            0|            0|  0.00%|                        for i in r:
   312|         0|            0|            0|  0.00%|                            charmap[i] = 1
   313|         7|  2.98023e-05|  4.25747e-06|  0.01%|                elif op is NEGATE:
   314|         0|            0|            0|  0.00%|                    out.append((op, av))
   315|         0|            0|            0|  0.00%|                else:
   316|         7|   3.3617e-05|  4.80243e-06|  0.01%|                    tail.append((op, av))
   317|         2|  1.12057e-05|  5.60284e-06|  0.00%|            except IndexError:
   318|         2|  1.23978e-05|  6.19888e-06|  0.01%|                if len(charmap) == 256:
   319|         0|            0|            0|  0.00%|                    # character set contains non-UCS1 character codes
   320|         2|  4.57764e-05|  2.28882e-05|  0.02%|                    charmap += b'\0' * 0xff00
   321|         2|  1.19209e-05|  5.96046e-06|  0.00%|                    continue
   322|         0|            0|            0|  0.00%|                # Character set contains non-BMP character codes.
   323|         0|            0|            0|  0.00%|                if fixup:
   324|         0|            0|            0|  0.00%|                    hascased = True
   325|         0|            0|            0|  0.00%|                    # There are only two ranges of cased non-BMP characters:
   326|         0|            0|            0|  0.00%|                    # 10400-1044F (Deseret) and 118A0-118DF (Warang Citi),
   327|         0|            0|            0|  0.00%|                    # and for both ranges RANGE_UNI_IGNORE works.
   328|         0|            0|            0|  0.00%|                    if op is RANGE:
   329|         0|            0|            0|  0.00%|                        op = RANGE_UNI_IGNORE
   330|         0|            0|            0|  0.00%|                tail.append((op, av))
   331|        54|  0.000239611|  4.43723e-06|  0.10%|            break
   332|         0|            0|            0|  0.00%|
   333|         0|            0|            0|  0.00%|    # compress character map
   334|        20|   8.4877e-05|  4.24385e-06|  0.03%|    runs = []
   335|        20|  8.39233e-05|  4.19617e-06|  0.03%|    q = 0
   336|        38|  0.000152111|  4.00292e-06|  0.06%|    while True:
   337|        38|  0.000175238|  4.61152e-06|  0.07%|        p = charmap.find(1, q)
   338|        38|  0.000148535|  3.90881e-06|  0.06%|        if p < 0:
   339|        16|  6.19888e-05|   3.8743e-06|  0.03%|            break
   340|        22|  8.86917e-05|  4.03144e-06|  0.04%|        if len(runs) >= 2:
   341|         4|  1.50204e-05|  3.75509e-06|  0.01%|            runs = None
   342|         4|  1.81198e-05|  4.52995e-06|  0.01%|            break
   343|        18|   7.4625e-05|  4.14583e-06|  0.03%|        q = charmap.find(0, p)
   344|        18|  7.08103e-05|  3.93391e-06|  0.03%|        if q < 0:
   345|         0|            0|            0|  0.00%|            runs.append((p, len(charmap)))
   346|         0|            0|            0|  0.00%|            break
   347|        18|  7.41482e-05|  4.11934e-06|  0.03%|        runs.append((p, q))
   348|        20|  0.000100851|  5.04255e-06|  0.04%|    if runs is not None:
   349|         0|            0|            0|  0.00%|        # use literal/range
   350|        26|  0.000104904|  4.03478e-06|  0.04%|        for p, q in runs:
   351|        10|  3.95775e-05|  3.95775e-06|  0.02%|            if q - p == 1:
   352|         2|  9.29832e-06|  4.64916e-06|  0.00%|                out.append((LITERAL, p))
   353|         0|            0|            0|  0.00%|            else:
   354|         8|  3.24249e-05|  4.05312e-06|  0.01%|                out.append((RANGE, (p, q - 1)))
   355|        16|   6.4373e-05|  4.02331e-06|  0.03%|        out += tail
   356|         0|            0|            0|  0.00%|        # if the case was changed or new representation is more compact
   357|        16|  9.03606e-05|  5.64754e-06|  0.04%|        if hascased or len(out) < len(charset):
   358|         1|  4.76837e-06|  4.76837e-06|  0.00%|            return out, hascased
   359|         0|            0|            0|  0.00%|        # else original character set is good enough
   360|        15|  7.29561e-05|  4.86374e-06|  0.03%|        return charset, hascased
   361|         0|            0|            0|  0.00%|
   362|         0|            0|            0|  0.00%|    # use bitmap
   363|         4|  1.64509e-05|  4.11272e-06|  0.01%|    if len(charmap) == 256:
   364|         2|   2.3365e-05|  1.16825e-05|  0.01%|        data = _mk_bitmap(charmap)
(call)|         2|  0.000217915|  0.000108957|  0.09%|# /usr/lib/python3.10/sre_compile.py:411 _mk_bitmap
   365|         2|  9.77516e-06|  4.88758e-06|  0.00%|        out.append((CHARSET, data))
   366|         2|  8.82149e-06|  4.41074e-06|  0.00%|        out += tail
   367|         2|  9.29832e-06|  4.64916e-06|  0.00%|        return out, hascased
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|    # To represent a big charset, first a bitmap of all characters in the
   370|         0|            0|            0|  0.00%|    # set is constructed. Then, this bitmap is sliced into chunks of 256
   371|         0|            0|            0|  0.00%|    # characters, duplicate chunks are eliminated, and each chunk is
   372|         0|            0|            0|  0.00%|    # given a number. In the compiled expression, the charset is
   373|         0|            0|            0|  0.00%|    # represented by a 32-bit word sequence, consisting of one word for
   374|         0|            0|            0|  0.00%|    # the number of different chunks, a sequence of 256 bytes (64 words)
   375|         0|            0|            0|  0.00%|    # of chunk numbers indexed by their original chunk position, and a
   376|         0|            0|            0|  0.00%|    # sequence of 256-bit chunks (8 words each).
   377|         0|            0|            0|  0.00%|
   378|         0|            0|            0|  0.00%|    # Compression is normally good: in a typical charset, large ranges of
   379|         0|            0|            0|  0.00%|    # Unicode will be either completely excluded (e.g. if only cyrillic
   380|         0|            0|            0|  0.00%|    # letters are to be matched), or completely included (e.g. if large
   381|         0|            0|            0|  0.00%|    # subranges of Kanji match). These ranges will be represented by
   382|         0|            0|            0|  0.00%|    # chunks of all one-bits or all zero-bits.
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|    # Matching can be also done efficiently: the more significant byte of
   385|         0|            0|            0|  0.00%|    # the Unicode character is an index into the chunk number, and the
   386|         0|            0|            0|  0.00%|    # less significant byte is a bit index in the chunk (just like the
   387|         0|            0|            0|  0.00%|    # CHARSET matching).
   388|         0|            0|            0|  0.00%|
   389|         2|   2.3365e-05|  1.16825e-05|  0.01%|    charmap = bytes(charmap) # should be hashable
   390|         2|  9.77516e-06|  4.88758e-06|  0.00%|    comps = {}
   391|         2|  9.29832e-06|  4.64916e-06|  0.00%|    mapping = bytearray(256)
   392|         2|  8.34465e-06|  4.17233e-06|  0.00%|    block = 0
   393|         2|  1.00136e-05|  5.00679e-06|  0.00%|    data = bytearray()
   394|       514|   0.00186253|  3.62359e-06|  0.77%|    for i in range(0, 65536, 256):
   395|       512|   0.00189734|  3.70573e-06|  0.78%|        chunk = charmap[i: i + 256]
   396|       512|   0.00188422|  3.68012e-06|  0.78%|        if chunk in comps:
   397|       504|   0.00188375|  3.73759e-06|  0.78%|            mapping[i // 256] = comps[chunk]
   398|         0|            0|            0|  0.00%|        else:
   399|         8|  3.09944e-05|   3.8743e-06|  0.01%|            mapping[i // 256] = comps[chunk] = block
   400|         8|  3.05176e-05|   3.8147e-06|  0.01%|            block += 1
   401|         8|  3.24249e-05|  4.05312e-06|  0.01%|            data += chunk
   402|         2|  2.16961e-05|   1.0848e-05|  0.01%|    data = _mk_bitmap(data)
(call)|         2|  0.000649691|  0.000324845|  0.27%|# /usr/lib/python3.10/sre_compile.py:411 _mk_bitmap
   403|         2|  2.36034e-05|  1.18017e-05|  0.01%|    data[0:0] = [block] + _bytes_to_codes(mapping)
(call)|         2|  4.29153e-05|  2.14577e-05|  0.02%|# /usr/lib/python3.10/sre_compile.py:416 _bytes_to_codes
   404|         2|  1.00136e-05|  5.00679e-06|  0.00%|    out.append((BIGCHARSET, data))
   405|         2|  8.10623e-06|  4.05312e-06|  0.00%|    out += tail
   406|         2|  8.34465e-06|  4.17233e-06|  0.00%|    return out, hascased
   407|         0|            0|            0|  0.00%|
   408|         0|            0|            0|  0.00%|_CODEBITS = _sre.CODESIZE * 8
   409|         0|            0|            0|  0.00%|MAXCODE = (1 << _CODEBITS) - 1
   410|         0|            0|            0|  0.00%|_BITS_TRANS = b'0' + b'1' * 255
   411|         4|  1.50204e-05|  3.75509e-06|  0.01%|def _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):
   412|         4|  2.43187e-05|  6.07967e-06|  0.01%|    s = bits.translate(_BITS_TRANS)[::-1]
   413|       176|  0.000579596|  3.29316e-06|  0.24%|    return [_int(s[i - _CODEBITS: i], 2)
(call)|         4|  0.000756025|  0.000189006|  0.31%|# /usr/lib/python3.10/sre_compile.py:413 <listcomp>
   414|        84|  0.000248671|  2.96036e-06|  0.10%|            for i in range(len(s), 0, -_CODEBITS)]
   415|         0|            0|            0|  0.00%|
   416|         2|  7.15256e-06|  3.57628e-06|  0.00%|def _bytes_to_codes(b):
   417|         0|            0|            0|  0.00%|    # Convert block indices to word array
   418|         2|  9.77516e-06|  4.88758e-06|  0.00%|    a = memoryview(b).cast('I')
   419|         2|  7.86781e-06|  3.93391e-06|  0.00%|    assert a.itemsize == _sre.CODESIZE
   420|         2|  6.91414e-06|  3.45707e-06|  0.00%|    assert len(a) * a.itemsize == len(b)
   421|         2|  1.12057e-05|  5.60284e-06|  0.00%|    return a.tolist()
   422|         0|            0|            0|  0.00%|
   423|         2|  7.39098e-06|  3.69549e-06|  0.00%|def _simple(p):
   424|         0|            0|            0|  0.00%|    # check if this subpattern is a "simple" operator
   425|         2|  1.71661e-05|  8.58307e-06|  0.01%|    if len(p) != 1:
(call)|         2|  1.21593e-05|  6.07967e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:160 __len__
   426|         0|            0|            0|  0.00%|        return False
   427|         2|   1.5974e-05|  7.98702e-06|  0.01%|    op, av = p[0]
(call)|         2|  1.83582e-05|  9.17912e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   428|         2|  7.15256e-06|  3.57628e-06|  0.00%|    if op is SUBPATTERN:
   429|         0|            0|            0|  0.00%|        return av[0] is None and _simple(av[-1])
   430|         2|  7.15256e-06|  3.57628e-06|  0.00%|    return op in _UNIT_CODES
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|def _generate_overlap_table(prefix):
   433|         0|            0|            0|  0.00%|    """
   434|         0|            0|            0|  0.00%|    Generate an overlap table for the following prefix.
   435|         0|            0|            0|  0.00%|    An overlap table is a table of the same size as the prefix which
   436|         0|            0|            0|  0.00%|    informs about the potential self-overlap for each index in the prefix:
   437|         0|            0|            0|  0.00%|    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]
   438|         0|            0|            0|  0.00%|    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with
   439|         0|            0|            0|  0.00%|      prefix[0:k]
   440|         0|            0|            0|  0.00%|    """
   441|         0|            0|            0|  0.00%|    table = [0] * len(prefix)
   442|         0|            0|            0|  0.00%|    for i in range(1, len(prefix)):
   443|         0|            0|            0|  0.00%|        idx = table[i - 1]
   444|         0|            0|            0|  0.00%|        while prefix[i] != prefix[idx]:
   445|         0|            0|            0|  0.00%|            if idx == 0:
   446|         0|            0|            0|  0.00%|                table[i] = 0
   447|         0|            0|            0|  0.00%|                break
   448|         0|            0|            0|  0.00%|            idx = table[idx - 1]
   449|         0|            0|            0|  0.00%|        else:
   450|         0|            0|            0|  0.00%|            table[i] = idx + 1
   451|         0|            0|            0|  0.00%|    return table
   452|         0|            0|            0|  0.00%|
   453|        16|  4.26769e-05|  2.66731e-06|  0.02%|def _get_iscased(flags):
   454|        16|  5.05447e-05|  3.15905e-06|  0.02%|    if not flags & SRE_FLAG_IGNORECASE:
   455|        11|  3.33786e-05|  3.03442e-06|  0.01%|        return None
   456|         5|  1.50204e-05|  3.00407e-06|  0.01%|    elif flags & SRE_FLAG_UNICODE:
   457|         5|  1.71661e-05|  3.43323e-06|  0.01%|        return _sre.unicode_iscased
   458|         0|            0|            0|  0.00%|    else:
   459|         0|            0|            0|  0.00%|        return _sre.ascii_iscased
   460|         0|            0|            0|  0.00%|
   461|         9|  3.93391e-05|  4.37101e-06|  0.02%|def _get_literal_prefix(pattern, flags):
   462|         0|            0|            0|  0.00%|    # look for literal prefix
   463|         9|  3.88622e-05|  4.31803e-06|  0.02%|    prefix = []
   464|         9|  3.88622e-05|  4.31803e-06|  0.02%|    prefixappend = prefix.append
   465|         9|  3.83854e-05|  4.26504e-06|  0.02%|    prefix_skip = None
   466|         9|   8.4877e-05|  9.43078e-06|  0.03%|    iscased = _get_iscased(flags)
(call)|         9|  9.27448e-05|   1.0305e-05|  0.04%|# /usr/lib/python3.10/sre_compile.py:453 _get_iscased
   467|         9|  3.71933e-05|  4.13259e-06|  0.02%|    for op, av in pattern.data:
   468|         9|  3.69549e-05|   4.1061e-06|  0.02%|        if op is LITERAL:
   469|         1|  5.24521e-06|  5.24521e-06|  0.00%|            if iscased and iscased(av):
   470|         1|  4.29153e-06|  4.29153e-06|  0.00%|                break
   471|         0|            0|            0|  0.00%|            prefixappend(av)
   472|         8|  3.19481e-05|  3.99351e-06|  0.01%|        elif op is SUBPATTERN:
   473|         2|  7.62939e-06|   3.8147e-06|  0.00%|            group, add_flags, del_flags, p = av
   474|         2|  2.57492e-05|  1.28746e-05|  0.01%|            flags1 = _combine_flags(flags, add_flags, del_flags)
(call)|         2|  2.14577e-05|  1.07288e-05|  0.01%|# /usr/lib/python3.10/sre_compile.py:65 _combine_flags
   475|         2|  8.58307e-06|  4.29153e-06|  0.00%|            if flags1 & SRE_FLAG_IGNORECASE and flags1 & SRE_FLAG_LOCALE:
   476|         0|            0|            0|  0.00%|                break
   477|         2|  2.16961e-05|   1.0848e-05|  0.01%|            prefix1, prefix_skip1, got_all = _get_literal_prefix(p, flags1)
(call)|         2|  0.000108004|  5.40018e-05|  0.04%|# /usr/lib/python3.10/sre_compile.py:461 _get_literal_prefix
   478|         2|  8.82149e-06|  4.41074e-06|  0.00%|            if prefix_skip is None:
   479|         2|  7.39098e-06|  3.69549e-06|  0.00%|                if group is not None:
   480|         2|  8.10623e-06|  4.05312e-06|  0.00%|                    prefix_skip = len(prefix)
   481|         0|            0|            0|  0.00%|                elif prefix_skip1 is not None:
   482|         0|            0|            0|  0.00%|                    prefix_skip = len(prefix) + prefix_skip1
   483|         2|  7.62939e-06|   3.8147e-06|  0.00%|            prefix.extend(prefix1)
   484|         2|  8.34465e-06|  4.17233e-06|  0.00%|            if not got_all:
   485|         2|  7.86781e-06|  3.93391e-06|  0.00%|                break
   486|         0|            0|            0|  0.00%|        else:
   487|         6|  2.24113e-05|  3.73522e-06|  0.01%|            break
   488|         0|            0|            0|  0.00%|    else:
   489|         0|            0|            0|  0.00%|        return prefix, prefix_skip, True
   490|         9|  3.60012e-05|  4.00013e-06|  0.01%|    return prefix, prefix_skip, False
   491|         0|            0|            0|  0.00%|
   492|         7|  2.76566e-05|  3.95094e-06|  0.01%|def _get_charset_prefix(pattern, flags):
   493|         9|  3.67165e-05|  4.07961e-06|  0.02%|    while True:
   494|         9|  3.57628e-05|  3.97364e-06|  0.01%|        if not pattern.data:
   495|         0|            0|            0|  0.00%|            return None
   496|         9|  3.40939e-05|  3.78821e-06|  0.01%|        op, av = pattern.data[0]
   497|         9|  3.43323e-05|   3.8147e-06|  0.01%|        if op is not SUBPATTERN:
   498|         7|  2.64645e-05|  3.78064e-06|  0.01%|            break
   499|         2|  8.10623e-06|  4.05312e-06|  0.00%|        group, add_flags, del_flags, pattern = av
   500|         2|  1.90735e-05|  9.53674e-06|  0.01%|        flags = _combine_flags(flags, add_flags, del_flags)
(call)|         2|  1.85966e-05|  9.29832e-06|  0.01%|# /usr/lib/python3.10/sre_compile.py:65 _combine_flags
   501|         2|  9.05991e-06|  4.52995e-06|  0.00%|        if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:
   502|         0|            0|            0|  0.00%|            return None
   503|         0|            0|            0|  0.00%|
   504|         7|  5.98431e-05|  8.54901e-06|  0.02%|    iscased = _get_iscased(flags)
(call)|         7|  6.60419e-05|  9.43456e-06|  0.03%|# /usr/lib/python3.10/sre_compile.py:453 _get_iscased
   505|         7|  2.64645e-05|  3.78064e-06|  0.01%|    if op is LITERAL:
   506|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if iscased and iscased(av):
   507|         1|  4.29153e-06|  4.29153e-06|  0.00%|            return None
   508|         0|            0|            0|  0.00%|        return [(op, av)]
   509|         6|  2.16961e-05|  3.61602e-06|  0.01%|    elif op is BRANCH:
   510|         1|  5.24521e-06|  5.24521e-06|  0.00%|        charset = []
   511|         1|  4.52995e-06|  4.52995e-06|  0.00%|        charsetappend = charset.append
   512|         4|   1.4782e-05|  3.69549e-06|  0.01%|        for p in av[1]:
   513|         3|  2.55108e-05|   8.5036e-06|  0.01%|            if not p:
(call)|         3|  1.74046e-05|  5.80152e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:160 __len__
   514|         0|            0|            0|  0.00%|                return None
   515|         3|  2.69413e-05|  8.98043e-06|  0.01%|            op, av = p[0]
(call)|         3|   2.6226e-05|  8.74201e-06|  0.01%|# /usr/lib/python3.10/sre_parse.py:164 __getitem__
   516|         3|  1.14441e-05|   3.8147e-06|  0.00%|            if op is LITERAL and not (iscased and iscased(av)):
   517|         3|  1.09673e-05|  3.65575e-06|  0.00%|                charsetappend((op, av))
   518|         0|            0|            0|  0.00%|            else:
   519|         0|            0|            0|  0.00%|                return None
   520|         1|  3.57628e-06|  3.57628e-06|  0.00%|        return charset
   521|         5|   1.7643e-05|  3.52859e-06|  0.01%|    elif op is IN:
   522|         3|  1.21593e-05|  4.05312e-06|  0.01%|        charset = av
   523|         3|  1.12057e-05|  3.73522e-06|  0.00%|        if iscased:
   524|         2|  7.39098e-06|  3.69549e-06|  0.00%|            for op, av in charset:
   525|         1|   6.4373e-06|   6.4373e-06|  0.00%|                if op is LITERAL:
   526|         0|            0|            0|  0.00%|                    if iscased(av):
   527|         0|            0|            0|  0.00%|                        return None
   528|         1|  4.52995e-06|  4.52995e-06|  0.00%|                elif op is RANGE:
   529|         0|            0|            0|  0.00%|                    if av[1] > 0xffff:
   530|         0|            0|            0|  0.00%|                        return None
   531|         0|            0|            0|  0.00%|                    if any(map(iscased, range(av[0], av[1]+1))):
   532|         0|            0|            0|  0.00%|                        return None
   533|         3|  1.09673e-05|  3.65575e-06|  0.00%|        return charset
   534|         2|  7.62939e-06|   3.8147e-06|  0.00%|    return None
   535|         0|            0|            0|  0.00%|
   536|         7|  2.69413e-05|  3.84876e-06|  0.01%|def _compile_info(code, pattern, flags):
   537|         0|            0|            0|  0.00%|    # internal: compile an info block.  in the current version,
   538|         0|            0|            0|  0.00%|    # this contains min/max pattern width, and an optional literal
   539|         0|            0|            0|  0.00%|    # prefix or a character map
   540|         7|  6.96182e-05|  9.94546e-06|  0.03%|    lo, hi = pattern.getwidth()
(call)|         7|   0.00109816|  0.000156879|  0.45%|# /usr/lib/python3.10/sre_parse.py:174 getwidth
   541|         7|  3.24249e-05|  4.63213e-06|  0.01%|    if hi > MAXCODE:
   542|         0|            0|            0|  0.00%|        hi = MAXCODE
   543|         7|  2.81334e-05|  4.01906e-06|  0.01%|    if lo == 0:
   544|         0|            0|            0|  0.00%|        code.extend([INFO, 4, 0, lo, hi])
   545|         0|            0|            0|  0.00%|        return
   546|         0|            0|            0|  0.00%|    # look for a literal prefix
   547|         7|  2.83718e-05|  4.05312e-06|  0.01%|    prefix = []
   548|         7|  2.67029e-05|   3.8147e-06|  0.01%|    prefix_skip = 0
   549|         7|  2.57492e-05|  3.67846e-06|  0.01%|    charset = [] # not used
   550|         7|  2.71797e-05|  3.88282e-06|  0.01%|    if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):
   551|         0|            0|            0|  0.00%|        # look for literal prefix
   552|         7|  7.36713e-05|  1.05245e-05|  0.03%|        prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)
(call)|         7|  0.000640392|  9.14846e-05|  0.26%|# /usr/lib/python3.10/sre_compile.py:461 _get_literal_prefix
   553|         0|            0|            0|  0.00%|        # if no prefix, look for charset prefix
   554|         7|   2.7895e-05|    3.985e-06|  0.01%|        if not prefix:
   555|         7|  6.98566e-05|  9.97952e-06|  0.03%|            charset = _get_charset_prefix(pattern, flags)
(call)|         7|  0.000656605|  9.38007e-05|  0.27%|# /usr/lib/python3.10/sre_compile.py:492 _get_charset_prefix
   556|         0|            0|            0|  0.00%|##     if prefix:
   557|         0|            0|            0|  0.00%|##         print("*** PREFIX", prefix, prefix_skip)
   558|         0|            0|            0|  0.00%|##     if charset:
   559|         0|            0|            0|  0.00%|##         print("*** CHARSET", charset)
   560|         0|            0|            0|  0.00%|    # add an info block
   561|         7|  2.74181e-05|  3.91688e-06|  0.01%|    emit = code.append
   562|         7|   2.7895e-05|    3.985e-06|  0.01%|    emit(INFO)
   563|         7|  2.71797e-05|  3.88282e-06|  0.01%|    skip = len(code); emit(0)
   564|         0|            0|            0|  0.00%|    # literal flag
   565|         7|  2.55108e-05|   3.6444e-06|  0.01%|    mask = 0
   566|         7|   2.5034e-05|  3.57628e-06|  0.01%|    if prefix:
   567|         0|            0|            0|  0.00%|        mask = SRE_INFO_PREFIX
   568|         0|            0|            0|  0.00%|        if prefix_skip is None and got_all:
   569|         0|            0|            0|  0.00%|            mask = mask | SRE_INFO_LITERAL
   570|         7|  2.36034e-05|  3.37192e-06|  0.01%|    elif charset:
   571|         4|   1.4782e-05|  3.69549e-06|  0.01%|        mask = mask | SRE_INFO_CHARSET
   572|         7|  2.47955e-05|  3.54222e-06|  0.01%|    emit(mask)
   573|         0|            0|            0|  0.00%|    # pattern length
   574|         7|   2.3365e-05|  3.33786e-06|  0.01%|    if lo < MAXCODE:
   575|         7|  2.28882e-05|  3.26974e-06|  0.01%|        emit(lo)
   576|         0|            0|            0|  0.00%|    else:
   577|         0|            0|            0|  0.00%|        emit(MAXCODE)
   578|         0|            0|            0|  0.00%|        prefix = prefix[:MAXCODE]
   579|         7|   2.7895e-05|    3.985e-06|  0.01%|    emit(min(hi, MAXCODE))
   580|         0|            0|            0|  0.00%|    # add literal prefix
   581|         7|  2.43187e-05|   3.4741e-06|  0.01%|    if prefix:
   582|         0|            0|            0|  0.00%|        emit(len(prefix)) # length
   583|         0|            0|            0|  0.00%|        if prefix_skip is None:
   584|         0|            0|            0|  0.00%|            prefix_skip =  len(prefix)
   585|         0|            0|            0|  0.00%|        emit(prefix_skip) # skip
   586|         0|            0|            0|  0.00%|        code.extend(prefix)
   587|         0|            0|            0|  0.00%|        # generate overlap table
   588|         0|            0|            0|  0.00%|        code.extend(_generate_overlap_table(prefix))
   589|         7|  2.24113e-05|  3.20162e-06|  0.01%|    elif charset:
   590|         4|    5.126e-05|   1.2815e-05|  0.02%|        charset, hascased = _optimize_charset(charset)
(call)|         4|   0.00563002|    0.0014075|  2.32%|# /usr/lib/python3.10/sre_compile.py:276 _optimize_charset
   591|         4|  1.57356e-05|  3.93391e-06|  0.01%|        assert not hascased
   592|         4|  4.17233e-05|  1.04308e-05|  0.02%|        _compile_charset(charset, flags, code)
(call)|         4|  0.000199318|  4.98295e-05|  0.08%|# /usr/lib/python3.10/sre_compile.py:249 _compile_charset
   593|         7|  2.57492e-05|  3.67846e-06|  0.01%|    code[skip] = len(code) - skip
   594|         0|            0|            0|  0.00%|
   595|        14|  3.98159e-05|  2.84399e-06|  0.02%|def isstring(obj):
   596|        14|  5.10216e-05|   3.6444e-06|  0.02%|    return isinstance(obj, (str, bytes))
   597|         0|            0|            0|  0.00%|
   598|         7|  2.14577e-05|  3.06538e-06|  0.01%|def _code(p, flags):
   599|         0|            0|            0|  0.00%|
   600|         7|   2.5034e-05|  3.57628e-06|  0.01%|    flags = p.state.flags | flags
   601|         7|  2.07424e-05|   2.9632e-06|  0.01%|    code = []
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|    # compile info block
   604|         7|  6.84261e-05|  9.77516e-06|  0.03%|    _compile_info(code, p, flags)
(call)|         7|    0.0091126|    0.0013018|  3.75%|# /usr/lib/python3.10/sre_compile.py:536 _compile_info
   605|         0|            0|            0|  0.00%|
   606|         0|            0|            0|  0.00%|    # compile the pattern
   607|         7|  8.36849e-05|   1.1955e-05|  0.03%|    _compile(code, p.data, flags)
(call)|         7|    0.0141809|   0.00202584|  5.84%|# /usr/lib/python3.10/sre_compile.py:71 _compile
   608|         0|            0|            0|  0.00%|
   609|         7|  2.67029e-05|   3.8147e-06|  0.01%|    code.append(SUCCESS)
   610|         0|            0|            0|  0.00%|
   611|         7|  2.24113e-05|  3.20162e-06|  0.01%|    return code
   612|         0|            0|            0|  0.00%|
   613|         0|            0|            0|  0.00%|def _hex_code(code):
   614|         0|            0|            0|  0.00%|    return '[%s]' % ', '.join('%#0*x' % (_sre.CODESIZE*2+2, x) for x in code)
   615|         0|            0|            0|  0.00%|
   616|         0|            0|            0|  0.00%|def dis(code):
   617|         0|            0|            0|  0.00%|    import sys
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|    labels = set()
   620|         0|            0|            0|  0.00%|    level = 0
   621|         0|            0|            0|  0.00%|    offset_width = len(str(len(code) - 1))
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|    def dis_(start, end):
   624|         0|            0|            0|  0.00%|        def print_(*args, to=None):
   625|         0|            0|            0|  0.00%|            if to is not None:
   626|         0|            0|            0|  0.00%|                labels.add(to)
   627|         0|            0|            0|  0.00%|                args += ('(to %d)' % (to,),)
   628|         0|            0|            0|  0.00%|            print('%*d%s ' % (offset_width, start, ':' if start in labels else '.'),
   629|         0|            0|            0|  0.00%|                  end='  '*(level-1))
   630|         0|            0|            0|  0.00%|            print(*args)
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|        def print_2(*args):
   633|         0|            0|            0|  0.00%|            print(end=' '*(offset_width + 2*level))
   634|         0|            0|            0|  0.00%|            print(*args)
   635|         0|            0|            0|  0.00%|
   636|         0|            0|            0|  0.00%|        nonlocal level
   637|         0|            0|            0|  0.00%|        level += 1
   638|         0|            0|            0|  0.00%|        i = start
   639|         0|            0|            0|  0.00%|        while i < end:
   640|         0|            0|            0|  0.00%|            start = i
   641|         0|            0|            0|  0.00%|            op = code[i]
   642|         0|            0|            0|  0.00%|            i += 1
   643|         0|            0|            0|  0.00%|            op = OPCODES[op]
   644|         0|            0|            0|  0.00%|            if op in (SUCCESS, FAILURE, ANY, ANY_ALL,
   645|         0|            0|            0|  0.00%|                      MAX_UNTIL, MIN_UNTIL, NEGATE):
   646|         0|            0|            0|  0.00%|                print_(op)
   647|         0|            0|            0|  0.00%|            elif op in (LITERAL, NOT_LITERAL,
   648|         0|            0|            0|  0.00%|                        LITERAL_IGNORE, NOT_LITERAL_IGNORE,
   649|         0|            0|            0|  0.00%|                        LITERAL_UNI_IGNORE, NOT_LITERAL_UNI_IGNORE,
   650|         0|            0|            0|  0.00%|                        LITERAL_LOC_IGNORE, NOT_LITERAL_LOC_IGNORE):
   651|         0|            0|            0|  0.00%|                arg = code[i]
   652|         0|            0|            0|  0.00%|                i += 1
   653|         0|            0|            0|  0.00%|                print_(op, '%#02x (%r)' % (arg, chr(arg)))
   654|         0|            0|            0|  0.00%|            elif op is AT:
   655|         0|            0|            0|  0.00%|                arg = code[i]
   656|         0|            0|            0|  0.00%|                i += 1
   657|         0|            0|            0|  0.00%|                arg = str(ATCODES[arg])
   658|         0|            0|            0|  0.00%|                assert arg[:3] == 'AT_'
   659|         0|            0|            0|  0.00%|                print_(op, arg[3:])
   660|         0|            0|            0|  0.00%|            elif op is CATEGORY:
   661|         0|            0|            0|  0.00%|                arg = code[i]
   662|         0|            0|            0|  0.00%|                i += 1
   663|         0|            0|            0|  0.00%|                arg = str(CHCODES[arg])
   664|         0|            0|            0|  0.00%|                assert arg[:9] == 'CATEGORY_'
   665|         0|            0|            0|  0.00%|                print_(op, arg[9:])
   666|         0|            0|            0|  0.00%|            elif op in (IN, IN_IGNORE, IN_UNI_IGNORE, IN_LOC_IGNORE):
   667|         0|            0|            0|  0.00%|                skip = code[i]
   668|         0|            0|            0|  0.00%|                print_(op, skip, to=i+skip)
   669|         0|            0|            0|  0.00%|                dis_(i+1, i+skip)
   670|         0|            0|            0|  0.00%|                i += skip
   671|         0|            0|            0|  0.00%|            elif op in (RANGE, RANGE_UNI_IGNORE):
   672|         0|            0|            0|  0.00%|                lo, hi = code[i: i+2]
   673|         0|            0|            0|  0.00%|                i += 2
   674|         0|            0|            0|  0.00%|                print_(op, '%#02x %#02x (%r-%r)' % (lo, hi, chr(lo), chr(hi)))
   675|         0|            0|            0|  0.00%|            elif op is CHARSET:
   676|         0|            0|            0|  0.00%|                print_(op, _hex_code(code[i: i + 256//_CODEBITS]))
   677|         0|            0|            0|  0.00%|                i += 256//_CODEBITS
   678|         0|            0|            0|  0.00%|            elif op is BIGCHARSET:
   679|         0|            0|            0|  0.00%|                arg = code[i]
   680|         0|            0|            0|  0.00%|                i += 1
   681|         0|            0|            0|  0.00%|                mapping = list(b''.join(x.to_bytes(_sre.CODESIZE, sys.byteorder)
   682|         0|            0|            0|  0.00%|                                        for x in code[i: i + 256//_sre.CODESIZE]))
   683|         0|            0|            0|  0.00%|                print_(op, arg, mapping)
   684|         0|            0|            0|  0.00%|                i += 256//_sre.CODESIZE
   685|         0|            0|            0|  0.00%|                level += 1
   686|         0|            0|            0|  0.00%|                for j in range(arg):
   687|         0|            0|            0|  0.00%|                    print_2(_hex_code(code[i: i + 256//_CODEBITS]))
   688|         0|            0|            0|  0.00%|                    i += 256//_CODEBITS
   689|         0|            0|            0|  0.00%|                level -= 1
   690|         0|            0|            0|  0.00%|            elif op in (MARK, GROUPREF, GROUPREF_IGNORE, GROUPREF_UNI_IGNORE,
   691|         0|            0|            0|  0.00%|                        GROUPREF_LOC_IGNORE):
   692|         0|            0|            0|  0.00%|                arg = code[i]
   693|         0|            0|            0|  0.00%|                i += 1
   694|         0|            0|            0|  0.00%|                print_(op, arg)
   695|         0|            0|            0|  0.00%|            elif op is JUMP:
   696|         0|            0|            0|  0.00%|                skip = code[i]
   697|         0|            0|            0|  0.00%|                print_(op, skip, to=i+skip)
   698|         0|            0|            0|  0.00%|                i += 1
   699|         0|            0|            0|  0.00%|            elif op is BRANCH:
   700|         0|            0|            0|  0.00%|                skip = code[i]
   701|         0|            0|            0|  0.00%|                print_(op, skip, to=i+skip)
   702|         0|            0|            0|  0.00%|                while skip:
   703|         0|            0|            0|  0.00%|                    dis_(i+1, i+skip)
   704|         0|            0|            0|  0.00%|                    i += skip
   705|         0|            0|            0|  0.00%|                    start = i
   706|         0|            0|            0|  0.00%|                    skip = code[i]
   707|         0|            0|            0|  0.00%|                    if skip:
   708|         0|            0|            0|  0.00%|                        print_('branch', skip, to=i+skip)
   709|         0|            0|            0|  0.00%|                    else:
   710|         0|            0|            0|  0.00%|                        print_(FAILURE)
   711|         0|            0|            0|  0.00%|                i += 1
   712|         0|            0|            0|  0.00%|            elif op in (REPEAT, REPEAT_ONE, MIN_REPEAT_ONE):
   713|         0|            0|            0|  0.00%|                skip, min, max = code[i: i+3]
   714|         0|            0|            0|  0.00%|                if max == MAXREPEAT:
   715|         0|            0|            0|  0.00%|                    max = 'MAXREPEAT'
   716|         0|            0|            0|  0.00%|                print_(op, skip, min, max, to=i+skip)
   717|         0|            0|            0|  0.00%|                dis_(i+3, i+skip)
   718|         0|            0|            0|  0.00%|                i += skip
   719|         0|            0|            0|  0.00%|            elif op is GROUPREF_EXISTS:
   720|         0|            0|            0|  0.00%|                arg, skip = code[i: i+2]
   721|         0|            0|            0|  0.00%|                print_(op, arg, skip, to=i+skip)
   722|         0|            0|            0|  0.00%|                i += 2
   723|         0|            0|            0|  0.00%|            elif op in (ASSERT, ASSERT_NOT):
   724|         0|            0|            0|  0.00%|                skip, arg = code[i: i+2]
   725|         0|            0|            0|  0.00%|                print_(op, skip, arg, to=i+skip)
   726|         0|            0|            0|  0.00%|                dis_(i+2, i+skip)
   727|         0|            0|            0|  0.00%|                i += skip
   728|         0|            0|            0|  0.00%|            elif op is INFO:
   729|         0|            0|            0|  0.00%|                skip, flags, min, max = code[i: i+4]
   730|         0|            0|            0|  0.00%|                if max == MAXREPEAT:
   731|         0|            0|            0|  0.00%|                    max = 'MAXREPEAT'
   732|         0|            0|            0|  0.00%|                print_(op, skip, bin(flags), min, max, to=i+skip)
   733|         0|            0|            0|  0.00%|                start = i+4
   734|         0|            0|            0|  0.00%|                if flags & SRE_INFO_PREFIX:
   735|         0|            0|            0|  0.00%|                    prefix_len, prefix_skip = code[i+4: i+6]
   736|         0|            0|            0|  0.00%|                    print_2('  prefix_skip', prefix_skip)
   737|         0|            0|            0|  0.00%|                    start = i + 6
   738|         0|            0|            0|  0.00%|                    prefix = code[start: start+prefix_len]
   739|         0|            0|            0|  0.00%|                    print_2('  prefix',
   740|         0|            0|            0|  0.00%|                            '[%s]' % ', '.join('%#02x' % x for x in prefix),
   741|         0|            0|            0|  0.00%|                            '(%r)' % ''.join(map(chr, prefix)))
   742|         0|            0|            0|  0.00%|                    start += prefix_len
   743|         0|            0|            0|  0.00%|                    print_2('  overlap', code[start: start+prefix_len])
   744|         0|            0|            0|  0.00%|                    start += prefix_len
   745|         0|            0|            0|  0.00%|                if flags & SRE_INFO_CHARSET:
   746|         0|            0|            0|  0.00%|                    level += 1
   747|         0|            0|            0|  0.00%|                    print_2('in')
   748|         0|            0|            0|  0.00%|                    dis_(start, i+skip)
   749|         0|            0|            0|  0.00%|                    level -= 1
   750|         0|            0|            0|  0.00%|                i += skip
   751|         0|            0|            0|  0.00%|            else:
   752|         0|            0|            0|  0.00%|                raise ValueError(op)
   753|         0|            0|            0|  0.00%|
   754|         0|            0|            0|  0.00%|        level -= 1
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|    dis_(0, len(code))
   757|         0|            0|            0|  0.00%|
   758|         0|            0|            0|  0.00%|
   759|         7|  2.59876e-05|  3.71252e-06|  0.01%|def compile(p, flags=0):
   760|         0|            0|            0|  0.00%|    # internal: convert pattern list to internal format
   761|         0|            0|            0|  0.00%|
   762|         7|  6.17504e-05|  8.82149e-06|  0.03%|    if isstring(p):
(call)|         7|  4.05312e-05|  5.79017e-06|  0.02%|# /usr/lib/python3.10/sre_compile.py:595 isstring
   763|         7|  2.59876e-05|  3.71252e-06|  0.01%|        pattern = p
   764|         7|  7.34329e-05|  1.04904e-05|  0.03%|        p = sre_parse.parse(p, flags)
(call)|         7|    0.0233898|    0.0033414|  9.63%|# /usr/lib/python3.10/sre_parse.py:937 parse
   765|         0|            0|            0|  0.00%|    else:
   766|         0|            0|            0|  0.00%|        pattern = None
   767|         0|            0|            0|  0.00%|
   768|         7|  6.96182e-05|  9.94546e-06|  0.03%|    code = _code(p, flags)
(call)|         7|     0.023562|   0.00336599|  9.70%|# /usr/lib/python3.10/sre_compile.py:598 _code
   769|         0|            0|            0|  0.00%|
   770|         7|  2.93255e-05|  4.18936e-06|  0.01%|    if flags & SRE_FLAG_DEBUG:
   771|         0|            0|            0|  0.00%|        print()
   772|         0|            0|            0|  0.00%|        dis(code)
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|    # map in either direction
   775|         7|  2.86102e-05|  4.08718e-06|  0.01%|    groupindex = p.state.groupdict
   776|         7|  6.79493e-05|  9.70704e-06|  0.03%|    indexgroup = [None] * p.state.groups
(call)|         7|  4.50611e-05|   6.4373e-06|  0.02%|# /usr/lib/python3.10/sre_parse.py:81 groups
   777|        10|  4.29153e-05|  4.29153e-06|  0.02%|    for k, i in groupindex.items():
   778|         3|  1.07288e-05|  3.57628e-06|  0.00%|        indexgroup[i] = k
   779|         0|            0|            0|  0.00%|
   780|        14|  5.79357e-05|  4.13827e-06|  0.02%|    return _sre.compile(
   781|         7|  2.74181e-05|  3.91688e-06|  0.01%|        pattern, flags | p.state.flags, code,
   782|         7|  5.96046e-05|  8.51495e-06|  0.02%|        p.state.groups-1,
(call)|         7|  3.95775e-05|  5.65393e-06|  0.02%|# /usr/lib/python3.10/sre_parse.py:81 groups
   783|         7|  2.64645e-05|  3.78064e-06|  0.01%|        groupindex, tuple(indexgroup)
   784|         0|            0|            0|  0.00%|        )
File: <frozen importlib._bootstrap>
File duration: 0.0149863s (6.17%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|
    48|         9|  2.36034e-05|   2.6226e-06|  0.01%|
    49|         9|  3.52859e-05|  3.92066e-06|  0.01%|
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|
    71|        16|  4.62532e-05|  2.89083e-06|  0.02%|
    72|        16|  6.22272e-05|   3.8892e-06|  0.03%|
    73|        16|  5.45979e-05|  3.41237e-06|  0.02%|
    74|        16|  5.00679e-05|  3.12924e-06|  0.02%|
    75|        16|  5.10216e-05|  3.18885e-06|  0.02%|
    76|        16|  4.72069e-05|  2.95043e-06|  0.02%|
    77|        16|  4.76837e-05|  2.98023e-06|  0.02%|
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|
    89|         0|            0|            0|  0.00%|
    90|         0|            0|            0|  0.00%|
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|
   100|        16|  4.57764e-05|  2.86102e-06|  0.02%|
   101|         0|            0|            0|  0.00%|
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|
   106|        16|  5.31673e-05|  3.32296e-06|  0.02%|
   107|        16|  5.26905e-05|  3.29316e-06|  0.02%|
   108|        16|  4.62532e-05|  2.89083e-06|  0.02%|
   109|        16|  4.81606e-05|  3.01003e-06|  0.02%|
   110|        32|  0.000106812|  3.33786e-06|  0.04%|
   111|        16|  4.72069e-05|  2.95043e-06|  0.02%|
   112|        16|  4.93526e-05|  3.08454e-06|  0.02%|
   113|        16|  5.07832e-05|  3.17395e-06|  0.02%|
   114|        16|  4.86374e-05|  3.03984e-06|  0.02%|
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|
   123|        16|  4.95911e-05|  3.09944e-06|  0.02%|
   124|         0|            0|            0|  0.00%|
   125|        16|  4.48227e-05|  2.80142e-06|  0.02%|
   126|        16|   6.1512e-05|   3.8445e-06|  0.03%|
   127|        32|  0.000121832|  3.80725e-06|  0.05%|
   128|        16|  5.26905e-05|  3.29316e-06|  0.02%|
   129|         0|            0|            0|  0.00%|
   130|        16|    5.126e-05|  3.20375e-06|  0.02%|
   131|        16|  4.98295e-05|  3.11434e-06|  0.02%|
   132|        16|  4.98295e-05|  3.11434e-06|  0.02%|
   133|        16|   0.00011754|  7.34627e-06|  0.05%|
   134|        16|  4.76837e-05|  2.98023e-06|  0.02%|
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|
   144|         0|            0|            0|  0.00%|
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|
   149|         0|            0|            0|  0.00%|
   150|         0|            0|            0|  0.00%|
   151|         0|            0|            0|  0.00%|
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|
   165|        16|  4.62532e-05|  2.89083e-06|  0.02%|
   166|        16|  5.67436e-05|  3.54648e-06|  0.02%|
   167|        16|  5.26905e-05|  3.29316e-06|  0.02%|
   168|         0|            0|            0|  0.00%|
   169|        16|   4.3869e-05|  2.74181e-06|  0.02%|
   170|        16|  0.000139713|  8.73208e-06|  0.06%|
(call)|        16|   0.00122023|  7.62641e-05|  0.50%|# <frozen importlib._bootstrap>:179 _get_module_lock
   171|        16|  0.000131845|  8.24034e-06|  0.05%|
(call)|        16|  0.000598431|  3.74019e-05|  0.25%|# <frozen importlib._bootstrap>:100 acquire
   172|         0|            0|            0|  0.00%|
   173|        16|  4.79221e-05|  2.99513e-06|  0.02%|
   174|        16|  0.000141859|  8.86619e-06|  0.06%|
(call)|        16|     0.000597|  3.73125e-05|  0.25%|# <frozen importlib._bootstrap>:125 release
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|
   177|         0|            0|            0|  0.00%|
   178|         0|            0|            0|  0.00%|
   179|        16|  4.98295e-05|  3.11434e-06|  0.02%|
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|
   182|         0|            0|            0|  0.00%|
   183|         0|            0|            0|  0.00%|
   184|         0|            0|            0|  0.00%|
   185|        16|  6.00815e-05|  3.75509e-06|  0.02%|
   186|        16|  5.43594e-05|  3.39746e-06|  0.02%|
   187|        16|  4.88758e-05|  3.05474e-06|  0.02%|
   188|        16|  6.74725e-05|  4.21703e-06|  0.03%|
   189|        16|  5.98431e-05|  3.74019e-06|  0.02%|
   190|        16|  5.72205e-05|  3.57628e-06|  0.02%|
   191|         0|            0|            0|  0.00%|
   192|        16|  5.31673e-05|  3.32296e-06|  0.02%|
   193|        16|  5.29289e-05|  3.30806e-06|  0.02%|
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|
   196|        16|  0.000136375|  8.52346e-06|  0.06%|
(call)|        16|  0.000359058|  2.24411e-05|  0.15%|# <frozen importlib._bootstrap>:71 __init__
   197|         0|            0|            0|  0.00%|
   198|        32|  0.000101328|   3.1665e-06|  0.04%|
   199|        16|  5.98431e-05|  3.74019e-06|  0.02%|
   200|        16|  4.52995e-05|  2.83122e-06|  0.02%|
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|
   204|        16|  5.91278e-05|  3.69549e-06|  0.02%|
   205|        16|  5.00679e-05|  3.12924e-06|  0.02%|
   206|         0|            0|            0|  0.00%|
   207|        16|  5.07832e-05|  3.17395e-06|  0.02%|
   208|         0|            0|            0|  0.00%|
   209|        16|  6.10352e-05|   3.8147e-06|  0.03%|
   210|         0|            0|            0|  0.00%|
   211|        16|   5.4121e-05|  3.38256e-06|  0.02%|
   212|         0|            0|            0|  0.00%|
   213|        16|  5.00679e-05|  3.12924e-06|  0.02%|
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|
   222|         0|            0|            0|  0.00%|
   223|         0|            0|            0|  0.00%|
   224|         0|            0|            0|  0.00%|
   225|         0|            0|            0|  0.00%|
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|
   232|         0|            0|            0|  0.00%|
   233|        19|    0.0002563|  1.34895e-05|  0.11%|
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|
   240|         0|            0|            0|  0.00%|
   241|        19|   0.00159669|  8.40363e-05|  0.66%|
(call)|         2|   0.00397587|   0.00198793|  1.64%|# <frozen importlib._bootstrap>:1022 _find_and_load
(call)|         1|   0.00480795|   0.00480795|  1.98%|# /usr/lib/python3.10/copy.py:1 <module>
(call)|         1|    0.0150251|    0.0150251|  6.19%|# /usr/lib/python3.10/email/generator.py:1 <module>
(call)|         1|   0.00408578|   0.00408578|  1.68%|# /usr/lib/python3.10/hashlib.py:1 <module>
(call)|         1|    0.0171635|    0.0171635|  7.07%|# /usr/lib/python3.10/hmac.py:1 <module>
(call)|         1|     0.111749|     0.111749| 46.00%|# /usr/lib/python3.10/ssl.py:1 <module>
(call)|         1|     0.159516|     0.159516| 65.66%|# /usr/lib/python3.10/smtplib.py:1 <module>
(call)|         1|    0.0139303|    0.0139303|  5.73%|# /usr/lib/python3.10/_strptime.py:1 <module>
(call)|         1|    0.0126305|    0.0126305|  5.20%|# /usr/lib/python3.10/stringprep.py:1 <module>
(call)|         1|    0.0275986|    0.0275986| 11.36%|# /usr/lib/python3.10/encodings/idna.py:1 <module>
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|
   244|       239|  0.000660658|  2.76426e-06|  0.27%|
   245|         0|            0|            0|  0.00%|
   246|       239|  0.000786781|  3.29197e-06|  0.32%|
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|
   286|         0|            0|            0|  0.00%|
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|
   290|         0|            0|            0|  0.00%|
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|
   294|         0|            0|            0|  0.00%|
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|
   300|         0|            0|            0|  0.00%|
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|
   303|         0|            0|            0|  0.00%|
   304|         0|            0|            0|  0.00%|
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|
   308|         0|            0|            0|  0.00%|
   309|         0|            0|            0|  0.00%|
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|
   313|         0|            0|            0|  0.00%|
   314|         0|            0|            0|  0.00%|
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|
   324|         0|            0|            0|  0.00%|
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|
   329|         0|            0|            0|  0.00%|
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|
   332|         0|            0|            0|  0.00%|
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|
   342|         0|            0|            0|  0.00%|
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|
   348|         0|            0|            0|  0.00%|
   349|         0|            0|            0|  0.00%|
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|
   354|         0|            0|            0|  0.00%|
   355|         0|            0|            0|  0.00%|
   356|         0|            0|            0|  0.00%|
   357|        14|  4.41074e-05|  3.15053e-06|  0.02%|
   358|         0|            0|            0|  0.00%|
   359|        14|  5.22137e-05|  3.72955e-06|  0.02%|
   360|        14|  4.72069e-05|  3.37192e-06|  0.02%|
   361|        14|  4.50611e-05|  3.21865e-06|  0.02%|
   362|        14|  4.17233e-05|  2.98023e-06|  0.02%|
   363|        14|  4.62532e-05|   3.3038e-06|  0.02%|
   364|         0|            0|            0|  0.00%|
   365|         0|            0|            0|  0.00%|
   366|        14|  4.17233e-05|  2.98023e-06|  0.02%|
   367|        14|  4.55379e-05|  3.25271e-06|  0.02%|
   368|         0|            0|            0|  0.00%|
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|
   371|         0|            0|            0|  0.00%|
   372|         0|            0|            0|  0.00%|
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|
   375|         0|            0|            0|  0.00%|
   376|         0|            0|            0|  0.00%|
   377|         0|            0|            0|  0.00%|
   378|         0|            0|            0|  0.00%|
   379|         0|            0|            0|  0.00%|
   380|         0|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|
   390|         0|            0|            0|  0.00%|
   391|        22|  5.96046e-05|   2.7093e-06|  0.02%|
   392|         0|            0|            0|  0.00%|
   393|        22|  6.81877e-05|  3.09944e-06|  0.03%|
   394|        13|  3.95775e-05|  3.04442e-06|  0.02%|
   395|        13|  3.91006e-05|  3.00774e-06|  0.02%|
   396|         0|            0|            0|  0.00%|
   397|        13|  0.000109673|  8.43635e-06|  0.05%|
(call)|        13|   0.00175786|   0.00013522|  0.72%|# <frozen importlib._bootstrap_external>:510 _get_cached
   398|        22|  6.84261e-05|  3.11028e-06|  0.03%|
   399|         0|            0|            0|  0.00%|
   400|         0|            0|            0|  0.00%|
   401|         0|            0|            0|  0.00%|
   402|         0|            0|            0|  0.00%|
   403|         0|            0|            0|  0.00%|
   404|        13|  3.60012e-05|  2.76932e-06|  0.01%|
   405|         0|            0|            0|  0.00%|
   406|         0|            0|            0|  0.00%|
   407|        13|  3.95775e-05|  3.04442e-06|  0.02%|
   408|        13|  5.24521e-05|  4.03478e-06|  0.02%|
   409|         0|            0|            0|  0.00%|
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|
   412|        13|  3.50475e-05|  2.69596e-06|  0.01%|
   413|         0|            0|            0|  0.00%|
   414|        13|  4.14848e-05|  3.19114e-06|  0.02%|
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|
   417|         0|            0|            0|  0.00%|
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|
   420|         0|            0|            0|  0.00%|
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|
   425|         0|            0|            0|  0.00%|
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|
   428|         0|            0|            0|  0.00%|
   429|         0|            0|            0|  0.00%|
   430|         0|            0|            0|  0.00%|
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|
   435|         0|            0|            0|  0.00%|
   436|         0|            0|            0|  0.00%|
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|
   443|         0|            0|            0|  0.00%|
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|
   454|         0|            0|            0|  0.00%|
   455|         0|            0|            0|  0.00%|
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|
   458|         0|            0|            0|  0.00%|
   459|         0|            0|            0|  0.00%|
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|
   462|         0|            0|            0|  0.00%|
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|
   469|         0|            0|            0|  0.00%|
   470|         0|            0|            0|  0.00%|
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|
   486|         0|            0|            0|  0.00%|
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|
   490|         0|            0|            0|  0.00%|
   491|         0|            0|            0|  0.00%|
   492|        13|  4.02927e-05|  3.09944e-06|  0.02%|
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|
   495|         0|            0|            0|  0.00%|
   496|        13|  5.03063e-05|  3.86972e-06|  0.02%|
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|
   499|         0|            0|            0|  0.00%|
   500|         0|            0|            0|  0.00%|
   501|         0|            0|            0|  0.00%|
   502|        13|  4.55379e-05|  3.50292e-06|  0.02%|
   503|        13|   4.3869e-05|  3.37454e-06|  0.02%|
   504|        13|  4.22001e-05|  3.24616e-06|  0.02%|
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|
   508|         0|            0|            0|  0.00%|
   509|         0|            0|            0|  0.00%|
   510|         0|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|
   512|         0|            0|            0|  0.00%|
   513|         0|            0|            0|  0.00%|
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|
   518|         0|            0|            0|  0.00%|
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|
   521|         0|            0|            0|  0.00%|
   522|         0|            0|            0|  0.00%|
   523|         0|            0|            0|  0.00%|
   524|         0|            0|            0|  0.00%|
   525|        13|  4.07696e-05|  3.13612e-06|  0.02%|
   526|        13|  4.26769e-05|  3.28284e-06|  0.02%|
   527|         0|            0|            0|  0.00%|
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|
   530|        13|  4.33922e-05|  3.33786e-06|  0.02%|
   531|        13|  4.12464e-05|   3.1728e-06|  0.02%|
   532|        13|  0.000112295|  8.63809e-06|  0.05%|
(call)|        13|  0.000128031|  9.84852e-06|  0.05%|# <frozen importlib._bootstrap>:404 parent
   533|         0|            0|            0|  0.00%|
   534|         0|            0|            0|  0.00%|
   535|         0|            0|            0|  0.00%|
   536|        13|  4.24385e-05|   3.2645e-06|  0.02%|
   537|        13|  4.24385e-05|   3.2645e-06|  0.02%|
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|
   540|         0|            0|            0|  0.00%|
   541|        13|  7.98702e-05|  6.14386e-06|  0.03%|
   542|        13|  4.60148e-05|   3.5396e-06|  0.02%|
   543|         0|            0|            0|  0.00%|
   544|         0|            0|            0|  0.00%|
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|
   547|         0|            0|            0|  0.00%|
   548|        13|  0.000107288|  8.25295e-06|  0.04%|
(call)|        13|  7.65324e-05|   5.8871e-06|  0.03%|# <frozen importlib._bootstrap>:412 has_location
   549|        13|  5.67436e-05|  4.36489e-06|  0.02%|
   550|        13|  4.19617e-05|  3.22782e-06|  0.02%|
   551|        13|  4.60148e-05|   3.5396e-06|  0.02%|
   552|         0|            0|            0|  0.00%|
   553|         0|            0|            0|  0.00%|
   554|         0|            0|            0|  0.00%|
   555|        13|  5.22137e-05|  4.01644e-06|  0.02%|
   556|        13|  0.000110626|  8.50971e-06|  0.05%|
(call)|        13|   0.00206566|  0.000158897|  0.85%|# <frozen importlib._bootstrap>:391 cached
   557|         9|  2.95639e-05|  3.28488e-06|  0.01%|
   558|         9|   7.4625e-05|  8.29167e-06|  0.03%|
(call)|         9|  7.67708e-05|  8.53009e-06|  0.03%|# <frozen importlib._bootstrap>:391 cached
   559|         0|            0|            0|  0.00%|
   560|         0|            0|            0|  0.00%|
   561|        13|  4.24385e-05|   3.2645e-06|  0.02%|
   562|         0|            0|            0|  0.00%|
   563|         0|            0|            0|  0.00%|
   564|        13|   3.6478e-05|    2.806e-06|  0.02%|
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|
   567|        13|  4.22001e-05|  3.24616e-06|  0.02%|
   568|        13|  4.26769e-05|  3.28284e-06|  0.02%|
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|
   571|        13|  0.000111341|  8.56473e-06|  0.05%|
(call)|         9|  5.00679e-05|   5.5631e-06|  0.02%|# <frozen importlib._bootstrap_external>:874 create_module
(call)|         4|   0.00122476|  0.000306189|  0.50%|# <frozen importlib._bootstrap_external>:1174 create_module
   572|         0|            0|            0|  0.00%|
   573|         0|            0|            0|  0.00%|
   574|         0|            0|            0|  0.00%|
   575|        13|  3.95775e-05|  3.04442e-06|  0.02%|
   576|         9|  7.58171e-05|  8.42412e-06|  0.03%|
(call)|         9|  5.88894e-05|  6.54327e-06|  0.02%|# <frozen importlib._bootstrap>:48 _new_module
   577|        13|  0.000114918|  8.83983e-06|  0.05%|
(call)|        13|   0.00362182|  0.000278601|  1.49%|# <frozen importlib._bootstrap>:492 _init_module_attrs
   578|        13|  4.05312e-05|  3.11778e-06|  0.02%|
   579|         0|            0|            0|  0.00%|
   580|         0|            0|            0|  0.00%|
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|
   583|         0|            0|            0|  0.00%|
   584|         0|            0|            0|  0.00%|
   585|         0|            0|            0|  0.00%|
   586|         0|            0|            0|  0.00%|
   587|         0|            0|            0|  0.00%|
   588|         0|            0|            0|  0.00%|
   589|         0|            0|            0|  0.00%|
   590|         0|            0|            0|  0.00%|
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|
   593|         0|            0|            0|  0.00%|
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|
   598|         0|            0|            0|  0.00%|
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|
   601|         0|            0|            0|  0.00%|
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|
   608|         0|            0|            0|  0.00%|
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|
   611|         0|            0|            0|  0.00%|
   612|         0|            0|            0|  0.00%|
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|
   615|         0|            0|            0|  0.00%|
   616|         0|            0|            0|  0.00%|
   617|         0|            0|            0|  0.00%|
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|
   620|         0|            0|            0|  0.00%|
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|
   624|         0|            0|            0|  0.00%|
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|
   629|         0|            0|            0|  0.00%|
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|
   635|         0|            0|            0|  0.00%|
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|
   638|         0|            0|            0|  0.00%|
   639|         0|            0|            0|  0.00%|
   640|         0|            0|            0|  0.00%|
   641|         0|            0|            0|  0.00%|
   642|         0|            0|            0|  0.00%|
   643|         0|            0|            0|  0.00%|
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|
   646|         0|            0|            0|  0.00%|
   647|         0|            0|            0|  0.00%|
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|
   651|         0|            0|            0|  0.00%|
   652|         0|            0|            0|  0.00%|
   653|         0|            0|            0|  0.00%|
   654|         0|            0|            0|  0.00%|
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|
   658|         0|            0|            0|  0.00%|
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|
   663|         0|            0|            0|  0.00%|
   664|        13|  4.19617e-05|  3.22782e-06|  0.02%|
   665|         0|            0|            0|  0.00%|
   666|        13|  5.50747e-05|  4.23651e-06|  0.02%|
   667|         0|            0|            0|  0.00%|
   668|        13|  4.72069e-05|   3.6313e-06|  0.02%|
   669|         0|            0|            0|  0.00%|
   670|         0|            0|            0|  0.00%|
   671|         0|            0|            0|  0.00%|
   672|         0|            0|            0|  0.00%|
   673|         0|            0|            0|  0.00%|
   674|        13|  0.000108242|  8.32631e-06|  0.04%|
(call)|        13|   0.00545907|  0.000419928|  2.25%|# <frozen importlib._bootstrap>:564 module_from_spec
   675|         0|            0|            0|  0.00%|
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|
   678|         0|            0|            0|  0.00%|
   679|        13|  4.43459e-05|  3.41122e-06|  0.02%|
   680|        13|  4.19617e-05|  3.22782e-06|  0.02%|
   681|        13|  5.55515e-05|  4.27319e-06|  0.02%|
   682|        13|  4.07696e-05|  3.13612e-06|  0.02%|
   683|        13|  4.55379e-05|  3.50292e-06|  0.02%|
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|
   688|        13|  0.000137568|  1.05821e-05|  0.06%|
(call)|         9|     0.203359|    0.0225955| 83.71%|# <frozen importlib._bootstrap_external>:877 exec_module
(call)|         4|  0.000674963|  0.000168741|  0.28%|# <frozen importlib._bootstrap_external>:1182 exec_module
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|
   695|         0|            0|            0|  0.00%|
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|
   698|         0|            0|            0|  0.00%|
   699|        13|  6.34193e-05|  4.87841e-06|  0.03%|
   700|        13|  4.95911e-05|   3.8147e-06|  0.02%|
   701|        13|  0.000122786|  9.44504e-06|  0.05%|
(call)|        13|  9.36985e-05|  7.20758e-06|  0.04%|# <frozen importlib._bootstrap>:244 _verbose_message
   702|         0|            0|            0|  0.00%|
   703|        13|  4.48227e-05|   3.4479e-06|  0.02%|
   704|         0|            0|            0|  0.00%|
   705|        13|  4.19617e-05|  3.22782e-06|  0.02%|
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|
   709|         0|            0|            0|  0.00%|
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|
   718|         0|            0|            0|  0.00%|
   719|         0|            0|            0|  0.00%|
   720|         0|            0|            0|  0.00%|
   721|         0|            0|            0|  0.00%|
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|
   728|         0|            0|            0|  0.00%|
   729|         0|            0|            0|  0.00%|
   730|         0|            0|            0|  0.00%|
   731|         0|            0|            0|  0.00%|
   732|         0|            0|            0|  0.00%|
   733|         0|            0|            0|  0.00%|
   734|         0|            0|            0|  0.00%|
   735|         0|            0|            0|  0.00%|
   736|         0|            0|            0|  0.00%|
   737|         0|            0|            0|  0.00%|
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|
   740|         0|            0|            0|  0.00%|
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|
   746|        14|  4.00543e-05|  2.86102e-06|  0.02%|
   747|         0|            0|            0|  0.00%|
   748|        14|  4.48227e-05|  3.20162e-06|  0.02%|
   749|         2|   6.4373e-06|  3.21865e-06|  0.00%|
   750|        12|  4.95911e-05|  4.13259e-06|  0.02%|
   751|         0|            0|            0|  0.00%|
   752|         0|            0|            0|  0.00%|
   753|        12|  3.74317e-05|  3.11931e-06|  0.02%|
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|
   758|         0|            0|            0|  0.00%|
   759|         0|            0|            0|  0.00%|
   760|         0|            0|            0|  0.00%|
   761|         0|            0|            0|  0.00%|
   762|         0|            0|            0|  0.00%|
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|
   765|         0|            0|            0|  0.00%|
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|
   768|         0|            0|            0|  0.00%|
   769|         0|            0|            0|  0.00%|
   770|         0|            0|            0|  0.00%|
   771|         0|            0|            0|  0.00%|
   772|         0|            0|            0|  0.00%|
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|
   775|         0|            0|            0|  0.00%|
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|
   781|         0|            0|            0|  0.00%|
   782|         0|            0|            0|  0.00%|
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|
   785|         0|            0|            0|  0.00%|
   786|         0|            0|            0|  0.00%|
   787|         0|            0|            0|  0.00%|
   788|         0|            0|            0|  0.00%|
   789|         0|            0|            0|  0.00%|
   790|         0|            0|            0|  0.00%|
   791|         0|            0|            0|  0.00%|
   792|         0|            0|            0|  0.00%|
   793|         0|            0|            0|  0.00%|
   794|         0|            0|            0|  0.00%|
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|
   797|         0|            0|            0|  0.00%|
   798|         0|            0|            0|  0.00%|
   799|         0|            0|            0|  0.00%|
   800|         0|            0|            0|  0.00%|
   801|         0|            0|            0|  0.00%|
   802|         0|            0|            0|  0.00%|
   803|         0|            0|            0|  0.00%|
   804|         0|            0|            0|  0.00%|
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|
   810|         0|            0|            0|  0.00%|
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|
   813|         0|            0|            0|  0.00%|
   814|         0|            0|            0|  0.00%|
   815|         0|            0|            0|  0.00%|
   816|         0|            0|            0|  0.00%|
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|
   823|         0|            0|            0|  0.00%|
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|
   826|        14|  3.86238e-05|  2.75884e-06|  0.02%|
   827|         0|            0|            0|  0.00%|
   828|        14|  4.98295e-05|  3.55925e-06|  0.02%|
   829|         0|            0|            0|  0.00%|
   830|         0|            0|            0|  0.00%|
   831|        14|  4.41074e-05|  3.15053e-06|  0.02%|
   832|         0|            0|            0|  0.00%|
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|
   840|         0|            0|            0|  0.00%|
   841|         0|            0|            0|  0.00%|
   842|         0|            0|            0|  0.00%|
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|
   847|         0|            0|            0|  0.00%|
   848|         0|            0|            0|  0.00%|
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|
   857|         0|            0|            0|  0.00%|
   858|         0|            0|            0|  0.00%|
   859|         0|            0|            0|  0.00%|
   860|         0|            0|            0|  0.00%|
   861|         0|            0|            0|  0.00%|
   862|         0|            0|            0|  0.00%|
   863|         0|            0|            0|  0.00%|
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|
   866|         0|            0|            0|  0.00%|
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|
   869|         0|            0|            0|  0.00%|
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|
   874|         0|            0|            0|  0.00%|
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|
   877|         0|            0|            0|  0.00%|
   878|         0|            0|            0|  0.00%|
   879|         0|            0|            0|  0.00%|
   880|         0|            0|            0|  0.00%|
   881|         0|            0|            0|  0.00%|
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|
   885|         0|            0|            0|  0.00%|
   886|         0|            0|            0|  0.00%|
   887|         0|            0|            0|  0.00%|
   888|         0|            0|            0|  0.00%|
   889|         0|            0|            0|  0.00%|
   890|         0|            0|            0|  0.00%|
   891|         0|            0|            0|  0.00%|
   892|         0|            0|            0|  0.00%|
   893|        42|  0.000108957|  2.59422e-06|  0.04%|
   894|         0|            0|            0|  0.00%|
   895|        42|  0.000132561|  3.15621e-06|  0.05%|
   896|         0|            0|            0|  0.00%|
   897|        42|  0.000109673|  2.61125e-06|  0.05%|
   898|         0|            0|            0|  0.00%|
   899|        42|   0.00014329|  3.41166e-06|  0.06%|
   900|         0|            0|            0|  0.00%|
   901|         0|            0|            0|  0.00%|
   902|         0|            0|            0|  0.00%|
   903|         0|            0|            0|  0.00%|
   904|         0|            0|            0|  0.00%|
   905|         0|            0|            0|  0.00%|
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|
   908|         0|            0|            0|  0.00%|
   909|         0|            0|            0|  0.00%|
   910|         0|            0|            0|  0.00%|
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|
   915|         0|            0|            0|  0.00%|
   916|         0|            0|            0|  0.00%|
   917|         0|            0|            0|  0.00%|
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|
   921|        14|  4.98295e-05|  3.55925e-06|  0.02%|
   922|         0|            0|            0|  0.00%|
   923|        14|  5.76973e-05|  4.12124e-06|  0.02%|
   924|        14|  5.36442e-05|  3.83173e-06|  0.02%|
   925|         0|            0|            0|  0.00%|
   926|         0|            0|            0|  0.00%|
   927|         0|            0|            0|  0.00%|
   928|         0|            0|            0|  0.00%|
   929|        14|  5.45979e-05|  3.89985e-06|  0.02%|
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|
   934|         0|            0|            0|  0.00%|
   935|        14|  5.29289e-05|  3.78064e-06|  0.02%|
   936|        43|  0.000154495|  3.59291e-06|  0.06%|
   937|        84|   0.00069809|  8.31059e-06|  0.29%|
(call)|        42|  0.000241518|  5.75043e-06|  0.10%|# <frozen importlib._bootstrap>:893 __enter__
(call)|        42|  0.000252962|  6.02291e-06|  0.10%|# <frozen importlib._bootstrap>:897 __exit__
   938|        42|  0.000143766|  3.42301e-06|  0.06%|
   939|        42|  0.000152349|  3.62737e-06|  0.06%|
   940|         0|            0|            0|  0.00%|
   941|         0|            0|            0|  0.00%|
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|
   944|         0|            0|            0|  0.00%|
   945|        42|  0.000362158|  8.62281e-06|  0.15%|
(call)|        14|  0.000178337|  1.27384e-05|  0.07%|# <frozen importlib._bootstrap>:746 find_spec
(call)|        14|  0.000132561|  9.46862e-06|  0.05%|# <frozen importlib._bootstrap>:826 find_spec
(call)|        14|    0.0245574|    0.0017541| 10.11%|# <frozen importlib._bootstrap_external>:1422 find_spec
   946|        42|  0.000150919|  3.59331e-06|  0.06%|
   947|         0|            0|            0|  0.00%|
   948|        13|  4.69685e-05|  3.61296e-06|  0.02%|
   949|         0|            0|            0|  0.00%|
   950|         0|            0|            0|  0.00%|
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|
   953|         0|            0|            0|  0.00%|
   954|         0|            0|            0|  0.00%|
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|
   957|         0|            0|            0|  0.00%|
   958|         0|            0|            0|  0.00%|
   959|         0|            0|            0|  0.00%|
   960|         0|            0|            0|  0.00%|
   961|         0|            0|            0|  0.00%|
   962|         0|            0|            0|  0.00%|
   963|        13|  4.52995e-05|  3.48458e-06|  0.02%|
   964|         0|            0|            0|  0.00%|
   965|         1|   3.8147e-06|   3.8147e-06|  0.00%|
   966|         0|            0|            0|  0.00%|
   967|         0|            0|            0|  0.00%|
   968|         0|            0|            0|  0.00%|
   969|         0|            0|            0|  0.00%|
   970|         0|            0|            0|  0.00%|
   971|         0|            0|            0|  0.00%|
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|
   974|         0|            0|            0|  0.00%|
   975|         0|            0|            0|  0.00%|
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|
   978|         0|            0|            0|  0.00%|
   979|         0|            0|            0|  0.00%|
   980|         0|            0|            0|  0.00%|
   981|         0|            0|            0|  0.00%|
   982|         0|            0|            0|  0.00%|
   983|         0|            0|            0|  0.00%|
   984|         0|            0|            0|  0.00%|
   985|         0|            0|            0|  0.00%|
   986|         0|            0|            0|  0.00%|
   987|        16|  5.65052e-05|  3.53158e-06|  0.02%|
   988|        16|  6.36578e-05|  3.97861e-06|  0.03%|
   989|        16|   6.7234e-05|  4.20213e-06|  0.03%|
   990|        16|  5.96046e-05|  3.72529e-06|  0.02%|
   991|         4|  1.50204e-05|  3.75509e-06|  0.01%|
   992|         2|  2.00272e-05|  1.00136e-05|  0.01%|
(call)|         2|   0.00398874|   0.00199437|  1.64%|# <frozen importlib._bootstrap>:233 _call_with_frames_removed
   993|         0|            0|            0|  0.00%|
   994|         2|  8.58307e-06|  4.29153e-06|  0.00%|
   995|         0|            0|            0|  0.00%|
   996|         2|  8.34465e-06|  4.17233e-06|  0.00%|
   997|         2|  7.86781e-06|  3.93391e-06|  0.00%|
   998|         2|  7.86781e-06|  3.93391e-06|  0.00%|
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|
  1001|         0|            0|            0|  0.00%|
  1002|        14|  0.000140667|  1.00476e-05|  0.06%|
(call)|        14|    0.0273893|   0.00195638| 11.27%|# <frozen importlib._bootstrap>:921 _find_spec
  1003|        14|   5.4121e-05|  3.86579e-06|  0.02%|
  1004|         1|  9.77516e-06|  9.77516e-06|  0.00%|
  1005|         0|            0|            0|  0.00%|
  1006|        13|  0.000138283|  1.06371e-05|  0.06%|
(call)|        13|     0.204844|    0.0157572| 84.32%|# <frozen importlib._bootstrap>:664 _load_unlocked
  1007|        13|  5.17368e-05|  3.97976e-06|  0.02%|
  1008|         0|            0|            0|  0.00%|
  1009|         2|  7.86781e-06|  3.93391e-06|  0.00%|
  1010|         2|  9.77516e-06|  4.88758e-06|  0.00%|
  1011|         2|  7.62939e-06|   3.8147e-06|  0.00%|
  1012|         2|  9.77516e-06|  4.88758e-06|  0.00%|
  1013|         0|            0|            0|  0.00%|
  1014|         0|            0|            0|  0.00%|
  1015|         0|            0|            0|  0.00%|
  1016|        13|   4.8399e-05|    3.723e-06|  0.02%|
  1017|         0|            0|            0|  0.00%|
  1018|         0|            0|            0|  0.00%|
  1019|         0|            0|            0|  0.00%|
  1020|         0|            0|            0|  0.00%|
  1021|         0|            0|            0|  0.00%|
  1022|        16|  0.000119448|  7.46548e-06|  0.05%|
  1023|         0|            0|            0|  0.00%|
  1024|        32|  0.000484467|  1.51396e-05|  0.20%|
(call)|        16|  0.000155687|  9.73046e-06|  0.06%|# <frozen importlib._bootstrap>:165 __init__
(call)|        16|   0.00213408|   0.00013338|  0.88%|# <frozen importlib._bootstrap>:169 __enter__
(call)|        16|  0.000786781|  4.91738e-05|  0.32%|# <frozen importlib._bootstrap>:173 __exit__
(call)|        13|  0.000246048|  1.89268e-05|  0.10%|# <frozen importlib._bootstrap>:198 cb
  1025|        16|   6.4373e-05|  4.02331e-06|  0.03%|
  1026|        16|  5.26905e-05|  3.29316e-06|  0.02%|
  1027|        16|   0.00016737|  1.04606e-05|  0.07%|
(call)|        16|     0.210442|    0.0131526| 86.63%|# <frozen importlib._bootstrap>:987 _find_and_load_unlocked
(call)|         3|  6.46114e-05|  2.15371e-05|  0.03%|# <frozen importlib._bootstrap>:198 cb
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|
  1032|         0|            0|            0|  0.00%|
  1033|         0|            0|            0|  0.00%|
  1034|         0|            0|            0|  0.00%|
  1035|         0|            0|            0|  0.00%|
  1036|         0|            0|            0|  0.00%|
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|
  1039|         0|            0|            0|  0.00%|
  1040|         0|            0|            0|  0.00%|
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|
  1043|         0|            0|            0|  0.00%|
  1044|         0|            0|            0|  0.00%|
  1045|         0|            0|            0|  0.00%|
  1046|         0|            0|            0|  0.00%|
  1047|         0|            0|            0|  0.00%|
  1048|         0|            0|            0|  0.00%|
  1049|         0|            0|            0|  0.00%|
  1050|         0|            0|            0|  0.00%|
  1051|         0|            0|            0|  0.00%|
  1052|         0|            0|            0|  0.00%|
  1053|         1|  2.81334e-05|  2.81334e-05|  0.01%|
  1054|         0|            0|            0|  0.00%|
  1055|         0|            0|            0|  0.00%|
  1056|         0|            0|            0|  0.00%|
  1057|         0|            0|            0|  0.00%|
  1058|         0|            0|            0|  0.00%|
  1059|         0|            0|            0|  0.00%|
  1060|         0|            0|            0|  0.00%|
  1061|         0|            0|            0|  0.00%|
  1062|         0|            0|            0|  0.00%|
  1063|         2|  9.29832e-06|  4.64916e-06|  0.00%|
  1064|         1|  4.52995e-06|  4.52995e-06|  0.00%|
  1065|         0|            0|            0|  0.00%|
  1066|         0|            0|            0|  0.00%|
  1067|         0|            0|            0|  0.00%|
  1068|         0|            0|            0|  0.00%|
  1069|         0|            0|            0|  0.00%|
  1070|         0|            0|            0|  0.00%|
  1071|         1|  4.29153e-06|  4.29153e-06|  0.00%|
  1072|         0|            0|            0|  0.00%|
  1073|         0|            0|            0|  0.00%|
  1074|         0|            0|            0|  0.00%|
  1075|         1|  4.52995e-06|  4.52995e-06|  0.00%|
  1076|         0|            0|            0|  0.00%|
  1077|         0|            0|            0|  0.00%|
  1078|         0|            0|            0|  0.00%|
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|
  1081|         0|            0|            0|  0.00%|
  1082|         0|            0|            0|  0.00%|
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|
  1087|         1|   3.8147e-06|   3.8147e-06|  0.00%|
File: /usr/lib/python3.10/ssl.py
File duration: 0.0108607s (4.47%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         1|  4.48227e-05|  4.48227e-05|  0.02%|# Wrapper module for _ssl, providing some additional facilities
     2|         0|            0|            0|  0.00%|# implemented in Python.  Written by Bill Janssen.
     3|         0|            0|            0|  0.00%|
     4|         1|  3.12328e-05|  3.12328e-05|  0.01%|"""This module provides some more Pythonic support for SSL.
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|Object types:
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|  SSLSocket -- subtype of socket.socket which does SSL over the socket
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|Exceptions:
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|  SSLError -- exception raised for I/O errors
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|Functions:
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|  cert_time_to_seconds -- convert time string used for certificate
    17|         0|            0|            0|  0.00%|                          notBefore and notAfter functions to integer
    18|         0|            0|            0|  0.00%|                          seconds past the Epoch (the time values
    19|         0|            0|            0|  0.00%|                          returned from time.time())
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|  fetch_server_certificate (HOST, PORT) -- fetch the certificate provided
    22|         0|            0|            0|  0.00%|                          by the server running on HOST at port PORT.  No
    23|         0|            0|            0|  0.00%|                          validation of the certificate is performed.
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|Integer constants:
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|SSL_ERROR_ZERO_RETURN
    28|         0|            0|            0|  0.00%|SSL_ERROR_WANT_READ
    29|         0|            0|            0|  0.00%|SSL_ERROR_WANT_WRITE
    30|         0|            0|            0|  0.00%|SSL_ERROR_WANT_X509_LOOKUP
    31|         0|            0|            0|  0.00%|SSL_ERROR_SYSCALL
    32|         0|            0|            0|  0.00%|SSL_ERROR_SSL
    33|         0|            0|            0|  0.00%|SSL_ERROR_WANT_CONNECT
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|SSL_ERROR_EOF
    36|         0|            0|            0|  0.00%|SSL_ERROR_INVALID_ERROR_CODE
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|The following group define certificate requirements that one side is
    39|         0|            0|            0|  0.00%|allowing/requiring from the other side:
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|CERT_NONE - no certificates from the other side are required (or will
    42|         0|            0|            0|  0.00%|            be looked at if provided)
    43|         0|            0|            0|  0.00%|CERT_OPTIONAL - certificates are not required, but if provided will be
    44|         0|            0|            0|  0.00%|                validated, and if validation fails, the connection will
    45|         0|            0|            0|  0.00%|                also fail
    46|         0|            0|            0|  0.00%|CERT_REQUIRED - certificates are required, and will be validated, and
    47|         0|            0|            0|  0.00%|                if validation fails, the connection will also fail
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|The following constants identify various SSL protocol variants:
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|PROTOCOL_SSLv2
    52|         0|            0|            0|  0.00%|PROTOCOL_SSLv3
    53|         0|            0|            0|  0.00%|PROTOCOL_SSLv23
    54|         0|            0|            0|  0.00%|PROTOCOL_TLS
    55|         0|            0|            0|  0.00%|PROTOCOL_TLS_CLIENT
    56|         0|            0|            0|  0.00%|PROTOCOL_TLS_SERVER
    57|         0|            0|            0|  0.00%|PROTOCOL_TLSv1
    58|         0|            0|            0|  0.00%|PROTOCOL_TLSv1_1
    59|         0|            0|            0|  0.00%|PROTOCOL_TLSv1_2
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|The following constants identify various SSL alert message descriptions as per
    62|         0|            0|            0|  0.00%|http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-6
    63|         0|            0|            0|  0.00%|
    64|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_CLOSE_NOTIFY
    65|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_UNEXPECTED_MESSAGE
    66|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_BAD_RECORD_MAC
    67|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_RECORD_OVERFLOW
    68|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_DECOMPRESSION_FAILURE
    69|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_HANDSHAKE_FAILURE
    70|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_BAD_CERTIFICATE
    71|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE
    72|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_CERTIFICATE_REVOKED
    73|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_CERTIFICATE_EXPIRED
    74|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN
    75|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_ILLEGAL_PARAMETER
    76|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_UNKNOWN_CA
    77|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_ACCESS_DENIED
    78|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_DECODE_ERROR
    79|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_DECRYPT_ERROR
    80|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_PROTOCOL_VERSION
    81|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_INSUFFICIENT_SECURITY
    82|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_INTERNAL_ERROR
    83|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_USER_CANCELLED
    84|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_NO_RENEGOTIATION
    85|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION
    86|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE
    87|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_UNRECOGNIZED_NAME
    88|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE
    89|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE
    90|         0|            0|            0|  0.00%|ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY
    91|         0|            0|            0|  0.00%|"""
    92|         0|            0|            0|  0.00%|
    93|         1|  2.36034e-05|  2.36034e-05|  0.01%|import sys
    94|         1|  2.40803e-05|  2.40803e-05|  0.01%|import os
    95|         1|  6.19888e-05|  6.19888e-05|  0.03%|from collections import namedtuple
(call)|         1|  5.45979e-05|  5.45979e-05|  0.02%|# <frozen importlib._bootstrap>:1053 _handle_fromlist
    96|         1|  2.55108e-05|  2.55108e-05|  0.01%|from enum import Enum as _Enum, IntEnum as _IntEnum, IntFlag as _IntFlag
    97|         0|            0|            0|  0.00%|
    98|         1|  6.29425e-05|  6.29425e-05|  0.03%|import _ssl             # if we can't import it, let the error propagate
(call)|         1|   0.00352383|   0.00352383|  1.45%|# <frozen importlib._bootstrap>:1022 _find_and_load
    99|         0|            0|            0|  0.00%|
   100|         1|   2.6226e-05|   2.6226e-05|  0.01%|from _ssl import OPENSSL_VERSION_NUMBER, OPENSSL_VERSION_INFO, OPENSSL_VERSION
   101|         1|   2.3365e-05|   2.3365e-05|  0.01%|from _ssl import _SSLContext, MemoryBIO, SSLSession
   102|         1|  2.38419e-05|  2.38419e-05|  0.01%|from _ssl import (
   103|         0|            0|            0|  0.00%|    SSLError, SSLZeroReturnError, SSLWantReadError, SSLWantWriteError,
   104|         0|            0|            0|  0.00%|    SSLSyscallError, SSLEOFError, SSLCertVerificationError
   105|         0|            0|            0|  0.00%|    )
   106|         1|  2.21729e-05|  2.21729e-05|  0.01%|from _ssl import txt2obj as _txt2obj, nid2obj as _nid2obj
   107|         1|  2.21729e-05|  2.21729e-05|  0.01%|from _ssl import RAND_status, RAND_add, RAND_bytes, RAND_pseudo_bytes
   108|         1|  2.14577e-05|  2.14577e-05|  0.01%|try:
   109|         1|  2.74181e-05|  2.74181e-05|  0.01%|    from _ssl import RAND_egd
   110|         1|  2.14577e-05|  2.14577e-05|  0.01%|except ImportError:
   111|         0|            0|            0|  0.00%|    # LibreSSL does not provide RAND_egd
   112|         1|  2.21729e-05|  2.21729e-05|  0.01%|    pass
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|
   115|         1|  2.36034e-05|  2.36034e-05|  0.01%|from _ssl import (
   116|         0|            0|            0|  0.00%|    HAS_SNI, HAS_ECDH, HAS_NPN, HAS_ALPN, HAS_SSLv2, HAS_SSLv3, HAS_TLSv1,
   117|         0|            0|            0|  0.00%|    HAS_TLSv1_1, HAS_TLSv1_2, HAS_TLSv1_3
   118|         0|            0|            0|  0.00%|)
   119|         1|  2.26498e-05|  2.26498e-05|  0.01%|from _ssl import _DEFAULT_CIPHERS, _OPENSSL_API_VERSION
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|
   122|         2|   9.9659e-05|  4.98295e-05|  0.04%|_IntEnum._convert_(
(call)|         1|    0.0079217|    0.0079217|  3.26%|# /usr/lib/python3.10/enum.py:536 _convert_
   123|         1|  2.16961e-05|  2.16961e-05|  0.01%|    '_SSLMethod', __name__,
   124|       255|  0.000716925|  2.81147e-06|  0.30%|    lambda name: name.startswith('PROTOCOL_') and name != 'PROTOCOL_SSLv23',
   125|         1|  2.14577e-05|  2.14577e-05|  0.01%|    source=_ssl)
   126|         0|            0|            0|  0.00%|
   127|         2|  8.72612e-05|  4.36306e-05|  0.04%|_IntFlag._convert_(
(call)|         1|    0.0109568|    0.0109568|  4.51%|# /usr/lib/python3.10/enum.py:536 _convert_
   128|         1|  2.21729e-05|  2.21729e-05|  0.01%|    'Options', __name__,
   129|       255|  0.000703573|  2.75911e-06|  0.29%|    lambda name: name.startswith('OP_'),
   130|         1|  2.14577e-05|  2.14577e-05|  0.01%|    source=_ssl)
   131|         0|            0|            0|  0.00%|
   132|         2|  8.70228e-05|  4.35114e-05|  0.04%|_IntEnum._convert_(
(call)|         1|    0.0168006|    0.0168006|  6.92%|# /usr/lib/python3.10/enum.py:536 _convert_
   133|         1|  2.38419e-05|  2.38419e-05|  0.01%|    'AlertDescription', __name__,
   134|       255|  0.000709057|  2.78062e-06|  0.29%|    lambda name: name.startswith('ALERT_DESCRIPTION_'),
   135|         1|  2.09808e-05|  2.09808e-05|  0.01%|    source=_ssl)
   136|         0|            0|            0|  0.00%|
   137|         2|  8.46386e-05|  4.23193e-05|  0.03%|_IntEnum._convert_(
(call)|         1|   0.00871181|   0.00871181|  3.59%|# /usr/lib/python3.10/enum.py:536 _convert_
   138|         1|  2.47955e-05|  2.47955e-05|  0.01%|    'SSLErrorNumber', __name__,
   139|       255|  0.000724792|  2.84232e-06|  0.30%|    lambda name: name.startswith('SSL_ERROR_'),
   140|         1|  2.31266e-05|  2.31266e-05|  0.01%|    source=_ssl)
   141|         0|            0|            0|  0.00%|
   142|         2|  8.58307e-05|  4.29153e-05|  0.04%|_IntFlag._convert_(
(call)|         1|   0.00822282|   0.00822282|  3.38%|# /usr/lib/python3.10/enum.py:536 _convert_
   143|         1|  2.31266e-05|  2.31266e-05|  0.01%|    'VerifyFlags', __name__,
   144|       255|  0.000703096|  2.75724e-06|  0.29%|    lambda name: name.startswith('VERIFY_'),
   145|         1|  2.09808e-05|  2.09808e-05|  0.01%|    source=_ssl)
   146|         0|            0|            0|  0.00%|
   147|         2|  8.58307e-05|  4.29153e-05|  0.04%|_IntEnum._convert_(
(call)|         1|   0.00659561|   0.00659561|  2.72%|# /usr/lib/python3.10/enum.py:536 _convert_
   148|         1|   2.3365e-05|   2.3365e-05|  0.01%|    'VerifyMode', __name__,
   149|       255|  0.000706196|   2.7694e-06|  0.29%|    lambda name: name.startswith('CERT_'),
   150|         1|  2.14577e-05|  2.14577e-05|  0.01%|    source=_ssl)
   151|         0|            0|            0|  0.00%|
   152|         1|  4.69685e-05|  4.69685e-05|  0.02%|PROTOCOL_SSLv23 = _SSLMethod.PROTOCOL_SSLv23 = _SSLMethod.PROTOCOL_TLS
(call)|         1|  3.33786e-05|  3.33786e-05|  0.01%|# /usr/lib/python3.10/enum.py:470 __setattr__
   153|         9|  0.000144482|  1.60535e-05|  0.06%|_PROTOCOL_NAMES = {value: name for name, value in _SSLMethod.__members__.items()}
(call)|         1|  2.52724e-05|  2.52724e-05|  0.01%|# /usr/lib/python3.10/enum.py:451 __members__
(call)|         1|  4.50611e-05|  4.50611e-05|  0.02%|# /usr/lib/python3.10/ssl.py:153 <dictcomp>
   154|         0|            0|            0|  0.00%|
   155|         1|   5.8651e-05|   5.8651e-05|  0.02%|_SSLv2_IF_EXISTS = getattr(_SSLMethod, 'PROTOCOL_SSLv2', None)
(call)|         1|  6.36578e-05|  6.36578e-05|  0.03%|# /usr/lib/python3.10/enum.py:423 __getattr__
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|
   158|         3|  0.000220299|  7.34329e-05|  0.09%|class TLSVersion(_IntEnum):
(call)|         1|  0.000310898|  0.000310898|  0.13%|# /usr/lib/python3.10/enum.py:165 __prepare__
(call)|         2|  0.000212193|  0.000106096|  0.09%|# /usr/lib/python3.10/enum.py:89 __setitem__
(call)|         1|   0.00121951|   0.00121951|  0.50%|# /usr/lib/python3.10/ssl.py:158 TLSVersion
(call)|         1|     0.003479|     0.003479|  1.43%|# /usr/lib/python3.10/enum.py:180 __new__
   159|         1|  1.00136e-05|  1.00136e-05|  0.00%|    MINIMUM_SUPPORTED = _ssl.PROTO_MINIMUM_SUPPORTED
(call)|         1|  0.000135183|  0.000135183|  0.06%|# /usr/lib/python3.10/enum.py:89 __setitem__
   160|         1|  1.09673e-05|  1.09673e-05|  0.00%|    SSLv3 = _ssl.PROTO_SSLv3
(call)|         1|  0.000128984|  0.000128984|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   161|         1|   1.0252e-05|   1.0252e-05|  0.00%|    TLSv1 = _ssl.PROTO_TLSv1
(call)|         1|   0.00012517|   0.00012517|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   162|         1|   1.0252e-05|   1.0252e-05|  0.00%|    TLSv1_1 = _ssl.PROTO_TLSv1_1
(call)|         1|  0.000123978|  0.000123978|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   163|         1|  1.00136e-05|  1.00136e-05|  0.00%|    TLSv1_2 = _ssl.PROTO_TLSv1_2
(call)|         1|  0.000124454|  0.000124454|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   164|         1|   1.0252e-05|   1.0252e-05|  0.00%|    TLSv1_3 = _ssl.PROTO_TLSv1_3
(call)|         1|  0.000123978|  0.000123978|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   165|         1|  1.16825e-05|  1.16825e-05|  0.00%|    MAXIMUM_SUPPORTED = _ssl.PROTO_MAXIMUM_SUPPORTED
(call)|         1|  0.000129223|  0.000129223|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   166|         0|            0|            0|  0.00%|
   167|         0|            0|            0|  0.00%|
   168|         3|  0.000188589|   6.2863e-05|  0.08%|class _TLSContentType(_IntEnum):
(call)|         1|  0.000290394|  0.000290394|  0.12%|# /usr/lib/python3.10/enum.py:165 __prepare__
(call)|         2|  0.000197172|  9.85861e-05|  0.08%|# /usr/lib/python3.10/enum.py:89 __setitem__
(call)|         1|   0.00115156|   0.00115156|  0.47%|# /usr/lib/python3.10/ssl.py:168 _TLSContentType
(call)|         1|   0.00313973|   0.00313973|  1.29%|# /usr/lib/python3.10/enum.py:180 __new__
   169|         1|  8.10623e-06|  8.10623e-06|  0.00%|    """Content types (record layer)
(call)|         1|  9.72748e-05|  9.72748e-05|  0.04%|# /usr/lib/python3.10/enum.py:89 __setitem__
   170|         0|            0|            0|  0.00%|
   171|         0|            0|            0|  0.00%|    See RFC 8446, section B.1
   172|         0|            0|            0|  0.00%|    """
   173|         1|   1.0252e-05|   1.0252e-05|  0.00%|    CHANGE_CIPHER_SPEC = 20
(call)|         1|    0.0001266|    0.0001266|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   174|         1|  1.19209e-05|  1.19209e-05|  0.00%|    ALERT = 21
(call)|         1|  0.000124454|  0.000124454|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   175|         1|  1.00136e-05|  1.00136e-05|  0.00%|    HANDSHAKE = 22
(call)|         1|  0.000123262|  0.000123262|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   176|         1|  9.77516e-06|  9.77516e-06|  0.00%|    APPLICATION_DATA = 23
(call)|         1|  0.000124931|  0.000124931|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   177|         0|            0|            0|  0.00%|    # pseudo content types
   178|         1|  9.29832e-06|  9.29832e-06|  0.00%|    HEADER = 0x100
(call)|         1|  0.000123978|  0.000123978|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   179|         1|  9.29832e-06|  9.29832e-06|  0.00%|    INNER_CONTENT_TYPE = 0x101
(call)|         1|  0.000126123|  0.000126123|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|
   182|         3|  0.000197172|  6.57241e-05|  0.08%|class _TLSAlertType(_IntEnum):
(call)|         1|  0.000300169|  0.000300169|  0.12%|# /usr/lib/python3.10/enum.py:165 __prepare__
(call)|         2|  0.000212193|  0.000106096|  0.09%|# /usr/lib/python3.10/enum.py:89 __setitem__
(call)|         1|   0.00512075|   0.00512075|  2.11%|# /usr/lib/python3.10/ssl.py:182 _TLSAlertType
(call)|         1|    0.0117455|    0.0117455|  4.83%|# /usr/lib/python3.10/enum.py:180 __new__
   183|         1|   1.0252e-05|   1.0252e-05|  0.00%|    """Alert types for TLSContentType.ALERT messages
(call)|         1|  9.56059e-05|  9.56059e-05|  0.04%|# /usr/lib/python3.10/enum.py:89 __setitem__
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|    See RFC 8466, section B.2
   186|         0|            0|            0|  0.00%|    """
   187|         1|  1.14441e-05|  1.14441e-05|  0.00%|    CLOSE_NOTIFY = 0
(call)|         1|  0.000125885|  0.000125885|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   188|         1|  1.04904e-05|  1.04904e-05|  0.00%|    UNEXPECTED_MESSAGE = 10
(call)|         1|  0.000130892|  0.000130892|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   189|         1|  1.04904e-05|  1.04904e-05|  0.00%|    BAD_RECORD_MAC = 20
(call)|         1|  0.000125885|  0.000125885|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   190|         1|  1.28746e-05|  1.28746e-05|  0.01%|    DECRYPTION_FAILED = 21
(call)|         1|   0.00013113|   0.00013113|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   191|         1|  1.14441e-05|  1.14441e-05|  0.00%|    RECORD_OVERFLOW = 22
(call)|         1|  0.000124931|  0.000124931|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   192|         1|  1.28746e-05|  1.28746e-05|  0.01%|    DECOMPRESSION_FAILURE = 30
(call)|         1|  0.000130892|  0.000130892|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   193|         1|  1.12057e-05|  1.12057e-05|  0.00%|    HANDSHAKE_FAILURE = 40
(call)|         1|  0.000132322|  0.000132322|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   194|         1|  1.07288e-05|  1.07288e-05|  0.00%|    NO_CERTIFICATE = 41
(call)|         1|  0.000124454|  0.000124454|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   195|         1|  1.07288e-05|  1.07288e-05|  0.00%|    BAD_CERTIFICATE = 42
(call)|         1|  0.000123978|  0.000123978|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   196|         1|  1.07288e-05|  1.07288e-05|  0.00%|    UNSUPPORTED_CERTIFICATE = 43
(call)|         1|  0.000130415|  0.000130415|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   197|         1|  1.12057e-05|  1.12057e-05|  0.00%|    CERTIFICATE_REVOKED = 44
(call)|         1|  0.000132322|  0.000132322|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   198|         1|  1.09673e-05|  1.09673e-05|  0.00%|    CERTIFICATE_EXPIRED = 45
(call)|         1|  0.000129938|  0.000129938|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   199|         1|  1.09673e-05|  1.09673e-05|  0.00%|    CERTIFICATE_UNKNOWN = 46
(call)|         1|  0.000129938|  0.000129938|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   200|         1|   1.0252e-05|   1.0252e-05|  0.00%|    ILLEGAL_PARAMETER = 47
(call)|         1|  0.000130892|  0.000130892|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   201|         1|  1.14441e-05|  1.14441e-05|  0.00%|    UNKNOWN_CA = 48
(call)|         1|  0.000123978|  0.000123978|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   202|         1|   1.0252e-05|   1.0252e-05|  0.00%|    ACCESS_DENIED = 49
(call)|         1|  0.000124454|  0.000124454|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   203|         1|  1.23978e-05|  1.23978e-05|  0.01%|    DECODE_ERROR = 50
(call)|         1|  0.000124454|  0.000124454|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   204|         1|   1.0252e-05|   1.0252e-05|  0.00%|    DECRYPT_ERROR = 51
(call)|         1|  0.000124216|  0.000124216|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   205|         1|   1.0252e-05|   1.0252e-05|  0.00%|    EXPORT_RESTRICTION = 60
(call)|         1|  0.000130653|  0.000130653|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   206|         1|  1.07288e-05|  1.07288e-05|  0.00%|    PROTOCOL_VERSION = 70
(call)|         1|  0.000125885|  0.000125885|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   207|         1|   1.0252e-05|   1.0252e-05|  0.00%|    INSUFFICIENT_SECURITY = 71
(call)|         1|  0.000129938|  0.000129938|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   208|         1|  2.57492e-05|  2.57492e-05|  0.01%|    INTERNAL_ERROR = 80
(call)|         1|  0.000124216|  0.000124216|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   209|         1|  1.07288e-05|  1.07288e-05|  0.00%|    INAPPROPRIATE_FALLBACK = 86
(call)|         1|  0.000130653|  0.000130653|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   210|         1|  1.45435e-05|  1.45435e-05|  0.01%|    USER_CANCELED = 90
(call)|         1|  0.000124216|  0.000124216|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   211|         1|  1.00136e-05|  1.00136e-05|  0.00%|    NO_RENEGOTIATION = 100
(call)|         1|  0.000128508|  0.000128508|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   212|         1|  1.12057e-05|  1.12057e-05|  0.00%|    MISSING_EXTENSION = 109
(call)|         1|  0.000129938|  0.000129938|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   213|         1|  1.04904e-05|  1.04904e-05|  0.00%|    UNSUPPORTED_EXTENSION = 110
(call)|         1|  0.000130653|  0.000130653|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   214|         1|  1.04904e-05|  1.04904e-05|  0.00%|    CERTIFICATE_UNOBTAINABLE = 111
(call)|         1|  0.000130653|  0.000130653|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   215|         1|  1.07288e-05|  1.07288e-05|  0.00%|    UNRECOGNIZED_NAME = 112
(call)|         1|  0.000133514|  0.000133514|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   216|         1|  1.09673e-05|  1.09673e-05|  0.00%|    BAD_CERTIFICATE_STATUS_RESPONSE = 113
(call)|         1|  0.000130653|  0.000130653|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   217|         1|  1.00136e-05|  1.00136e-05|  0.00%|    BAD_CERTIFICATE_HASH_VALUE = 114
(call)|         1|  0.000130653|  0.000130653|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   218|         1|  1.12057e-05|  1.12057e-05|  0.00%|    UNKNOWN_PSK_IDENTITY = 115
(call)|         1|  0.000130415|  0.000130415|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   219|         1|  1.04904e-05|  1.04904e-05|  0.00%|    CERTIFICATE_REQUIRED = 116
(call)|         1|   0.00013113|   0.00013113|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   220|         1|  1.04904e-05|  1.04904e-05|  0.00%|    NO_APPLICATION_PROTOCOL = 120
(call)|         1|  0.000130177|  0.000130177|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   221|         0|            0|            0|  0.00%|
   222|         0|            0|            0|  0.00%|
   223|         3|  0.000197172|  6.57241e-05|  0.08%|class _TLSMessageType(_IntEnum):
(call)|         1|  0.000310183|  0.000310183|  0.13%|# /usr/lib/python3.10/enum.py:165 __prepare__
(call)|         2|  0.000200987|  0.000100493|  0.08%|# /usr/lib/python3.10/enum.py:89 __setitem__
(call)|         1|   0.00339055|   0.00339055|  1.40%|# /usr/lib/python3.10/ssl.py:223 _TLSMessageType
(call)|         1|   0.00722075|   0.00722075|  2.97%|# /usr/lib/python3.10/enum.py:180 __new__
   224|         1|  9.53674e-06|  9.53674e-06|  0.00%|    """Message types (handshake protocol)
(call)|         1|  9.72748e-05|  9.72748e-05|  0.04%|# /usr/lib/python3.10/enum.py:89 __setitem__
   225|         0|            0|            0|  0.00%|
   226|         0|            0|            0|  0.00%|    See RFC 8446, section B.3
   227|         0|            0|            0|  0.00%|    """
   228|         1|  1.07288e-05|  1.07288e-05|  0.00%|    HELLO_REQUEST = 0
(call)|         1|  0.000127316|  0.000127316|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   229|         1|  1.07288e-05|  1.07288e-05|  0.00%|    CLIENT_HELLO = 1
(call)|         1|  0.000125408|  0.000125408|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   230|         1|  1.04904e-05|  1.04904e-05|  0.00%|    SERVER_HELLO = 2
(call)|         1|  0.000127792|  0.000127792|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   231|         1|   1.0252e-05|   1.0252e-05|  0.00%|    HELLO_VERIFY_REQUEST = 3
(call)|         1|  0.000131369|  0.000131369|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   232|         1|  1.04904e-05|  1.04904e-05|  0.00%|    NEWSESSION_TICKET = 4
(call)|         1|  0.000124693|  0.000124693|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   233|         1|   1.0252e-05|   1.0252e-05|  0.00%|    END_OF_EARLY_DATA = 5
(call)|         1|  0.000124931|  0.000124931|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   234|         1|   1.0252e-05|   1.0252e-05|  0.00%|    HELLO_RETRY_REQUEST = 6
(call)|         1|  0.000132561|  0.000132561|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   235|         1|  1.07288e-05|  1.07288e-05|  0.00%|    ENCRYPTED_EXTENSIONS = 8
(call)|         1|  0.000133753|  0.000133753|  0.06%|# /usr/lib/python3.10/enum.py:89 __setitem__
   236|         1|  1.04904e-05|  1.04904e-05|  0.00%|    CERTIFICATE = 11
(call)|         1|  0.000124454|  0.000124454|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   237|         1|  1.26362e-05|  1.26362e-05|  0.01%|    SERVER_KEY_EXCHANGE = 12
(call)|         1|  0.000130892|  0.000130892|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   238|         1|   1.0252e-05|   1.0252e-05|  0.00%|    CERTIFICATE_REQUEST = 13
(call)|         1|  0.000130892|  0.000130892|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   239|         1|  1.04904e-05|  1.04904e-05|  0.00%|    SERVER_DONE = 14
(call)|         1|  0.000124931|  0.000124931|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   240|         1|   1.0252e-05|   1.0252e-05|  0.00%|    CERTIFICATE_VERIFY = 15
(call)|         1|  0.000124931|  0.000124931|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   241|         1|  1.00136e-05|  1.00136e-05|  0.00%|    CLIENT_KEY_EXCHANGE = 16
(call)|         1|  0.000131607|  0.000131607|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   242|         1|  1.21593e-05|  1.21593e-05|  0.01%|    FINISHED = 20
(call)|         1|  0.000127554|  0.000127554|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   243|         1|  1.07288e-05|  1.07288e-05|  0.00%|    CERTIFICATE_URL = 21
(call)|         1|  0.000125885|  0.000125885|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   244|         1|  1.00136e-05|  1.00136e-05|  0.00%|    CERTIFICATE_STATUS = 22
(call)|         1|  0.000125647|  0.000125647|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   245|         1|  1.04904e-05|  1.04904e-05|  0.00%|    SUPPLEMENTAL_DATA = 23
(call)|         1|  0.000133514|  0.000133514|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   246|         1|  1.07288e-05|  1.07288e-05|  0.00%|    KEY_UPDATE = 24
(call)|         1|  0.000124454|  0.000124454|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   247|         1|  1.14441e-05|  1.14441e-05|  0.00%|    NEXT_PROTO = 67
(call)|         1|   0.00012517|   0.00012517|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   248|         1|  1.04904e-05|  1.04904e-05|  0.00%|    MESSAGE_HASH = 254
(call)|         1|  0.000124216|  0.000124216|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   249|         1|  1.04904e-05|  1.04904e-05|  0.00%|    CHANGE_CIPHER_SPEC = 0x0101
(call)|         1|  0.000124693|  0.000124693|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|
   252|         1|  2.45571e-05|  2.45571e-05|  0.01%|if sys.platform == "win32":
   253|         0|            0|            0|  0.00%|    from _ssl import enum_certificates, enum_crls
   254|         0|            0|            0|  0.00%|
   255|         1|  2.95639e-05|  2.95639e-05|  0.01%|from socket import socket, SOCK_STREAM, create_connection
   256|         1|   2.3365e-05|   2.3365e-05|  0.01%|from socket import SOL_SOCKET, SO_TYPE, _GLOBAL_DEFAULT_TIMEOUT
   257|         1|  2.19345e-05|  2.19345e-05|  0.01%|import socket as _socket
   258|         1|  2.24113e-05|  2.24113e-05|  0.01%|import base64        # for DER-to-PEM translation
   259|         1|   2.3365e-05|   2.3365e-05|  0.01%|import errno
   260|         1|  2.19345e-05|  2.19345e-05|  0.01%|import warnings
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|
   263|         1|  2.19345e-05|  2.19345e-05|  0.01%|socket_error = OSError  # keep that public name in module namespace
   264|         0|            0|            0|  0.00%|
   265|         1|  2.14577e-05|  2.14577e-05|  0.01%|CHANNEL_BINDING_TYPES = ['tls-unique']
   266|         0|            0|            0|  0.00%|
   267|         1|  2.24113e-05|  2.24113e-05|  0.01%|HAS_NEVER_CHECK_COMMON_NAME = hasattr(_ssl, 'HOSTFLAG_NEVER_CHECK_SUBJECT')
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|
   270|         1|  2.16961e-05|  2.16961e-05|  0.01%|_RESTRICTED_SERVER_CIPHERS = _DEFAULT_CIPHERS
   271|         0|            0|            0|  0.00%|
   272|         1|  2.12193e-05|  2.12193e-05|  0.01%|CertificateError = SSLCertVerificationError
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|
   275|         1|  2.14577e-05|  2.14577e-05|  0.01%|def _dnsname_match(dn, hostname):
   276|         0|            0|            0|  0.00%|    """Matching according to RFC 6125, section 6.4.3
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|    - Hostnames are compared lower case.
   279|         0|            0|            0|  0.00%|    - For IDNA, both dn and hostname must be encoded as IDN A-label (ACE).
   280|         0|            0|            0|  0.00%|    - Partial wildcards like 'www*.example.org', multiple wildcards, sole
   281|         0|            0|            0|  0.00%|      wildcard or wildcards in labels other then the left-most label are not
   282|         0|            0|            0|  0.00%|      supported and a CertificateError is raised.
   283|         0|            0|            0|  0.00%|    - A wildcard must match at least one character.
   284|         0|            0|            0|  0.00%|    """
   285|         0|            0|            0|  0.00%|    if not dn:
   286|         0|            0|            0|  0.00%|        return False
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|    wildcards = dn.count('*')
   289|         0|            0|            0|  0.00%|    # speed up common case w/o wildcards
   290|         0|            0|            0|  0.00%|    if not wildcards:
   291|         0|            0|            0|  0.00%|        return dn.lower() == hostname.lower()
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    if wildcards > 1:
   294|         0|            0|            0|  0.00%|        raise CertificateError(
   295|         0|            0|            0|  0.00%|            "too many wildcards in certificate DNS name: {!r}.".format(dn))
   296|         0|            0|            0|  0.00%|
   297|         0|            0|            0|  0.00%|    dn_leftmost, sep, dn_remainder = dn.partition('.')
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|    if '*' in dn_remainder:
   300|         0|            0|            0|  0.00%|        # Only match wildcard in leftmost segment.
   301|         0|            0|            0|  0.00%|        raise CertificateError(
   302|         0|            0|            0|  0.00%|            "wildcard can only be present in the leftmost label: "
   303|         0|            0|            0|  0.00%|            "{!r}.".format(dn))
   304|         0|            0|            0|  0.00%|
   305|         0|            0|            0|  0.00%|    if not sep:
   306|         0|            0|            0|  0.00%|        # no right side
   307|         0|            0|            0|  0.00%|        raise CertificateError(
   308|         0|            0|            0|  0.00%|            "sole wildcard without additional labels are not support: "
   309|         0|            0|            0|  0.00%|            "{!r}.".format(dn))
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|    if dn_leftmost != '*':
   312|         0|            0|            0|  0.00%|        # no partial wildcard matching
   313|         0|            0|            0|  0.00%|        raise CertificateError(
   314|         0|            0|            0|  0.00%|            "partial wildcards in leftmost label are not supported: "
   315|         0|            0|            0|  0.00%|            "{!r}.".format(dn))
   316|         0|            0|            0|  0.00%|
   317|         0|            0|            0|  0.00%|    hostname_leftmost, sep, hostname_remainder = hostname.partition('.')
   318|         0|            0|            0|  0.00%|    if not hostname_leftmost or not sep:
   319|         0|            0|            0|  0.00%|        # wildcard must match at least one char
   320|         0|            0|            0|  0.00%|        return False
   321|         0|            0|            0|  0.00%|    return dn_remainder.lower() == hostname_remainder.lower()
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|
   324|         1|  2.14577e-05|  2.14577e-05|  0.01%|def _inet_paton(ipname):
   325|         0|            0|            0|  0.00%|    """Try to convert an IP address to packed binary form
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|    Supports IPv4 addresses on all platforms and IPv6 on platforms with IPv6
   328|         0|            0|            0|  0.00%|    support.
   329|         0|            0|            0|  0.00%|    """
   330|         0|            0|            0|  0.00%|    # inet_aton() also accepts strings like '1', '127.1', some also trailing
   331|         0|            0|            0|  0.00%|    # data like '127.0.0.1 whatever'.
   332|         0|            0|            0|  0.00%|    try:
   333|         0|            0|            0|  0.00%|        addr = _socket.inet_aton(ipname)
   334|         0|            0|            0|  0.00%|    except OSError:
   335|         0|            0|            0|  0.00%|        # not an IPv4 address
   336|         0|            0|            0|  0.00%|        pass
   337|         0|            0|            0|  0.00%|    else:
   338|         0|            0|            0|  0.00%|        if _socket.inet_ntoa(addr) == ipname:
   339|         0|            0|            0|  0.00%|            # only accept injective ipnames
   340|         0|            0|            0|  0.00%|            return addr
   341|         0|            0|            0|  0.00%|        else:
   342|         0|            0|            0|  0.00%|            # refuse for short IPv4 notation and additional trailing data
   343|         0|            0|            0|  0.00%|            raise ValueError(
   344|         0|            0|            0|  0.00%|                "{!r} is not a quad-dotted IPv4 address.".format(ipname)
   345|         0|            0|            0|  0.00%|            )
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|    try:
   348|         0|            0|            0|  0.00%|        return _socket.inet_pton(_socket.AF_INET6, ipname)
   349|         0|            0|            0|  0.00%|    except OSError:
   350|         0|            0|            0|  0.00%|        raise ValueError("{!r} is neither an IPv4 nor an IP6 "
   351|         0|            0|            0|  0.00%|                         "address.".format(ipname))
   352|         0|            0|            0|  0.00%|    except AttributeError:
   353|         0|            0|            0|  0.00%|        # AF_INET6 not available
   354|         0|            0|            0|  0.00%|        pass
   355|         0|            0|            0|  0.00%|
   356|         0|            0|            0|  0.00%|    raise ValueError("{!r} is not an IPv4 address.".format(ipname))
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|
   359|         1|  2.12193e-05|  2.12193e-05|  0.01%|def _ipaddress_match(cert_ipaddress, host_ip):
   360|         0|            0|            0|  0.00%|    """Exact matching of IP addresses.
   361|         0|            0|            0|  0.00%|
   362|         0|            0|            0|  0.00%|    RFC 6125 explicitly doesn't define an algorithm for this
   363|         0|            0|            0|  0.00%|    (section 1.7.2 - "Out of Scope").
   364|         0|            0|            0|  0.00%|    """
   365|         0|            0|            0|  0.00%|    # OpenSSL may add a trailing newline to a subjectAltName's IP address,
   366|         0|            0|            0|  0.00%|    # commonly woth IPv6 addresses. Strip off trailing \n.
   367|         0|            0|            0|  0.00%|    ip = _inet_paton(cert_ipaddress.rstrip())
   368|         0|            0|            0|  0.00%|    return ip == host_ip
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|
   371|         1|  2.09808e-05|  2.09808e-05|  0.01%|def match_hostname(cert, hostname):
   372|         0|            0|            0|  0.00%|    """Verify that *cert* (in decoded format as returned by
   373|         0|            0|            0|  0.00%|    SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125
   374|         0|            0|            0|  0.00%|    rules are followed.
   375|         0|            0|            0|  0.00%|
   376|         0|            0|            0|  0.00%|    The function matches IP addresses rather than dNSNames if hostname is a
   377|         0|            0|            0|  0.00%|    valid ipaddress string. IPv4 addresses are supported on all platforms.
   378|         0|            0|            0|  0.00%|    IPv6 addresses are supported on platforms with IPv6 support (AF_INET6
   379|         0|            0|            0|  0.00%|    and inet_pton).
   380|         0|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|    CertificateError is raised on failure. On success, the function
   382|         0|            0|            0|  0.00%|    returns nothing.
   383|         0|            0|            0|  0.00%|    """
   384|         0|            0|            0|  0.00%|    warnings.warn(
   385|         0|            0|            0|  0.00%|        "ssl.match_hostname() is deprecated",
   386|         0|            0|            0|  0.00%|        category=DeprecationWarning,
   387|         0|            0|            0|  0.00%|        stacklevel=2
   388|         0|            0|            0|  0.00%|    )
   389|         0|            0|            0|  0.00%|    if not cert:
   390|         0|            0|            0|  0.00%|        raise ValueError("empty or no certificate, match_hostname needs a "
   391|         0|            0|            0|  0.00%|                         "SSL socket or SSL context with either "
   392|         0|            0|            0|  0.00%|                         "CERT_OPTIONAL or CERT_REQUIRED")
   393|         0|            0|            0|  0.00%|    try:
   394|         0|            0|            0|  0.00%|        host_ip = _inet_paton(hostname)
   395|         0|            0|            0|  0.00%|    except ValueError:
   396|         0|            0|            0|  0.00%|        # Not an IP address (common case)
   397|         0|            0|            0|  0.00%|        host_ip = None
   398|         0|            0|            0|  0.00%|    dnsnames = []
   399|         0|            0|            0|  0.00%|    san = cert.get('subjectAltName', ())
   400|         0|            0|            0|  0.00%|    for key, value in san:
   401|         0|            0|            0|  0.00%|        if key == 'DNS':
   402|         0|            0|            0|  0.00%|            if host_ip is None and _dnsname_match(value, hostname):
   403|         0|            0|            0|  0.00%|                return
   404|         0|            0|            0|  0.00%|            dnsnames.append(value)
   405|         0|            0|            0|  0.00%|        elif key == 'IP Address':
   406|         0|            0|            0|  0.00%|            if host_ip is not None and _ipaddress_match(value, host_ip):
   407|         0|            0|            0|  0.00%|                return
   408|         0|            0|            0|  0.00%|            dnsnames.append(value)
   409|         0|            0|            0|  0.00%|    if not dnsnames:
   410|         0|            0|            0|  0.00%|        # The subject is only checked when there is no dNSName entry
   411|         0|            0|            0|  0.00%|        # in subjectAltName
   412|         0|            0|            0|  0.00%|        for sub in cert.get('subject', ()):
   413|         0|            0|            0|  0.00%|            for key, value in sub:
   414|         0|            0|            0|  0.00%|                # XXX according to RFC 2818, the most specific Common Name
   415|         0|            0|            0|  0.00%|                # must be used.
   416|         0|            0|            0|  0.00%|                if key == 'commonName':
   417|         0|            0|            0|  0.00%|                    if _dnsname_match(value, hostname):
   418|         0|            0|            0|  0.00%|                        return
   419|         0|            0|            0|  0.00%|                    dnsnames.append(value)
   420|         0|            0|            0|  0.00%|    if len(dnsnames) > 1:
   421|         0|            0|            0|  0.00%|        raise CertificateError("hostname %r "
   422|         0|            0|            0|  0.00%|            "doesn't match either of %s"
   423|         0|            0|            0|  0.00%|            % (hostname, ', '.join(map(repr, dnsnames))))
   424|         0|            0|            0|  0.00%|    elif len(dnsnames) == 1:
   425|         0|            0|            0|  0.00%|        raise CertificateError("hostname %r "
   426|         0|            0|            0|  0.00%|            "doesn't match %r"
   427|         0|            0|            0|  0.00%|            % (hostname, dnsnames[0]))
   428|         0|            0|            0|  0.00%|    else:
   429|         0|            0|            0|  0.00%|        raise CertificateError("no appropriate commonName or "
   430|         0|            0|            0|  0.00%|            "subjectAltName fields were found")
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|
   433|         2|  8.86917e-05|  4.43459e-05|  0.04%|DefaultVerifyPaths = namedtuple("DefaultVerifyPaths",
(call)|         1|   0.00107193|   0.00107193|  0.44%|# /usr/lib/python3.10/collections/__init__.py:328 namedtuple
   434|         1|  2.67029e-05|  2.67029e-05|  0.01%|    "cafile capath openssl_cafile_env openssl_cafile openssl_capath_env "
   435|         0|            0|            0|  0.00%|    "openssl_capath")
   436|         0|            0|            0|  0.00%|
   437|         1|  1.28746e-05|  1.28746e-05|  0.01%|def get_default_verify_paths():
   438|         0|            0|            0|  0.00%|    """Return paths to default cafile and capath.
   439|         0|            0|            0|  0.00%|    """
   440|         0|            0|            0|  0.00%|    parts = _ssl.get_default_verify_paths()
   441|         0|            0|            0|  0.00%|
   442|         0|            0|            0|  0.00%|    # environment vars shadow paths
   443|         0|            0|            0|  0.00%|    cafile = os.environ.get(parts[0], parts[1])
   444|         0|            0|            0|  0.00%|    capath = os.environ.get(parts[2], parts[3])
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|    return DefaultVerifyPaths(cafile if os.path.isfile(cafile) else None,
   447|         0|            0|            0|  0.00%|                              capath if os.path.isdir(capath) else None,
   448|         0|            0|            0|  0.00%|                              *parts)
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|
   451|         3|  0.000139236|  4.64122e-05|  0.06%|class _ASN1Object(namedtuple("_ASN1Object", "nid shortname longname oid")):
(call)|         1|  0.000768661|  0.000768661|  0.32%|# /usr/lib/python3.10/collections/__init__.py:328 namedtuple
(call)|         1|  5.91278e-05|  5.91278e-05|  0.02%|# /usr/lib/python3.10/ssl.py:451 _ASN1Object
   452|         1|  3.09944e-06|  3.09944e-06|  0.00%|    """ASN.1 object identifier lookup
   453|         0|            0|            0|  0.00%|    """
   454|         1|  4.52995e-06|  4.52995e-06|  0.00%|    __slots__ = ()
   455|         0|            0|            0|  0.00%|
   456|         5|  1.85966e-05|  3.71933e-06|  0.01%|    def __new__(cls, oid):
   457|         4|  6.22272e-05|  1.55568e-05|  0.03%|        return super().__new__(cls, *_txt2obj(oid, name=False))
(call)|         4|  2.76566e-05|  6.91414e-06|  0.01%|# <string>_0:1 <lambda>
   458|         0|            0|            0|  0.00%|
   459|         1|  4.29153e-06|  4.29153e-06|  0.00%|    @classmethod
   460|         1|  6.19888e-06|  6.19888e-06|  0.00%|    def fromnid(cls, nid):
   461|         0|            0|            0|  0.00%|        """Create _ASN1Object from OpenSSL numeric ID
   462|         0|            0|            0|  0.00%|        """
   463|         0|            0|            0|  0.00%|        return super().__new__(cls, *_nid2obj(nid))
   464|         0|            0|            0|  0.00%|
   465|         1|  4.52995e-06|  4.52995e-06|  0.00%|    @classmethod
   466|         1|  4.05312e-06|  4.05312e-06|  0.00%|    def fromname(cls, name):
   467|         0|            0|            0|  0.00%|        """Create _ASN1Object from short name, long name or OID
   468|         0|            0|            0|  0.00%|        """
   469|         0|            0|            0|  0.00%|        return super().__new__(cls, *_txt2obj(name, name=True))
   470|         0|            0|            0|  0.00%|
   471|         0|            0|            0|  0.00%|
   472|         3|  0.000192165|  6.40551e-05|  0.08%|class Purpose(_ASN1Object, _Enum):
(call)|         1|  0.000395298|  0.000395298|  0.16%|# /usr/lib/python3.10/enum.py:165 __prepare__
(call)|         2|  0.000206232|  0.000103116|  0.08%|# /usr/lib/python3.10/enum.py:89 __setitem__
(call)|         1|  0.000640631|  0.000640631|  0.26%|# /usr/lib/python3.10/ssl.py:472 Purpose
(call)|         1|   0.00265384|   0.00265384|  1.09%|# /usr/lib/python3.10/enum.py:180 __new__
   473|         1|  1.00136e-05|  1.00136e-05|  0.00%|    """SSLContext purpose flags with X509v3 Extended Key Usage objects
(call)|         1|  9.39369e-05|  9.39369e-05|  0.04%|# /usr/lib/python3.10/enum.py:89 __setitem__
   474|         0|            0|            0|  0.00%|    """
   475|         1|  1.33514e-05|  1.33514e-05|  0.01%|    SERVER_AUTH = '1.3.6.1.5.5.7.3.1'
(call)|         1|  0.000136614|  0.000136614|  0.06%|# /usr/lib/python3.10/enum.py:89 __setitem__
   476|         1|  9.77516e-06|  9.77516e-06|  0.00%|    CLIENT_AUTH = '1.3.6.1.5.5.7.3.2'
(call)|         1|  0.000132084|  0.000132084|  0.05%|# /usr/lib/python3.10/enum.py:89 __setitem__
   477|         0|            0|            0|  0.00%|
   478|         0|            0|            0|  0.00%|
   479|         3|  0.000110388|  3.67959e-05|  0.05%|class SSLContext(_SSLContext):
(call)|         1|  0.000391245|  0.000391245|  0.16%|# /usr/lib/python3.10/ssl.py:479 SSLContext
   480|         1|  5.00679e-06|  5.00679e-06|  0.00%|    """An SSLContext holds various SSL-related configuration options and
   481|         0|            0|            0|  0.00%|    data, such as certificates and possibly a private key."""
   482|         1|  7.15256e-06|  7.15256e-06|  0.00%|    _windows_cert_stores = ("CA", "ROOT")
   483|         0|            0|            0|  0.00%|
   484|         1|  6.67572e-06|  6.67572e-06|  0.00%|    sslsocket_class = None  # SSLSocket is assigned later.
   485|         1|  7.62939e-06|  7.62939e-06|  0.00%|    sslobject_class = None  # SSLObject is assigned later.
   486|         0|            0|            0|  0.00%|
   487|         1|  6.91414e-06|  6.91414e-06|  0.00%|    def __new__(cls, protocol=None, *args, **kwargs):
   488|         0|            0|            0|  0.00%|        if protocol is None:
   489|         0|            0|            0|  0.00%|            warnings.warn(
   490|         0|            0|            0|  0.00%|                "ssl.SSLContext() without protocol argument is deprecated.",
   491|         0|            0|            0|  0.00%|                category=DeprecationWarning,
   492|         0|            0|            0|  0.00%|                stacklevel=2
   493|         0|            0|            0|  0.00%|            )
   494|         0|            0|            0|  0.00%|            protocol = PROTOCOL_TLS
   495|         0|            0|            0|  0.00%|        self = _SSLContext.__new__(cls, protocol)
   496|         0|            0|            0|  0.00%|        return self
   497|         0|            0|            0|  0.00%|
   498|         1|  9.53674e-06|  9.53674e-06|  0.00%|    def _encode_hostname(self, hostname):
   499|         0|            0|            0|  0.00%|        if hostname is None:
   500|         0|            0|            0|  0.00%|            return None
   501|         0|            0|            0|  0.00%|        elif isinstance(hostname, str):
   502|         0|            0|            0|  0.00%|            return hostname.encode('idna').decode('ascii')
   503|         0|            0|            0|  0.00%|        else:
   504|         0|            0|            0|  0.00%|            return hostname.decode('ascii')
   505|         0|            0|            0|  0.00%|
   506|         2|  1.35899e-05|  6.79493e-06|  0.01%|    def wrap_socket(self, sock, server_side=False,
   507|         1|  7.62939e-06|  7.62939e-06|  0.00%|                    do_handshake_on_connect=True,
   508|         1|  6.67572e-06|  6.67572e-06|  0.00%|                    suppress_ragged_eofs=True,
   509|         1|  6.67572e-06|  6.67572e-06|  0.00%|                    server_hostname=None, session=None):
   510|         0|            0|            0|  0.00%|        # SSLSocket class handles server_hostname encoding before it calls
   511|         0|            0|            0|  0.00%|        # ctx._wrap_socket()
   512|         0|            0|            0|  0.00%|        return self.sslsocket_class._create(
   513|         0|            0|            0|  0.00%|            sock=sock,
   514|         0|            0|            0|  0.00%|            server_side=server_side,
   515|         0|            0|            0|  0.00%|            do_handshake_on_connect=do_handshake_on_connect,
   516|         0|            0|            0|  0.00%|            suppress_ragged_eofs=suppress_ragged_eofs,
   517|         0|            0|            0|  0.00%|            server_hostname=server_hostname,
   518|         0|            0|            0|  0.00%|            context=self,
   519|         0|            0|            0|  0.00%|            session=session
   520|         0|            0|            0|  0.00%|        )
   521|         0|            0|            0|  0.00%|
   522|         2|  1.16825e-05|  5.84126e-06|  0.00%|    def wrap_bio(self, incoming, outgoing, server_side=False,
   523|         1|  6.67572e-06|  6.67572e-06|  0.00%|                 server_hostname=None, session=None):
   524|         0|            0|            0|  0.00%|        # Need to encode server_hostname here because _wrap_bio() can only
   525|         0|            0|            0|  0.00%|        # handle ASCII str.
   526|         0|            0|            0|  0.00%|        return self.sslobject_class._create(
   527|         0|            0|            0|  0.00%|            incoming, outgoing, server_side=server_side,
   528|         0|            0|            0|  0.00%|            server_hostname=self._encode_hostname(server_hostname),
   529|         0|            0|            0|  0.00%|            session=session, context=self,
   530|         0|            0|            0|  0.00%|        )
   531|         0|            0|            0|  0.00%|
   532|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def set_npn_protocols(self, npn_protocols):
   533|         0|            0|            0|  0.00%|        warnings.warn(
   534|         0|            0|            0|  0.00%|            "ssl NPN is deprecated, use ALPN instead",
   535|         0|            0|            0|  0.00%|            DeprecationWarning,
   536|         0|            0|            0|  0.00%|            stacklevel=2
   537|         0|            0|            0|  0.00%|        )
   538|         0|            0|            0|  0.00%|        protos = bytearray()
   539|         0|            0|            0|  0.00%|        for protocol in npn_protocols:
   540|         0|            0|            0|  0.00%|            b = bytes(protocol, 'ascii')
   541|         0|            0|            0|  0.00%|            if len(b) == 0 or len(b) > 255:
   542|         0|            0|            0|  0.00%|                raise SSLError('NPN protocols must be 1 to 255 in length')
   543|         0|            0|            0|  0.00%|            protos.append(len(b))
   544|         0|            0|            0|  0.00%|            protos.extend(b)
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|        self._set_npn_protocols(protos)
   547|         0|            0|            0|  0.00%|
   548|         1|  6.67572e-06|  6.67572e-06|  0.00%|    def set_servername_callback(self, server_name_callback):
   549|         0|            0|            0|  0.00%|        if server_name_callback is None:
   550|         0|            0|            0|  0.00%|            self.sni_callback = None
   551|         0|            0|            0|  0.00%|        else:
   552|         0|            0|            0|  0.00%|            if not callable(server_name_callback):
   553|         0|            0|            0|  0.00%|                raise TypeError("not a callable object")
   554|         0|            0|            0|  0.00%|
   555|         0|            0|            0|  0.00%|            def shim_cb(sslobj, servername, sslctx):
   556|         0|            0|            0|  0.00%|                servername = self._encode_hostname(servername)
   557|         0|            0|            0|  0.00%|                return server_name_callback(sslobj, servername, sslctx)
   558|         0|            0|            0|  0.00%|
   559|         0|            0|            0|  0.00%|            self.sni_callback = shim_cb
   560|         0|            0|            0|  0.00%|
   561|         1|  6.91414e-06|  6.91414e-06|  0.00%|    def set_alpn_protocols(self, alpn_protocols):
   562|         0|            0|            0|  0.00%|        protos = bytearray()
   563|         0|            0|            0|  0.00%|        for protocol in alpn_protocols:
   564|         0|            0|            0|  0.00%|            b = bytes(protocol, 'ascii')
   565|         0|            0|            0|  0.00%|            if len(b) == 0 or len(b) > 255:
   566|         0|            0|            0|  0.00%|                raise SSLError('ALPN protocols must be 1 to 255 in length')
   567|         0|            0|            0|  0.00%|            protos.append(len(b))
   568|         0|            0|            0|  0.00%|            protos.extend(b)
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|        self._set_alpn_protocols(protos)
   571|         0|            0|            0|  0.00%|
   572|         1|   6.4373e-06|   6.4373e-06|  0.00%|    def _load_windows_store_certs(self, storename, purpose):
   573|         0|            0|            0|  0.00%|        certs = bytearray()
   574|         0|            0|            0|  0.00%|        try:
   575|         0|            0|            0|  0.00%|            for cert, encoding, trust in enum_certificates(storename):
   576|         0|            0|            0|  0.00%|                # CA certs are never PKCS#7 encoded
   577|         0|            0|            0|  0.00%|                if encoding == "x509_asn":
   578|         0|            0|            0|  0.00%|                    if trust is True or purpose.oid in trust:
   579|         0|            0|            0|  0.00%|                        certs.extend(cert)
   580|         0|            0|            0|  0.00%|        except PermissionError:
   581|         0|            0|            0|  0.00%|            warnings.warn("unable to enumerate Windows certificate store")
   582|         0|            0|            0|  0.00%|        if certs:
   583|         0|            0|            0|  0.00%|            self.load_verify_locations(cadata=certs)
   584|         0|            0|            0|  0.00%|        return certs
   585|         0|            0|            0|  0.00%|
   586|         1|  7.62939e-06|  7.62939e-06|  0.00%|    def load_default_certs(self, purpose=Purpose.SERVER_AUTH):
   587|         0|            0|            0|  0.00%|        if not isinstance(purpose, _ASN1Object):
   588|         0|            0|            0|  0.00%|            raise TypeError(purpose)
   589|         0|            0|            0|  0.00%|        if sys.platform == "win32":
   590|         0|            0|            0|  0.00%|            for storename in self._windows_cert_stores:
   591|         0|            0|            0|  0.00%|                self._load_windows_store_certs(storename, purpose)
   592|         0|            0|            0|  0.00%|        self.set_default_verify_paths()
   593|         0|            0|            0|  0.00%|
   594|         1|  8.34465e-06|  8.34465e-06|  0.00%|    if hasattr(_SSLContext, 'minimum_version'):
   595|         1|  6.91414e-06|  6.91414e-06|  0.00%|        @property
   596|         1|  7.15256e-06|  7.15256e-06|  0.00%|        def minimum_version(self):
   597|         0|            0|            0|  0.00%|            return TLSVersion(super().minimum_version)
   598|         0|            0|            0|  0.00%|
   599|         1|  7.15256e-06|  7.15256e-06|  0.00%|        @minimum_version.setter
   600|         1|  6.91414e-06|  6.91414e-06|  0.00%|        def minimum_version(self, value):
   601|         0|            0|            0|  0.00%|            if value == TLSVersion.SSLv3:
   602|         0|            0|            0|  0.00%|                self.options &= ~Options.OP_NO_SSLv3
   603|         0|            0|            0|  0.00%|            super(SSLContext, SSLContext).minimum_version.__set__(self, value)
   604|         0|            0|            0|  0.00%|
   605|         1|  7.15256e-06|  7.15256e-06|  0.00%|        @property
   606|         1|  9.77516e-06|  9.77516e-06|  0.00%|        def maximum_version(self):
   607|         0|            0|            0|  0.00%|            return TLSVersion(super().maximum_version)
   608|         0|            0|            0|  0.00%|
   609|         1|  6.67572e-06|  6.67572e-06|  0.00%|        @maximum_version.setter
   610|         1|  7.15256e-06|  7.15256e-06|  0.00%|        def maximum_version(self, value):
   611|         0|            0|            0|  0.00%|            super(SSLContext, SSLContext).maximum_version.__set__(self, value)
   612|         0|            0|            0|  0.00%|
   613|         1|  6.67572e-06|  6.67572e-06|  0.00%|    @property
   614|         1|  7.15256e-06|  7.15256e-06|  0.00%|    def options(self):
   615|         0|            0|            0|  0.00%|        return Options(super().options)
   616|         0|            0|            0|  0.00%|
   617|         1|  6.67572e-06|  6.67572e-06|  0.00%|    @options.setter
   618|         1|  7.86781e-06|  7.86781e-06|  0.00%|    def options(self, value):
   619|         0|            0|            0|  0.00%|        super(SSLContext, SSLContext).options.__set__(self, value)
   620|         0|            0|            0|  0.00%|
   621|         1|  7.86781e-06|  7.86781e-06|  0.00%|    if hasattr(_ssl, 'HOSTFLAG_NEVER_CHECK_SUBJECT'):
   622|         1|  7.39098e-06|  7.39098e-06|  0.00%|        @property
   623|         1|  6.67572e-06|  6.67572e-06|  0.00%|        def hostname_checks_common_name(self):
   624|         0|            0|            0|  0.00%|            ncs = self._host_flags & _ssl.HOSTFLAG_NEVER_CHECK_SUBJECT
   625|         0|            0|            0|  0.00%|            return ncs != _ssl.HOSTFLAG_NEVER_CHECK_SUBJECT
   626|         0|            0|            0|  0.00%|
   627|         1|  6.91414e-06|  6.91414e-06|  0.00%|        @hostname_checks_common_name.setter
   628|         1|   6.4373e-06|   6.4373e-06|  0.00%|        def hostname_checks_common_name(self, value):
   629|         0|            0|            0|  0.00%|            if value:
   630|         0|            0|            0|  0.00%|                self._host_flags &= ~_ssl.HOSTFLAG_NEVER_CHECK_SUBJECT
   631|         0|            0|            0|  0.00%|            else:
   632|         0|            0|            0|  0.00%|                self._host_flags |= _ssl.HOSTFLAG_NEVER_CHECK_SUBJECT
   633|         0|            0|            0|  0.00%|    else:
   634|         0|            0|            0|  0.00%|        @property
   635|         0|            0|            0|  0.00%|        def hostname_checks_common_name(self):
   636|         0|            0|            0|  0.00%|            return True
   637|         0|            0|            0|  0.00%|
   638|         1|  6.67572e-06|  6.67572e-06|  0.00%|    @property
   639|         1|  7.62939e-06|  7.62939e-06|  0.00%|    def _msg_callback(self):
   640|         0|            0|            0|  0.00%|        """TLS message callback
   641|         0|            0|            0|  0.00%|
   642|         0|            0|            0|  0.00%|        The message callback provides a debugging hook to analyze TLS
   643|         0|            0|            0|  0.00%|        connections. The callback is called for any TLS protocol message
   644|         0|            0|            0|  0.00%|        (header, handshake, alert, and more), but not for application data.
   645|         0|            0|            0|  0.00%|        Due to technical  limitations, the callback can't be used to filter
   646|         0|            0|            0|  0.00%|        traffic or to abort a connection. Any exception raised in the
   647|         0|            0|            0|  0.00%|        callback is delayed until the handshake, read, or write operation
   648|         0|            0|            0|  0.00%|        has been performed.
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|        def msg_cb(conn, direction, version, content_type, msg_type, data):
   651|         0|            0|            0|  0.00%|            pass
   652|         0|            0|            0|  0.00%|
   653|         0|            0|            0|  0.00%|        conn
   654|         0|            0|            0|  0.00%|            :class:`SSLSocket` or :class:`SSLObject` instance
   655|         0|            0|            0|  0.00%|        direction
   656|         0|            0|            0|  0.00%|            ``read`` or ``write``
   657|         0|            0|            0|  0.00%|        version
   658|         0|            0|            0|  0.00%|            :class:`TLSVersion` enum member or int for unknown version. For a
   659|         0|            0|            0|  0.00%|            frame header, it's the header version.
   660|         0|            0|            0|  0.00%|        content_type
   661|         0|            0|            0|  0.00%|            :class:`_TLSContentType` enum member or int for unsupported
   662|         0|            0|            0|  0.00%|            content type.
   663|         0|            0|            0|  0.00%|        msg_type
   664|         0|            0|            0|  0.00%|            Either a :class:`_TLSContentType` enum number for a header
   665|         0|            0|            0|  0.00%|            message, a :class:`_TLSAlertType` enum member for an alert
   666|         0|            0|            0|  0.00%|            message, a :class:`_TLSMessageType` enum member for other
   667|         0|            0|            0|  0.00%|            messages, or int for unsupported message types.
   668|         0|            0|            0|  0.00%|        data
   669|         0|            0|            0|  0.00%|            Raw, decrypted message content as bytes
   670|         0|            0|            0|  0.00%|        """
   671|         0|            0|            0|  0.00%|        inner = super()._msg_callback
   672|         0|            0|            0|  0.00%|        if inner is not None:
   673|         0|            0|            0|  0.00%|            return inner.user_function
   674|         0|            0|            0|  0.00%|        else:
   675|         0|            0|            0|  0.00%|            return None
   676|         0|            0|            0|  0.00%|
   677|         1|   6.4373e-06|   6.4373e-06|  0.00%|    @_msg_callback.setter
   678|         1|  6.91414e-06|  6.91414e-06|  0.00%|    def _msg_callback(self, callback):
   679|         0|            0|            0|  0.00%|        if callback is None:
   680|         0|            0|            0|  0.00%|            super(SSLContext, SSLContext)._msg_callback.__set__(self, None)
   681|         0|            0|            0|  0.00%|            return
   682|         0|            0|            0|  0.00%|
   683|         0|            0|            0|  0.00%|        if not hasattr(callback, '__call__'):
   684|         0|            0|            0|  0.00%|            raise TypeError(f"{callback} is not callable.")
   685|         0|            0|            0|  0.00%|
   686|         0|            0|            0|  0.00%|        def inner(conn, direction, version, content_type, msg_type, data):
   687|         0|            0|            0|  0.00%|            try:
   688|         0|            0|            0|  0.00%|                version = TLSVersion(version)
   689|         0|            0|            0|  0.00%|            except ValueError:
   690|         0|            0|            0|  0.00%|                pass
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|            try:
   693|         0|            0|            0|  0.00%|                content_type = _TLSContentType(content_type)
   694|         0|            0|            0|  0.00%|            except ValueError:
   695|         0|            0|            0|  0.00%|                pass
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|            if content_type == _TLSContentType.HEADER:
   698|         0|            0|            0|  0.00%|                msg_enum = _TLSContentType
   699|         0|            0|            0|  0.00%|            elif content_type == _TLSContentType.ALERT:
   700|         0|            0|            0|  0.00%|                msg_enum = _TLSAlertType
   701|         0|            0|            0|  0.00%|            else:
   702|         0|            0|            0|  0.00%|                msg_enum = _TLSMessageType
   703|         0|            0|            0|  0.00%|            try:
   704|         0|            0|            0|  0.00%|                msg_type = msg_enum(msg_type)
   705|         0|            0|            0|  0.00%|            except ValueError:
   706|         0|            0|            0|  0.00%|                pass
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|            return callback(conn, direction, version,
   709|         0|            0|            0|  0.00%|                            content_type, msg_type, data)
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|        inner.user_function = callback
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|        super(SSLContext, SSLContext)._msg_callback.__set__(self, inner)
   714|         0|            0|            0|  0.00%|
   715|         1|  6.67572e-06|  6.67572e-06|  0.00%|    @property
   716|         1|  7.15256e-06|  7.15256e-06|  0.00%|    def protocol(self):
   717|         0|            0|            0|  0.00%|        return _SSLMethod(super().protocol)
   718|         0|            0|            0|  0.00%|
   719|         1|  6.67572e-06|  6.67572e-06|  0.00%|    @property
   720|         1|  7.15256e-06|  7.15256e-06|  0.00%|    def verify_flags(self):
   721|         0|            0|            0|  0.00%|        return VerifyFlags(super().verify_flags)
   722|         0|            0|            0|  0.00%|
   723|         1|  8.34465e-06|  8.34465e-06|  0.00%|    @verify_flags.setter
   724|         1|  7.15256e-06|  7.15256e-06|  0.00%|    def verify_flags(self, value):
   725|         0|            0|            0|  0.00%|        super(SSLContext, SSLContext).verify_flags.__set__(self, value)
   726|         0|            0|            0|  0.00%|
   727|         1|  6.67572e-06|  6.67572e-06|  0.00%|    @property
   728|         1|  6.67572e-06|  6.67572e-06|  0.00%|    def verify_mode(self):
   729|         0|            0|            0|  0.00%|        value = super().verify_mode
   730|         0|            0|            0|  0.00%|        try:
   731|         0|            0|            0|  0.00%|            return VerifyMode(value)
   732|         0|            0|            0|  0.00%|        except ValueError:
   733|         0|            0|            0|  0.00%|            return value
   734|         0|            0|            0|  0.00%|
   735|         1|  6.67572e-06|  6.67572e-06|  0.00%|    @verify_mode.setter
   736|         1|  7.15256e-06|  7.15256e-06|  0.00%|    def verify_mode(self, value):
   737|         0|            0|            0|  0.00%|        super(SSLContext, SSLContext).verify_mode.__set__(self, value)
   738|         0|            0|            0|  0.00%|
   739|         0|            0|            0|  0.00%|
   740|         2|  4.60148e-05|  2.30074e-05|  0.02%|def create_default_context(purpose=Purpose.SERVER_AUTH, *, cafile=None,
   741|         1|  2.26498e-05|  2.26498e-05|  0.01%|                           capath=None, cadata=None):
   742|         0|            0|            0|  0.00%|    """Create a SSLContext object with default settings.
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|    NOTE: The protocol and settings may change anytime without prior
   745|         0|            0|            0|  0.00%|          deprecation. The values represent a fair balance between maximum
   746|         0|            0|            0|  0.00%|          compatibility and security.
   747|         0|            0|            0|  0.00%|    """
   748|         0|            0|            0|  0.00%|    if not isinstance(purpose, _ASN1Object):
   749|         0|            0|            0|  0.00%|        raise TypeError(purpose)
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    # SSLContext sets OP_NO_SSLv2, OP_NO_SSLv3, OP_NO_COMPRESSION,
   752|         0|            0|            0|  0.00%|    # OP_CIPHER_SERVER_PREFERENCE, OP_SINGLE_DH_USE and OP_SINGLE_ECDH_USE
   753|         0|            0|            0|  0.00%|    # by default.
   754|         0|            0|            0|  0.00%|    if purpose == Purpose.SERVER_AUTH:
   755|         0|            0|            0|  0.00%|        # verify certs and host name in client mode
   756|         0|            0|            0|  0.00%|        context = SSLContext(PROTOCOL_TLS_CLIENT)
   757|         0|            0|            0|  0.00%|        context.verify_mode = CERT_REQUIRED
   758|         0|            0|            0|  0.00%|        context.check_hostname = True
   759|         0|            0|            0|  0.00%|    elif purpose == Purpose.CLIENT_AUTH:
   760|         0|            0|            0|  0.00%|        context = SSLContext(PROTOCOL_TLS_SERVER)
   761|         0|            0|            0|  0.00%|    else:
   762|         0|            0|            0|  0.00%|        raise ValueError(purpose)
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|    if cafile or capath or cadata:
   765|         0|            0|            0|  0.00%|        context.load_verify_locations(cafile, capath, cadata)
   766|         0|            0|            0|  0.00%|    elif context.verify_mode != CERT_NONE:
   767|         0|            0|            0|  0.00%|        # no explicit cafile, capath or cadata but the verify mode is
   768|         0|            0|            0|  0.00%|        # CERT_OPTIONAL or CERT_REQUIRED. Let's try to load default system
   769|         0|            0|            0|  0.00%|        # root CA certificates for the given purpose. This may fail silently.
   770|         0|            0|            0|  0.00%|        context.load_default_certs(purpose)
   771|         0|            0|            0|  0.00%|    # OpenSSL 1.1.1 keylog file
   772|         0|            0|            0|  0.00%|    if hasattr(context, 'keylog_filename'):
   773|         0|            0|            0|  0.00%|        keylogfile = os.environ.get('SSLKEYLOGFILE')
   774|         0|            0|            0|  0.00%|        if keylogfile and not sys.flags.ignore_environment:
   775|         0|            0|            0|  0.00%|            context.keylog_filename = keylogfile
   776|         0|            0|            0|  0.00%|    return context
   777|         0|            0|            0|  0.00%|
   778|         2|  3.40939e-05|  1.70469e-05|  0.01%|def _create_unverified_context(protocol=None, *, cert_reqs=CERT_NONE,
   779|         1|  2.21729e-05|  2.21729e-05|  0.01%|                           check_hostname=False, purpose=Purpose.SERVER_AUTH,
   780|         1|  2.14577e-05|  2.14577e-05|  0.01%|                           certfile=None, keyfile=None,
   781|         1|  2.12193e-05|  2.12193e-05|  0.01%|                           cafile=None, capath=None, cadata=None):
   782|         0|            0|            0|  0.00%|    """Create a SSLContext object for Python stdlib modules
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|    All Python stdlib modules shall use this function to create SSLContext
   785|         0|            0|            0|  0.00%|    objects in order to keep common settings in one place. The configuration
   786|         0|            0|            0|  0.00%|    is less restrict than create_default_context()'s to increase backward
   787|         0|            0|            0|  0.00%|    compatibility.
   788|         0|            0|            0|  0.00%|    """
   789|         0|            0|            0|  0.00%|    if not isinstance(purpose, _ASN1Object):
   790|         0|            0|            0|  0.00%|        raise TypeError(purpose)
   791|         0|            0|            0|  0.00%|
   792|         0|            0|            0|  0.00%|    # SSLContext sets OP_NO_SSLv2, OP_NO_SSLv3, OP_NO_COMPRESSION,
   793|         0|            0|            0|  0.00%|    # OP_CIPHER_SERVER_PREFERENCE, OP_SINGLE_DH_USE and OP_SINGLE_ECDH_USE
   794|         0|            0|            0|  0.00%|    # by default.
   795|         0|            0|            0|  0.00%|    if purpose == Purpose.SERVER_AUTH:
   796|         0|            0|            0|  0.00%|        # verify certs and host name in client mode
   797|         0|            0|            0|  0.00%|        if protocol is None:
   798|         0|            0|            0|  0.00%|            protocol = PROTOCOL_TLS_CLIENT
   799|         0|            0|            0|  0.00%|    elif purpose == Purpose.CLIENT_AUTH:
   800|         0|            0|            0|  0.00%|        if protocol is None:
   801|         0|            0|            0|  0.00%|            protocol = PROTOCOL_TLS_SERVER
   802|         0|            0|            0|  0.00%|    else:
   803|         0|            0|            0|  0.00%|        raise ValueError(purpose)
   804|         0|            0|            0|  0.00%|
   805|         0|            0|            0|  0.00%|    context = SSLContext(protocol)
   806|         0|            0|            0|  0.00%|    context.check_hostname = check_hostname
   807|         0|            0|            0|  0.00%|    if cert_reqs is not None:
   808|         0|            0|            0|  0.00%|        context.verify_mode = cert_reqs
   809|         0|            0|            0|  0.00%|    if check_hostname:
   810|         0|            0|            0|  0.00%|        context.check_hostname = True
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|    if keyfile and not certfile:
   813|         0|            0|            0|  0.00%|        raise ValueError("certfile must be specified")
   814|         0|            0|            0|  0.00%|    if certfile or keyfile:
   815|         0|            0|            0|  0.00%|        context.load_cert_chain(certfile, keyfile)
   816|         0|            0|            0|  0.00%|
   817|         0|            0|            0|  0.00%|    # load CA root certs
   818|         0|            0|            0|  0.00%|    if cafile or capath or cadata:
   819|         0|            0|            0|  0.00%|        context.load_verify_locations(cafile, capath, cadata)
   820|         0|            0|            0|  0.00%|    elif context.verify_mode != CERT_NONE:
   821|         0|            0|            0|  0.00%|        # no explicit cafile, capath or cadata but the verify mode is
   822|         0|            0|            0|  0.00%|        # CERT_OPTIONAL or CERT_REQUIRED. Let's try to load default system
   823|         0|            0|            0|  0.00%|        # root CA certificates for the given purpose. This may fail silently.
   824|         0|            0|            0|  0.00%|        context.load_default_certs(purpose)
   825|         0|            0|            0|  0.00%|    # OpenSSL 1.1.1 keylog file
   826|         0|            0|            0|  0.00%|    if hasattr(context, 'keylog_filename'):
   827|         0|            0|            0|  0.00%|        keylogfile = os.environ.get('SSLKEYLOGFILE')
   828|         0|            0|            0|  0.00%|        if keylogfile and not sys.flags.ignore_environment:
   829|         0|            0|            0|  0.00%|            context.keylog_filename = keylogfile
   830|         0|            0|            0|  0.00%|    return context
   831|         0|            0|            0|  0.00%|
   832|         0|            0|            0|  0.00%|# Used by http.client if no context is explicitly passed.
   833|         1|  1.26362e-05|  1.26362e-05|  0.01%|_create_default_https_context = create_default_context
   834|         0|            0|            0|  0.00%|
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|# Backwards compatibility alias, even though it's not a public name.
   837|         1|  2.14577e-05|  2.14577e-05|  0.01%|_create_stdlib_context = _create_unverified_context
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|
   840|         3|  9.89437e-05|  3.29812e-05|  0.04%|class SSLObject:
(call)|         1|  0.000219345|  0.000219345|  0.09%|# /usr/lib/python3.10/ssl.py:840 SSLObject
   841|         1|  4.29153e-06|  4.29153e-06|  0.00%|    """This class implements an interface on top of a low-level SSL object as
   842|         0|            0|            0|  0.00%|    implemented by OpenSSL. This object captures the state of an SSL connection
   843|         0|            0|            0|  0.00%|    but does not provide any network IO itself. IO needs to be performed
   844|         0|            0|            0|  0.00%|    through separate "BIO" objects which are OpenSSL's IO abstraction layer.
   845|         0|            0|            0|  0.00%|
   846|         0|            0|            0|  0.00%|    This class does not have a public constructor. Instances are returned by
   847|         0|            0|            0|  0.00%|    ``SSLContext.wrap_bio``. This class is typically used by framework authors
   848|         0|            0|            0|  0.00%|    that want to implement asynchronous IO for SSL through memory buffers.
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|    When compared to ``SSLSocket``, this object lacks the following features:
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|     * Any form of network IO, including methods such as ``recv`` and ``send``.
   853|         0|            0|            0|  0.00%|     * The ``do_handshake_on_connect`` and ``suppress_ragged_eofs`` machinery.
   854|         0|            0|            0|  0.00%|    """
   855|         1|  7.15256e-06|  7.15256e-06|  0.00%|    def __init__(self, *args, **kwargs):
   856|         0|            0|            0|  0.00%|        raise TypeError(
   857|         0|            0|            0|  0.00%|            f"{self.__class__.__name__} does not have a public "
   858|         0|            0|            0|  0.00%|            f"constructor. Instances are returned by SSLContext.wrap_bio()."
   859|         0|            0|            0|  0.00%|        )
   860|         0|            0|            0|  0.00%|
   861|         1|  5.24521e-06|  5.24521e-06|  0.00%|    @classmethod
   862|         2|  1.21593e-05|  6.07967e-06|  0.01%|    def _create(cls, incoming, outgoing, server_side=False,
   863|         1|  5.48363e-06|  5.48363e-06|  0.00%|                 server_hostname=None, session=None, context=None):
   864|         0|            0|            0|  0.00%|        self = cls.__new__(cls)
   865|         0|            0|            0|  0.00%|        sslobj = context._wrap_bio(
   866|         0|            0|            0|  0.00%|            incoming, outgoing, server_side=server_side,
   867|         0|            0|            0|  0.00%|            server_hostname=server_hostname,
   868|         0|            0|            0|  0.00%|            owner=self, session=session
   869|         0|            0|            0|  0.00%|        )
   870|         0|            0|            0|  0.00%|        self._sslobj = sslobj
   871|         0|            0|            0|  0.00%|        return self
   872|         0|            0|            0|  0.00%|
   873|         1|   3.8147e-06|   3.8147e-06|  0.00%|    @property
   874|         1|  7.15256e-06|  7.15256e-06|  0.00%|    def context(self):
   875|         0|            0|            0|  0.00%|        """The SSLContext that is currently in use."""
   876|         0|            0|            0|  0.00%|        return self._sslobj.context
   877|         0|            0|            0|  0.00%|
   878|         1|  6.19888e-06|  6.19888e-06|  0.00%|    @context.setter
   879|         1|  5.96046e-06|  5.96046e-06|  0.00%|    def context(self, ctx):
   880|         0|            0|            0|  0.00%|        self._sslobj.context = ctx
   881|         0|            0|            0|  0.00%|
   882|         1|  5.48363e-06|  5.48363e-06|  0.00%|    @property
   883|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def session(self):
   884|         0|            0|            0|  0.00%|        """The SSLSession for client socket."""
   885|         0|            0|            0|  0.00%|        return self._sslobj.session
   886|         0|            0|            0|  0.00%|
   887|         1|  5.24521e-06|  5.24521e-06|  0.00%|    @session.setter
   888|         1|  5.72205e-06|  5.72205e-06|  0.00%|    def session(self, session):
   889|         0|            0|            0|  0.00%|        self._sslobj.session = session
   890|         0|            0|            0|  0.00%|
   891|         1|  5.24521e-06|  5.24521e-06|  0.00%|    @property
   892|         1|  6.19888e-06|  6.19888e-06|  0.00%|    def session_reused(self):
   893|         0|            0|            0|  0.00%|        """Was the client session reused during handshake"""
   894|         0|            0|            0|  0.00%|        return self._sslobj.session_reused
   895|         0|            0|            0|  0.00%|
   896|         1|  6.67572e-06|  6.67572e-06|  0.00%|    @property
   897|         1|  5.72205e-06|  5.72205e-06|  0.00%|    def server_side(self):
   898|         0|            0|            0|  0.00%|        """Whether this is a server-side socket."""
   899|         0|            0|            0|  0.00%|        return self._sslobj.server_side
   900|         0|            0|            0|  0.00%|
   901|         1|  5.24521e-06|  5.24521e-06|  0.00%|    @property
   902|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def server_hostname(self):
   903|         0|            0|            0|  0.00%|        """The currently set server hostname (for SNI), or ``None`` if no
   904|         0|            0|            0|  0.00%|        server hostname is set."""
   905|         0|            0|            0|  0.00%|        return self._sslobj.server_hostname
   906|         0|            0|            0|  0.00%|
   907|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def read(self, len=1024, buffer=None):
   908|         0|            0|            0|  0.00%|        """Read up to 'len' bytes from the SSL object and return them.
   909|         0|            0|            0|  0.00%|
   910|         0|            0|            0|  0.00%|        If 'buffer' is provided, read into this buffer and return the number of
   911|         0|            0|            0|  0.00%|        bytes read.
   912|         0|            0|            0|  0.00%|        """
   913|         0|            0|            0|  0.00%|        if buffer is not None:
   914|         0|            0|            0|  0.00%|            v = self._sslobj.read(len, buffer)
   915|         0|            0|            0|  0.00%|        else:
   916|         0|            0|            0|  0.00%|            v = self._sslobj.read(len)
   917|         0|            0|            0|  0.00%|        return v
   918|         0|            0|            0|  0.00%|
   919|         1|  5.48363e-06|  5.48363e-06|  0.00%|    def write(self, data):
   920|         0|            0|            0|  0.00%|        """Write 'data' to the SSL object and return the number of bytes
   921|         0|            0|            0|  0.00%|        written.
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|        The 'data' argument must support the buffer interface.
   924|         0|            0|            0|  0.00%|        """
   925|         0|            0|            0|  0.00%|        return self._sslobj.write(data)
   926|         0|            0|            0|  0.00%|
   927|         1|  5.48363e-06|  5.48363e-06|  0.00%|    def getpeercert(self, binary_form=False):
   928|         0|            0|            0|  0.00%|        """Returns a formatted version of the data in the certificate provided
   929|         0|            0|            0|  0.00%|        by the other end of the SSL channel.
   930|         0|            0|            0|  0.00%|
   931|         0|            0|            0|  0.00%|        Return None if no certificate was provided, {} if a certificate was
   932|         0|            0|            0|  0.00%|        provided, but not validated.
   933|         0|            0|            0|  0.00%|        """
   934|         0|            0|            0|  0.00%|        return self._sslobj.getpeercert(binary_form)
   935|         0|            0|            0|  0.00%|
   936|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def selected_npn_protocol(self):
   937|         0|            0|            0|  0.00%|        """Return the currently selected NPN protocol as a string, or ``None``
   938|         0|            0|            0|  0.00%|        if a next protocol was not negotiated or if NPN is not supported by one
   939|         0|            0|            0|  0.00%|        of the peers."""
   940|         0|            0|            0|  0.00%|        warnings.warn(
   941|         0|            0|            0|  0.00%|            "ssl NPN is deprecated, use ALPN instead",
   942|         0|            0|            0|  0.00%|            DeprecationWarning,
   943|         0|            0|            0|  0.00%|            stacklevel=2
   944|         0|            0|            0|  0.00%|        )
   945|         0|            0|            0|  0.00%|
   946|         1|  6.67572e-06|  6.67572e-06|  0.00%|    def selected_alpn_protocol(self):
   947|         0|            0|            0|  0.00%|        """Return the currently selected ALPN protocol as a string, or ``None``
   948|         0|            0|            0|  0.00%|        if a next protocol was not negotiated or if ALPN is not supported by one
   949|         0|            0|            0|  0.00%|        of the peers."""
   950|         0|            0|            0|  0.00%|        return self._sslobj.selected_alpn_protocol()
   951|         0|            0|            0|  0.00%|
   952|         1|  5.00679e-06|  5.00679e-06|  0.00%|    def cipher(self):
   953|         0|            0|            0|  0.00%|        """Return the currently selected cipher as a 3-tuple ``(name,
   954|         0|            0|            0|  0.00%|        ssl_version, secret_bits)``."""
   955|         0|            0|            0|  0.00%|        return self._sslobj.cipher()
   956|         0|            0|            0|  0.00%|
   957|         1|  5.48363e-06|  5.48363e-06|  0.00%|    def shared_ciphers(self):
   958|         0|            0|            0|  0.00%|        """Return a list of ciphers shared by the client during the handshake or
   959|         0|            0|            0|  0.00%|        None if this is not a valid server connection.
   960|         0|            0|            0|  0.00%|        """
   961|         0|            0|            0|  0.00%|        return self._sslobj.shared_ciphers()
   962|         0|            0|            0|  0.00%|
   963|         1|  5.00679e-06|  5.00679e-06|  0.00%|    def compression(self):
   964|         0|            0|            0|  0.00%|        """Return the current compression algorithm in use, or ``None`` if
   965|         0|            0|            0|  0.00%|        compression was not negotiated or not supported by one of the peers."""
   966|         0|            0|            0|  0.00%|        return self._sslobj.compression()
   967|         0|            0|            0|  0.00%|
   968|         1|  5.72205e-06|  5.72205e-06|  0.00%|    def pending(self):
   969|         0|            0|            0|  0.00%|        """Return the number of bytes that can be read immediately."""
   970|         0|            0|            0|  0.00%|        return self._sslobj.pending()
   971|         0|            0|            0|  0.00%|
   972|         1|  5.00679e-06|  5.00679e-06|  0.00%|    def do_handshake(self):
   973|         0|            0|            0|  0.00%|        """Start the SSL/TLS handshake."""
   974|         0|            0|            0|  0.00%|        self._sslobj.do_handshake()
   975|         0|            0|            0|  0.00%|
   976|         1|  5.72205e-06|  5.72205e-06|  0.00%|    def unwrap(self):
   977|         0|            0|            0|  0.00%|        """Start the SSL shutdown handshake."""
   978|         0|            0|            0|  0.00%|        return self._sslobj.shutdown()
   979|         0|            0|            0|  0.00%|
   980|         1|  5.96046e-06|  5.96046e-06|  0.00%|    def get_channel_binding(self, cb_type="tls-unique"):
   981|         0|            0|            0|  0.00%|        """Get channel binding data for current connection.  Raise ValueError
   982|         0|            0|            0|  0.00%|        if the requested `cb_type` is not supported.  Return bytes of the data
   983|         0|            0|            0|  0.00%|        or None if the data is not available (e.g. before the handshake)."""
   984|         0|            0|            0|  0.00%|        return self._sslobj.get_channel_binding(cb_type)
   985|         0|            0|            0|  0.00%|
   986|         1|  5.00679e-06|  5.00679e-06|  0.00%|    def version(self):
   987|         0|            0|            0|  0.00%|        """Return a string identifying the protocol version used by the
   988|         0|            0|            0|  0.00%|        current SSL channel. """
   989|         0|            0|            0|  0.00%|        return self._sslobj.version()
   990|         0|            0|            0|  0.00%|
   991|         1|  5.48363e-06|  5.48363e-06|  0.00%|    def verify_client_post_handshake(self):
   992|         0|            0|            0|  0.00%|        return self._sslobj.verify_client_post_handshake()
   993|         0|            0|            0|  0.00%|
   994|         0|            0|            0|  0.00%|
   995|        16|  0.000104189|  6.51181e-06|  0.04%|def _sslcopydoc(func):
   996|         0|            0|            0|  0.00%|    """Copy docstring from SSLObject to SSLSocket"""
   997|        15|  5.45979e-05|  3.63986e-06|  0.02%|    func.__doc__ = getattr(SSLObject, func.__name__).__doc__
   998|        15|  4.50611e-05|  3.00407e-06|  0.02%|    return func
   999|         0|            0|            0|  0.00%|
  1000|         0|            0|            0|  0.00%|
  1001|         3|  0.000120401|  4.01338e-05|  0.05%|class SSLSocket(socket):
(call)|         1|   0.00101709|   0.00101709|  0.42%|# /usr/lib/python3.10/ssl.py:1001 SSLSocket
  1002|         1|  6.19888e-06|  6.19888e-06|  0.00%|    """This class implements a subtype of socket.socket that wraps
  1003|         0|            0|            0|  0.00%|    the underlying OS socket in an SSL context when necessary, and
  1004|         0|            0|            0|  0.00%|    provides read and write methods over that channel. """
  1005|         0|            0|            0|  0.00%|
  1006|         1|  8.82149e-06|  8.82149e-06|  0.00%|    def __init__(self, *args, **kwargs):
  1007|         0|            0|            0|  0.00%|        raise TypeError(
  1008|         0|            0|            0|  0.00%|            f"{self.__class__.__name__} does not have a public "
  1009|         0|            0|            0|  0.00%|            f"constructor. Instances are returned by "
  1010|         0|            0|            0|  0.00%|            f"SSLContext.wrap_socket()."
  1011|         0|            0|            0|  0.00%|        )
  1012|         0|            0|            0|  0.00%|
  1013|         1|  8.82149e-06|  8.82149e-06|  0.00%|    @classmethod
  1014|         2|  1.74046e-05|  8.70228e-06|  0.01%|    def _create(cls, sock, server_side=False, do_handshake_on_connect=True,
  1015|         1|  9.05991e-06|  9.05991e-06|  0.00%|                suppress_ragged_eofs=True, server_hostname=None,
  1016|         1|  8.34465e-06|  8.34465e-06|  0.00%|                context=None, session=None):
  1017|         0|            0|            0|  0.00%|        if sock.getsockopt(SOL_SOCKET, SO_TYPE) != SOCK_STREAM:
  1018|         0|            0|            0|  0.00%|            raise NotImplementedError("only stream sockets are supported")
  1019|         0|            0|            0|  0.00%|        if server_side:
  1020|         0|            0|            0|  0.00%|            if server_hostname:
  1021|         0|            0|            0|  0.00%|                raise ValueError("server_hostname can only be specified "
  1022|         0|            0|            0|  0.00%|                                 "in client mode")
  1023|         0|            0|            0|  0.00%|            if session is not None:
  1024|         0|            0|            0|  0.00%|                raise ValueError("session can only be specified in "
  1025|         0|            0|            0|  0.00%|                                 "client mode")
  1026|         0|            0|            0|  0.00%|        if context.check_hostname and not server_hostname:
  1027|         0|            0|            0|  0.00%|            raise ValueError("check_hostname requires server_hostname")
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|        kwargs = dict(
  1030|         0|            0|            0|  0.00%|            family=sock.family, type=sock.type, proto=sock.proto,
  1031|         0|            0|            0|  0.00%|            fileno=sock.fileno()
  1032|         0|            0|            0|  0.00%|        )
  1033|         0|            0|            0|  0.00%|        self = cls.__new__(cls, **kwargs)
  1034|         0|            0|            0|  0.00%|        super(SSLSocket, self).__init__(**kwargs)
  1035|         0|            0|            0|  0.00%|        self.settimeout(sock.gettimeout())
  1036|         0|            0|            0|  0.00%|        sock.detach()
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|        self._context = context
  1039|         0|            0|            0|  0.00%|        self._session = session
  1040|         0|            0|            0|  0.00%|        self._closed = False
  1041|         0|            0|            0|  0.00%|        self._sslobj = None
  1042|         0|            0|            0|  0.00%|        self.server_side = server_side
  1043|         0|            0|            0|  0.00%|        self.server_hostname = context._encode_hostname(server_hostname)
  1044|         0|            0|            0|  0.00%|        self.do_handshake_on_connect = do_handshake_on_connect
  1045|         0|            0|            0|  0.00%|        self.suppress_ragged_eofs = suppress_ragged_eofs
  1046|         0|            0|            0|  0.00%|
  1047|         0|            0|            0|  0.00%|        # See if we are connected
  1048|         0|            0|            0|  0.00%|        try:
  1049|         0|            0|            0|  0.00%|            self.getpeername()
  1050|         0|            0|            0|  0.00%|        except OSError as e:
  1051|         0|            0|            0|  0.00%|            if e.errno != errno.ENOTCONN:
  1052|         0|            0|            0|  0.00%|                raise
  1053|         0|            0|            0|  0.00%|            connected = False
  1054|         0|            0|            0|  0.00%|        else:
  1055|         0|            0|            0|  0.00%|            connected = True
  1056|         0|            0|            0|  0.00%|
  1057|         0|            0|            0|  0.00%|        self._connected = connected
  1058|         0|            0|            0|  0.00%|        if connected:
  1059|         0|            0|            0|  0.00%|            # create the SSL object
  1060|         0|            0|            0|  0.00%|            try:
  1061|         0|            0|            0|  0.00%|                self._sslobj = self._context._wrap_socket(
  1062|         0|            0|            0|  0.00%|                    self, server_side, self.server_hostname,
  1063|         0|            0|            0|  0.00%|                    owner=self, session=self._session,
  1064|         0|            0|            0|  0.00%|                )
  1065|         0|            0|            0|  0.00%|                if do_handshake_on_connect:
  1066|         0|            0|            0|  0.00%|                    timeout = self.gettimeout()
  1067|         0|            0|            0|  0.00%|                    if timeout == 0.0:
  1068|         0|            0|            0|  0.00%|                        # non-blocking
  1069|         0|            0|            0|  0.00%|                        raise ValueError("do_handshake_on_connect should not be specified for non-blocking sockets")
  1070|         0|            0|            0|  0.00%|                    self.do_handshake()
  1071|         0|            0|            0|  0.00%|            except (OSError, ValueError):
  1072|         0|            0|            0|  0.00%|                self.close()
  1073|         0|            0|            0|  0.00%|                raise
  1074|         0|            0|            0|  0.00%|        return self
  1075|         0|            0|            0|  0.00%|
  1076|         1|  5.72205e-06|  5.72205e-06|  0.00%|    @property
  1077|         1|  8.58307e-06|  8.58307e-06|  0.00%|    @_sslcopydoc
  1078|         1|  2.24113e-05|  2.24113e-05|  0.01%|    def context(self):
(call)|         1|  1.66893e-05|  1.66893e-05|  0.01%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1079|         0|            0|            0|  0.00%|        return self._context
  1080|         0|            0|            0|  0.00%|
  1081|         1|  9.05991e-06|  9.05991e-06|  0.00%|    @context.setter
  1082|         1|  8.58307e-06|  8.58307e-06|  0.00%|    def context(self, ctx):
  1083|         0|            0|            0|  0.00%|        self._context = ctx
  1084|         0|            0|            0|  0.00%|        self._sslobj.context = ctx
  1085|         0|            0|            0|  0.00%|
  1086|         1|  8.58307e-06|  8.58307e-06|  0.00%|    @property
  1087|         1|  8.58307e-06|  8.58307e-06|  0.00%|    @_sslcopydoc
  1088|         1|  2.26498e-05|  2.26498e-05|  0.01%|    def session(self):
(call)|         1|  1.16825e-05|  1.16825e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1089|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1090|         0|            0|            0|  0.00%|            return self._sslobj.session
  1091|         0|            0|            0|  0.00%|
  1092|         1|  8.82149e-06|  8.82149e-06|  0.00%|    @session.setter
  1093|         1|  8.82149e-06|  8.82149e-06|  0.00%|    def session(self, session):
  1094|         0|            0|            0|  0.00%|        self._session = session
  1095|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1096|         0|            0|            0|  0.00%|            self._sslobj.session = session
  1097|         0|            0|            0|  0.00%|
  1098|         1|  7.86781e-06|  7.86781e-06|  0.00%|    @property
  1099|         1|  8.82149e-06|  8.82149e-06|  0.00%|    @_sslcopydoc
  1100|         1|  2.07424e-05|  2.07424e-05|  0.01%|    def session_reused(self):
(call)|         1|  1.21593e-05|  1.21593e-05|  0.01%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1101|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1102|         0|            0|            0|  0.00%|            return self._sslobj.session_reused
  1103|         0|            0|            0|  0.00%|
  1104|         1|  8.82149e-06|  8.82149e-06|  0.00%|    def dup(self):
  1105|         0|            0|            0|  0.00%|        raise NotImplementedError("Can't dup() %s instances" %
  1106|         0|            0|            0|  0.00%|                                  self.__class__.__name__)
  1107|         0|            0|            0|  0.00%|
  1108|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def _checkClosed(self, msg=None):
  1109|         0|            0|            0|  0.00%|        # raise an exception here if you wish to check for spurious closes
  1110|         0|            0|            0|  0.00%|        pass
  1111|         0|            0|            0|  0.00%|
  1112|         1|  9.05991e-06|  9.05991e-06|  0.00%|    def _check_connected(self):
  1113|         0|            0|            0|  0.00%|        if not self._connected:
  1114|         0|            0|            0|  0.00%|            # getpeername() will raise ENOTCONN if the socket is really
  1115|         0|            0|            0|  0.00%|            # not connected; note that we can be connected even without
  1116|         0|            0|            0|  0.00%|            # _connected being set, e.g. if connect() first returned
  1117|         0|            0|            0|  0.00%|            # EAGAIN.
  1118|         0|            0|            0|  0.00%|            self.getpeername()
  1119|         0|            0|            0|  0.00%|
  1120|         1|   1.3113e-05|   1.3113e-05|  0.01%|    def read(self, len=1024, buffer=None):
  1121|         0|            0|            0|  0.00%|        """Read up to LEN bytes and return them.
  1122|         0|            0|            0|  0.00%|        Return zero-length string on EOF."""
  1123|         0|            0|            0|  0.00%|
  1124|         0|            0|            0|  0.00%|        self._checkClosed()
  1125|         0|            0|            0|  0.00%|        if self._sslobj is None:
  1126|         0|            0|            0|  0.00%|            raise ValueError("Read on closed or unwrapped SSL socket.")
  1127|         0|            0|            0|  0.00%|        try:
  1128|         0|            0|            0|  0.00%|            if buffer is not None:
  1129|         0|            0|            0|  0.00%|                return self._sslobj.read(len, buffer)
  1130|         0|            0|            0|  0.00%|            else:
  1131|         0|            0|            0|  0.00%|                return self._sslobj.read(len)
  1132|         0|            0|            0|  0.00%|        except SSLError as x:
  1133|         0|            0|            0|  0.00%|            if x.args[0] == SSL_ERROR_EOF and self.suppress_ragged_eofs:
  1134|         0|            0|            0|  0.00%|                if buffer is not None:
  1135|         0|            0|            0|  0.00%|                    return 0
  1136|         0|            0|            0|  0.00%|                else:
  1137|         0|            0|            0|  0.00%|                    return b''
  1138|         0|            0|            0|  0.00%|            else:
  1139|         0|            0|            0|  0.00%|                raise
  1140|         0|            0|            0|  0.00%|
  1141|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def write(self, data):
  1142|         0|            0|            0|  0.00%|        """Write DATA to the underlying SSL channel.  Returns
  1143|         0|            0|            0|  0.00%|        number of bytes of DATA actually transmitted."""
  1144|         0|            0|            0|  0.00%|
  1145|         0|            0|            0|  0.00%|        self._checkClosed()
  1146|         0|            0|            0|  0.00%|        if self._sslobj is None:
  1147|         0|            0|            0|  0.00%|            raise ValueError("Write on closed or unwrapped SSL socket.")
  1148|         0|            0|            0|  0.00%|        return self._sslobj.write(data)
  1149|         0|            0|            0|  0.00%|
  1150|         1|  8.58307e-06|  8.58307e-06|  0.00%|    @_sslcopydoc
  1151|         1|  2.09808e-05|  2.09808e-05|  0.01%|    def getpeercert(self, binary_form=False):
(call)|         1|  1.28746e-05|  1.28746e-05|  0.01%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1152|         0|            0|            0|  0.00%|        self._checkClosed()
  1153|         0|            0|            0|  0.00%|        self._check_connected()
  1154|         0|            0|            0|  0.00%|        return self._sslobj.getpeercert(binary_form)
  1155|         0|            0|            0|  0.00%|
  1156|         1|  8.82149e-06|  8.82149e-06|  0.00%|    @_sslcopydoc
  1157|         1|   2.0504e-05|   2.0504e-05|  0.01%|    def selected_npn_protocol(self):
(call)|         1|  1.19209e-05|  1.19209e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1158|         0|            0|            0|  0.00%|        self._checkClosed()
  1159|         0|            0|            0|  0.00%|        warnings.warn(
  1160|         0|            0|            0|  0.00%|            "ssl NPN is deprecated, use ALPN instead",
  1161|         0|            0|            0|  0.00%|            DeprecationWarning,
  1162|         0|            0|            0|  0.00%|            stacklevel=2
  1163|         0|            0|            0|  0.00%|        )
  1164|         0|            0|            0|  0.00%|        return None
  1165|         0|            0|            0|  0.00%|
  1166|         1|  9.29832e-06|  9.29832e-06|  0.00%|    @_sslcopydoc
  1167|         1|   2.0504e-05|   2.0504e-05|  0.01%|    def selected_alpn_protocol(self):
(call)|         1|  1.16825e-05|  1.16825e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1168|         0|            0|            0|  0.00%|        self._checkClosed()
  1169|         0|            0|            0|  0.00%|        if self._sslobj is None or not _ssl.HAS_ALPN:
  1170|         0|            0|            0|  0.00%|            return None
  1171|         0|            0|            0|  0.00%|        else:
  1172|         0|            0|            0|  0.00%|            return self._sslobj.selected_alpn_protocol()
  1173|         0|            0|            0|  0.00%|
  1174|         1|  8.82149e-06|  8.82149e-06|  0.00%|    @_sslcopydoc
  1175|         1|   2.0504e-05|   2.0504e-05|  0.01%|    def cipher(self):
(call)|         1|  1.14441e-05|  1.14441e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1176|         0|            0|            0|  0.00%|        self._checkClosed()
  1177|         0|            0|            0|  0.00%|        if self._sslobj is None:
  1178|         0|            0|            0|  0.00%|            return None
  1179|         0|            0|            0|  0.00%|        else:
  1180|         0|            0|            0|  0.00%|            return self._sslobj.cipher()
  1181|         0|            0|            0|  0.00%|
  1182|         1|  8.34465e-06|  8.34465e-06|  0.00%|    @_sslcopydoc
  1183|         1|  2.07424e-05|  2.07424e-05|  0.01%|    def shared_ciphers(self):
(call)|         1|  1.14441e-05|  1.14441e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1184|         0|            0|            0|  0.00%|        self._checkClosed()
  1185|         0|            0|            0|  0.00%|        if self._sslobj is None:
  1186|         0|            0|            0|  0.00%|            return None
  1187|         0|            0|            0|  0.00%|        else:
  1188|         0|            0|            0|  0.00%|            return self._sslobj.shared_ciphers()
  1189|         0|            0|            0|  0.00%|
  1190|         1|  8.58307e-06|  8.58307e-06|  0.00%|    @_sslcopydoc
  1191|         1|   2.0504e-05|   2.0504e-05|  0.01%|    def compression(self):
(call)|         1|  1.14441e-05|  1.14441e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1192|         0|            0|            0|  0.00%|        self._checkClosed()
  1193|         0|            0|            0|  0.00%|        if self._sslobj is None:
  1194|         0|            0|            0|  0.00%|            return None
  1195|         0|            0|            0|  0.00%|        else:
  1196|         0|            0|            0|  0.00%|            return self._sslobj.compression()
  1197|         0|            0|            0|  0.00%|
  1198|         1|  8.58307e-06|  8.58307e-06|  0.00%|    def send(self, data, flags=0):
  1199|         0|            0|            0|  0.00%|        self._checkClosed()
  1200|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1201|         0|            0|            0|  0.00%|            if flags != 0:
  1202|         0|            0|            0|  0.00%|                raise ValueError(
  1203|         0|            0|            0|  0.00%|                    "non-zero flags not allowed in calls to send() on %s" %
  1204|         0|            0|            0|  0.00%|                    self.__class__)
  1205|         0|            0|            0|  0.00%|            return self._sslobj.write(data)
  1206|         0|            0|            0|  0.00%|        else:
  1207|         0|            0|            0|  0.00%|            return super().send(data, flags)
  1208|         0|            0|            0|  0.00%|
  1209|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def sendto(self, data, flags_or_addr, addr=None):
  1210|         0|            0|            0|  0.00%|        self._checkClosed()
  1211|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1212|         0|            0|            0|  0.00%|            raise ValueError("sendto not allowed on instances of %s" %
  1213|         0|            0|            0|  0.00%|                             self.__class__)
  1214|         0|            0|            0|  0.00%|        elif addr is None:
  1215|         0|            0|            0|  0.00%|            return super().sendto(data, flags_or_addr)
  1216|         0|            0|            0|  0.00%|        else:
  1217|         0|            0|            0|  0.00%|            return super().sendto(data, flags_or_addr, addr)
  1218|         0|            0|            0|  0.00%|
  1219|         1|  9.29832e-06|  9.29832e-06|  0.00%|    def sendmsg(self, *args, **kwargs):
  1220|         0|            0|            0|  0.00%|        # Ensure programs don't send data unencrypted if they try to
  1221|         0|            0|            0|  0.00%|        # use this method.
  1222|         0|            0|            0|  0.00%|        raise NotImplementedError("sendmsg not allowed on instances of %s" %
  1223|         0|            0|            0|  0.00%|                                  self.__class__)
  1224|         0|            0|            0|  0.00%|
  1225|         1|  1.09673e-05|  1.09673e-05|  0.00%|    def sendall(self, data, flags=0):
  1226|         0|            0|            0|  0.00%|        self._checkClosed()
  1227|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1228|         0|            0|            0|  0.00%|            if flags != 0:
  1229|         0|            0|            0|  0.00%|                raise ValueError(
  1230|         0|            0|            0|  0.00%|                    "non-zero flags not allowed in calls to sendall() on %s" %
  1231|         0|            0|            0|  0.00%|                    self.__class__)
  1232|         0|            0|            0|  0.00%|            count = 0
  1233|         0|            0|            0|  0.00%|            with memoryview(data) as view, view.cast("B") as byte_view:
  1234|         0|            0|            0|  0.00%|                amount = len(byte_view)
  1235|         0|            0|            0|  0.00%|                while count < amount:
  1236|         0|            0|            0|  0.00%|                    v = self.send(byte_view[count:])
  1237|         0|            0|            0|  0.00%|                    count += v
  1238|         0|            0|            0|  0.00%|        else:
  1239|         0|            0|            0|  0.00%|            return super().sendall(data, flags)
  1240|         0|            0|            0|  0.00%|
  1241|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def sendfile(self, file, offset=0, count=None):
  1242|         0|            0|            0|  0.00%|        """Send a file, possibly by using os.sendfile() if this is a
  1243|         0|            0|            0|  0.00%|        clear-text socket.  Return the total number of bytes sent.
  1244|         0|            0|            0|  0.00%|        """
  1245|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1246|         0|            0|            0|  0.00%|            return self._sendfile_use_send(file, offset, count)
  1247|         0|            0|            0|  0.00%|        else:
  1248|         0|            0|            0|  0.00%|            # os.sendfile() works with plain sockets only
  1249|         0|            0|            0|  0.00%|            return super().sendfile(file, offset, count)
  1250|         0|            0|            0|  0.00%|
  1251|         1|  3.76701e-05|  3.76701e-05|  0.02%|    def recv(self, buflen=1024, flags=0):
  1252|         0|            0|            0|  0.00%|        self._checkClosed()
  1253|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1254|         0|            0|            0|  0.00%|            if flags != 0:
  1255|         0|            0|            0|  0.00%|                raise ValueError(
  1256|         0|            0|            0|  0.00%|                    "non-zero flags not allowed in calls to recv() on %s" %
  1257|         0|            0|            0|  0.00%|                    self.__class__)
  1258|         0|            0|            0|  0.00%|            return self.read(buflen)
  1259|         0|            0|            0|  0.00%|        else:
  1260|         0|            0|            0|  0.00%|            return super().recv(buflen, flags)
  1261|         0|            0|            0|  0.00%|
  1262|         1|  9.53674e-06|  9.53674e-06|  0.00%|    def recv_into(self, buffer, nbytes=None, flags=0):
  1263|         0|            0|            0|  0.00%|        self._checkClosed()
  1264|         0|            0|            0|  0.00%|        if buffer and (nbytes is None):
  1265|         0|            0|            0|  0.00%|            nbytes = len(buffer)
  1266|         0|            0|            0|  0.00%|        elif nbytes is None:
  1267|         0|            0|            0|  0.00%|            nbytes = 1024
  1268|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1269|         0|            0|            0|  0.00%|            if flags != 0:
  1270|         0|            0|            0|  0.00%|                raise ValueError(
  1271|         0|            0|            0|  0.00%|                  "non-zero flags not allowed in calls to recv_into() on %s" %
  1272|         0|            0|            0|  0.00%|                  self.__class__)
  1273|         0|            0|            0|  0.00%|            return self.read(nbytes, buffer)
  1274|         0|            0|            0|  0.00%|        else:
  1275|         0|            0|            0|  0.00%|            return super().recv_into(buffer, nbytes, flags)
  1276|         0|            0|            0|  0.00%|
  1277|         1|  9.05991e-06|  9.05991e-06|  0.00%|    def recvfrom(self, buflen=1024, flags=0):
  1278|         0|            0|            0|  0.00%|        self._checkClosed()
  1279|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1280|         0|            0|            0|  0.00%|            raise ValueError("recvfrom not allowed on instances of %s" %
  1281|         0|            0|            0|  0.00%|                             self.__class__)
  1282|         0|            0|            0|  0.00%|        else:
  1283|         0|            0|            0|  0.00%|            return super().recvfrom(buflen, flags)
  1284|         0|            0|            0|  0.00%|
  1285|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def recvfrom_into(self, buffer, nbytes=None, flags=0):
  1286|         0|            0|            0|  0.00%|        self._checkClosed()
  1287|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1288|         0|            0|            0|  0.00%|            raise ValueError("recvfrom_into not allowed on instances of %s" %
  1289|         0|            0|            0|  0.00%|                             self.__class__)
  1290|         0|            0|            0|  0.00%|        else:
  1291|         0|            0|            0|  0.00%|            return super().recvfrom_into(buffer, nbytes, flags)
  1292|         0|            0|            0|  0.00%|
  1293|         1|  1.28746e-05|  1.28746e-05|  0.01%|    def recvmsg(self, *args, **kwargs):
  1294|         0|            0|            0|  0.00%|        raise NotImplementedError("recvmsg not allowed on instances of %s" %
  1295|         0|            0|            0|  0.00%|                                  self.__class__)
  1296|         0|            0|            0|  0.00%|
  1297|         1|  8.58307e-06|  8.58307e-06|  0.00%|    def recvmsg_into(self, *args, **kwargs):
  1298|         0|            0|            0|  0.00%|        raise NotImplementedError("recvmsg_into not allowed on instances of "
  1299|         0|            0|            0|  0.00%|                                  "%s" % self.__class__)
  1300|         0|            0|            0|  0.00%|
  1301|         1|  8.82149e-06|  8.82149e-06|  0.00%|    @_sslcopydoc
  1302|         1|  2.09808e-05|  2.09808e-05|  0.01%|    def pending(self):
(call)|         1|  1.21593e-05|  1.21593e-05|  0.01%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1303|         0|            0|            0|  0.00%|        self._checkClosed()
  1304|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1305|         0|            0|            0|  0.00%|            return self._sslobj.pending()
  1306|         0|            0|            0|  0.00%|        else:
  1307|         0|            0|            0|  0.00%|            return 0
  1308|         0|            0|            0|  0.00%|
  1309|         1|  9.05991e-06|  9.05991e-06|  0.00%|    def shutdown(self, how):
  1310|         0|            0|            0|  0.00%|        self._checkClosed()
  1311|         0|            0|            0|  0.00%|        self._sslobj = None
  1312|         0|            0|            0|  0.00%|        super().shutdown(how)
  1313|         0|            0|            0|  0.00%|
  1314|         1|  8.10623e-06|  8.10623e-06|  0.00%|    @_sslcopydoc
  1315|         1|  2.14577e-05|  2.14577e-05|  0.01%|    def unwrap(self):
(call)|         1|  1.16825e-05|  1.16825e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1316|         0|            0|            0|  0.00%|        if self._sslobj:
  1317|         0|            0|            0|  0.00%|            s = self._sslobj.shutdown()
  1318|         0|            0|            0|  0.00%|            self._sslobj = None
  1319|         0|            0|            0|  0.00%|            return s
  1320|         0|            0|            0|  0.00%|        else:
  1321|         0|            0|            0|  0.00%|            raise ValueError("No SSL wrapper around " + str(self))
  1322|         0|            0|            0|  0.00%|
  1323|         1|  8.82149e-06|  8.82149e-06|  0.00%|    @_sslcopydoc
  1324|         1|  2.09808e-05|  2.09808e-05|  0.01%|    def verify_client_post_handshake(self):
(call)|         1|  1.14441e-05|  1.14441e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1325|         0|            0|            0|  0.00%|        if self._sslobj:
  1326|         0|            0|            0|  0.00%|            return self._sslobj.verify_client_post_handshake()
  1327|         0|            0|            0|  0.00%|        else:
  1328|         0|            0|            0|  0.00%|            raise ValueError("No SSL wrapper around " + str(self))
  1329|         0|            0|            0|  0.00%|
  1330|         1|  9.53674e-06|  9.53674e-06|  0.00%|    def _real_close(self):
  1331|         0|            0|            0|  0.00%|        self._sslobj = None
  1332|         0|            0|            0|  0.00%|        super()._real_close()
  1333|         0|            0|            0|  0.00%|
  1334|         1|  8.82149e-06|  8.82149e-06|  0.00%|    @_sslcopydoc
  1335|         1|  2.21729e-05|  2.21729e-05|  0.01%|    def do_handshake(self, block=False):
(call)|         1|  1.16825e-05|  1.16825e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1336|         0|            0|            0|  0.00%|        self._check_connected()
  1337|         0|            0|            0|  0.00%|        timeout = self.gettimeout()
  1338|         0|            0|            0|  0.00%|        try:
  1339|         0|            0|            0|  0.00%|            if timeout == 0.0 and block:
  1340|         0|            0|            0|  0.00%|                self.settimeout(None)
  1341|         0|            0|            0|  0.00%|            self._sslobj.do_handshake()
  1342|         0|            0|            0|  0.00%|        finally:
  1343|         0|            0|            0|  0.00%|            self.settimeout(timeout)
  1344|         0|            0|            0|  0.00%|
  1345|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def _real_connect(self, addr, connect_ex):
  1346|         0|            0|            0|  0.00%|        if self.server_side:
  1347|         0|            0|            0|  0.00%|            raise ValueError("can't connect in server-side mode")
  1348|         0|            0|            0|  0.00%|        # Here we assume that the socket is client-side, and not
  1349|         0|            0|            0|  0.00%|        # connected at the time of the call.  We connect it, then wrap it.
  1350|         0|            0|            0|  0.00%|        if self._connected or self._sslobj is not None:
  1351|         0|            0|            0|  0.00%|            raise ValueError("attempt to connect already-connected SSLSocket!")
  1352|         0|            0|            0|  0.00%|        self._sslobj = self.context._wrap_socket(
  1353|         0|            0|            0|  0.00%|            self, False, self.server_hostname,
  1354|         0|            0|            0|  0.00%|            owner=self, session=self._session
  1355|         0|            0|            0|  0.00%|        )
  1356|         0|            0|            0|  0.00%|        try:
  1357|         0|            0|            0|  0.00%|            if connect_ex:
  1358|         0|            0|            0|  0.00%|                rc = super().connect_ex(addr)
  1359|         0|            0|            0|  0.00%|            else:
  1360|         0|            0|            0|  0.00%|                rc = None
  1361|         0|            0|            0|  0.00%|                super().connect(addr)
  1362|         0|            0|            0|  0.00%|            if not rc:
  1363|         0|            0|            0|  0.00%|                self._connected = True
  1364|         0|            0|            0|  0.00%|                if self.do_handshake_on_connect:
  1365|         0|            0|            0|  0.00%|                    self.do_handshake()
  1366|         0|            0|            0|  0.00%|            return rc
  1367|         0|            0|            0|  0.00%|        except (OSError, ValueError):
  1368|         0|            0|            0|  0.00%|            self._sslobj = None
  1369|         0|            0|            0|  0.00%|            raise
  1370|         0|            0|            0|  0.00%|
  1371|         1|  1.00136e-05|  1.00136e-05|  0.00%|    def connect(self, addr):
  1372|         0|            0|            0|  0.00%|        """Connects to remote ADDR, and then wraps the connection in
  1373|         0|            0|            0|  0.00%|        an SSL channel."""
  1374|         0|            0|            0|  0.00%|        self._real_connect(addr, False)
  1375|         0|            0|            0|  0.00%|
  1376|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def connect_ex(self, addr):
  1377|         0|            0|            0|  0.00%|        """Connects to remote ADDR, and then wraps the connection in
  1378|         0|            0|            0|  0.00%|        an SSL channel."""
  1379|         0|            0|            0|  0.00%|        return self._real_connect(addr, True)
  1380|         0|            0|            0|  0.00%|
  1381|         1|  8.82149e-06|  8.82149e-06|  0.00%|    def accept(self):
  1382|         0|            0|            0|  0.00%|        """Accepts a new connection from a remote client, and returns
  1383|         0|            0|            0|  0.00%|        a tuple containing that new connection wrapped with a server-side
  1384|         0|            0|            0|  0.00%|        SSL channel, and the address of the remote client."""
  1385|         0|            0|            0|  0.00%|
  1386|         0|            0|            0|  0.00%|        newsock, addr = super().accept()
  1387|         0|            0|            0|  0.00%|        newsock = self.context.wrap_socket(newsock,
  1388|         0|            0|            0|  0.00%|                    do_handshake_on_connect=self.do_handshake_on_connect,
  1389|         0|            0|            0|  0.00%|                    suppress_ragged_eofs=self.suppress_ragged_eofs,
  1390|         0|            0|            0|  0.00%|                    server_side=True)
  1391|         0|            0|            0|  0.00%|        return newsock, addr
  1392|         0|            0|            0|  0.00%|
  1393|         1|  8.34465e-06|  8.34465e-06|  0.00%|    @_sslcopydoc
  1394|         1|  2.09808e-05|  2.09808e-05|  0.01%|    def get_channel_binding(self, cb_type="tls-unique"):
(call)|         1|  1.19209e-05|  1.19209e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1395|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1396|         0|            0|            0|  0.00%|            return self._sslobj.get_channel_binding(cb_type)
  1397|         0|            0|            0|  0.00%|        else:
  1398|         0|            0|            0|  0.00%|            if cb_type not in CHANNEL_BINDING_TYPES:
  1399|         0|            0|            0|  0.00%|                raise ValueError(
  1400|         0|            0|            0|  0.00%|                    "{0} channel binding type not implemented".format(cb_type)
  1401|         0|            0|            0|  0.00%|                )
  1402|         0|            0|            0|  0.00%|            return None
  1403|         0|            0|            0|  0.00%|
  1404|         1|  8.34465e-06|  8.34465e-06|  0.00%|    @_sslcopydoc
  1405|         1|   2.3365e-05|   2.3365e-05|  0.01%|    def version(self):
(call)|         1|  1.14441e-05|  1.14441e-05|  0.00%|# /usr/lib/python3.10/ssl.py:995 _sslcopydoc
  1406|         0|            0|            0|  0.00%|        if self._sslobj is not None:
  1407|         0|            0|            0|  0.00%|            return self._sslobj.version()
  1408|         0|            0|            0|  0.00%|        else:
  1409|         0|            0|            0|  0.00%|            return None
  1410|         0|            0|            0|  0.00%|
  1411|         0|            0|            0|  0.00%|
  1412|         0|            0|            0|  0.00%|# Python does not support forward declaration of types.
  1413|         1|  2.21729e-05|  2.21729e-05|  0.01%|SSLContext.sslsocket_class = SSLSocket
  1414|         1|  2.36034e-05|  2.36034e-05|  0.01%|SSLContext.sslobject_class = SSLObject
  1415|         0|            0|            0|  0.00%|
  1416|         0|            0|            0|  0.00%|
  1417|         2|  4.33922e-05|  2.16961e-05|  0.02%|def wrap_socket(sock, keyfile=None, certfile=None,
  1418|         1|  2.21729e-05|  2.21729e-05|  0.01%|                server_side=False, cert_reqs=CERT_NONE,
  1419|         1|  2.12193e-05|  2.12193e-05|  0.01%|                ssl_version=PROTOCOL_TLS, ca_certs=None,
  1420|         1|  2.16961e-05|  2.16961e-05|  0.01%|                do_handshake_on_connect=True,
  1421|         1|  2.26498e-05|  2.26498e-05|  0.01%|                suppress_ragged_eofs=True,
  1422|         1|  2.24113e-05|  2.24113e-05|  0.01%|                ciphers=None):
  1423|         0|            0|            0|  0.00%|    warnings.warn(
  1424|         0|            0|            0|  0.00%|        "ssl.wrap_socket() is deprecated, use SSLContext.wrap_socket()",
  1425|         0|            0|            0|  0.00%|        category=DeprecationWarning,
  1426|         0|            0|            0|  0.00%|        stacklevel=2
  1427|         0|            0|            0|  0.00%|    )
  1428|         0|            0|            0|  0.00%|    if server_side and not certfile:
  1429|         0|            0|            0|  0.00%|        raise ValueError("certfile must be specified for server-side "
  1430|         0|            0|            0|  0.00%|                         "operations")
  1431|         0|            0|            0|  0.00%|    if keyfile and not certfile:
  1432|         0|            0|            0|  0.00%|        raise ValueError("certfile must be specified")
  1433|         0|            0|            0|  0.00%|    context = SSLContext(ssl_version)
  1434|         0|            0|            0|  0.00%|    context.verify_mode = cert_reqs
  1435|         0|            0|            0|  0.00%|    if ca_certs:
  1436|         0|            0|            0|  0.00%|        context.load_verify_locations(ca_certs)
  1437|         0|            0|            0|  0.00%|    if certfile:
  1438|         0|            0|            0|  0.00%|        context.load_cert_chain(certfile, keyfile)
  1439|         0|            0|            0|  0.00%|    if ciphers:
  1440|         0|            0|            0|  0.00%|        context.set_ciphers(ciphers)
  1441|         0|            0|            0|  0.00%|    return context.wrap_socket(
  1442|         0|            0|            0|  0.00%|        sock=sock, server_side=server_side,
  1443|         0|            0|            0|  0.00%|        do_handshake_on_connect=do_handshake_on_connect,
  1444|         0|            0|            0|  0.00%|        suppress_ragged_eofs=suppress_ragged_eofs
  1445|         0|            0|            0|  0.00%|    )
  1446|         0|            0|            0|  0.00%|
  1447|         0|            0|            0|  0.00%|# some utility functions
  1448|         0|            0|            0|  0.00%|
  1449|         1|  1.26362e-05|  1.26362e-05|  0.01%|def cert_time_to_seconds(cert_time):
  1450|         0|            0|            0|  0.00%|    """Return the time in seconds since the Epoch, given the timestring
  1451|         0|            0|            0|  0.00%|    representing the "notBefore" or "notAfter" date from a certificate
  1452|         0|            0|            0|  0.00%|    in ``"%b %d %H:%M:%S %Y %Z"`` strptime format (C locale).
  1453|         0|            0|            0|  0.00%|
  1454|         0|            0|            0|  0.00%|    "notBefore" or "notAfter" dates must use UTC (RFC 5280).
  1455|         0|            0|            0|  0.00%|
  1456|         0|            0|            0|  0.00%|    Month is one of: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  1457|         0|            0|            0|  0.00%|    UTC should be specified as GMT (see ASN1_TIME_print())
  1458|         0|            0|            0|  0.00%|    """
  1459|         0|            0|            0|  0.00%|    from time import strptime
  1460|         0|            0|            0|  0.00%|    from calendar import timegm
  1461|         0|            0|            0|  0.00%|
  1462|         0|            0|            0|  0.00%|    months = (
  1463|         0|            0|            0|  0.00%|        "Jan","Feb","Mar","Apr","May","Jun",
  1464|         0|            0|            0|  0.00%|        "Jul","Aug","Sep","Oct","Nov","Dec"
  1465|         0|            0|            0|  0.00%|    )
  1466|         0|            0|            0|  0.00%|    time_format = ' %d %H:%M:%S %Y GMT' # NOTE: no month, fixed GMT
  1467|         0|            0|            0|  0.00%|    try:
  1468|         0|            0|            0|  0.00%|        month_number = months.index(cert_time[:3].title()) + 1
  1469|         0|            0|            0|  0.00%|    except ValueError:
  1470|         0|            0|            0|  0.00%|        raise ValueError('time data %r does not match '
  1471|         0|            0|            0|  0.00%|                         'format "%%b%s"' % (cert_time, time_format))
  1472|         0|            0|            0|  0.00%|    else:
  1473|         0|            0|            0|  0.00%|        # found valid month
  1474|         0|            0|            0|  0.00%|        tt = strptime(cert_time[3:], time_format)
  1475|         0|            0|            0|  0.00%|        # return an integer, the previous mktime()-based implementation
  1476|         0|            0|            0|  0.00%|        # returned a float (fractional seconds are always zero here).
  1477|         0|            0|            0|  0.00%|        return timegm((tt[0], month_number) + tt[2:6])
  1478|         0|            0|            0|  0.00%|
  1479|         1|  2.26498e-05|  2.26498e-05|  0.01%|PEM_HEADER = "-----BEGIN CERTIFICATE-----"
  1480|         1|  2.19345e-05|  2.19345e-05|  0.01%|PEM_FOOTER = "-----END CERTIFICATE-----"
  1481|         0|            0|            0|  0.00%|
  1482|         1|  2.14577e-05|  2.14577e-05|  0.01%|def DER_cert_to_PEM_cert(der_cert_bytes):
  1483|         0|            0|            0|  0.00%|    """Takes a certificate in binary DER format and returns the
  1484|         0|            0|            0|  0.00%|    PEM version of it as a string."""
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    f = str(base64.standard_b64encode(der_cert_bytes), 'ASCII', 'strict')
  1487|         0|            0|            0|  0.00%|    ss = [PEM_HEADER]
  1488|         0|            0|            0|  0.00%|    ss += [f[i:i+64] for i in range(0, len(f), 64)]
  1489|         0|            0|            0|  0.00%|    ss.append(PEM_FOOTER + '\n')
  1490|         0|            0|            0|  0.00%|    return '\n'.join(ss)
  1491|         0|            0|            0|  0.00%|
  1492|         1|   3.0756e-05|   3.0756e-05|  0.01%|def PEM_cert_to_DER_cert(pem_cert_string):
  1493|         0|            0|            0|  0.00%|    """Takes a certificate in ASCII PEM format and returns the
  1494|         0|            0|            0|  0.00%|    DER-encoded version of it as a byte sequence"""
  1495|         0|            0|            0|  0.00%|
  1496|         0|            0|            0|  0.00%|    if not pem_cert_string.startswith(PEM_HEADER):
  1497|         0|            0|            0|  0.00%|        raise ValueError("Invalid PEM encoding; must start with %s"
  1498|         0|            0|            0|  0.00%|                         % PEM_HEADER)
  1499|         0|            0|            0|  0.00%|    if not pem_cert_string.strip().endswith(PEM_FOOTER):
  1500|         0|            0|            0|  0.00%|        raise ValueError("Invalid PEM encoding; must end with %s"
  1501|         0|            0|            0|  0.00%|                         % PEM_FOOTER)
  1502|         0|            0|            0|  0.00%|    d = pem_cert_string.strip()[len(PEM_HEADER):-len(PEM_FOOTER)]
  1503|         0|            0|            0|  0.00%|    return base64.decodebytes(d.encode('ASCII', 'strict'))
  1504|         0|            0|            0|  0.00%|
  1505|         2|  4.29153e-05|  2.14577e-05|  0.02%|def get_server_certificate(addr, ssl_version=PROTOCOL_TLS_CLIENT,
  1506|         1|  2.12193e-05|  2.12193e-05|  0.01%|                           ca_certs=None, timeout=_GLOBAL_DEFAULT_TIMEOUT):
  1507|         0|            0|            0|  0.00%|    """Retrieve the certificate from the server at the specified address,
  1508|         0|            0|            0|  0.00%|    and return it as a PEM-encoded string.
  1509|         0|            0|            0|  0.00%|    If 'ca_certs' is specified, validate the server cert against it.
  1510|         0|            0|            0|  0.00%|    If 'ssl_version' is specified, use it in the connection attempt.
  1511|         0|            0|            0|  0.00%|    If 'timeout' is specified, use it in the connection attempt.
  1512|         0|            0|            0|  0.00%|    """
  1513|         0|            0|            0|  0.00%|
  1514|         0|            0|            0|  0.00%|    host, port = addr
  1515|         0|            0|            0|  0.00%|    if ca_certs is not None:
  1516|         0|            0|            0|  0.00%|        cert_reqs = CERT_REQUIRED
  1517|         0|            0|            0|  0.00%|    else:
  1518|         0|            0|            0|  0.00%|        cert_reqs = CERT_NONE
  1519|         0|            0|            0|  0.00%|    context = _create_stdlib_context(ssl_version,
  1520|         0|            0|            0|  0.00%|                                     cert_reqs=cert_reqs,
  1521|         0|            0|            0|  0.00%|                                     cafile=ca_certs)
  1522|         0|            0|            0|  0.00%|    with create_connection(addr, timeout=timeout) as sock:
  1523|         0|            0|            0|  0.00%|        with context.wrap_socket(sock, server_hostname=host) as sslsock:
  1524|         0|            0|            0|  0.00%|            dercert = sslsock.getpeercert(True)
  1525|         0|            0|            0|  0.00%|    return DER_cert_to_PEM_cert(dercert)
  1526|         0|            0|            0|  0.00%|
  1527|         1|  1.28746e-05|  1.28746e-05|  0.01%|def get_protocol_name(protocol_code):
  1528|         0|            0|            0|  0.00%|    return _PROTOCOL_NAMES.get(protocol_code, '<unknown>')
File: /usr/lib/python3.10/stringprep.py
File duration: 0.0095036s (3.91%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         1|   1.7643e-05|   1.7643e-05|  0.01%|# This file is generated by mkstringprep.py. DO NOT EDIT.
     2|         1|  1.81198e-05|  1.81198e-05|  0.01%|"""Library that exposes various tables found in the StringPrep RFC 3454.
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|There are two kinds of tables: sets, for which a member test is provided,
     5|         0|            0|            0|  0.00%|and mappings, for which a mapping function is provided.
     6|         0|            0|            0|  0.00%|"""
     7|         0|            0|            0|  0.00%|
     8|         1|  3.95775e-05|  3.95775e-05|  0.02%|from unicodedata import ucd_3_2_0 as unicodedata
(call)|         1|   0.00312686|   0.00312686|  1.29%|# <frozen importlib._bootstrap>:1022 _find_and_load
     9|         0|            0|            0|  0.00%|
    10|         1|  1.45435e-05|  1.45435e-05|  0.01%|assert unicodedata.unidata_version == '3.2.0'
    11|         0|            0|            0|  0.00%|
    12|         1|  1.09673e-05|  1.09673e-05|  0.00%|def in_table_a1(code):
    13|         0|            0|            0|  0.00%|    if unicodedata.category(code) != 'Cn': return False
    14|         0|            0|            0|  0.00%|    c = ord(code)
    15|         0|            0|            0|  0.00%|    if 0xFDD0 <= c < 0xFDF0: return False
    16|         0|            0|            0|  0.00%|    return (c & 0xFFFF) not in (0xFFFE, 0xFFFF)
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         1|  1.64509e-05|  1.64509e-05|  0.01%|b1_set = set([173, 847, 6150, 6155, 6156, 6157, 8203, 8204, 8205, 8288, 65279] + list(range(65024,65040)))
    20|         1|  1.12057e-05|  1.12057e-05|  0.00%|def in_table_b1(code):
    21|         0|            0|            0|  0.00%|    return ord(code) in b1_set
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|       648|   0.00488734|   7.5422e-06|  2.01%|b3_exceptions = {
    25|         4|  3.02792e-05|  7.56979e-06|  0.01%|0xb5:'\u03bc', 0xdf:'ss', 0x130:'i\u0307', 0x149:'\u02bcn',
    26|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x17f:'s', 0x1f0:'j\u030c', 0x345:'\u03b9', 0x37a:' \u03b9',
    27|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x390:'\u03b9\u0308\u0301', 0x3b0:'\u03c5\u0308\u0301', 0x3c2:'\u03c3', 0x3d0:'\u03b2',
    28|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x3d1:'\u03b8', 0x3d2:'\u03c5', 0x3d3:'\u03cd', 0x3d4:'\u03cb',
    29|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x3d5:'\u03c6', 0x3d6:'\u03c0', 0x3f0:'\u03ba', 0x3f1:'\u03c1',
    30|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x3f2:'\u03c3', 0x3f5:'\u03b5', 0x587:'\u0565\u0582', 0x1e96:'h\u0331',
    31|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1e97:'t\u0308', 0x1e98:'w\u030a', 0x1e99:'y\u030a', 0x1e9a:'a\u02be',
    32|         4|  2.47955e-05|  6.19888e-06|  0.01%|0x1e9b:'\u1e61', 0x1f50:'\u03c5\u0313', 0x1f52:'\u03c5\u0313\u0300', 0x1f54:'\u03c5\u0313\u0301',
    33|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1f56:'\u03c5\u0313\u0342', 0x1f80:'\u1f00\u03b9', 0x1f81:'\u1f01\u03b9', 0x1f82:'\u1f02\u03b9',
    34|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1f83:'\u1f03\u03b9', 0x1f84:'\u1f04\u03b9', 0x1f85:'\u1f05\u03b9', 0x1f86:'\u1f06\u03b9',
    35|         4|  2.47955e-05|  6.19888e-06|  0.01%|0x1f87:'\u1f07\u03b9', 0x1f88:'\u1f00\u03b9', 0x1f89:'\u1f01\u03b9', 0x1f8a:'\u1f02\u03b9',
    36|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1f8b:'\u1f03\u03b9', 0x1f8c:'\u1f04\u03b9', 0x1f8d:'\u1f05\u03b9', 0x1f8e:'\u1f06\u03b9',
    37|         4|  2.69413e-05|  6.73532e-06|  0.01%|0x1f8f:'\u1f07\u03b9', 0x1f90:'\u1f20\u03b9', 0x1f91:'\u1f21\u03b9', 0x1f92:'\u1f22\u03b9',
    38|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1f93:'\u1f23\u03b9', 0x1f94:'\u1f24\u03b9', 0x1f95:'\u1f25\u03b9', 0x1f96:'\u1f26\u03b9',
    39|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1f97:'\u1f27\u03b9', 0x1f98:'\u1f20\u03b9', 0x1f99:'\u1f21\u03b9', 0x1f9a:'\u1f22\u03b9',
    40|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1f9b:'\u1f23\u03b9', 0x1f9c:'\u1f24\u03b9', 0x1f9d:'\u1f25\u03b9', 0x1f9e:'\u1f26\u03b9',
    41|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1f9f:'\u1f27\u03b9', 0x1fa0:'\u1f60\u03b9', 0x1fa1:'\u1f61\u03b9', 0x1fa2:'\u1f62\u03b9',
    42|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1fa3:'\u1f63\u03b9', 0x1fa4:'\u1f64\u03b9', 0x1fa5:'\u1f65\u03b9', 0x1fa6:'\u1f66\u03b9',
    43|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1fa7:'\u1f67\u03b9', 0x1fa8:'\u1f60\u03b9', 0x1fa9:'\u1f61\u03b9', 0x1faa:'\u1f62\u03b9',
    44|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1fab:'\u1f63\u03b9', 0x1fac:'\u1f64\u03b9', 0x1fad:'\u1f65\u03b9', 0x1fae:'\u1f66\u03b9',
    45|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1faf:'\u1f67\u03b9', 0x1fb2:'\u1f70\u03b9', 0x1fb3:'\u03b1\u03b9', 0x1fb4:'\u03ac\u03b9',
    46|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1fb6:'\u03b1\u0342', 0x1fb7:'\u03b1\u0342\u03b9', 0x1fbc:'\u03b1\u03b9', 0x1fbe:'\u03b9',
    47|         4|  2.47955e-05|  6.19888e-06|  0.01%|0x1fc2:'\u1f74\u03b9', 0x1fc3:'\u03b7\u03b9', 0x1fc4:'\u03ae\u03b9', 0x1fc6:'\u03b7\u0342',
    48|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1fc7:'\u03b7\u0342\u03b9', 0x1fcc:'\u03b7\u03b9', 0x1fd2:'\u03b9\u0308\u0300', 0x1fd3:'\u03b9\u0308\u0301',
    49|         4|  2.47955e-05|  6.19888e-06|  0.01%|0x1fd6:'\u03b9\u0342', 0x1fd7:'\u03b9\u0308\u0342', 0x1fe2:'\u03c5\u0308\u0300', 0x1fe3:'\u03c5\u0308\u0301',
    50|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1fe4:'\u03c1\u0313', 0x1fe6:'\u03c5\u0342', 0x1fe7:'\u03c5\u0308\u0342', 0x1ff2:'\u1f7c\u03b9',
    51|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1ff3:'\u03c9\u03b9', 0x1ff4:'\u03ce\u03b9', 0x1ff6:'\u03c9\u0342', 0x1ff7:'\u03c9\u0342\u03b9',
    52|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1ffc:'\u03c9\u03b9', 0x20a8:'rs', 0x2102:'c', 0x2103:'\xb0c',
    53|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x2107:'\u025b', 0x2109:'\xb0f', 0x210b:'h', 0x210c:'h',
    54|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x210d:'h', 0x2110:'i', 0x2111:'i', 0x2112:'l',
    55|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x2115:'n', 0x2116:'no', 0x2119:'p', 0x211a:'q',
    56|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x211b:'r', 0x211c:'r', 0x211d:'r', 0x2120:'sm',
    57|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x2121:'tel', 0x2122:'tm', 0x2124:'z', 0x2128:'z',
    58|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x212c:'b', 0x212d:'c', 0x2130:'e', 0x2131:'f',
    59|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x2133:'m', 0x213e:'\u03b3', 0x213f:'\u03c0', 0x2145:'d',
    60|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x3371:'hpa', 0x3373:'au', 0x3375:'ov', 0x3380:'pa',
    61|         4|  2.47955e-05|  6.19888e-06|  0.01%|0x3381:'na', 0x3382:'\u03bca', 0x3383:'ma', 0x3384:'ka',
    62|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x3385:'kb', 0x3386:'mb', 0x3387:'gb', 0x338a:'pf',
    63|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x338b:'nf', 0x338c:'\u03bcf', 0x3390:'hz', 0x3391:'khz',
    64|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x3392:'mhz', 0x3393:'ghz', 0x3394:'thz', 0x33a9:'pa',
    65|         4|  2.45571e-05|  6.13928e-06|  0.01%|0x33aa:'kpa', 0x33ab:'mpa', 0x33ac:'gpa', 0x33b4:'pv',
    66|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x33b5:'nv', 0x33b6:'\u03bcv', 0x33b7:'mv', 0x33b8:'kv',
    67|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x33b9:'mv', 0x33ba:'pw', 0x33bb:'nw', 0x33bc:'\u03bcw',
    68|         4|  4.24385e-05|  1.06096e-05|  0.02%|0x33bd:'mw', 0x33be:'kw', 0x33bf:'mw', 0x33c0:'k\u03c9',
    69|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x33c1:'m\u03c9', 0x33c3:'bq', 0x33c6:'c\u2215kg', 0x33c7:'co.',
    70|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x33c8:'db', 0x33c9:'gy', 0x33cb:'hp', 0x33cd:'kk',
    71|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x33ce:'km', 0x33d7:'ph', 0x33d9:'ppm', 0x33da:'pr',
    72|         4|  2.43187e-05|  6.07967e-06|  0.01%|0x33dc:'sv', 0x33dd:'wb', 0xfb00:'ff', 0xfb01:'fi',
    73|         4|  2.45571e-05|  6.13928e-06|  0.01%|0xfb02:'fl', 0xfb03:'ffi', 0xfb04:'ffl', 0xfb05:'st',
    74|         4|   2.5034e-05|  6.25849e-06|  0.01%|0xfb06:'st', 0xfb13:'\u0574\u0576', 0xfb14:'\u0574\u0565', 0xfb15:'\u0574\u056b',
    75|         4|  2.57492e-05|   6.4373e-06|  0.01%|0xfb16:'\u057e\u0576', 0xfb17:'\u0574\u056d', 0x1d400:'a', 0x1d401:'b',
    76|         4|  2.43187e-05|  6.07967e-06|  0.01%|0x1d402:'c', 0x1d403:'d', 0x1d404:'e', 0x1d405:'f',
    77|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1d406:'g', 0x1d407:'h', 0x1d408:'i', 0x1d409:'j',
    78|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d40a:'k', 0x1d40b:'l', 0x1d40c:'m', 0x1d40d:'n',
    79|         4|  2.45571e-05|  6.13928e-06|  0.01%|0x1d40e:'o', 0x1d40f:'p', 0x1d410:'q', 0x1d411:'r',
    80|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d412:'s', 0x1d413:'t', 0x1d414:'u', 0x1d415:'v',
    81|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1d416:'w', 0x1d417:'x', 0x1d418:'y', 0x1d419:'z',
    82|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d434:'a', 0x1d435:'b', 0x1d436:'c', 0x1d437:'d',
    83|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d438:'e', 0x1d439:'f', 0x1d43a:'g', 0x1d43b:'h',
    84|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d43c:'i', 0x1d43d:'j', 0x1d43e:'k', 0x1d43f:'l',
    85|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d440:'m', 0x1d441:'n', 0x1d442:'o', 0x1d443:'p',
    86|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d444:'q', 0x1d445:'r', 0x1d446:'s', 0x1d447:'t',
    87|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d448:'u', 0x1d449:'v', 0x1d44a:'w', 0x1d44b:'x',
    88|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1d44c:'y', 0x1d44d:'z', 0x1d468:'a', 0x1d469:'b',
    89|         4|   2.7895e-05|  6.97374e-06|  0.01%|0x1d46a:'c', 0x1d46b:'d', 0x1d46c:'e', 0x1d46d:'f',
    90|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d46e:'g', 0x1d46f:'h', 0x1d470:'i', 0x1d471:'j',
    91|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d472:'k', 0x1d473:'l', 0x1d474:'m', 0x1d475:'n',
    92|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d476:'o', 0x1d477:'p', 0x1d478:'q', 0x1d479:'r',
    93|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d47a:'s', 0x1d47b:'t', 0x1d47c:'u', 0x1d47d:'v',
    94|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d47e:'w', 0x1d47f:'x', 0x1d480:'y', 0x1d481:'z',
    95|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d49c:'a', 0x1d49e:'c', 0x1d49f:'d', 0x1d4a2:'g',
    96|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d4a5:'j', 0x1d4a6:'k', 0x1d4a9:'n', 0x1d4aa:'o',
    97|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d4ab:'p', 0x1d4ac:'q', 0x1d4ae:'s', 0x1d4af:'t',
    98|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d4b0:'u', 0x1d4b1:'v', 0x1d4b2:'w', 0x1d4b3:'x',
    99|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d4b4:'y', 0x1d4b5:'z', 0x1d4d0:'a', 0x1d4d1:'b',
   100|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d4d2:'c', 0x1d4d3:'d', 0x1d4d4:'e', 0x1d4d5:'f',
   101|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d4d6:'g', 0x1d4d7:'h', 0x1d4d8:'i', 0x1d4d9:'j',
   102|         4|  2.69413e-05|  6.73532e-06|  0.01%|0x1d4da:'k', 0x1d4db:'l', 0x1d4dc:'m', 0x1d4dd:'n',
   103|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d4de:'o', 0x1d4df:'p', 0x1d4e0:'q', 0x1d4e1:'r',
   104|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d4e2:'s', 0x1d4e3:'t', 0x1d4e4:'u', 0x1d4e5:'v',
   105|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d4e6:'w', 0x1d4e7:'x', 0x1d4e8:'y', 0x1d4e9:'z',
   106|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d504:'a', 0x1d505:'b', 0x1d507:'d', 0x1d508:'e',
   107|         4|  2.67029e-05|  6.67572e-06|  0.01%|0x1d509:'f', 0x1d50a:'g', 0x1d50d:'j', 0x1d50e:'k',
   108|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d50f:'l', 0x1d510:'m', 0x1d511:'n', 0x1d512:'o',
   109|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d513:'p', 0x1d514:'q', 0x1d516:'s', 0x1d517:'t',
   110|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d518:'u', 0x1d519:'v', 0x1d51a:'w', 0x1d51b:'x',
   111|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d51c:'y', 0x1d538:'a', 0x1d539:'b', 0x1d53b:'d',
   112|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d53c:'e', 0x1d53d:'f', 0x1d53e:'g', 0x1d540:'i',
   113|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d541:'j', 0x1d542:'k', 0x1d543:'l', 0x1d544:'m',
   114|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d546:'o', 0x1d54a:'s', 0x1d54b:'t', 0x1d54c:'u',
   115|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d54d:'v', 0x1d54e:'w', 0x1d54f:'x', 0x1d550:'y',
   116|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d56c:'a', 0x1d56d:'b', 0x1d56e:'c', 0x1d56f:'d',
   117|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d570:'e', 0x1d571:'f', 0x1d572:'g', 0x1d573:'h',
   118|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d574:'i', 0x1d575:'j', 0x1d576:'k', 0x1d577:'l',
   119|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d578:'m', 0x1d579:'n', 0x1d57a:'o', 0x1d57b:'p',
   120|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d57c:'q', 0x1d57d:'r', 0x1d57e:'s', 0x1d57f:'t',
   121|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d580:'u', 0x1d581:'v', 0x1d582:'w', 0x1d583:'x',
   122|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d584:'y', 0x1d585:'z', 0x1d5a0:'a', 0x1d5a1:'b',
   123|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d5a2:'c', 0x1d5a3:'d', 0x1d5a4:'e', 0x1d5a5:'f',
   124|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d5a6:'g', 0x1d5a7:'h', 0x1d5a8:'i', 0x1d5a9:'j',
   125|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d5aa:'k', 0x1d5ab:'l', 0x1d5ac:'m', 0x1d5ad:'n',
   126|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d5ae:'o', 0x1d5af:'p', 0x1d5b0:'q', 0x1d5b1:'r',
   127|         4|  2.67029e-05|  6.67572e-06|  0.01%|0x1d5b2:'s', 0x1d5b3:'t', 0x1d5b4:'u', 0x1d5b5:'v',
   128|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1d5b6:'w', 0x1d5b7:'x', 0x1d5b8:'y', 0x1d5b9:'z',
   129|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1d5d4:'a', 0x1d5d5:'b', 0x1d5d6:'c', 0x1d5d7:'d',
   130|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d5d8:'e', 0x1d5d9:'f', 0x1d5da:'g', 0x1d5db:'h',
   131|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d5dc:'i', 0x1d5dd:'j', 0x1d5de:'k', 0x1d5df:'l',
   132|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d5e0:'m', 0x1d5e1:'n', 0x1d5e2:'o', 0x1d5e3:'p',
   133|         4|  2.67029e-05|  6.67572e-06|  0.01%|0x1d5e4:'q', 0x1d5e5:'r', 0x1d5e6:'s', 0x1d5e7:'t',
   134|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d5e8:'u', 0x1d5e9:'v', 0x1d5ea:'w', 0x1d5eb:'x',
   135|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d5ec:'y', 0x1d5ed:'z', 0x1d608:'a', 0x1d609:'b',
   136|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1d60a:'c', 0x1d60b:'d', 0x1d60c:'e', 0x1d60d:'f',
   137|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d60e:'g', 0x1d60f:'h', 0x1d610:'i', 0x1d611:'j',
   138|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d612:'k', 0x1d613:'l', 0x1d614:'m', 0x1d615:'n',
   139|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d616:'o', 0x1d617:'p', 0x1d618:'q', 0x1d619:'r',
   140|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1d61a:'s', 0x1d61b:'t', 0x1d61c:'u', 0x1d61d:'v',
   141|         4|  2.71797e-05|  6.79493e-06|  0.01%|0x1d61e:'w', 0x1d61f:'x', 0x1d620:'y', 0x1d621:'z',
   142|         4|  2.69413e-05|  6.73532e-06|  0.01%|0x1d63c:'a', 0x1d63d:'b', 0x1d63e:'c', 0x1d63f:'d',
   143|         4|  2.69413e-05|  6.73532e-06|  0.01%|0x1d640:'e', 0x1d641:'f', 0x1d642:'g', 0x1d643:'h',
   144|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d644:'i', 0x1d645:'j', 0x1d646:'k', 0x1d647:'l',
   145|         4|  2.67029e-05|  6.67572e-06|  0.01%|0x1d648:'m', 0x1d649:'n', 0x1d64a:'o', 0x1d64b:'p',
   146|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d64c:'q', 0x1d64d:'r', 0x1d64e:'s', 0x1d64f:'t',
   147|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d650:'u', 0x1d651:'v', 0x1d652:'w', 0x1d653:'x',
   148|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d654:'y', 0x1d655:'z', 0x1d670:'a', 0x1d671:'b',
   149|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d672:'c', 0x1d673:'d', 0x1d674:'e', 0x1d675:'f',
   150|         4|  2.47955e-05|  6.19888e-06|  0.01%|0x1d676:'g', 0x1d677:'h', 0x1d678:'i', 0x1d679:'j',
   151|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d67a:'k', 0x1d67b:'l', 0x1d67c:'m', 0x1d67d:'n',
   152|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d67e:'o', 0x1d67f:'p', 0x1d680:'q', 0x1d681:'r',
   153|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d682:'s', 0x1d683:'t', 0x1d684:'u', 0x1d685:'v',
   154|         4|  2.67029e-05|  6.67572e-06|  0.01%|0x1d686:'w', 0x1d687:'x', 0x1d688:'y', 0x1d689:'z',
   155|         4|  2.67029e-05|  6.67572e-06|  0.01%|0x1d6a8:'\u03b1', 0x1d6a9:'\u03b2', 0x1d6aa:'\u03b3', 0x1d6ab:'\u03b4',
   156|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d6ac:'\u03b5', 0x1d6ad:'\u03b6', 0x1d6ae:'\u03b7', 0x1d6af:'\u03b8',
   157|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d6b0:'\u03b9', 0x1d6b1:'\u03ba', 0x1d6b2:'\u03bb', 0x1d6b3:'\u03bc',
   158|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d6b4:'\u03bd', 0x1d6b5:'\u03be', 0x1d6b6:'\u03bf', 0x1d6b7:'\u03c0',
   159|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d6b8:'\u03c1', 0x1d6b9:'\u03b8', 0x1d6ba:'\u03c3', 0x1d6bb:'\u03c4',
   160|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d6bc:'\u03c5', 0x1d6bd:'\u03c6', 0x1d6be:'\u03c7', 0x1d6bf:'\u03c8',
   161|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d6c0:'\u03c9', 0x1d6d3:'\u03c3', 0x1d6e2:'\u03b1', 0x1d6e3:'\u03b2',
   162|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d6e4:'\u03b3', 0x1d6e5:'\u03b4', 0x1d6e6:'\u03b5', 0x1d6e7:'\u03b6',
   163|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d6e8:'\u03b7', 0x1d6e9:'\u03b8', 0x1d6ea:'\u03b9', 0x1d6eb:'\u03ba',
   164|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d6ec:'\u03bb', 0x1d6ed:'\u03bc', 0x1d6ee:'\u03bd', 0x1d6ef:'\u03be',
   165|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d6f0:'\u03bf', 0x1d6f1:'\u03c0', 0x1d6f2:'\u03c1', 0x1d6f3:'\u03b8',
   166|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d6f4:'\u03c3', 0x1d6f5:'\u03c4', 0x1d6f6:'\u03c5', 0x1d6f7:'\u03c6',
   167|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d6f8:'\u03c7', 0x1d6f9:'\u03c8', 0x1d6fa:'\u03c9', 0x1d70d:'\u03c3',
   168|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d71c:'\u03b1', 0x1d71d:'\u03b2', 0x1d71e:'\u03b3', 0x1d71f:'\u03b4',
   169|         4|  2.52724e-05|  6.31809e-06|  0.01%|0x1d720:'\u03b5', 0x1d721:'\u03b6', 0x1d722:'\u03b7', 0x1d723:'\u03b8',
   170|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d724:'\u03b9', 0x1d725:'\u03ba', 0x1d726:'\u03bb', 0x1d727:'\u03bc',
   171|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d728:'\u03bd', 0x1d729:'\u03be', 0x1d72a:'\u03bf', 0x1d72b:'\u03c0',
   172|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d72c:'\u03c1', 0x1d72d:'\u03b8', 0x1d72e:'\u03c3', 0x1d72f:'\u03c4',
   173|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d730:'\u03c5', 0x1d731:'\u03c6', 0x1d732:'\u03c7', 0x1d733:'\u03c8',
   174|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d734:'\u03c9', 0x1d747:'\u03c3', 0x1d756:'\u03b1', 0x1d757:'\u03b2',
   175|         4|   2.5034e-05|  6.25849e-06|  0.01%|0x1d758:'\u03b3', 0x1d759:'\u03b4', 0x1d75a:'\u03b5', 0x1d75b:'\u03b6',
   176|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d75c:'\u03b7', 0x1d75d:'\u03b8', 0x1d75e:'\u03b9', 0x1d75f:'\u03ba',
   177|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d760:'\u03bb', 0x1d761:'\u03bc', 0x1d762:'\u03bd', 0x1d763:'\u03be',
   178|         4|  2.64645e-05|  6.61612e-06|  0.01%|0x1d764:'\u03bf', 0x1d765:'\u03c0', 0x1d766:'\u03c1', 0x1d767:'\u03b8',
   179|         4|  2.57492e-05|   6.4373e-06|  0.01%|0x1d768:'\u03c3', 0x1d769:'\u03c4', 0x1d76a:'\u03c5', 0x1d76b:'\u03c6',
   180|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d76c:'\u03c7', 0x1d76d:'\u03c8', 0x1d76e:'\u03c9', 0x1d781:'\u03c3',
   181|         4|  2.59876e-05|  6.49691e-06|  0.01%|0x1d790:'\u03b1', 0x1d791:'\u03b2', 0x1d792:'\u03b3', 0x1d793:'\u03b4',
   182|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d794:'\u03b5', 0x1d795:'\u03b6', 0x1d796:'\u03b7', 0x1d797:'\u03b8',
   183|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d798:'\u03b9', 0x1d799:'\u03ba', 0x1d79a:'\u03bb', 0x1d79b:'\u03bc',
   184|         4|   2.6226e-05|  6.55651e-06|  0.01%|0x1d79c:'\u03bd', 0x1d79d:'\u03be', 0x1d79e:'\u03bf', 0x1d79f:'\u03c0',
   185|         4|  2.55108e-05|   6.3777e-06|  0.01%|0x1d7a0:'\u03c1', 0x1d7a1:'\u03b8', 0x1d7a2:'\u03c3', 0x1d7a3:'\u03c4',
   186|         3|  1.95503e-05|  6.51677e-06|  0.01%|0x1d7a4:'\u03c5', 0x1d7a5:'\u03c6', 0x1d7a6:'\u03c7', 0x1d7a7:'\u03c8',
   187|         1|  6.67572e-06|  6.67572e-06|  0.00%|0x1d7a8:'\u03c9', 0x1d7bb:'\u03c3', }
   188|         0|            0|            0|  0.00%|
   189|         1|  7.15256e-06|  7.15256e-06|  0.00%|def map_table_b3(code):
   190|         0|            0|            0|  0.00%|    r = b3_exceptions.get(ord(code))
   191|         0|            0|            0|  0.00%|    if r is not None: return r
   192|         0|            0|            0|  0.00%|    return code.lower()
   193|         0|            0|            0|  0.00%|
   194|         0|            0|            0|  0.00%|
   195|         1|  1.04904e-05|  1.04904e-05|  0.00%|def map_table_b2(a):
   196|         0|            0|            0|  0.00%|    al = map_table_b3(a)
   197|         0|            0|            0|  0.00%|    b = unicodedata.normalize("NFKC", al)
   198|         0|            0|            0|  0.00%|    bl = "".join([map_table_b3(ch) for ch in b])
   199|         0|            0|            0|  0.00%|    c = unicodedata.normalize("NFKC", bl)
   200|         0|            0|            0|  0.00%|    if b != c:
   201|         0|            0|            0|  0.00%|        return c
   202|         0|            0|            0|  0.00%|    else:
   203|         0|            0|            0|  0.00%|        return al
   204|         0|            0|            0|  0.00%|
   205|         0|            0|            0|  0.00%|
   206|         1|  1.07288e-05|  1.07288e-05|  0.00%|def in_table_c11(code):
   207|         0|            0|            0|  0.00%|    return code == " "
   208|         0|            0|            0|  0.00%|
   209|         0|            0|            0|  0.00%|
   210|         1|   1.0252e-05|   1.0252e-05|  0.00%|def in_table_c12(code):
   211|         0|            0|            0|  0.00%|    return unicodedata.category(code) == "Zs" and code != " "
   212|         0|            0|            0|  0.00%|
   213|         1|  2.14577e-05|  2.14577e-05|  0.01%|def in_table_c11_c12(code):
   214|         0|            0|            0|  0.00%|    return unicodedata.category(code) == "Zs"
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|
   217|         1|  1.12057e-05|  1.12057e-05|  0.00%|def in_table_c21(code):
   218|         0|            0|            0|  0.00%|    return ord(code) < 128 and unicodedata.category(code) == "Cc"
   219|         0|            0|            0|  0.00%|
   220|         1|  1.85966e-05|  1.85966e-05|  0.01%|c22_specials = set([1757, 1807, 6158, 8204, 8205, 8232, 8233, 65279] + list(range(8288,8292)) + list(range(8298,8304)) + list(range(65529,65533)) + list(range(119155,119163)))
   221|         1|  1.07288e-05|  1.07288e-05|  0.00%|def in_table_c22(code):
   222|         0|            0|            0|  0.00%|    c = ord(code)
   223|         0|            0|            0|  0.00%|    if c < 128: return False
   224|         0|            0|            0|  0.00%|    if unicodedata.category(code) == "Cc": return True
   225|         0|            0|            0|  0.00%|    return c in c22_specials
   226|         0|            0|            0|  0.00%|
   227|         1|  1.09673e-05|  1.09673e-05|  0.00%|def in_table_c21_c22(code):
   228|         0|            0|            0|  0.00%|    return unicodedata.category(code) == "Cc" or \
   229|         0|            0|            0|  0.00%|           ord(code) in c22_specials
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|
   232|         1|  1.26362e-05|  1.26362e-05|  0.01%|def in_table_c3(code):
   233|         0|            0|            0|  0.00%|    return unicodedata.category(code) == "Co"
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|
   236|         1|  1.04904e-05|  1.04904e-05|  0.00%|def in_table_c4(code):
   237|         0|            0|            0|  0.00%|    c = ord(code)
   238|         0|            0|            0|  0.00%|    if c < 0xFDD0: return False
   239|         0|            0|            0|  0.00%|    if c < 0xFDF0: return True
   240|         0|            0|            0|  0.00%|    return (ord(code) & 0xFFFF) in (0xFFFE, 0xFFFF)
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|
   243|         1|  4.33922e-05|  4.33922e-05|  0.02%|def in_table_c5(code):
   244|         0|            0|            0|  0.00%|    return unicodedata.category(code) == "Cs"
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|
   247|         1|  1.19209e-05|  1.19209e-05|  0.00%|c6_set = set(range(65529,65534))
   248|         1|  1.07288e-05|  1.07288e-05|  0.00%|def in_table_c6(code):
   249|         0|            0|            0|  0.00%|    return ord(code) in c6_set
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|
   252|         1|   1.3113e-05|   1.3113e-05|  0.01%|c7_set = set(range(12272,12284))
   253|         1|  1.07288e-05|  1.07288e-05|  0.00%|def in_table_c7(code):
   254|         0|            0|            0|  0.00%|    return ord(code) in c7_set
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|         1|  1.23978e-05|  1.23978e-05|  0.01%|c8_set = set([832, 833, 8206, 8207] + list(range(8234,8239)) + list(range(8298,8304)))
   258|         1|  1.12057e-05|  1.12057e-05|  0.00%|def in_table_c8(code):
   259|         0|            0|            0|  0.00%|    return ord(code) in c8_set
   260|         0|            0|            0|  0.00%|
   261|         0|            0|            0|  0.00%|
   262|         1|  1.50204e-05|  1.50204e-05|  0.01%|c9_set = set([917505] + list(range(917536,917632)))
   263|         1|  1.09673e-05|  1.09673e-05|  0.00%|def in_table_c9(code):
   264|         0|            0|            0|  0.00%|    return ord(code) in c9_set
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|
   267|         1|  1.07288e-05|  1.07288e-05|  0.00%|def in_table_d1(code):
   268|         0|            0|            0|  0.00%|    return unicodedata.bidirectional(code) in ("R","AL")
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         1|  1.04904e-05|  1.04904e-05|  0.00%|def in_table_d2(code):
   272|         0|            0|            0|  0.00%|    return unicodedata.bidirectional(code) == "L"
File: /usr/lib/python3.10/hmac.py
File duration: 0.00676656s (2.79%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|  2.28882e-05|  1.14441e-05|  0.01%|"""HMAC (Keyed-Hashing for Message Authentication) module.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Implements the HMAC algorithm as described by RFC 2104.
     4|         0|            0|            0|  0.00%|"""
     5|         0|            0|            0|  0.00%|
     6|         1|  5.24521e-06|  5.24521e-06|  0.00%|import warnings as _warnings
     7|         1|  6.19888e-06|  6.19888e-06|  0.00%|try:
     8|         1|  1.74046e-05|  1.74046e-05|  0.01%|    import _hashlib as _hashopenssl
(call)|         1|   0.00312757|   0.00312757|  1.29%|# <frozen importlib._bootstrap>:1022 _find_and_load
     9|         0|            0|            0|  0.00%|except ImportError:
    10|         0|            0|            0|  0.00%|    _hashopenssl = None
    11|         0|            0|            0|  0.00%|    _functype = None
    12|         0|            0|            0|  0.00%|    from _operator import _compare_digest as compare_digest
    13|         0|            0|            0|  0.00%|else:
    14|         1|  6.67572e-06|  6.67572e-06|  0.00%|    compare_digest = _hashopenssl.compare_digest
    15|         1|   6.4373e-06|   6.4373e-06|  0.00%|    _functype = type(_hashopenssl.openssl_sha256)  # builtin type
    16|         0|            0|            0|  0.00%|
    17|         1|  1.71661e-05|  1.71661e-05|  0.01%|import hashlib as _hashlib
(call)|         1|   0.00726938|   0.00726938|  2.99%|# <frozen importlib._bootstrap>:1022 _find_and_load
    18|         0|            0|            0|  0.00%|
    19|       515|    0.0032599|   6.3299e-06|  1.34%|trans_5C = bytes((x ^ 0x5C) for x in range(256))
(call)|       257|   0.00163937|  6.37886e-06|  0.67%|# /usr/lib/python3.10/hmac.py:19 <genexpr>
    20|       515|   0.00328088|  6.37064e-06|  1.35%|trans_36 = bytes((x ^ 0x36) for x in range(256))
(call)|       257|   0.00164819|  6.41318e-06|  0.68%|# /usr/lib/python3.10/hmac.py:20 <genexpr>
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|# The size of the digests returned by HMAC depends on the underlying
    23|         0|            0|            0|  0.00%|# hashing module used.  Use digest_size from the instance of HMAC instead.
    24|         1|  6.19888e-06|  6.19888e-06|  0.00%|digest_size = None
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         3|  5.45979e-05|  1.81993e-05|  0.02%|class HMAC:
(call)|         1|  8.44002e-05|  8.44002e-05|  0.03%|# /usr/lib/python3.10/hmac.py:27 HMAC
    28|         1|   3.8147e-06|   3.8147e-06|  0.00%|    """RFC 2104 HMAC class.  Also complies with RFC 4231.
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|    This supports the API for Cryptographic Hash Functions (PEP 247).
    31|         0|            0|            0|  0.00%|    """
    32|         1|  4.76837e-06|  4.76837e-06|  0.00%|    blocksize = 64  # 512-bit HMAC; can be changed in subclasses.
    33|         0|            0|            0|  0.00%|
    34|         1|  5.00679e-06|  5.00679e-06|  0.00%|    __slots__ = (
    35|         0|            0|            0|  0.00%|        "_hmac", "_inner", "_outer", "block_size", "digest_size"
    36|         0|            0|            0|  0.00%|    )
    37|         0|            0|            0|  0.00%|
    38|         1|  5.00679e-06|  5.00679e-06|  0.00%|    def __init__(self, key, msg=None, digestmod=''):
    39|         0|            0|            0|  0.00%|        """Create a new HMAC object.
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|        key: bytes or buffer, key for the keyed hash object.
    42|         0|            0|            0|  0.00%|        msg: bytes or buffer, Initial input for the hash or None.
    43|         0|            0|            0|  0.00%|        digestmod: A hash name suitable for hashlib.new(). *OR*
    44|         0|            0|            0|  0.00%|                   A hashlib constructor returning a new hash object. *OR*
    45|         0|            0|            0|  0.00%|                   A module supporting PEP 247.
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|                   Required as of 3.8, despite its position after the optional
    48|         0|            0|            0|  0.00%|                   msg argument.  Passing it as a keyword argument is
    49|         0|            0|            0|  0.00%|                   recommended, though not required for legacy API reasons.
    50|         0|            0|            0|  0.00%|        """
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|        if not isinstance(key, (bytes, bytearray)):
    53|         0|            0|            0|  0.00%|            raise TypeError("key: expected bytes or bytearray, but got %r" % type(key).__name__)
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|        if not digestmod:
    56|         0|            0|            0|  0.00%|            raise TypeError("Missing required parameter 'digestmod'.")
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|        if _hashopenssl and isinstance(digestmod, (str, _functype)):
    59|         0|            0|            0|  0.00%|            try:
    60|         0|            0|            0|  0.00%|                self._init_hmac(key, msg, digestmod)
    61|         0|            0|            0|  0.00%|            except _hashopenssl.UnsupportedDigestmodError:
    62|         0|            0|            0|  0.00%|                self._init_old(key, msg, digestmod)
    63|         0|            0|            0|  0.00%|        else:
    64|         0|            0|            0|  0.00%|            self._init_old(key, msg, digestmod)
    65|         0|            0|            0|  0.00%|
    66|         1|  4.76837e-06|  4.76837e-06|  0.00%|    def _init_hmac(self, key, msg, digestmod):
    67|         0|            0|            0|  0.00%|        self._hmac = _hashopenssl.hmac_new(key, msg, digestmod=digestmod)
    68|         0|            0|            0|  0.00%|        self.digest_size = self._hmac.digest_size
    69|         0|            0|            0|  0.00%|        self.block_size = self._hmac.block_size
    70|         0|            0|            0|  0.00%|
    71|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def _init_old(self, key, msg, digestmod):
    72|         0|            0|            0|  0.00%|        if callable(digestmod):
    73|         0|            0|            0|  0.00%|            digest_cons = digestmod
    74|         0|            0|            0|  0.00%|        elif isinstance(digestmod, str):
    75|         0|            0|            0|  0.00%|            digest_cons = lambda d=b'': _hashlib.new(digestmod, d)
    76|         0|            0|            0|  0.00%|        else:
    77|         0|            0|            0|  0.00%|            digest_cons = lambda d=b'': digestmod.new(d)
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|        self._hmac = None
    80|         0|            0|            0|  0.00%|        self._outer = digest_cons()
    81|         0|            0|            0|  0.00%|        self._inner = digest_cons()
    82|         0|            0|            0|  0.00%|        self.digest_size = self._inner.digest_size
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|        if hasattr(self._inner, 'block_size'):
    85|         0|            0|            0|  0.00%|            blocksize = self._inner.block_size
    86|         0|            0|            0|  0.00%|            if blocksize < 16:
    87|         0|            0|            0|  0.00%|                _warnings.warn('block_size of %d seems too small; using our '
    88|         0|            0|            0|  0.00%|                               'default of %d.' % (blocksize, self.blocksize),
    89|         0|            0|            0|  0.00%|                               RuntimeWarning, 2)
    90|         0|            0|            0|  0.00%|                blocksize = self.blocksize
    91|         0|            0|            0|  0.00%|        else:
    92|         0|            0|            0|  0.00%|            _warnings.warn('No block_size attribute on given digest object; '
    93|         0|            0|            0|  0.00%|                           'Assuming %d.' % (self.blocksize),
    94|         0|            0|            0|  0.00%|                           RuntimeWarning, 2)
    95|         0|            0|            0|  0.00%|            blocksize = self.blocksize
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|        if len(key) > blocksize:
    98|         0|            0|            0|  0.00%|            key = digest_cons(key).digest()
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|        # self.blocksize is the default blocksize. self.block_size is
   101|         0|            0|            0|  0.00%|        # effective block size as well as the public API attribute.
   102|         0|            0|            0|  0.00%|        self.block_size = blocksize
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|        key = key.ljust(blocksize, b'\0')
   105|         0|            0|            0|  0.00%|        self._outer.update(key.translate(trans_5C))
   106|         0|            0|            0|  0.00%|        self._inner.update(key.translate(trans_36))
   107|         0|            0|            0|  0.00%|        if msg is not None:
   108|         0|            0|            0|  0.00%|            self.update(msg)
   109|         0|            0|            0|  0.00%|
   110|         1|  5.00679e-06|  5.00679e-06|  0.00%|    @property
   111|         1|  5.00679e-06|  5.00679e-06|  0.00%|    def name(self):
   112|         0|            0|            0|  0.00%|        if self._hmac:
   113|         0|            0|            0|  0.00%|            return self._hmac.name
   114|         0|            0|            0|  0.00%|        else:
   115|         0|            0|            0|  0.00%|            return f"hmac-{self._inner.name}"
   116|         0|            0|            0|  0.00%|
   117|         1|  4.76837e-06|  4.76837e-06|  0.00%|    def update(self, msg):
   118|         0|            0|            0|  0.00%|        """Feed data from msg into this hashing object."""
   119|         0|            0|            0|  0.00%|        inst = self._hmac or self._inner
   120|         0|            0|            0|  0.00%|        inst.update(msg)
   121|         0|            0|            0|  0.00%|
   122|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def copy(self):
   123|         0|            0|            0|  0.00%|        """Return a separate copy of this hashing object.
   124|         0|            0|            0|  0.00%|
   125|         0|            0|            0|  0.00%|        An update to this copy won't affect the original object.
   126|         0|            0|            0|  0.00%|        """
   127|         0|            0|            0|  0.00%|        # Call __new__ directly to avoid the expensive __init__.
   128|         0|            0|            0|  0.00%|        other = self.__class__.__new__(self.__class__)
   129|         0|            0|            0|  0.00%|        other.digest_size = self.digest_size
   130|         0|            0|            0|  0.00%|        if self._hmac:
   131|         0|            0|            0|  0.00%|            other._hmac = self._hmac.copy()
   132|         0|            0|            0|  0.00%|            other._inner = other._outer = None
   133|         0|            0|            0|  0.00%|        else:
   134|         0|            0|            0|  0.00%|            other._hmac = None
   135|         0|            0|            0|  0.00%|            other._inner = self._inner.copy()
   136|         0|            0|            0|  0.00%|            other._outer = self._outer.copy()
   137|         0|            0|            0|  0.00%|        return other
   138|         0|            0|            0|  0.00%|
   139|         1|  1.09673e-05|  1.09673e-05|  0.00%|    def _current(self):
   140|         0|            0|            0|  0.00%|        """Return a hash object for the current state.
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|        To be used only internally with digest() and hexdigest().
   143|         0|            0|            0|  0.00%|        """
   144|         0|            0|            0|  0.00%|        if self._hmac:
   145|         0|            0|            0|  0.00%|            return self._hmac
   146|         0|            0|            0|  0.00%|        else:
   147|         0|            0|            0|  0.00%|            h = self._outer.copy()
   148|         0|            0|            0|  0.00%|            h.update(self._inner.digest())
   149|         0|            0|            0|  0.00%|            return h
   150|         0|            0|            0|  0.00%|
   151|         1|  6.67572e-06|  6.67572e-06|  0.00%|    def digest(self):
   152|         0|            0|            0|  0.00%|        """Return the hash value of this hashing object.
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|        This returns the hmac value as bytes.  The object is
   155|         0|            0|            0|  0.00%|        not altered in any way by this function; you can continue
   156|         0|            0|            0|  0.00%|        updating the object after calling this function.
   157|         0|            0|            0|  0.00%|        """
   158|         0|            0|            0|  0.00%|        h = self._current()
   159|         0|            0|            0|  0.00%|        return h.digest()
   160|         0|            0|            0|  0.00%|
   161|         1|  4.76837e-06|  4.76837e-06|  0.00%|    def hexdigest(self):
   162|         0|            0|            0|  0.00%|        """Like digest(), but returns a string of hexadecimal digits instead.
   163|         0|            0|            0|  0.00%|        """
   164|         0|            0|            0|  0.00%|        h = self._current()
   165|         0|            0|            0|  0.00%|        return h.hexdigest()
   166|         0|            0|            0|  0.00%|
   167|         1|  5.72205e-06|  5.72205e-06|  0.00%|def new(key, msg=None, digestmod=''):
   168|         0|            0|            0|  0.00%|    """Create a new hashing object and return it.
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|    key: bytes or buffer, The starting key for the hash.
   171|         0|            0|            0|  0.00%|    msg: bytes or buffer, Initial input for the hash, or None.
   172|         0|            0|            0|  0.00%|    digestmod: A hash name suitable for hashlib.new(). *OR*
   173|         0|            0|            0|  0.00%|               A hashlib constructor returning a new hash object. *OR*
   174|         0|            0|            0|  0.00%|               A module supporting PEP 247.
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|               Required as of 3.8, despite its position after the optional
   177|         0|            0|            0|  0.00%|               msg argument.  Passing it as a keyword argument is
   178|         0|            0|            0|  0.00%|               recommended, though not required for legacy API reasons.
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|    You can now feed arbitrary bytes into the object using its update()
   181|         0|            0|            0|  0.00%|    method, and can ask for the hash value at any time by calling its digest()
   182|         0|            0|            0|  0.00%|    or hexdigest() methods.
   183|         0|            0|            0|  0.00%|    """
   184|         0|            0|            0|  0.00%|    return HMAC(key, msg, digestmod)
   185|         0|            0|            0|  0.00%|
   186|         0|            0|            0|  0.00%|
   187|         1|  6.19888e-06|  6.19888e-06|  0.00%|def digest(key, msg, digest):
   188|         0|            0|            0|  0.00%|    """Fast inline implementation of HMAC.
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|    key: bytes or buffer, The key for the keyed hash object.
   191|         0|            0|            0|  0.00%|    msg: bytes or buffer, Input message.
   192|         0|            0|            0|  0.00%|    digest: A hash name suitable for hashlib.new() for best performance. *OR*
   193|         0|            0|            0|  0.00%|            A hashlib constructor returning a new hash object. *OR*
   194|         0|            0|            0|  0.00%|            A module supporting PEP 247.
   195|         0|            0|            0|  0.00%|    """
   196|         0|            0|            0|  0.00%|    if _hashopenssl is not None and isinstance(digest, (str, _functype)):
   197|         0|            0|            0|  0.00%|        try:
   198|         0|            0|            0|  0.00%|            return _hashopenssl.hmac_digest(key, msg, digest)
   199|         0|            0|            0|  0.00%|        except _hashopenssl.UnsupportedDigestmodError:
   200|         0|            0|            0|  0.00%|            pass
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    if callable(digest):
   203|         0|            0|            0|  0.00%|        digest_cons = digest
   204|         0|            0|            0|  0.00%|    elif isinstance(digest, str):
   205|         0|            0|            0|  0.00%|        digest_cons = lambda d=b'': _hashlib.new(digest, d)
   206|         0|            0|            0|  0.00%|    else:
   207|         0|            0|            0|  0.00%|        digest_cons = lambda d=b'': digest.new(d)
   208|         0|            0|            0|  0.00%|
   209|         0|            0|            0|  0.00%|    inner = digest_cons()
   210|         0|            0|            0|  0.00%|    outer = digest_cons()
   211|         0|            0|            0|  0.00%|    blocksize = getattr(inner, 'block_size', 64)
   212|         0|            0|            0|  0.00%|    if len(key) > blocksize:
   213|         0|            0|            0|  0.00%|        key = digest_cons(key).digest()
   214|         0|            0|            0|  0.00%|    key = key + b'\x00' * (blocksize - len(key))
   215|         0|            0|            0|  0.00%|    inner.update(key.translate(trans_36))
   216|         0|            0|            0|  0.00%|    outer.update(key.translate(trans_5C))
   217|         0|            0|            0|  0.00%|    inner.update(msg)
   218|         0|            0|            0|  0.00%|    outer.update(inner.digest())
   219|         0|            0|            0|  0.00%|    return outer.digest()
File: /usr/lib/python3.10/email/_header_value_parser.py
File duration: 0.00522137s (2.15%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""Header value parser implementing various email-related RFC parsing rules.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|The parsing methods defined in this module implement various email related
     4|         0|            0|            0|  0.00%|parsing rules.  Principal among them is RFC 5322, which is the followon
     5|         0|            0|            0|  0.00%|to RFC 2822 and primarily a clarification of the former.  It also implements
     6|         0|            0|            0|  0.00%|RFC 2047 encoded word decoding.
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|RFC 5322 goes to considerable trouble to maintain backward compatibility with
     9|         0|            0|            0|  0.00%|RFC 822 in the parse phase, while cleaning up the structure on the generation
    10|         0|            0|            0|  0.00%|phase.  This parser supports correct RFC 5322 generation by tagging white space
    11|         0|            0|            0|  0.00%|as folding white space only when folding is allowed in the non-obsolete rule
    12|         0|            0|            0|  0.00%|sets.  Actually, the parser is even more generous when accepting input than RFC
    13|         0|            0|            0|  0.00%|5322 mandates, following the spirit of Postel's Law, which RFC 5322 encourages.
    14|         0|            0|            0|  0.00%|Where possible deviations from the standard are annotated on the 'defects'
    15|         0|            0|            0|  0.00%|attribute of tokens that deviate.
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|The general structure of the parser follows RFC 5322, and uses its terminology
    18|         0|            0|            0|  0.00%|where there is a direct correspondence.  Where the implementation requires a
    19|         0|            0|            0|  0.00%|somewhat different structure than that used by the formal grammar, new terms
    20|         0|            0|            0|  0.00%|that mimic the closest existing terms are used.  Thus, it really helps to have
    21|         0|            0|            0|  0.00%|a copy of RFC 5322 handy when studying this code.
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|Input to the parser is a string that has already been unfolded according to
    24|         0|            0|            0|  0.00%|RFC 5322 rules.  According to the RFC this unfolding is the very first step, and
    25|         0|            0|            0|  0.00%|this parser leaves the unfolding step to a higher level message parser, which
    26|         0|            0|            0|  0.00%|will have already detected the line breaks that need unfolding while
    27|         0|            0|            0|  0.00%|determining the beginning and end of each header.
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|The output of the parser is a TokenList object, which is a list subclass.  A
    30|         0|            0|            0|  0.00%|TokenList is a recursive data structure.  The terminal nodes of the structure
    31|         0|            0|            0|  0.00%|are Terminal objects, which are subclasses of str.  These do not correspond
    32|         0|            0|            0|  0.00%|directly to terminal objects in the formal grammar, but are instead more
    33|         0|            0|            0|  0.00%|practical higher level combinations of true terminals.
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|All TokenList and Terminal objects have a 'value' attribute, which produces the
    36|         0|            0|            0|  0.00%|semantically meaningful value of that part of the parse subtree.  The value of
    37|         0|            0|            0|  0.00%|all whitespace tokens (no matter how many sub-tokens they may contain) is a
    38|         0|            0|            0|  0.00%|single space, as per the RFC rules.  This includes 'CFWS', which is herein
    39|         0|            0|            0|  0.00%|included in the general class of whitespace tokens.  There is one exception to
    40|         0|            0|            0|  0.00%|the rule that whitespace tokens are collapsed into single spaces in values: in
    41|         0|            0|            0|  0.00%|the value of a 'bare-quoted-string' (a quoted-string with no leading or
    42|         0|            0|            0|  0.00%|trailing whitespace), any whitespace that appeared between the quotation marks
    43|         0|            0|            0|  0.00%|is preserved in the returned value.  Note that in all Terminal strings quoted
    44|         0|            0|            0|  0.00%|pairs are turned into their unquoted values.
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|All TokenList and Terminal objects also have a string value, which attempts to
    47|         0|            0|            0|  0.00%|be a "canonical" representation of the RFC-compliant form of the substring that
    48|         0|            0|            0|  0.00%|produced the parsed subtree, including minimal use of quoted pair quoting.
    49|         0|            0|            0|  0.00%|Whitespace runs are not collapsed.
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|Comment tokens also have a 'content' attribute providing the string found
    52|         0|            0|            0|  0.00%|between the parens (including any nested comments) with whitespace preserved.
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|All TokenList and Terminal objects have a 'defects' attribute which is a
    55|         0|            0|            0|  0.00%|possibly empty list all of the defects found while creating the token.  Defects
    56|         0|            0|            0|  0.00%|may appear on any token in the tree, and a composite list of all defects in the
    57|         0|            0|            0|  0.00%|subtree is available through the 'all_defects' attribute of any node.  (For
    58|         0|            0|            0|  0.00%|Terminal notes x.defects == x.all_defects.)
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|Each object in a parse tree is called a 'token', and each has a 'token_type'
    61|         0|            0|            0|  0.00%|attribute that gives the name from the RFC 5322 grammar that it represents.
    62|         0|            0|            0|  0.00%|Not all RFC 5322 nodes are produced, and there is one non-RFC 5322 node that
    63|         0|            0|            0|  0.00%|may be produced: 'ptext'.  A 'ptext' is a string of printable ascii characters.
    64|         0|            0|            0|  0.00%|It is returned in place of lists of (ctext/quoted-pair) and
    65|         0|            0|            0|  0.00%|(qtext/quoted-pair).
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|XXX: provide complete list of token types.
    68|         0|            0|            0|  0.00%|"""
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|import re
    71|         0|            0|            0|  0.00%|import sys
    72|         0|            0|            0|  0.00%|import urllib   # For urllib.parse.unquote
    73|         0|            0|            0|  0.00%|from string import hexdigits
    74|         0|            0|            0|  0.00%|from operator import itemgetter
    75|         0|            0|            0|  0.00%|from email import _encoded_words as _ew
    76|         0|            0|            0|  0.00%|from email import errors
    77|         0|            0|            0|  0.00%|from email import utils
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|#
    80|         0|            0|            0|  0.00%|# Useful constants and functions
    81|         0|            0|            0|  0.00%|#
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|WSP = set(' \t')
    84|         0|            0|            0|  0.00%|CFWS_LEADER = WSP | set('(')
    85|         0|            0|            0|  0.00%|SPECIALS = set(r'()<>@,:;.\"[]')
    86|         0|            0|            0|  0.00%|ATOM_ENDS = SPECIALS | WSP
    87|         0|            0|            0|  0.00%|DOT_ATOM_ENDS = ATOM_ENDS - set('.')
    88|         0|            0|            0|  0.00%|# '.', '"', and '(' do not end phrases in order to support obs-phrase
    89|         0|            0|            0|  0.00%|PHRASE_ENDS = SPECIALS - set('."(')
    90|         0|            0|            0|  0.00%|TSPECIALS = (SPECIALS | set('/?=')) - set('.')
    91|         0|            0|            0|  0.00%|TOKEN_ENDS = TSPECIALS | WSP
    92|         0|            0|            0|  0.00%|ASPECIALS = TSPECIALS | set("*'%")
    93|         0|            0|            0|  0.00%|ATTRIBUTE_ENDS = ASPECIALS | WSP
    94|         0|            0|            0|  0.00%|EXTENDED_ATTRIBUTE_ENDS = ATTRIBUTE_ENDS - set('%')
    95|         0|            0|            0|  0.00%|
    96|         1|  3.33786e-06|  3.33786e-06|  0.00%|def quote_string(value):
    97|         1|  6.19888e-06|  6.19888e-06|  0.00%|    return '"'+str(value).replace('\\', '\\\\').replace('"', r'\"')+'"'
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|# Match a RFC 2047 word, looks like =?utf-8?q?someword?=
   100|         0|            0|            0|  0.00%|rfc2047_matcher = re.compile(r'''
   101|         0|            0|            0|  0.00%|   =\?            # literal =?
   102|         0|            0|            0|  0.00%|   [^?]*          # charset
   103|         0|            0|            0|  0.00%|   \?             # literal ?
   104|         0|            0|            0|  0.00%|   [qQbB]         # literal 'q' or 'b', case insensitive
   105|         0|            0|            0|  0.00%|   \?             # literal ?
   106|         0|            0|            0|  0.00%|  .*?             # encoded word
   107|         0|            0|            0|  0.00%|  \?=             # literal ?=
   108|         0|            0|            0|  0.00%|''', re.VERBOSE | re.MULTILINE)
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|
   111|         0|            0|            0|  0.00%|#
   112|         0|            0|            0|  0.00%|# TokenList and its subclasses
   113|         0|            0|            0|  0.00%|#
   114|         0|            0|            0|  0.00%|
   115|         0|            0|            0|  0.00%|class TokenList(list):
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|    token_type = None
   118|         0|            0|            0|  0.00%|    syntactic_break = True
   119|         0|            0|            0|  0.00%|    ew_combine_allowed = True
   120|         0|            0|            0|  0.00%|
   121|        17|  7.10487e-05|  4.17934e-06|  0.03%|    def __init__(self, *args, **kw):
   122|        17|  7.43866e-05|  4.37568e-06|  0.03%|        super().__init__(*args, **kw)
   123|        17|  6.00815e-05|   3.5342e-06|  0.02%|        self.defects = []
   124|         0|            0|            0|  0.00%|
   125|        10|  3.21865e-05|  3.21865e-06|  0.01%|    def __str__(self):
   126|        78|  0.000454187|  5.82292e-06|  0.19%|        return ''.join(str(x) for x in self)
(call)|        34|  0.000804186|  2.36525e-05|  0.33%|# /usr/lib/python3.10/email/_header_value_parser.py:126 <genexpr>
(call)|         5|  0.000150919|  3.01838e-05|  0.06%|# /usr/lib/python3.10/email/_header_value_parser.py:125 __str__
(call)|         1|  0.000474453|  0.000474453|  0.20%|# /usr/lib/python3.10/email/_header_value_parser.py:796 __str__
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|    def __repr__(self):
   129|         0|            0|            0|  0.00%|        return '{}({})'.format(self.__class__.__name__,
   130|         0|            0|            0|  0.00%|                             super().__repr__())
   131|         0|            0|            0|  0.00%|
   132|         7|   2.3365e-05|  3.33786e-06|  0.01%|    @property
   133|         0|            0|            0|  0.00%|    def value(self):
   134|        39|   0.00030899|  7.92283e-06|  0.13%|        return ''.join(x.value for x in self if x.value)
(call)|        14|  8.17776e-05|  5.84126e-06|  0.03%|# /usr/lib/python3.10/email/_header_value_parser.py:925 value
(call)|        16|  0.000298023|  1.86265e-05|  0.12%|# /usr/lib/python3.10/email/_header_value_parser.py:134 <genexpr>
(call)|         4|  2.28882e-05|  5.72205e-06|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:184 value
   135|         0|            0|            0|  0.00%|
   136|        16|  4.31538e-05|  2.69711e-06|  0.02%|    @property
   137|         0|            0|            0|  0.00%|    def all_defects(self):
   138|       102|  0.000647068|   6.3438e-06|  0.27%|        return sum((x.all_defects for x in self), self.defects)
(call)|        15|  0.000154495|  1.02997e-05|  0.06%|# /usr/lib/python3.10/email/_header_value_parser.py:888 all_defects
(call)|        43|  0.000744581|  1.73158e-05|  0.31%|# /usr/lib/python3.10/email/_header_value_parser.py:138 <genexpr>
(call)|        12|  0.000562191|  4.68493e-05|  0.23%|# /usr/lib/python3.10/email/_header_value_parser.py:136 all_defects
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|    def startswith_fws(self):
   141|         0|            0|            0|  0.00%|        return self[0].startswith_fws()
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|    @property
   144|         0|            0|            0|  0.00%|    def as_ew_allowed(self):
   145|         0|            0|            0|  0.00%|        """True if all top level tokens of this part may be RFC2047 encoded."""
   146|         0|            0|            0|  0.00%|        return all(part.as_ew_allowed for part in self)
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|    @property
   149|         0|            0|            0|  0.00%|    def comments(self):
   150|         0|            0|            0|  0.00%|        comments = []
   151|         0|            0|            0|  0.00%|        for token in self:
   152|         0|            0|            0|  0.00%|            comments.extend(token.comments)
   153|         0|            0|            0|  0.00%|        return comments
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|    def fold(self, *, policy):
   156|         0|            0|            0|  0.00%|        return _refold_parse_tree(self, policy=policy)
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|    def pprint(self, indent=''):
   159|         0|            0|            0|  0.00%|        print(self.ppstr(indent=indent))
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|    def ppstr(self, indent=''):
   162|         0|            0|            0|  0.00%|        return '\n'.join(self._pp(indent=indent))
   163|         0|            0|            0|  0.00%|
   164|         0|            0|            0|  0.00%|    def _pp(self, indent=''):
   165|         0|            0|            0|  0.00%|        yield '{}{}/{}('.format(
   166|         0|            0|            0|  0.00%|            indent,
   167|         0|            0|            0|  0.00%|            self.__class__.__name__,
   168|         0|            0|            0|  0.00%|            self.token_type)
   169|         0|            0|            0|  0.00%|        for token in self:
   170|         0|            0|            0|  0.00%|            if not hasattr(token, '_pp'):
   171|         0|            0|            0|  0.00%|                yield (indent + '    !! invalid element in token '
   172|         0|            0|            0|  0.00%|                                        'list: {!r}'.format(token))
   173|         0|            0|            0|  0.00%|            else:
   174|         0|            0|            0|  0.00%|                yield from token._pp(indent+'    ')
   175|         0|            0|            0|  0.00%|        if self.defects:
   176|         0|            0|            0|  0.00%|            extra = ' Defects: {}'.format(self.defects)
   177|         0|            0|            0|  0.00%|        else:
   178|         0|            0|            0|  0.00%|            extra = ''
   179|         0|            0|            0|  0.00%|        yield '{}){}'.format(indent, extra)
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|
   182|         0|            0|            0|  0.00%|class WhiteSpaceTokenList(TokenList):
   183|         0|            0|            0|  0.00%|
   184|         4|  1.07288e-05|  2.68221e-06|  0.00%|    @property
   185|         0|            0|            0|  0.00%|    def value(self):
   186|         4|  1.21593e-05|  3.03984e-06|  0.01%|        return ' '
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|    @property
   189|         0|            0|            0|  0.00%|    def comments(self):
   190|         0|            0|            0|  0.00%|        return [x.content for x in self if x.token_type=='comment']
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|
   193|         0|            0|            0|  0.00%|class UnstructuredTokenList(TokenList):
   194|         0|            0|            0|  0.00%|    token_type = 'unstructured'
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|class Phrase(TokenList):
   198|         0|            0|            0|  0.00%|    token_type = 'phrase'
   199|         0|            0|            0|  0.00%|
   200|         0|            0|            0|  0.00%|class Word(TokenList):
   201|         0|            0|            0|  0.00%|    token_type = 'word'
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|class CFWSList(WhiteSpaceTokenList):
   205|         0|            0|            0|  0.00%|    token_type = 'cfws'
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|
   208|         0|            0|            0|  0.00%|class Atom(TokenList):
   209|         0|            0|            0|  0.00%|    token_type = 'atom'
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|class Token(TokenList):
   213|         0|            0|            0|  0.00%|    token_type = 'token'
   214|         0|            0|            0|  0.00%|    encode_as_ew = False
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|class EncodedWord(TokenList):
   218|         0|            0|            0|  0.00%|    token_type = 'encoded-word'
   219|         0|            0|            0|  0.00%|    cte = None
   220|         0|            0|            0|  0.00%|    charset = None
   221|         0|            0|            0|  0.00%|    lang = None
   222|         0|            0|            0|  0.00%|
   223|         0|            0|            0|  0.00%|
   224|         0|            0|            0|  0.00%|class QuotedString(TokenList):
   225|         0|            0|            0|  0.00%|
   226|         0|            0|            0|  0.00%|    token_type = 'quoted-string'
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    @property
   229|         0|            0|            0|  0.00%|    def content(self):
   230|         0|            0|            0|  0.00%|        for x in self:
   231|         0|            0|            0|  0.00%|            if x.token_type == 'bare-quoted-string':
   232|         0|            0|            0|  0.00%|                return x.value
   233|         0|            0|            0|  0.00%|
   234|         0|            0|            0|  0.00%|    @property
   235|         0|            0|            0|  0.00%|    def quoted_value(self):
   236|         0|            0|            0|  0.00%|        res = []
   237|         0|            0|            0|  0.00%|        for x in self:
   238|         0|            0|            0|  0.00%|            if x.token_type == 'bare-quoted-string':
   239|         0|            0|            0|  0.00%|                res.append(str(x))
   240|         0|            0|            0|  0.00%|            else:
   241|         0|            0|            0|  0.00%|                res.append(x.value)
   242|         0|            0|            0|  0.00%|        return ''.join(res)
   243|         0|            0|            0|  0.00%|
   244|         2|  5.72205e-06|  2.86102e-06|  0.00%|    @property
   245|         0|            0|            0|  0.00%|    def stripped_value(self):
   246|         2|  6.67572e-06|  3.33786e-06|  0.00%|        for token in self:
   247|         2|  6.67572e-06|  3.33786e-06|  0.00%|            if token.token_type == 'bare-quoted-string':
   248|         2|  1.64509e-05|  8.22544e-06|  0.01%|                return token.value
(call)|         2|  6.12736e-05|  3.06368e-05|  0.03%|# /usr/lib/python3.10/email/_header_value_parser.py:258 value
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|class BareQuotedString(QuotedString):
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|    token_type = 'bare-quoted-string'
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|    def __str__(self):
   256|         0|            0|            0|  0.00%|        return quote_string(''.join(str(x) for x in self))
   257|         0|            0|            0|  0.00%|
   258|         2|  5.96046e-06|  2.98023e-06|  0.00%|    @property
   259|         0|            0|            0|  0.00%|    def value(self):
   260|        10|  5.53131e-05|  5.53131e-06|  0.02%|        return ''.join(str(x) for x in self)
(call)|         4|  2.67029e-05|  6.67572e-06|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:260 <genexpr>
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|class Comment(WhiteSpaceTokenList):
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|    token_type = 'comment'
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|    def __str__(self):
   268|         0|            0|            0|  0.00%|        return ''.join(sum([
   269|         0|            0|            0|  0.00%|                            ["("],
   270|         0|            0|            0|  0.00%|                            [self.quote(x) for x in self],
   271|         0|            0|            0|  0.00%|                            [")"],
   272|         0|            0|            0|  0.00%|                            ], []))
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|    def quote(self, value):
   275|         0|            0|            0|  0.00%|        if value.token_type == 'comment':
   276|         0|            0|            0|  0.00%|            return str(value)
   277|         0|            0|            0|  0.00%|        return str(value).replace('\\', '\\\\').replace(
   278|         0|            0|            0|  0.00%|                                  '(', r'\(').replace(
   279|         0|            0|            0|  0.00%|                                  ')', r'\)')
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|    @property
   282|         0|            0|            0|  0.00%|    def content(self):
   283|         0|            0|            0|  0.00%|        return ''.join(str(x) for x in self)
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|    @property
   286|         0|            0|            0|  0.00%|    def comments(self):
   287|         0|            0|            0|  0.00%|        return [self.content]
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|class AddressList(TokenList):
   290|         0|            0|            0|  0.00%|
   291|         0|            0|            0|  0.00%|    token_type = 'address-list'
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    @property
   294|         0|            0|            0|  0.00%|    def addresses(self):
   295|         0|            0|            0|  0.00%|        return [x for x in self if x.token_type=='address']
   296|         0|            0|            0|  0.00%|
   297|         0|            0|            0|  0.00%|    @property
   298|         0|            0|            0|  0.00%|    def mailboxes(self):
   299|         0|            0|            0|  0.00%|        return sum((x.mailboxes
   300|         0|            0|            0|  0.00%|                    for x in self if x.token_type=='address'), [])
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    @property
   303|         0|            0|            0|  0.00%|    def all_mailboxes(self):
   304|         0|            0|            0|  0.00%|        return sum((x.all_mailboxes
   305|         0|            0|            0|  0.00%|                    for x in self if x.token_type=='address'), [])
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|
   308|         0|            0|            0|  0.00%|class Address(TokenList):
   309|         0|            0|            0|  0.00%|
   310|         0|            0|            0|  0.00%|    token_type = 'address'
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|    @property
   313|         0|            0|            0|  0.00%|    def display_name(self):
   314|         0|            0|            0|  0.00%|        if self[0].token_type == 'group':
   315|         0|            0|            0|  0.00%|            return self[0].display_name
   316|         0|            0|            0|  0.00%|
   317|         0|            0|            0|  0.00%|    @property
   318|         0|            0|            0|  0.00%|    def mailboxes(self):
   319|         0|            0|            0|  0.00%|        if self[0].token_type == 'mailbox':
   320|         0|            0|            0|  0.00%|            return [self[0]]
   321|         0|            0|            0|  0.00%|        elif self[0].token_type == 'invalid-mailbox':
   322|         0|            0|            0|  0.00%|            return []
   323|         0|            0|            0|  0.00%|        return self[0].mailboxes
   324|         0|            0|            0|  0.00%|
   325|         0|            0|            0|  0.00%|    @property
   326|         0|            0|            0|  0.00%|    def all_mailboxes(self):
   327|         0|            0|            0|  0.00%|        if self[0].token_type == 'mailbox':
   328|         0|            0|            0|  0.00%|            return [self[0]]
   329|         0|            0|            0|  0.00%|        elif self[0].token_type == 'invalid-mailbox':
   330|         0|            0|            0|  0.00%|            return [self[0]]
   331|         0|            0|            0|  0.00%|        return self[0].all_mailboxes
   332|         0|            0|            0|  0.00%|
   333|         0|            0|            0|  0.00%|class MailboxList(TokenList):
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|    token_type = 'mailbox-list'
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|    @property
   338|         0|            0|            0|  0.00%|    def mailboxes(self):
   339|         0|            0|            0|  0.00%|        return [x for x in self if x.token_type=='mailbox']
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|    @property
   342|         0|            0|            0|  0.00%|    def all_mailboxes(self):
   343|         0|            0|            0|  0.00%|        return [x for x in self
   344|         0|            0|            0|  0.00%|            if x.token_type in ('mailbox', 'invalid-mailbox')]
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|class GroupList(TokenList):
   348|         0|            0|            0|  0.00%|
   349|         0|            0|            0|  0.00%|    token_type = 'group-list'
   350|         0|            0|            0|  0.00%|
   351|         0|            0|            0|  0.00%|    @property
   352|         0|            0|            0|  0.00%|    def mailboxes(self):
   353|         0|            0|            0|  0.00%|        if not self or self[0].token_type != 'mailbox-list':
   354|         0|            0|            0|  0.00%|            return []
   355|         0|            0|            0|  0.00%|        return self[0].mailboxes
   356|         0|            0|            0|  0.00%|
   357|         0|            0|            0|  0.00%|    @property
   358|         0|            0|            0|  0.00%|    def all_mailboxes(self):
   359|         0|            0|            0|  0.00%|        if not self or self[0].token_type != 'mailbox-list':
   360|         0|            0|            0|  0.00%|            return []
   361|         0|            0|            0|  0.00%|        return self[0].all_mailboxes
   362|         0|            0|            0|  0.00%|
   363|         0|            0|            0|  0.00%|
   364|         0|            0|            0|  0.00%|class Group(TokenList):
   365|         0|            0|            0|  0.00%|
   366|         0|            0|            0|  0.00%|    token_type = "group"
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|    @property
   369|         0|            0|            0|  0.00%|    def mailboxes(self):
   370|         0|            0|            0|  0.00%|        if self[2].token_type != 'group-list':
   371|         0|            0|            0|  0.00%|            return []
   372|         0|            0|            0|  0.00%|        return self[2].mailboxes
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|    @property
   375|         0|            0|            0|  0.00%|    def all_mailboxes(self):
   376|         0|            0|            0|  0.00%|        if self[2].token_type != 'group-list':
   377|         0|            0|            0|  0.00%|            return []
   378|         0|            0|            0|  0.00%|        return self[2].all_mailboxes
   379|         0|            0|            0|  0.00%|
   380|         0|            0|            0|  0.00%|    @property
   381|         0|            0|            0|  0.00%|    def display_name(self):
   382|         0|            0|            0|  0.00%|        return self[0].display_name
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|class NameAddr(TokenList):
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|    token_type = 'name-addr'
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    @property
   390|         0|            0|            0|  0.00%|    def display_name(self):
   391|         0|            0|            0|  0.00%|        if len(self) == 1:
   392|         0|            0|            0|  0.00%|            return None
   393|         0|            0|            0|  0.00%|        return self[0].display_name
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|    @property
   396|         0|            0|            0|  0.00%|    def local_part(self):
   397|         0|            0|            0|  0.00%|        return self[-1].local_part
   398|         0|            0|            0|  0.00%|
   399|         0|            0|            0|  0.00%|    @property
   400|         0|            0|            0|  0.00%|    def domain(self):
   401|         0|            0|            0|  0.00%|        return self[-1].domain
   402|         0|            0|            0|  0.00%|
   403|         0|            0|            0|  0.00%|    @property
   404|         0|            0|            0|  0.00%|    def route(self):
   405|         0|            0|            0|  0.00%|        return self[-1].route
   406|         0|            0|            0|  0.00%|
   407|         0|            0|            0|  0.00%|    @property
   408|         0|            0|            0|  0.00%|    def addr_spec(self):
   409|         0|            0|            0|  0.00%|        return self[-1].addr_spec
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|
   412|         0|            0|            0|  0.00%|class AngleAddr(TokenList):
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|    token_type = 'angle-addr'
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|    @property
   417|         0|            0|            0|  0.00%|    def local_part(self):
   418|         0|            0|            0|  0.00%|        for x in self:
   419|         0|            0|            0|  0.00%|            if x.token_type == 'addr-spec':
   420|         0|            0|            0|  0.00%|                return x.local_part
   421|         0|            0|            0|  0.00%|
   422|         0|            0|            0|  0.00%|    @property
   423|         0|            0|            0|  0.00%|    def domain(self):
   424|         0|            0|            0|  0.00%|        for x in self:
   425|         0|            0|            0|  0.00%|            if x.token_type == 'addr-spec':
   426|         0|            0|            0|  0.00%|                return x.domain
   427|         0|            0|            0|  0.00%|
   428|         0|            0|            0|  0.00%|    @property
   429|         0|            0|            0|  0.00%|    def route(self):
   430|         0|            0|            0|  0.00%|        for x in self:
   431|         0|            0|            0|  0.00%|            if x.token_type == 'obs-route':
   432|         0|            0|            0|  0.00%|                return x.domains
   433|         0|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|    @property
   435|         0|            0|            0|  0.00%|    def addr_spec(self):
   436|         0|            0|            0|  0.00%|        for x in self:
   437|         0|            0|            0|  0.00%|            if x.token_type == 'addr-spec':
   438|         0|            0|            0|  0.00%|                if x.local_part:
   439|         0|            0|            0|  0.00%|                    return x.addr_spec
   440|         0|            0|            0|  0.00%|                else:
   441|         0|            0|            0|  0.00%|                    return quote_string(x.local_part) + x.addr_spec
   442|         0|            0|            0|  0.00%|        else:
   443|         0|            0|            0|  0.00%|            return '<>'
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|class ObsRoute(TokenList):
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|    token_type = 'obs-route'
   449|         0|            0|            0|  0.00%|
   450|         0|            0|            0|  0.00%|    @property
   451|         0|            0|            0|  0.00%|    def domains(self):
   452|         0|            0|            0|  0.00%|        return [x.domain for x in self if x.token_type == 'domain']
   453|         0|            0|            0|  0.00%|
   454|         0|            0|            0|  0.00%|
   455|         0|            0|            0|  0.00%|class Mailbox(TokenList):
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|    token_type = 'mailbox'
   458|         0|            0|            0|  0.00%|
   459|         0|            0|            0|  0.00%|    @property
   460|         0|            0|            0|  0.00%|    def display_name(self):
   461|         0|            0|            0|  0.00%|        if self[0].token_type == 'name-addr':
   462|         0|            0|            0|  0.00%|            return self[0].display_name
   463|         0|            0|            0|  0.00%|
   464|         0|            0|            0|  0.00%|    @property
   465|         0|            0|            0|  0.00%|    def local_part(self):
   466|         0|            0|            0|  0.00%|        return self[0].local_part
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|    @property
   469|         0|            0|            0|  0.00%|    def domain(self):
   470|         0|            0|            0|  0.00%|        return self[0].domain
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|    @property
   473|         0|            0|            0|  0.00%|    def route(self):
   474|         0|            0|            0|  0.00%|        if self[0].token_type == 'name-addr':
   475|         0|            0|            0|  0.00%|            return self[0].route
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|    @property
   478|         0|            0|            0|  0.00%|    def addr_spec(self):
   479|         0|            0|            0|  0.00%|        return self[0].addr_spec
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|class InvalidMailbox(TokenList):
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|    token_type = 'invalid-mailbox'
   485|         0|            0|            0|  0.00%|
   486|         0|            0|            0|  0.00%|    @property
   487|         0|            0|            0|  0.00%|    def display_name(self):
   488|         0|            0|            0|  0.00%|        return None
   489|         0|            0|            0|  0.00%|
   490|         0|            0|            0|  0.00%|    local_part = domain = route = addr_spec = display_name
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|
   493|         0|            0|            0|  0.00%|class Domain(TokenList):
   494|         0|            0|            0|  0.00%|
   495|         0|            0|            0|  0.00%|    token_type = 'domain'
   496|         0|            0|            0|  0.00%|    as_ew_allowed = False
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|    @property
   499|         0|            0|            0|  0.00%|    def domain(self):
   500|         0|            0|            0|  0.00%|        return ''.join(super().value.split())
   501|         0|            0|            0|  0.00%|
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|class DotAtom(TokenList):
   504|         0|            0|            0|  0.00%|    token_type = 'dot-atom'
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|class DotAtomText(TokenList):
   508|         0|            0|            0|  0.00%|    token_type = 'dot-atom-text'
   509|         0|            0|            0|  0.00%|    as_ew_allowed = True
   510|         0|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|
   512|         0|            0|            0|  0.00%|class NoFoldLiteral(TokenList):
   513|         0|            0|            0|  0.00%|    token_type = 'no-fold-literal'
   514|         0|            0|            0|  0.00%|    as_ew_allowed = False
   515|         0|            0|            0|  0.00%|
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|class AddrSpec(TokenList):
   518|         0|            0|            0|  0.00%|
   519|         0|            0|            0|  0.00%|    token_type = 'addr-spec'
   520|         0|            0|            0|  0.00%|    as_ew_allowed = False
   521|         0|            0|            0|  0.00%|
   522|         0|            0|            0|  0.00%|    @property
   523|         0|            0|            0|  0.00%|    def local_part(self):
   524|         0|            0|            0|  0.00%|        return self[0].local_part
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|    @property
   527|         0|            0|            0|  0.00%|    def domain(self):
   528|         0|            0|            0|  0.00%|        if len(self) < 3:
   529|         0|            0|            0|  0.00%|            return None
   530|         0|            0|            0|  0.00%|        return self[-1].domain
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|    @property
   533|         0|            0|            0|  0.00%|    def value(self):
   534|         0|            0|            0|  0.00%|        if len(self) < 3:
   535|         0|            0|            0|  0.00%|            return self[0].value
   536|         0|            0|            0|  0.00%|        return self[0].value.rstrip()+self[1].value+self[2].value.lstrip()
   537|         0|            0|            0|  0.00%|
   538|         0|            0|            0|  0.00%|    @property
   539|         0|            0|            0|  0.00%|    def addr_spec(self):
   540|         0|            0|            0|  0.00%|        nameset = set(self.local_part)
   541|         0|            0|            0|  0.00%|        if len(nameset) > len(nameset-DOT_ATOM_ENDS):
   542|         0|            0|            0|  0.00%|            lp = quote_string(self.local_part)
   543|         0|            0|            0|  0.00%|        else:
   544|         0|            0|            0|  0.00%|            lp = self.local_part
   545|         0|            0|            0|  0.00%|        if self.domain is not None:
   546|         0|            0|            0|  0.00%|            return lp + '@' + self.domain
   547|         0|            0|            0|  0.00%|        return lp
   548|         0|            0|            0|  0.00%|
   549|         0|            0|            0|  0.00%|
   550|         0|            0|            0|  0.00%|class ObsLocalPart(TokenList):
   551|         0|            0|            0|  0.00%|
   552|         0|            0|            0|  0.00%|    token_type = 'obs-local-part'
   553|         0|            0|            0|  0.00%|    as_ew_allowed = False
   554|         0|            0|            0|  0.00%|
   555|         0|            0|            0|  0.00%|
   556|         0|            0|            0|  0.00%|class DisplayName(Phrase):
   557|         0|            0|            0|  0.00%|
   558|         0|            0|            0|  0.00%|    token_type = 'display-name'
   559|         0|            0|            0|  0.00%|    ew_combine_allowed = False
   560|         0|            0|            0|  0.00%|
   561|         0|            0|            0|  0.00%|    @property
   562|         0|            0|            0|  0.00%|    def display_name(self):
   563|         0|            0|            0|  0.00%|        res = TokenList(self)
   564|         0|            0|            0|  0.00%|        if len(res) == 0:
   565|         0|            0|            0|  0.00%|            return res.value
   566|         0|            0|            0|  0.00%|        if res[0].token_type == 'cfws':
   567|         0|            0|            0|  0.00%|            res.pop(0)
   568|         0|            0|            0|  0.00%|        else:
   569|         0|            0|            0|  0.00%|            if res[0][0].token_type == 'cfws':
   570|         0|            0|            0|  0.00%|                res[0] = TokenList(res[0][1:])
   571|         0|            0|            0|  0.00%|        if res[-1].token_type == 'cfws':
   572|         0|            0|            0|  0.00%|            res.pop()
   573|         0|            0|            0|  0.00%|        else:
   574|         0|            0|            0|  0.00%|            if res[-1][-1].token_type == 'cfws':
   575|         0|            0|            0|  0.00%|                res[-1] = TokenList(res[-1][:-1])
   576|         0|            0|            0|  0.00%|        return res.value
   577|         0|            0|            0|  0.00%|
   578|         0|            0|            0|  0.00%|    @property
   579|         0|            0|            0|  0.00%|    def value(self):
   580|         0|            0|            0|  0.00%|        quote = False
   581|         0|            0|            0|  0.00%|        if self.defects:
   582|         0|            0|            0|  0.00%|            quote = True
   583|         0|            0|            0|  0.00%|        else:
   584|         0|            0|            0|  0.00%|            for x in self:
   585|         0|            0|            0|  0.00%|                if x.token_type == 'quoted-string':
   586|         0|            0|            0|  0.00%|                    quote = True
   587|         0|            0|            0|  0.00%|        if len(self) != 0 and quote:
   588|         0|            0|            0|  0.00%|            pre = post = ''
   589|         0|            0|            0|  0.00%|            if self[0].token_type=='cfws' or self[0][0].token_type=='cfws':
   590|         0|            0|            0|  0.00%|                pre = ' '
   591|         0|            0|            0|  0.00%|            if self[-1].token_type=='cfws' or self[-1][-1].token_type=='cfws':
   592|         0|            0|            0|  0.00%|                post = ' '
   593|         0|            0|            0|  0.00%|            return pre+quote_string(self.display_name)+post
   594|         0|            0|            0|  0.00%|        else:
   595|         0|            0|            0|  0.00%|            return super().value
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|
   598|         0|            0|            0|  0.00%|class LocalPart(TokenList):
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|    token_type = 'local-part'
   601|         0|            0|            0|  0.00%|    as_ew_allowed = False
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|    @property
   604|         0|            0|            0|  0.00%|    def value(self):
   605|         0|            0|            0|  0.00%|        if self[0].token_type == "quoted-string":
   606|         0|            0|            0|  0.00%|            return self[0].quoted_value
   607|         0|            0|            0|  0.00%|        else:
   608|         0|            0|            0|  0.00%|            return self[0].value
   609|         0|            0|            0|  0.00%|
   610|         0|            0|            0|  0.00%|    @property
   611|         0|            0|            0|  0.00%|    def local_part(self):
   612|         0|            0|            0|  0.00%|        # Strip whitespace from front, back, and around dots.
   613|         0|            0|            0|  0.00%|        res = [DOT]
   614|         0|            0|            0|  0.00%|        last = DOT
   615|         0|            0|            0|  0.00%|        last_is_tl = False
   616|         0|            0|            0|  0.00%|        for tok in self[0] + [DOT]:
   617|         0|            0|            0|  0.00%|            if tok.token_type == 'cfws':
   618|         0|            0|            0|  0.00%|                continue
   619|         0|            0|            0|  0.00%|            if (last_is_tl and tok.token_type == 'dot' and
   620|         0|            0|            0|  0.00%|                    last[-1].token_type == 'cfws'):
   621|         0|            0|            0|  0.00%|                res[-1] = TokenList(last[:-1])
   622|         0|            0|            0|  0.00%|            is_tl = isinstance(tok, TokenList)
   623|         0|            0|            0|  0.00%|            if (is_tl and last.token_type == 'dot' and
   624|         0|            0|            0|  0.00%|                    tok[0].token_type == 'cfws'):
   625|         0|            0|            0|  0.00%|                res.append(TokenList(tok[1:]))
   626|         0|            0|            0|  0.00%|            else:
   627|         0|            0|            0|  0.00%|                res.append(tok)
   628|         0|            0|            0|  0.00%|            last = res[-1]
   629|         0|            0|            0|  0.00%|            last_is_tl = is_tl
   630|         0|            0|            0|  0.00%|        res = TokenList(res[1:-1])
   631|         0|            0|            0|  0.00%|        return res.value
   632|         0|            0|            0|  0.00%|
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|class DomainLiteral(TokenList):
   635|         0|            0|            0|  0.00%|
   636|         0|            0|            0|  0.00%|    token_type = 'domain-literal'
   637|         0|            0|            0|  0.00%|    as_ew_allowed = False
   638|         0|            0|            0|  0.00%|
   639|         0|            0|            0|  0.00%|    @property
   640|         0|            0|            0|  0.00%|    def domain(self):
   641|         0|            0|            0|  0.00%|        return ''.join(super().value.split())
   642|         0|            0|            0|  0.00%|
   643|         0|            0|            0|  0.00%|    @property
   644|         0|            0|            0|  0.00%|    def ip(self):
   645|         0|            0|            0|  0.00%|        for x in self:
   646|         0|            0|            0|  0.00%|            if x.token_type == 'ptext':
   647|         0|            0|            0|  0.00%|                return x.value
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|class MIMEVersion(TokenList):
   651|         0|            0|            0|  0.00%|
   652|         0|            0|            0|  0.00%|    token_type = 'mime-version'
   653|         0|            0|            0|  0.00%|    major = None
   654|         0|            0|            0|  0.00%|    minor = None
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|
   657|         0|            0|            0|  0.00%|class Parameter(TokenList):
   658|         0|            0|            0|  0.00%|
   659|         0|            0|            0|  0.00%|    token_type = 'parameter'
   660|         0|            0|            0|  0.00%|    sectioned = False
   661|         0|            0|            0|  0.00%|    extended = False
   662|         0|            0|            0|  0.00%|    charset = 'us-ascii'
   663|         0|            0|            0|  0.00%|
   664|         2|   6.4373e-06|  3.21865e-06|  0.00%|    @property
   665|         0|            0|            0|  0.00%|    def section_number(self):
   666|         0|            0|            0|  0.00%|        # Because the first token, the attribute (name) eats CFWS, the second
   667|         0|            0|            0|  0.00%|        # token is always the section if there is one.
   668|         2|  6.91414e-06|  3.45707e-06|  0.00%|        return self[1].number if self.sectioned else 0
   669|         0|            0|            0|  0.00%|
   670|         2|  6.67572e-06|  3.33786e-06|  0.00%|    @property
   671|         0|            0|            0|  0.00%|    def param_value(self):
   672|         0|            0|            0|  0.00%|        # This is part of the "handle quoted extended parameters" hack.
   673|         6|  1.85966e-05|  3.09944e-06|  0.01%|        for token in self:
   674|         6|  1.83582e-05|  3.05971e-06|  0.01%|            if token.token_type == 'value':
   675|         2|  3.09944e-05|  1.54972e-05|  0.01%|                return token.stripped_value
(call)|         2|  0.000186682|  9.33409e-05|  0.08%|# /usr/lib/python3.10/email/_header_value_parser.py:710 stripped_value
   676|         4|   1.3113e-05|  3.27826e-06|  0.01%|            if token.token_type == 'quoted-string':
   677|         0|            0|            0|  0.00%|                for token in token:
   678|         0|            0|            0|  0.00%|                    if token.token_type == 'bare-quoted-string':
   679|         0|            0|            0|  0.00%|                        for token in token:
   680|         0|            0|            0|  0.00%|                            if token.token_type == 'value':
   681|         0|            0|            0|  0.00%|                                return token.stripped_value
   682|         0|            0|            0|  0.00%|        return ''
   683|         0|            0|            0|  0.00%|
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|class InvalidParameter(Parameter):
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|    token_type = 'invalid-parameter'
   688|         0|            0|            0|  0.00%|
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|class Attribute(TokenList):
   691|         0|            0|            0|  0.00%|
   692|         0|            0|            0|  0.00%|    token_type = 'attribute'
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    @property
   695|         0|            0|            0|  0.00%|    def stripped_value(self):
   696|         0|            0|            0|  0.00%|        for token in self:
   697|         0|            0|            0|  0.00%|            if token.token_type.endswith('attrtext'):
   698|         0|            0|            0|  0.00%|                return token.value
   699|         0|            0|            0|  0.00%|
   700|         0|            0|            0|  0.00%|class Section(TokenList):
   701|         0|            0|            0|  0.00%|
   702|         0|            0|            0|  0.00%|    token_type = 'section'
   703|         0|            0|            0|  0.00%|    number = None
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|
   706|         0|            0|            0|  0.00%|class Value(TokenList):
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|    token_type = 'value'
   709|         0|            0|            0|  0.00%|
   710|         2|   6.4373e-06|  3.21865e-06|  0.00%|    @property
   711|         0|            0|            0|  0.00%|    def stripped_value(self):
   712|         2|  3.69549e-05|  1.84774e-05|  0.02%|        token = self[0]
   713|         2|  7.39098e-06|  3.69549e-06|  0.00%|        if token.token_type == 'cfws':
   714|         0|            0|            0|  0.00%|            token = self[1]
   715|         4|  1.52588e-05|   3.8147e-06|  0.01%|        if token.token_type.endswith(
   716|         2|  6.67572e-06|  3.33786e-06|  0.00%|                ('quoted-string', 'attribute', 'extended-attribute')):
   717|         2|  1.71661e-05|  8.58307e-06|  0.01%|            return token.stripped_value
(call)|         2|  9.67979e-05|   4.8399e-05|  0.04%|# /usr/lib/python3.10/email/_header_value_parser.py:244 stripped_value
   718|         0|            0|            0|  0.00%|        return self.value
   719|         0|            0|            0|  0.00%|
   720|         0|            0|            0|  0.00%|
   721|         0|            0|            0|  0.00%|class MimeParameters(TokenList):
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|    token_type = 'mime-parameters'
   724|         0|            0|            0|  0.00%|    syntactic_break = False
   725|         0|            0|            0|  0.00%|
   726|         3|  1.71661e-05|  5.72205e-06|  0.01%|    @property
   727|         0|            0|            0|  0.00%|    def params(self):
   728|         0|            0|            0|  0.00%|        # The RFC specifically states that the ordering of parameters is not
   729|         0|            0|            0|  0.00%|        # guaranteed and may be reordered by the transport layer.  So we have
   730|         0|            0|            0|  0.00%|        # to assume the RFC 2231 pieces can come in any order.  However, we
   731|         0|            0|            0|  0.00%|        # output them in the order that we first see a given name, which gives
   732|         0|            0|            0|  0.00%|        # us a stable __str__.
   733|         2|  8.58307e-06|  4.29153e-06|  0.00%|        params = {}  # Using order preserving dict from Python 3.7+
   734|         4|  1.71661e-05|  4.29153e-06|  0.01%|        for token in self:
   735|         2|  1.14441e-05|  5.72205e-06|  0.00%|            if not token.token_type.endswith('parameter'):
   736|         0|            0|            0|  0.00%|                continue
   737|         2|  1.00136e-05|  5.00679e-06|  0.00%|            if token[0].token_type != 'attribute':
   738|         0|            0|            0|  0.00%|                continue
   739|         2|  2.02656e-05|  1.01328e-05|  0.01%|            name = token[0].value.strip()
(call)|         2|   0.00016284|  8.14199e-05|  0.07%|# /usr/lib/python3.10/email/_header_value_parser.py:132 value
   740|         2|  9.77516e-06|  4.88758e-06|  0.00%|            if name not in params:
   741|         2|  8.82149e-06|  4.41074e-06|  0.00%|                params[name] = []
   742|         2|   2.0504e-05|   1.0252e-05|  0.01%|            params[name].append((token.section_number, token))
(call)|         2|  1.33514e-05|  6.67572e-06|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:664 section_number
   743|         4|   1.7643e-05|  4.41074e-06|  0.01%|        for name, parts in params.items():
   744|         2|  1.26362e-05|  6.31809e-06|  0.01%|            parts = sorted(parts, key=itemgetter(0))
   745|         2|   1.0252e-05|    5.126e-06|  0.00%|            first_param = parts[0][1]
   746|         2|  8.82149e-06|  4.41074e-06|  0.00%|            charset = first_param.charset
   747|         0|            0|            0|  0.00%|            # Our arbitrary error recovery is to ignore duplicate parameters,
   748|         0|            0|            0|  0.00%|            # to use appearance order if there are duplicate rfc 2231 parts,
   749|         0|            0|            0|  0.00%|            # and to ignore gaps.  This mimics the error recovery of get_param.
   750|         2|  1.00136e-05|  5.00679e-06|  0.00%|            if not first_param.extended and len(parts) > 1:
   751|         0|            0|            0|  0.00%|                if parts[1][0] == 0:
   752|         0|            0|            0|  0.00%|                    parts[1][1].defects.append(errors.InvalidHeaderDefect(
   753|         0|            0|            0|  0.00%|                        'duplicate parameter name; duplicate(s) ignored'))
   754|         0|            0|            0|  0.00%|                    parts = parts[:1]
   755|         0|            0|            0|  0.00%|                # Else assume the *0* was missing...note that this is different
   756|         0|            0|            0|  0.00%|                # from get_param, but we registered a defect for this earlier.
   757|         2|  8.34465e-06|  4.17233e-06|  0.00%|            value_parts = []
   758|         2|  8.58307e-06|  4.29153e-06|  0.00%|            i = 0
   759|         4|  1.54972e-05|   3.8743e-06|  0.01%|            for section_number, param in parts:
   760|         2|  7.62939e-06|   3.8147e-06|  0.00%|                if section_number != i:
   761|         0|            0|            0|  0.00%|                    # We could get fancier here and look for a complete
   762|         0|            0|            0|  0.00%|                    # duplicate extended parameter and ignore the second one
   763|         0|            0|            0|  0.00%|                    # seen.  But we're not doing that.  The old code didn't.
   764|         0|            0|            0|  0.00%|                    if not param.extended:
   765|         0|            0|            0|  0.00%|                        param.defects.append(errors.InvalidHeaderDefect(
   766|         0|            0|            0|  0.00%|                            'duplicate parameter name; duplicate ignored'))
   767|         0|            0|            0|  0.00%|                        continue
   768|         0|            0|            0|  0.00%|                    else:
   769|         0|            0|            0|  0.00%|                        param.defects.append(errors.InvalidHeaderDefect(
   770|         0|            0|            0|  0.00%|                            "inconsistent RFC2231 parameter numbering"))
   771|         2|  7.62939e-06|   3.8147e-06|  0.00%|                i += 1
   772|         2|  1.85966e-05|  9.29832e-06|  0.01%|                value = param.param_value
(call)|         2|   0.00027442|   0.00013721|  0.11%|# /usr/lib/python3.10/email/_header_value_parser.py:670 param_value
   773|         2|  8.82149e-06|  4.41074e-06|  0.00%|                if param.extended:
   774|         0|            0|            0|  0.00%|                    try:
   775|         0|            0|            0|  0.00%|                        value = urllib.parse.unquote_to_bytes(value)
   776|         0|            0|            0|  0.00%|                    except UnicodeEncodeError:
   777|         0|            0|            0|  0.00%|                        # source had surrogate escaped bytes.  What we do now
   778|         0|            0|            0|  0.00%|                        # is a bit of an open question.  I'm not sure this is
   779|         0|            0|            0|  0.00%|                        # the best choice, but it is what the old algorithm did
   780|         0|            0|            0|  0.00%|                        value = urllib.parse.unquote(value, encoding='latin-1')
   781|         0|            0|            0|  0.00%|                    else:
   782|         0|            0|            0|  0.00%|                        try:
   783|         0|            0|            0|  0.00%|                            value = value.decode(charset, 'surrogateescape')
   784|         0|            0|            0|  0.00%|                        except LookupError:
   785|         0|            0|            0|  0.00%|                            # XXX: there should really be a custom defect for
   786|         0|            0|            0|  0.00%|                            # unknown character set to make it easy to find,
   787|         0|            0|            0|  0.00%|                            # because otherwise unknown charset is a silent
   788|         0|            0|            0|  0.00%|                            # failure.
   789|         0|            0|            0|  0.00%|                            value = value.decode('us-ascii', 'surrogateescape')
   790|         0|            0|            0|  0.00%|                        if utils._has_surrogates(value):
   791|         0|            0|            0|  0.00%|                            param.defects.append(errors.UndecodableBytesDefect())
   792|         2|  7.39098e-06|  3.69549e-06|  0.00%|                value_parts.append(value)
   793|         2|  7.15256e-06|  3.57628e-06|  0.00%|            value = ''.join(value_parts)
   794|         4|  1.33514e-05|  3.33786e-06|  0.01%|            yield name, value
   795|         0|            0|            0|  0.00%|
   796|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def __str__(self):
   797|         1|  4.05312e-06|  4.05312e-06|  0.00%|        params = []
   798|         2|  2.38419e-05|  1.19209e-05|  0.01%|        for name, value in self.params:
(call)|         2|  0.000409365|  0.000204682|  0.17%|# /usr/lib/python3.10/email/_header_value_parser.py:726 params
   799|         1|  3.57628e-06|  3.57628e-06|  0.00%|            if value:
   800|         1|  1.14441e-05|  1.14441e-05|  0.00%|                params.append('{}={}'.format(name, quote_string(value)))
(call)|         1|  9.53674e-06|  9.53674e-06|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:96 quote_string
   801|         0|            0|            0|  0.00%|            else:
   802|         0|            0|            0|  0.00%|                params.append(name)
   803|         1|   3.8147e-06|   3.8147e-06|  0.00%|        params = '; '.join(params)
   804|         1|  4.52995e-06|  4.52995e-06|  0.00%|        return ' ' + params if params else ''
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|
   807|         0|            0|            0|  0.00%|class ParameterizedHeaderValue(TokenList):
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|    # Set this false so that the value doesn't wind up on a new line even
   810|         0|            0|            0|  0.00%|    # if it and the parameters would fit there but not on the first line.
   811|         0|            0|            0|  0.00%|    syntactic_break = False
   812|         0|            0|            0|  0.00%|
   813|         4|  1.35899e-05|  3.39746e-06|  0.01%|    @property
   814|         0|            0|            0|  0.00%|    def params(self):
   815|        10|  3.50475e-05|  3.50475e-06|  0.01%|        for token in reversed(self):
   816|         8|  2.64645e-05|  3.30806e-06|  0.01%|            if token.token_type == 'mime-parameters':
   817|         2|  6.19888e-06|  3.09944e-06|  0.00%|                return token.params
   818|         2|  6.19888e-06|  3.09944e-06|  0.00%|        return {}
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|
   821|         0|            0|            0|  0.00%|class ContentType(ParameterizedHeaderValue):
   822|         0|            0|            0|  0.00%|    token_type = 'content-type'
   823|         0|            0|            0|  0.00%|    as_ew_allowed = False
   824|         0|            0|            0|  0.00%|    maintype = 'text'
   825|         0|            0|            0|  0.00%|    subtype = 'plain'
   826|         0|            0|            0|  0.00%|
   827|         0|            0|            0|  0.00%|
   828|         0|            0|            0|  0.00%|class ContentDisposition(ParameterizedHeaderValue):
   829|         0|            0|            0|  0.00%|    token_type = 'content-disposition'
   830|         0|            0|            0|  0.00%|    as_ew_allowed = False
   831|         0|            0|            0|  0.00%|    content_disposition = None
   832|         0|            0|            0|  0.00%|
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|class ContentTransferEncoding(TokenList):
   835|         0|            0|            0|  0.00%|    token_type = 'content-transfer-encoding'
   836|         0|            0|            0|  0.00%|    as_ew_allowed = False
   837|         0|            0|            0|  0.00%|    cte = '7bit'
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|
   840|         0|            0|            0|  0.00%|class HeaderLabel(TokenList):
   841|         0|            0|            0|  0.00%|    token_type = 'header-label'
   842|         0|            0|            0|  0.00%|    as_ew_allowed = False
   843|         0|            0|            0|  0.00%|
   844|         0|            0|            0|  0.00%|
   845|         0|            0|            0|  0.00%|class MsgID(TokenList):
   846|         0|            0|            0|  0.00%|    token_type = 'msg-id'
   847|         0|            0|            0|  0.00%|    as_ew_allowed = False
   848|         0|            0|            0|  0.00%|
   849|         0|            0|            0|  0.00%|    def fold(self, policy):
   850|         0|            0|            0|  0.00%|        # message-id tokens may not be folded.
   851|         0|            0|            0|  0.00%|        return str(self) + policy.linesep
   852|         0|            0|            0|  0.00%|
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|class MessageID(MsgID):
   855|         0|            0|            0|  0.00%|    token_type = 'message-id'
   856|         0|            0|            0|  0.00%|
   857|         0|            0|            0|  0.00%|
   858|         0|            0|            0|  0.00%|class InvalidMessageID(MessageID):
   859|         0|            0|            0|  0.00%|    token_type = 'invalid-message-id'
   860|         0|            0|            0|  0.00%|
   861|         0|            0|            0|  0.00%|
   862|         0|            0|            0|  0.00%|class Header(TokenList):
   863|         0|            0|            0|  0.00%|    token_type = 'header'
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|
   866|         0|            0|            0|  0.00%|#
   867|         0|            0|            0|  0.00%|# Terminal classes and instances
   868|         0|            0|            0|  0.00%|#
   869|         0|            0|            0|  0.00%|
   870|         0|            0|            0|  0.00%|class Terminal(str):
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|    as_ew_allowed = True
   873|         0|            0|            0|  0.00%|    ew_combine_allowed = True
   874|         0|            0|            0|  0.00%|    syntactic_break = True
   875|         0|            0|            0|  0.00%|
   876|        22|  7.27177e-05|  3.30535e-06|  0.03%|    def __new__(cls, value, token_type):
   877|        22|   8.7738e-05|  3.98809e-06|  0.04%|        self = super().__new__(cls, value)
   878|        22|  7.12872e-05|  3.24033e-06|  0.03%|        self.token_type = token_type
   879|        22|  7.31945e-05|  3.32702e-06|  0.03%|        self.defects = []
   880|        22|  6.77109e-05|  3.07777e-06|  0.03%|        return self
   881|         0|            0|            0|  0.00%|
   882|         0|            0|            0|  0.00%|    def __repr__(self):
   883|         0|            0|            0|  0.00%|        return "{}({})".format(self.__class__.__name__, super().__repr__())
   884|         0|            0|            0|  0.00%|
   885|         0|            0|            0|  0.00%|    def pprint(self):
   886|         0|            0|            0|  0.00%|        print(self.__class__.__name__ + '/' + self.token_type)
   887|         0|            0|            0|  0.00%|
   888|        15|  3.98159e-05|  2.65439e-06|  0.02%|    @property
   889|         0|            0|            0|  0.00%|    def all_defects(self):
   890|        15|  0.000114679|  7.64529e-06|  0.05%|        return list(self.defects)
   891|         0|            0|            0|  0.00%|
   892|         0|            0|            0|  0.00%|    def _pp(self, indent=''):
   893|         0|            0|            0|  0.00%|        return ["{}{}/{}({}){}".format(
   894|         0|            0|            0|  0.00%|            indent,
   895|         0|            0|            0|  0.00%|            self.__class__.__name__,
   896|         0|            0|            0|  0.00%|            self.token_type,
   897|         0|            0|            0|  0.00%|            super().__repr__(),
   898|         0|            0|            0|  0.00%|            '' if not self.defects else ' {}'.format(self.defects),
   899|         0|            0|            0|  0.00%|            )]
   900|         0|            0|            0|  0.00%|
   901|         0|            0|            0|  0.00%|    def pop_trailing_ws(self):
   902|         0|            0|            0|  0.00%|        # This terminates the recursion.
   903|         0|            0|            0|  0.00%|        return None
   904|         0|            0|            0|  0.00%|
   905|         0|            0|            0|  0.00%|    @property
   906|         0|            0|            0|  0.00%|    def comments(self):
   907|         0|            0|            0|  0.00%|        return []
   908|         0|            0|            0|  0.00%|
   909|         0|            0|            0|  0.00%|    def __getnewargs__(self):
   910|         0|            0|            0|  0.00%|        return(str(self), self.token_type)
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|
   913|         0|            0|            0|  0.00%|class WhiteSpaceTerminal(Terminal):
   914|         0|            0|            0|  0.00%|
   915|         0|            0|            0|  0.00%|    @property
   916|         0|            0|            0|  0.00%|    def value(self):
   917|         0|            0|            0|  0.00%|        return ' '
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|    def startswith_fws(self):
   920|         0|            0|            0|  0.00%|        return True
   921|         0|            0|            0|  0.00%|
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|class ValueTerminal(Terminal):
   924|         0|            0|            0|  0.00%|
   925|        14|  3.69549e-05|  2.63963e-06|  0.02%|    @property
   926|         0|            0|            0|  0.00%|    def value(self):
   927|        14|  4.48227e-05|  3.20162e-06|  0.02%|        return self
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    def startswith_fws(self):
   930|         0|            0|            0|  0.00%|        return False
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|
   933|         0|            0|            0|  0.00%|class EWWhiteSpaceTerminal(WhiteSpaceTerminal):
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|    @property
   936|         0|            0|            0|  0.00%|    def value(self):
   937|         0|            0|            0|  0.00%|        return ''
   938|         0|            0|            0|  0.00%|
   939|         0|            0|            0|  0.00%|    def __str__(self):
   940|         0|            0|            0|  0.00%|        return ''
   941|         0|            0|            0|  0.00%|
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|class _InvalidEwError(errors.HeaderParseError):
   944|         0|            0|            0|  0.00%|    """Invalid encoded word found while parsing headers."""
   945|         0|            0|            0|  0.00%|
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|# XXX these need to become classes and used as instances so
   948|         0|            0|            0|  0.00%|# that a program can't change them in a parse tree and screw
   949|         0|            0|            0|  0.00%|# up other parse trees.  Maybe should have  tests for that, too.
   950|         0|            0|            0|  0.00%|DOT = ValueTerminal('.', 'dot')
   951|         0|            0|            0|  0.00%|ListSeparator = ValueTerminal(',', 'list-separator')
   952|         0|            0|            0|  0.00%|RouteComponentMarker = ValueTerminal('@', 'route-component-marker')
   953|         0|            0|            0|  0.00%|
   954|         0|            0|            0|  0.00%|#
   955|         0|            0|            0|  0.00%|# Parser
   956|         0|            0|            0|  0.00%|#
   957|         0|            0|            0|  0.00%|
   958|         0|            0|            0|  0.00%|# Parse strings according to RFC822/2047/2822/5322 rules.
   959|         0|            0|            0|  0.00%|#
   960|         0|            0|            0|  0.00%|# This is a stateless parser.  Each get_XXX function accepts a string and
   961|         0|            0|            0|  0.00%|# returns either a Terminal or a TokenList representing the RFC object named
   962|         0|            0|            0|  0.00%|# by the method and a string containing the remaining unparsed characters
   963|         0|            0|            0|  0.00%|# from the input.  Thus a parser method consumes the next syntactic construct
   964|         0|            0|            0|  0.00%|# of a given type and returns a token representing the construct plus the
   965|         0|            0|            0|  0.00%|# unparsed remainder of the input string.
   966|         0|            0|            0|  0.00%|#
   967|         0|            0|            0|  0.00%|# For example, if the first element of a structured header is a 'phrase',
   968|         0|            0|            0|  0.00%|# then:
   969|         0|            0|            0|  0.00%|#
   970|         0|            0|            0|  0.00%|#     phrase, value = get_phrase(value)
   971|         0|            0|            0|  0.00%|#
   972|         0|            0|            0|  0.00%|# returns the complete phrase from the start of the string value, plus any
   973|         0|            0|            0|  0.00%|# characters left in the string after the phrase is removed.
   974|         0|            0|            0|  0.00%|
   975|         0|            0|            0|  0.00%|_wsp_splitter = re.compile(r'([{}]+)'.format(''.join(WSP))).split
   976|         0|            0|            0|  0.00%|_non_atom_end_matcher = re.compile(r"[^{}]+".format(
   977|         0|            0|            0|  0.00%|    re.escape(''.join(ATOM_ENDS)))).match
   978|         0|            0|            0|  0.00%|_non_printable_finder = re.compile(r"[\x00-\x20\x7F]").findall
   979|         0|            0|            0|  0.00%|_non_token_end_matcher = re.compile(r"[^{}]+".format(
   980|         0|            0|            0|  0.00%|    re.escape(''.join(TOKEN_ENDS)))).match
   981|         0|            0|            0|  0.00%|_non_attribute_end_matcher = re.compile(r"[^{}]+".format(
   982|         0|            0|            0|  0.00%|    re.escape(''.join(ATTRIBUTE_ENDS)))).match
   983|         0|            0|            0|  0.00%|_non_extended_attribute_end_matcher = re.compile(r"[^{}]+".format(
   984|         0|            0|            0|  0.00%|    re.escape(''.join(EXTENDED_ATTRIBUTE_ENDS)))).match
   985|         0|            0|            0|  0.00%|
   986|        11|  3.48091e-05|  3.16446e-06|  0.01%|def _validate_xtext(xtext):
   987|         0|            0|            0|  0.00%|    """If input token contains ASCII non-printables, register a defect."""
   988|         0|            0|            0|  0.00%|
   989|        11|   4.3869e-05|  3.98809e-06|  0.02%|    non_printables = _non_printable_finder(xtext)
   990|        11|  3.50475e-05|  3.18614e-06|  0.01%|    if non_printables:
   991|         0|            0|            0|  0.00%|        xtext.defects.append(errors.NonPrintableDefect(non_printables))
   992|        11|  9.29832e-05|  8.45302e-06|  0.04%|    if utils._has_surrogates(xtext):
(call)|        11|   0.00014782|  1.34381e-05|  0.06%|# /usr/lib/python3.10/email/utils.py:51 _has_surrogates
   993|         0|            0|            0|  0.00%|        xtext.defects.append(errors.UndecodableBytesDefect(
   994|         0|            0|            0|  0.00%|            "Non-ASCII characters found in header token"))
   995|         0|            0|            0|  0.00%|
   996|         1|  5.00679e-06|  5.00679e-06|  0.00%|def _get_ptext_to_endchars(value, endchars):
   997|         0|            0|            0|  0.00%|    """Scan printables/quoted-pairs until endchars and return unquoted ptext.
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|    This function turns a run of qcontent, ccontent-without-comments, or
  1000|         0|            0|            0|  0.00%|    dtext-with-quoted-printables into a single string by unquoting any
  1001|         0|            0|            0|  0.00%|    quoted printables.  It returns the string, the remaining value, and
  1002|         0|            0|            0|  0.00%|    a flag that is True iff there were any quoted printables decoded.
  1003|         0|            0|            0|  0.00%|
  1004|         0|            0|            0|  0.00%|    """
  1005|         1|  8.34465e-06|  8.34465e-06|  0.00%|    fragment, *remainder = _wsp_splitter(value, 1)
  1006|         1|  4.05312e-06|  4.05312e-06|  0.00%|    vchars = []
  1007|         1|  4.52995e-06|  4.52995e-06|  0.00%|    escape = False
  1008|         1|  5.00679e-06|  5.00679e-06|  0.00%|    had_qp = False
  1009|         6|  2.28882e-05|   3.8147e-06|  0.01%|    for pos in range(len(fragment)):
  1010|         6|  2.00272e-05|  3.33786e-06|  0.01%|        if fragment[pos] == '\\':
  1011|         0|            0|            0|  0.00%|            if escape:
  1012|         0|            0|            0|  0.00%|                escape = False
  1013|         0|            0|            0|  0.00%|                had_qp = True
  1014|         0|            0|            0|  0.00%|            else:
  1015|         0|            0|            0|  0.00%|                escape = True
  1016|         0|            0|            0|  0.00%|                continue
  1017|         6|  1.93119e-05|  3.21865e-06|  0.01%|        if escape:
  1018|         0|            0|            0|  0.00%|            escape = False
  1019|         6|  2.02656e-05|   3.3776e-06|  0.01%|        elif fragment[pos] in endchars:
  1020|         1|  2.86102e-06|  2.86102e-06|  0.00%|            break
  1021|         5|   1.7643e-05|  3.52859e-06|  0.01%|        vchars.append(fragment[pos])
  1022|         0|            0|            0|  0.00%|    else:
  1023|         0|            0|            0|  0.00%|        pos = pos + 1
  1024|         1|  5.24521e-06|  5.24521e-06|  0.00%|    return ''.join(vchars), ''.join([fragment[pos:]] + remainder), had_qp
  1025|         0|            0|            0|  0.00%|
  1026|         4|  1.35899e-05|  3.39746e-06|  0.01%|def get_fws(value):
  1027|         0|            0|            0|  0.00%|    """FWS = 1*WSP
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    This isn't the RFC definition.  We're using fws to represent tokens where
  1030|         0|            0|            0|  0.00%|    folding can be done, but when we are parsing the *un*folding has already
  1031|         0|            0|            0|  0.00%|    been done so we don't need to watch out for CRLF.
  1032|         0|            0|            0|  0.00%|
  1033|         0|            0|            0|  0.00%|    """
  1034|         4|  1.43051e-05|  3.57628e-06|  0.01%|    newvalue = value.lstrip()
  1035|         4|  5.03063e-05|  1.25766e-05|  0.02%|    fws = WhiteSpaceTerminal(value[:len(value)-len(newvalue)], 'fws')
(call)|         4|  6.50883e-05|  1.62721e-05|  0.03%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  1036|         4|  1.26362e-05|  3.15905e-06|  0.01%|    return fws, newvalue
  1037|         0|            0|            0|  0.00%|
  1038|         0|            0|            0|  0.00%|def get_encoded_word(value):
  1039|         0|            0|            0|  0.00%|    """ encoded-word = "=?" charset "?" encoding "?" encoded-text "?="
  1040|         0|            0|            0|  0.00%|
  1041|         0|            0|            0|  0.00%|    """
  1042|         0|            0|            0|  0.00%|    ew = EncodedWord()
  1043|         0|            0|            0|  0.00%|    if not value.startswith('=?'):
  1044|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1045|         0|            0|            0|  0.00%|            "expected encoded word but found {}".format(value))
  1046|         0|            0|            0|  0.00%|    tok, *remainder = value[2:].split('?=', 1)
  1047|         0|            0|            0|  0.00%|    if tok == value[2:]:
  1048|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1049|         0|            0|            0|  0.00%|            "expected encoded word but found {}".format(value))
  1050|         0|            0|            0|  0.00%|    remstr = ''.join(remainder)
  1051|         0|            0|            0|  0.00%|    if (len(remstr) > 1 and
  1052|         0|            0|            0|  0.00%|        remstr[0] in hexdigits and
  1053|         0|            0|            0|  0.00%|        remstr[1] in hexdigits and
  1054|         0|            0|            0|  0.00%|        tok.count('?') < 2):
  1055|         0|            0|            0|  0.00%|        # The ? after the CTE was followed by an encoded word escape (=XX).
  1056|         0|            0|            0|  0.00%|        rest, *remainder = remstr.split('?=', 1)
  1057|         0|            0|            0|  0.00%|        tok = tok + '?=' + rest
  1058|         0|            0|            0|  0.00%|    if len(tok.split()) > 1:
  1059|         0|            0|            0|  0.00%|        ew.defects.append(errors.InvalidHeaderDefect(
  1060|         0|            0|            0|  0.00%|            "whitespace inside encoded word"))
  1061|         0|            0|            0|  0.00%|    ew.cte = value
  1062|         0|            0|            0|  0.00%|    value = ''.join(remainder)
  1063|         0|            0|            0|  0.00%|    try:
  1064|         0|            0|            0|  0.00%|        text, charset, lang, defects = _ew.decode('=?' + tok + '?=')
  1065|         0|            0|            0|  0.00%|    except (ValueError, KeyError):
  1066|         0|            0|            0|  0.00%|        raise _InvalidEwError(
  1067|         0|            0|            0|  0.00%|            "encoded word format invalid: '{}'".format(ew.cte))
  1068|         0|            0|            0|  0.00%|    ew.charset = charset
  1069|         0|            0|            0|  0.00%|    ew.lang = lang
  1070|         0|            0|            0|  0.00%|    ew.defects.extend(defects)
  1071|         0|            0|            0|  0.00%|    while text:
  1072|         0|            0|            0|  0.00%|        if text[0] in WSP:
  1073|         0|            0|            0|  0.00%|            token, text = get_fws(text)
  1074|         0|            0|            0|  0.00%|            ew.append(token)
  1075|         0|            0|            0|  0.00%|            continue
  1076|         0|            0|            0|  0.00%|        chars, *remainder = _wsp_splitter(text, 1)
  1077|         0|            0|            0|  0.00%|        vtext = ValueTerminal(chars, 'vtext')
  1078|         0|            0|            0|  0.00%|        _validate_xtext(vtext)
  1079|         0|            0|            0|  0.00%|        ew.append(vtext)
  1080|         0|            0|            0|  0.00%|        text = ''.join(remainder)
  1081|         0|            0|            0|  0.00%|    # Encoded words should be followed by a WS
  1082|         0|            0|            0|  0.00%|    if value and value[0] not in WSP:
  1083|         0|            0|            0|  0.00%|        ew.defects.append(errors.InvalidHeaderDefect(
  1084|         0|            0|            0|  0.00%|            "missing trailing whitespace after encoded-word"))
  1085|         0|            0|            0|  0.00%|    return ew, value
  1086|         0|            0|            0|  0.00%|
  1087|         1|  6.19888e-06|  6.19888e-06|  0.00%|def get_unstructured(value):
  1088|         0|            0|            0|  0.00%|    """unstructured = (*([FWS] vchar) *WSP) / obs-unstruct
  1089|         0|            0|            0|  0.00%|       obs-unstruct = *((*LF *CR *(obs-utext) *LF *CR)) / FWS)
  1090|         0|            0|            0|  0.00%|       obs-utext = %d0 / obs-NO-WS-CTL / LF / CR
  1091|         0|            0|            0|  0.00%|
  1092|         0|            0|            0|  0.00%|       obs-NO-WS-CTL is control characters except WSP/CR/LF.
  1093|         0|            0|            0|  0.00%|
  1094|         0|            0|            0|  0.00%|    So, basically, we have printable runs, plus control characters or nulls in
  1095|         0|            0|            0|  0.00%|    the obsolete syntax, separated by whitespace.  Since RFC 2047 uses the
  1096|         0|            0|            0|  0.00%|    obsolete syntax in its specification, but requires whitespace on either
  1097|         0|            0|            0|  0.00%|    side of the encoded words, I can see no reason to need to separate the
  1098|         0|            0|            0|  0.00%|    non-printable-non-whitespace from the printable runs if they occur, so we
  1099|         0|            0|            0|  0.00%|    parse this into xtext tokens separated by WSP tokens.
  1100|         0|            0|            0|  0.00%|
  1101|         0|            0|            0|  0.00%|    Because an 'unstructured' value must by definition constitute the entire
  1102|         0|            0|            0|  0.00%|    value, this 'get' routine does not return a remaining value, only the
  1103|         0|            0|            0|  0.00%|    parsed TokenList.
  1104|         0|            0|            0|  0.00%|
  1105|         0|            0|            0|  0.00%|    """
  1106|         0|            0|            0|  0.00%|    # XXX: but what about bare CR and LF?  They might signal the start or
  1107|         0|            0|            0|  0.00%|    # end of an encoded word.  YAGNI for now, since our current parsers
  1108|         0|            0|            0|  0.00%|    # will never send us strings with bare CR or LF.
  1109|         0|            0|            0|  0.00%|
  1110|         1|  1.50204e-05|  1.50204e-05|  0.01%|    unstructured = UnstructuredTokenList()
(call)|         1|   1.3113e-05|   1.3113e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  1111|         8|  3.09944e-05|   3.8743e-06|  0.01%|    while value:
  1112|         7|  2.55108e-05|   3.6444e-06|  0.01%|        if value[0] in WSP:
  1113|         3|  2.69413e-05|  8.98043e-06|  0.01%|            token, value = get_fws(value)
(call)|         3|  0.000120878|  4.02927e-05|  0.05%|# /usr/lib/python3.10/email/_header_value_parser.py:1026 get_fws
  1114|         3|  1.09673e-05|  3.65575e-06|  0.00%|            unstructured.append(token)
  1115|         3|  1.21593e-05|  4.05312e-06|  0.01%|            continue
  1116|         4|  1.69277e-05|  4.23193e-06|  0.01%|        valid_ew = True
  1117|         4|  1.62125e-05|  4.05312e-06|  0.01%|        if value.startswith('=?'):
  1118|         0|            0|            0|  0.00%|            try:
  1119|         0|            0|            0|  0.00%|                token, value = get_encoded_word(value)
  1120|         0|            0|            0|  0.00%|            except _InvalidEwError:
  1121|         0|            0|            0|  0.00%|                valid_ew = False
  1122|         0|            0|            0|  0.00%|            except errors.HeaderParseError:
  1123|         0|            0|            0|  0.00%|                # XXX: Need to figure out how to register defects when
  1124|         0|            0|            0|  0.00%|                # appropriate here.
  1125|         0|            0|            0|  0.00%|                pass
  1126|         0|            0|            0|  0.00%|            else:
  1127|         0|            0|            0|  0.00%|                have_ws = True
  1128|         0|            0|            0|  0.00%|                if len(unstructured) > 0:
  1129|         0|            0|            0|  0.00%|                    if unstructured[-1].token_type != 'fws':
  1130|         0|            0|            0|  0.00%|                        unstructured.defects.append(errors.InvalidHeaderDefect(
  1131|         0|            0|            0|  0.00%|                            "missing whitespace before encoded word"))
  1132|         0|            0|            0|  0.00%|                        have_ws = False
  1133|         0|            0|            0|  0.00%|                if have_ws and len(unstructured) > 1:
  1134|         0|            0|            0|  0.00%|                    if unstructured[-2].token_type == 'encoded-word':
  1135|         0|            0|            0|  0.00%|                        unstructured[-1] = EWWhiteSpaceTerminal(
  1136|         0|            0|            0|  0.00%|                            unstructured[-1], 'fws')
  1137|         0|            0|            0|  0.00%|                unstructured.append(token)
  1138|         0|            0|            0|  0.00%|                continue
  1139|         4|  2.14577e-05|  5.36442e-06|  0.01%|        tok, *remainder = _wsp_splitter(value, 1)
  1140|         0|            0|            0|  0.00%|        # Split in the middle of an atom if there is a rfc2047 encoded word
  1141|         0|            0|            0|  0.00%|        # which does not have WSP on both sides. The defect will be registered
  1142|         0|            0|            0|  0.00%|        # the next time through the loop.
  1143|         0|            0|            0|  0.00%|        # This needs to only be performed when the encoded word is valid;
  1144|         0|            0|            0|  0.00%|        # otherwise, performing it on an invalid encoded word can cause
  1145|         0|            0|            0|  0.00%|        # the parser to go in an infinite loop.
  1146|         4|  1.88351e-05|  4.70877e-06|  0.01%|        if valid_ew and rfc2047_matcher.search(tok):
  1147|         0|            0|            0|  0.00%|            tok, *remainder = value.partition('=?')
  1148|         4|  3.76701e-05|  9.41753e-06|  0.02%|        vtext = ValueTerminal(tok, 'vtext')
(call)|         4|  6.79493e-05|  1.69873e-05|  0.03%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  1149|         4|  3.76701e-05|  9.41753e-06|  0.02%|        _validate_xtext(vtext)
(call)|         4|  0.000128508|  3.21269e-05|  0.05%|# /usr/lib/python3.10/email/_header_value_parser.py:986 _validate_xtext
  1150|         4|  1.50204e-05|  3.75509e-06|  0.01%|        unstructured.append(vtext)
  1151|         4|  1.69277e-05|  4.23193e-06|  0.01%|        value = ''.join(remainder)
  1152|         1|  3.09944e-06|  3.09944e-06|  0.00%|    return unstructured
  1153|         0|            0|            0|  0.00%|
  1154|         0|            0|            0|  0.00%|def get_qp_ctext(value):
  1155|         0|            0|            0|  0.00%|    r"""ctext = <printable ascii except \ ( )>
  1156|         0|            0|            0|  0.00%|
  1157|         0|            0|            0|  0.00%|    This is not the RFC ctext, since we are handling nested comments in comment
  1158|         0|            0|            0|  0.00%|    and unquoting quoted-pairs here.  We allow anything except the '()'
  1159|         0|            0|            0|  0.00%|    characters, but if we find any ASCII other than the RFC defined printable
  1160|         0|            0|            0|  0.00%|    ASCII, a NonPrintableDefect is added to the token's defects list.  Since
  1161|         0|            0|            0|  0.00%|    quoted pairs are converted to their unquoted values, what is returned is
  1162|         0|            0|            0|  0.00%|    a 'ptext' token.  In this case it is a WhiteSpaceTerminal, so it's value
  1163|         0|            0|            0|  0.00%|    is ' '.
  1164|         0|            0|            0|  0.00%|
  1165|         0|            0|            0|  0.00%|    """
  1166|         0|            0|            0|  0.00%|    ptext, value, _ = _get_ptext_to_endchars(value, '()')
  1167|         0|            0|            0|  0.00%|    ptext = WhiteSpaceTerminal(ptext, 'ptext')
  1168|         0|            0|            0|  0.00%|    _validate_xtext(ptext)
  1169|         0|            0|            0|  0.00%|    return ptext, value
  1170|         0|            0|            0|  0.00%|
  1171|         1|  3.33786e-06|  3.33786e-06|  0.00%|def get_qcontent(value):
  1172|         0|            0|            0|  0.00%|    """qcontent = qtext / quoted-pair
  1173|         0|            0|            0|  0.00%|
  1174|         0|            0|            0|  0.00%|    We allow anything except the DQUOTE character, but if we find any ASCII
  1175|         0|            0|            0|  0.00%|    other than the RFC defined printable ASCII, a NonPrintableDefect is
  1176|         0|            0|            0|  0.00%|    added to the token's defects list.  Any quoted pairs are converted to their
  1177|         0|            0|            0|  0.00%|    unquoted values, so what is returned is a 'ptext' token.  In this case it
  1178|         0|            0|            0|  0.00%|    is a ValueTerminal.
  1179|         0|            0|            0|  0.00%|
  1180|         0|            0|            0|  0.00%|    """
  1181|         1|  1.19209e-05|  1.19209e-05|  0.00%|    ptext, value, _ = _get_ptext_to_endchars(value, '"')
(call)|         1|  0.000135183|  0.000135183|  0.06%|# /usr/lib/python3.10/email/_header_value_parser.py:996 _get_ptext_to_endchars
  1182|         1|   1.0252e-05|   1.0252e-05|  0.00%|    ptext = ValueTerminal(ptext, 'ptext')
(call)|         1|  1.69277e-05|  1.69277e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  1183|         1|  9.53674e-06|  9.53674e-06|  0.00%|    _validate_xtext(ptext)
(call)|         1|  3.31402e-05|  3.31402e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:986 _validate_xtext
  1184|         1|  5.00679e-06|  5.00679e-06|  0.00%|    return ptext, value
  1185|         0|            0|            0|  0.00%|
  1186|         0|            0|            0|  0.00%|def get_atext(value):
  1187|         0|            0|            0|  0.00%|    """atext = <matches _atext_matcher>
  1188|         0|            0|            0|  0.00%|
  1189|         0|            0|            0|  0.00%|    We allow any non-ATOM_ENDS in atext, but add an InvalidATextDefect to
  1190|         0|            0|            0|  0.00%|    the token's defects list if we find non-atext characters.
  1191|         0|            0|            0|  0.00%|    """
  1192|         0|            0|            0|  0.00%|    m = _non_atom_end_matcher(value)
  1193|         0|            0|            0|  0.00%|    if not m:
  1194|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1195|         0|            0|            0|  0.00%|            "expected atext but found '{}'".format(value))
  1196|         0|            0|            0|  0.00%|    atext = m.group()
  1197|         0|            0|            0|  0.00%|    value = value[len(atext):]
  1198|         0|            0|            0|  0.00%|    atext = ValueTerminal(atext, 'atext')
  1199|         0|            0|            0|  0.00%|    _validate_xtext(atext)
  1200|         0|            0|            0|  0.00%|    return atext, value
  1201|         0|            0|            0|  0.00%|
  1202|         1|  4.29153e-06|  4.29153e-06|  0.00%|def get_bare_quoted_string(value):
  1203|         0|            0|            0|  0.00%|    """bare-quoted-string = DQUOTE *([FWS] qcontent) [FWS] DQUOTE
  1204|         0|            0|            0|  0.00%|
  1205|         0|            0|            0|  0.00%|    A quoted-string without the leading or trailing white space.  Its
  1206|         0|            0|            0|  0.00%|    value is the text between the quote marks, with whitespace
  1207|         0|            0|            0|  0.00%|    preserved and quoted pairs decoded.
  1208|         0|            0|            0|  0.00%|    """
  1209|         1|  4.29153e-06|  4.29153e-06|  0.00%|    if value[0] != '"':
  1210|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1211|         0|            0|            0|  0.00%|            "expected '\"' but found '{}'".format(value))
  1212|         1|  9.05991e-06|  9.05991e-06|  0.00%|    bare_quoted_string = BareQuotedString()
(call)|         1|  1.00136e-05|  1.00136e-05|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  1213|         1|   3.8147e-06|   3.8147e-06|  0.00%|    value = value[1:]
  1214|         1|  4.29153e-06|  4.29153e-06|  0.00%|    if value and value[0] == '"':
  1215|         0|            0|            0|  0.00%|        token, value = get_qcontent(value)
  1216|         0|            0|            0|  0.00%|        bare_quoted_string.append(token)
  1217|         2|  7.62939e-06|   3.8147e-06|  0.00%|    while value and value[0] != '"':
  1218|         1|  3.57628e-06|  3.57628e-06|  0.00%|        if value[0] in WSP:
  1219|         0|            0|            0|  0.00%|            token, value = get_fws(value)
  1220|         1|  4.29153e-06|  4.29153e-06|  0.00%|        elif value[:2] == '=?':
  1221|         0|            0|            0|  0.00%|            valid_ew = False
  1222|         0|            0|            0|  0.00%|            try:
  1223|         0|            0|            0|  0.00%|                token, value = get_encoded_word(value)
  1224|         0|            0|            0|  0.00%|                bare_quoted_string.defects.append(errors.InvalidHeaderDefect(
  1225|         0|            0|            0|  0.00%|                    "encoded word inside quoted string"))
  1226|         0|            0|            0|  0.00%|                valid_ew = True
  1227|         0|            0|            0|  0.00%|            except errors.HeaderParseError:
  1228|         0|            0|            0|  0.00%|                token, value = get_qcontent(value)
  1229|         0|            0|            0|  0.00%|            # Collapse the whitespace between two encoded words that occur in a
  1230|         0|            0|            0|  0.00%|            # bare-quoted-string.
  1231|         0|            0|            0|  0.00%|            if valid_ew and len(bare_quoted_string) > 1:
  1232|         0|            0|            0|  0.00%|                if (bare_quoted_string[-1].token_type == 'fws' and
  1233|         0|            0|            0|  0.00%|                        bare_quoted_string[-2].token_type == 'encoded-word'):
  1234|         0|            0|            0|  0.00%|                    bare_quoted_string[-1] = EWWhiteSpaceTerminal(
  1235|         0|            0|            0|  0.00%|                        bare_quoted_string[-1], 'fws')
  1236|         0|            0|            0|  0.00%|        else:
  1237|         1|  1.00136e-05|  1.00136e-05|  0.00%|            token, value = get_qcontent(value)
(call)|         1|  0.000225306|  0.000225306|  0.09%|# /usr/lib/python3.10/email/_header_value_parser.py:1171 get_qcontent
  1238|         1|  5.00679e-06|  5.00679e-06|  0.00%|        bare_quoted_string.append(token)
  1239|         1|  3.33786e-06|  3.33786e-06|  0.00%|    if not value:
  1240|         0|            0|            0|  0.00%|        bare_quoted_string.defects.append(errors.InvalidHeaderDefect(
  1241|         0|            0|            0|  0.00%|            "end of header inside quoted string"))
  1242|         0|            0|            0|  0.00%|        return bare_quoted_string, value
  1243|         1|  4.05312e-06|  4.05312e-06|  0.00%|    return bare_quoted_string, value[1:]
  1244|         0|            0|            0|  0.00%|
  1245|         0|            0|            0|  0.00%|def get_comment(value):
  1246|         0|            0|            0|  0.00%|    """comment = "(" *([FWS] ccontent) [FWS] ")"
  1247|         0|            0|            0|  0.00%|       ccontent = ctext / quoted-pair / comment
  1248|         0|            0|            0|  0.00%|
  1249|         0|            0|            0|  0.00%|    We handle nested comments here, and quoted-pair in our qp-ctext routine.
  1250|         0|            0|            0|  0.00%|    """
  1251|         0|            0|            0|  0.00%|    if value and value[0] != '(':
  1252|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1253|         0|            0|            0|  0.00%|            "expected '(' but found '{}'".format(value))
  1254|         0|            0|            0|  0.00%|    comment = Comment()
  1255|         0|            0|            0|  0.00%|    value = value[1:]
  1256|         0|            0|            0|  0.00%|    while value and value[0] != ")":
  1257|         0|            0|            0|  0.00%|        if value[0] in WSP:
  1258|         0|            0|            0|  0.00%|            token, value = get_fws(value)
  1259|         0|            0|            0|  0.00%|        elif value[0] == '(':
  1260|         0|            0|            0|  0.00%|            token, value = get_comment(value)
  1261|         0|            0|            0|  0.00%|        else:
  1262|         0|            0|            0|  0.00%|            token, value = get_qp_ctext(value)
  1263|         0|            0|            0|  0.00%|        comment.append(token)
  1264|         0|            0|            0|  0.00%|    if not value:
  1265|         0|            0|            0|  0.00%|        comment.defects.append(errors.InvalidHeaderDefect(
  1266|         0|            0|            0|  0.00%|            "end of header inside comment"))
  1267|         0|            0|            0|  0.00%|        return comment, value
  1268|         0|            0|            0|  0.00%|    return comment, value[1:]
  1269|         0|            0|            0|  0.00%|
  1270|         1|  3.33786e-06|  3.33786e-06|  0.00%|def get_cfws(value):
  1271|         0|            0|            0|  0.00%|    """CFWS = (1*([FWS] comment) [FWS]) / FWS
  1272|         0|            0|            0|  0.00%|
  1273|         0|            0|            0|  0.00%|    """
  1274|         1|  1.07288e-05|  1.07288e-05|  0.00%|    cfws = CFWSList()
(call)|         1|  1.07288e-05|  1.07288e-05|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  1275|         2|  7.62939e-06|   3.8147e-06|  0.00%|    while value and value[0] in CFWS_LEADER:
  1276|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if value[0] in WSP:
  1277|         1|  9.29832e-06|  9.29832e-06|  0.00%|            token, value = get_fws(value)
(call)|         1|  3.50475e-05|  3.50475e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:1026 get_fws
  1278|         0|            0|            0|  0.00%|        else:
  1279|         0|            0|            0|  0.00%|            token, value = get_comment(value)
  1280|         1|  4.29153e-06|  4.29153e-06|  0.00%|        cfws.append(token)
  1281|         1|  2.86102e-06|  2.86102e-06|  0.00%|    return cfws, value
  1282|         0|            0|            0|  0.00%|
  1283|         1|   3.8147e-06|   3.8147e-06|  0.00%|def get_quoted_string(value):
  1284|         0|            0|            0|  0.00%|    """quoted-string = [CFWS] <bare-quoted-string> [CFWS]
  1285|         0|            0|            0|  0.00%|
  1286|         0|            0|            0|  0.00%|    'bare-quoted-string' is an intermediate class defined by this
  1287|         0|            0|            0|  0.00%|    parser and not by the RFC grammar.  It is the quoted string
  1288|         0|            0|            0|  0.00%|    without any attached CFWS.
  1289|         0|            0|            0|  0.00%|    """
  1290|         1|  1.35899e-05|  1.35899e-05|  0.01%|    quoted_string = QuotedString()
(call)|         1|  1.81198e-05|  1.81198e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  1291|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if value and value[0] in CFWS_LEADER:
  1292|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1293|         0|            0|            0|  0.00%|        quoted_string.append(token)
  1294|         1|  1.21593e-05|  1.21593e-05|  0.01%|    token, value = get_bare_quoted_string(value)
(call)|         1|  0.000298977|  0.000298977|  0.12%|# /usr/lib/python3.10/email/_header_value_parser.py:1202 get_bare_quoted_string
  1295|         1|  4.52995e-06|  4.52995e-06|  0.00%|    quoted_string.append(token)
  1296|         1|  3.33786e-06|  3.33786e-06|  0.00%|    if value and value[0] in CFWS_LEADER:
  1297|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1298|         0|            0|            0|  0.00%|        quoted_string.append(token)
  1299|         1|   3.8147e-06|   3.8147e-06|  0.00%|    return quoted_string, value
  1300|         0|            0|            0|  0.00%|
  1301|         0|            0|            0|  0.00%|def get_atom(value):
  1302|         0|            0|            0|  0.00%|    """atom = [CFWS] 1*atext [CFWS]
  1303|         0|            0|            0|  0.00%|
  1304|         0|            0|            0|  0.00%|    An atom could be an rfc2047 encoded word.
  1305|         0|            0|            0|  0.00%|    """
  1306|         0|            0|            0|  0.00%|    atom = Atom()
  1307|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  1308|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1309|         0|            0|            0|  0.00%|        atom.append(token)
  1310|         0|            0|            0|  0.00%|    if value and value[0] in ATOM_ENDS:
  1311|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1312|         0|            0|            0|  0.00%|            "expected atom but found '{}'".format(value))
  1313|         0|            0|            0|  0.00%|    if value.startswith('=?'):
  1314|         0|            0|            0|  0.00%|        try:
  1315|         0|            0|            0|  0.00%|            token, value = get_encoded_word(value)
  1316|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  1317|         0|            0|            0|  0.00%|            # XXX: need to figure out how to register defects when
  1318|         0|            0|            0|  0.00%|            # appropriate here.
  1319|         0|            0|            0|  0.00%|            token, value = get_atext(value)
  1320|         0|            0|            0|  0.00%|    else:
  1321|         0|            0|            0|  0.00%|        token, value = get_atext(value)
  1322|         0|            0|            0|  0.00%|    atom.append(token)
  1323|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  1324|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1325|         0|            0|            0|  0.00%|        atom.append(token)
  1326|         0|            0|            0|  0.00%|    return atom, value
  1327|         0|            0|            0|  0.00%|
  1328|         0|            0|            0|  0.00%|def get_dot_atom_text(value):
  1329|         0|            0|            0|  0.00%|    """ dot-text = 1*atext *("." 1*atext)
  1330|         0|            0|            0|  0.00%|
  1331|         0|            0|            0|  0.00%|    """
  1332|         0|            0|            0|  0.00%|    dot_atom_text = DotAtomText()
  1333|         0|            0|            0|  0.00%|    if not value or value[0] in ATOM_ENDS:
  1334|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("expected atom at a start of "
  1335|         0|            0|            0|  0.00%|            "dot-atom-text but found '{}'".format(value))
  1336|         0|            0|            0|  0.00%|    while value and value[0] not in ATOM_ENDS:
  1337|         0|            0|            0|  0.00%|        token, value = get_atext(value)
  1338|         0|            0|            0|  0.00%|        dot_atom_text.append(token)
  1339|         0|            0|            0|  0.00%|        if value and value[0] == '.':
  1340|         0|            0|            0|  0.00%|            dot_atom_text.append(DOT)
  1341|         0|            0|            0|  0.00%|            value = value[1:]
  1342|         0|            0|            0|  0.00%|    if dot_atom_text[-1] is DOT:
  1343|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("expected atom at end of dot-atom-text "
  1344|         0|            0|            0|  0.00%|            "but found '{}'".format('.'+value))
  1345|         0|            0|            0|  0.00%|    return dot_atom_text, value
  1346|         0|            0|            0|  0.00%|
  1347|         0|            0|            0|  0.00%|def get_dot_atom(value):
  1348|         0|            0|            0|  0.00%|    """ dot-atom = [CFWS] dot-atom-text [CFWS]
  1349|         0|            0|            0|  0.00%|
  1350|         0|            0|            0|  0.00%|    Any place we can have a dot atom, we could instead have an rfc2047 encoded
  1351|         0|            0|            0|  0.00%|    word.
  1352|         0|            0|            0|  0.00%|    """
  1353|         0|            0|            0|  0.00%|    dot_atom = DotAtom()
  1354|         0|            0|            0|  0.00%|    if value[0] in CFWS_LEADER:
  1355|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1356|         0|            0|            0|  0.00%|        dot_atom.append(token)
  1357|         0|            0|            0|  0.00%|    if value.startswith('=?'):
  1358|         0|            0|            0|  0.00%|        try:
  1359|         0|            0|            0|  0.00%|            token, value = get_encoded_word(value)
  1360|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  1361|         0|            0|            0|  0.00%|            # XXX: need to figure out how to register defects when
  1362|         0|            0|            0|  0.00%|            # appropriate here.
  1363|         0|            0|            0|  0.00%|            token, value = get_dot_atom_text(value)
  1364|         0|            0|            0|  0.00%|    else:
  1365|         0|            0|            0|  0.00%|        token, value = get_dot_atom_text(value)
  1366|         0|            0|            0|  0.00%|    dot_atom.append(token)
  1367|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  1368|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1369|         0|            0|            0|  0.00%|        dot_atom.append(token)
  1370|         0|            0|            0|  0.00%|    return dot_atom, value
  1371|         0|            0|            0|  0.00%|
  1372|         0|            0|            0|  0.00%|def get_word(value):
  1373|         0|            0|            0|  0.00%|    """word = atom / quoted-string
  1374|         0|            0|            0|  0.00%|
  1375|         0|            0|            0|  0.00%|    Either atom or quoted-string may start with CFWS.  We have to peel off this
  1376|         0|            0|            0|  0.00%|    CFWS first to determine which type of word to parse.  Afterward we splice
  1377|         0|            0|            0|  0.00%|    the leading CFWS, if any, into the parsed sub-token.
  1378|         0|            0|            0|  0.00%|
  1379|         0|            0|            0|  0.00%|    If neither an atom or a quoted-string is found before the next special, a
  1380|         0|            0|            0|  0.00%|    HeaderParseError is raised.
  1381|         0|            0|            0|  0.00%|
  1382|         0|            0|            0|  0.00%|    The token returned is either an Atom or a QuotedString, as appropriate.
  1383|         0|            0|            0|  0.00%|    This means the 'word' level of the formal grammar is not represented in the
  1384|         0|            0|            0|  0.00%|    parse tree; this is because having that extra layer when manipulating the
  1385|         0|            0|            0|  0.00%|    parse tree is more confusing than it is helpful.
  1386|         0|            0|            0|  0.00%|
  1387|         0|            0|            0|  0.00%|    """
  1388|         0|            0|            0|  0.00%|    if value[0] in CFWS_LEADER:
  1389|         0|            0|            0|  0.00%|        leader, value = get_cfws(value)
  1390|         0|            0|            0|  0.00%|    else:
  1391|         0|            0|            0|  0.00%|        leader = None
  1392|         0|            0|            0|  0.00%|    if not value:
  1393|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1394|         0|            0|            0|  0.00%|            "Expected 'atom' or 'quoted-string' but found nothing.")
  1395|         0|            0|            0|  0.00%|    if value[0]=='"':
  1396|         0|            0|            0|  0.00%|        token, value = get_quoted_string(value)
  1397|         0|            0|            0|  0.00%|    elif value[0] in SPECIALS:
  1398|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("Expected 'atom' or 'quoted-string' "
  1399|         0|            0|            0|  0.00%|                                      "but found '{}'".format(value))
  1400|         0|            0|            0|  0.00%|    else:
  1401|         0|            0|            0|  0.00%|        token, value = get_atom(value)
  1402|         0|            0|            0|  0.00%|    if leader is not None:
  1403|         0|            0|            0|  0.00%|        token[:0] = [leader]
  1404|         0|            0|            0|  0.00%|    return token, value
  1405|         0|            0|            0|  0.00%|
  1406|         0|            0|            0|  0.00%|def get_phrase(value):
  1407|         0|            0|            0|  0.00%|    """ phrase = 1*word / obs-phrase
  1408|         0|            0|            0|  0.00%|        obs-phrase = word *(word / "." / CFWS)
  1409|         0|            0|            0|  0.00%|
  1410|         0|            0|            0|  0.00%|    This means a phrase can be a sequence of words, periods, and CFWS in any
  1411|         0|            0|            0|  0.00%|    order as long as it starts with at least one word.  If anything other than
  1412|         0|            0|            0|  0.00%|    words is detected, an ObsoleteHeaderDefect is added to the token's defect
  1413|         0|            0|            0|  0.00%|    list.  We also accept a phrase that starts with CFWS followed by a dot;
  1414|         0|            0|            0|  0.00%|    this is registered as an InvalidHeaderDefect, since it is not supported by
  1415|         0|            0|            0|  0.00%|    even the obsolete grammar.
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    """
  1418|         0|            0|            0|  0.00%|    phrase = Phrase()
  1419|         0|            0|            0|  0.00%|    try:
  1420|         0|            0|            0|  0.00%|        token, value = get_word(value)
  1421|         0|            0|            0|  0.00%|        phrase.append(token)
  1422|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  1423|         0|            0|            0|  0.00%|        phrase.defects.append(errors.InvalidHeaderDefect(
  1424|         0|            0|            0|  0.00%|            "phrase does not start with word"))
  1425|         0|            0|            0|  0.00%|    while value and value[0] not in PHRASE_ENDS:
  1426|         0|            0|            0|  0.00%|        if value[0]=='.':
  1427|         0|            0|            0|  0.00%|            phrase.append(DOT)
  1428|         0|            0|            0|  0.00%|            phrase.defects.append(errors.ObsoleteHeaderDefect(
  1429|         0|            0|            0|  0.00%|                "period in 'phrase'"))
  1430|         0|            0|            0|  0.00%|            value = value[1:]
  1431|         0|            0|            0|  0.00%|        else:
  1432|         0|            0|            0|  0.00%|            try:
  1433|         0|            0|            0|  0.00%|                token, value = get_word(value)
  1434|         0|            0|            0|  0.00%|            except errors.HeaderParseError:
  1435|         0|            0|            0|  0.00%|                if value[0] in CFWS_LEADER:
  1436|         0|            0|            0|  0.00%|                    token, value = get_cfws(value)
  1437|         0|            0|            0|  0.00%|                    phrase.defects.append(errors.ObsoleteHeaderDefect(
  1438|         0|            0|            0|  0.00%|                        "comment found without atom"))
  1439|         0|            0|            0|  0.00%|                else:
  1440|         0|            0|            0|  0.00%|                    raise
  1441|         0|            0|            0|  0.00%|            phrase.append(token)
  1442|         0|            0|            0|  0.00%|    return phrase, value
  1443|         0|            0|            0|  0.00%|
  1444|         0|            0|            0|  0.00%|def get_local_part(value):
  1445|         0|            0|            0|  0.00%|    """ local-part = dot-atom / quoted-string / obs-local-part
  1446|         0|            0|            0|  0.00%|
  1447|         0|            0|            0|  0.00%|    """
  1448|         0|            0|            0|  0.00%|    local_part = LocalPart()
  1449|         0|            0|            0|  0.00%|    leader = None
  1450|         0|            0|            0|  0.00%|    if value[0] in CFWS_LEADER:
  1451|         0|            0|            0|  0.00%|        leader, value = get_cfws(value)
  1452|         0|            0|            0|  0.00%|    if not value:
  1453|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1454|         0|            0|            0|  0.00%|            "expected local-part but found '{}'".format(value))
  1455|         0|            0|            0|  0.00%|    try:
  1456|         0|            0|            0|  0.00%|        token, value = get_dot_atom(value)
  1457|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  1458|         0|            0|            0|  0.00%|        try:
  1459|         0|            0|            0|  0.00%|            token, value = get_word(value)
  1460|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  1461|         0|            0|            0|  0.00%|            if value[0] != '\\' and value[0] in PHRASE_ENDS:
  1462|         0|            0|            0|  0.00%|                raise
  1463|         0|            0|            0|  0.00%|            token = TokenList()
  1464|         0|            0|            0|  0.00%|    if leader is not None:
  1465|         0|            0|            0|  0.00%|        token[:0] = [leader]
  1466|         0|            0|            0|  0.00%|    local_part.append(token)
  1467|         0|            0|            0|  0.00%|    if value and (value[0]=='\\' or value[0] not in PHRASE_ENDS):
  1468|         0|            0|            0|  0.00%|        obs_local_part, value = get_obs_local_part(str(local_part) + value)
  1469|         0|            0|            0|  0.00%|        if obs_local_part.token_type == 'invalid-obs-local-part':
  1470|         0|            0|            0|  0.00%|            local_part.defects.append(errors.InvalidHeaderDefect(
  1471|         0|            0|            0|  0.00%|                "local-part is not dot-atom, quoted-string, or obs-local-part"))
  1472|         0|            0|            0|  0.00%|        else:
  1473|         0|            0|            0|  0.00%|            local_part.defects.append(errors.ObsoleteHeaderDefect(
  1474|         0|            0|            0|  0.00%|                "local-part is not a dot-atom (contains CFWS)"))
  1475|         0|            0|            0|  0.00%|        local_part[0] = obs_local_part
  1476|         0|            0|            0|  0.00%|    try:
  1477|         0|            0|            0|  0.00%|        local_part.value.encode('ascii')
  1478|         0|            0|            0|  0.00%|    except UnicodeEncodeError:
  1479|         0|            0|            0|  0.00%|        local_part.defects.append(errors.NonASCIILocalPartDefect(
  1480|         0|            0|            0|  0.00%|                "local-part contains non-ASCII characters)"))
  1481|         0|            0|            0|  0.00%|    return local_part, value
  1482|         0|            0|            0|  0.00%|
  1483|         0|            0|            0|  0.00%|def get_obs_local_part(value):
  1484|         0|            0|            0|  0.00%|    """ obs-local-part = word *("." word)
  1485|         0|            0|            0|  0.00%|    """
  1486|         0|            0|            0|  0.00%|    obs_local_part = ObsLocalPart()
  1487|         0|            0|            0|  0.00%|    last_non_ws_was_dot = False
  1488|         0|            0|            0|  0.00%|    while value and (value[0]=='\\' or value[0] not in PHRASE_ENDS):
  1489|         0|            0|            0|  0.00%|        if value[0] == '.':
  1490|         0|            0|            0|  0.00%|            if last_non_ws_was_dot:
  1491|         0|            0|            0|  0.00%|                obs_local_part.defects.append(errors.InvalidHeaderDefect(
  1492|         0|            0|            0|  0.00%|                    "invalid repeated '.'"))
  1493|         0|            0|            0|  0.00%|            obs_local_part.append(DOT)
  1494|         0|            0|            0|  0.00%|            last_non_ws_was_dot = True
  1495|         0|            0|            0|  0.00%|            value = value[1:]
  1496|         0|            0|            0|  0.00%|            continue
  1497|         0|            0|            0|  0.00%|        elif value[0]=='\\':
  1498|         0|            0|            0|  0.00%|            obs_local_part.append(ValueTerminal(value[0],
  1499|         0|            0|            0|  0.00%|                                                'misplaced-special'))
  1500|         0|            0|            0|  0.00%|            value = value[1:]
  1501|         0|            0|            0|  0.00%|            obs_local_part.defects.append(errors.InvalidHeaderDefect(
  1502|         0|            0|            0|  0.00%|                "'\\' character outside of quoted-string/ccontent"))
  1503|         0|            0|            0|  0.00%|            last_non_ws_was_dot = False
  1504|         0|            0|            0|  0.00%|            continue
  1505|         0|            0|            0|  0.00%|        if obs_local_part and obs_local_part[-1].token_type != 'dot':
  1506|         0|            0|            0|  0.00%|            obs_local_part.defects.append(errors.InvalidHeaderDefect(
  1507|         0|            0|            0|  0.00%|                "missing '.' between words"))
  1508|         0|            0|            0|  0.00%|        try:
  1509|         0|            0|            0|  0.00%|            token, value = get_word(value)
  1510|         0|            0|            0|  0.00%|            last_non_ws_was_dot = False
  1511|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  1512|         0|            0|            0|  0.00%|            if value[0] not in CFWS_LEADER:
  1513|         0|            0|            0|  0.00%|                raise
  1514|         0|            0|            0|  0.00%|            token, value = get_cfws(value)
  1515|         0|            0|            0|  0.00%|        obs_local_part.append(token)
  1516|         0|            0|            0|  0.00%|    if (obs_local_part[0].token_type == 'dot' or
  1517|         0|            0|            0|  0.00%|            obs_local_part[0].token_type=='cfws' and
  1518|         0|            0|            0|  0.00%|            obs_local_part[1].token_type=='dot'):
  1519|         0|            0|            0|  0.00%|        obs_local_part.defects.append(errors.InvalidHeaderDefect(
  1520|         0|            0|            0|  0.00%|            "Invalid leading '.' in local part"))
  1521|         0|            0|            0|  0.00%|    if (obs_local_part[-1].token_type == 'dot' or
  1522|         0|            0|            0|  0.00%|            obs_local_part[-1].token_type=='cfws' and
  1523|         0|            0|            0|  0.00%|            obs_local_part[-2].token_type=='dot'):
  1524|         0|            0|            0|  0.00%|        obs_local_part.defects.append(errors.InvalidHeaderDefect(
  1525|         0|            0|            0|  0.00%|            "Invalid trailing '.' in local part"))
  1526|         0|            0|            0|  0.00%|    if obs_local_part.defects:
  1527|         0|            0|            0|  0.00%|        obs_local_part.token_type = 'invalid-obs-local-part'
  1528|         0|            0|            0|  0.00%|    return obs_local_part, value
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|def get_dtext(value):
  1531|         0|            0|            0|  0.00%|    r""" dtext = <printable ascii except \ [ ]> / obs-dtext
  1532|         0|            0|            0|  0.00%|        obs-dtext = obs-NO-WS-CTL / quoted-pair
  1533|         0|            0|            0|  0.00%|
  1534|         0|            0|            0|  0.00%|    We allow anything except the excluded characters, but if we find any
  1535|         0|            0|            0|  0.00%|    ASCII other than the RFC defined printable ASCII, a NonPrintableDefect is
  1536|         0|            0|            0|  0.00%|    added to the token's defects list.  Quoted pairs are converted to their
  1537|         0|            0|            0|  0.00%|    unquoted values, so what is returned is a ptext token, in this case a
  1538|         0|            0|            0|  0.00%|    ValueTerminal.  If there were quoted-printables, an ObsoleteHeaderDefect is
  1539|         0|            0|            0|  0.00%|    added to the returned token's defect list.
  1540|         0|            0|            0|  0.00%|
  1541|         0|            0|            0|  0.00%|    """
  1542|         0|            0|            0|  0.00%|    ptext, value, had_qp = _get_ptext_to_endchars(value, '[]')
  1543|         0|            0|            0|  0.00%|    ptext = ValueTerminal(ptext, 'ptext')
  1544|         0|            0|            0|  0.00%|    if had_qp:
  1545|         0|            0|            0|  0.00%|        ptext.defects.append(errors.ObsoleteHeaderDefect(
  1546|         0|            0|            0|  0.00%|            "quoted printable found in domain-literal"))
  1547|         0|            0|            0|  0.00%|    _validate_xtext(ptext)
  1548|         0|            0|            0|  0.00%|    return ptext, value
  1549|         0|            0|            0|  0.00%|
  1550|         0|            0|            0|  0.00%|def _check_for_early_dl_end(value, domain_literal):
  1551|         0|            0|            0|  0.00%|    if value:
  1552|         0|            0|            0|  0.00%|        return False
  1553|         0|            0|            0|  0.00%|    domain_literal.append(errors.InvalidHeaderDefect(
  1554|         0|            0|            0|  0.00%|        "end of input inside domain-literal"))
  1555|         0|            0|            0|  0.00%|    domain_literal.append(ValueTerminal(']', 'domain-literal-end'))
  1556|         0|            0|            0|  0.00%|    return True
  1557|         0|            0|            0|  0.00%|
  1558|         0|            0|            0|  0.00%|def get_domain_literal(value):
  1559|         0|            0|            0|  0.00%|    """ domain-literal = [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
  1560|         0|            0|            0|  0.00%|
  1561|         0|            0|            0|  0.00%|    """
  1562|         0|            0|            0|  0.00%|    domain_literal = DomainLiteral()
  1563|         0|            0|            0|  0.00%|    if value[0] in CFWS_LEADER:
  1564|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1565|         0|            0|            0|  0.00%|        domain_literal.append(token)
  1566|         0|            0|            0|  0.00%|    if not value:
  1567|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("expected domain-literal")
  1568|         0|            0|            0|  0.00%|    if value[0] != '[':
  1569|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("expected '[' at start of domain-literal "
  1570|         0|            0|            0|  0.00%|                "but found '{}'".format(value))
  1571|         0|            0|            0|  0.00%|    value = value[1:]
  1572|         0|            0|            0|  0.00%|    if _check_for_early_dl_end(value, domain_literal):
  1573|         0|            0|            0|  0.00%|        return domain_literal, value
  1574|         0|            0|            0|  0.00%|    domain_literal.append(ValueTerminal('[', 'domain-literal-start'))
  1575|         0|            0|            0|  0.00%|    if value[0] in WSP:
  1576|         0|            0|            0|  0.00%|        token, value = get_fws(value)
  1577|         0|            0|            0|  0.00%|        domain_literal.append(token)
  1578|         0|            0|            0|  0.00%|    token, value = get_dtext(value)
  1579|         0|            0|            0|  0.00%|    domain_literal.append(token)
  1580|         0|            0|            0|  0.00%|    if _check_for_early_dl_end(value, domain_literal):
  1581|         0|            0|            0|  0.00%|        return domain_literal, value
  1582|         0|            0|            0|  0.00%|    if value[0] in WSP:
  1583|         0|            0|            0|  0.00%|        token, value = get_fws(value)
  1584|         0|            0|            0|  0.00%|        domain_literal.append(token)
  1585|         0|            0|            0|  0.00%|    if _check_for_early_dl_end(value, domain_literal):
  1586|         0|            0|            0|  0.00%|        return domain_literal, value
  1587|         0|            0|            0|  0.00%|    if value[0] != ']':
  1588|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("expected ']' at end of domain-literal "
  1589|         0|            0|            0|  0.00%|                "but found '{}'".format(value))
  1590|         0|            0|            0|  0.00%|    domain_literal.append(ValueTerminal(']', 'domain-literal-end'))
  1591|         0|            0|            0|  0.00%|    value = value[1:]
  1592|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  1593|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1594|         0|            0|            0|  0.00%|        domain_literal.append(token)
  1595|         0|            0|            0|  0.00%|    return domain_literal, value
  1596|         0|            0|            0|  0.00%|
  1597|         0|            0|            0|  0.00%|def get_domain(value):
  1598|         0|            0|            0|  0.00%|    """ domain = dot-atom / domain-literal / obs-domain
  1599|         0|            0|            0|  0.00%|        obs-domain = atom *("." atom))
  1600|         0|            0|            0|  0.00%|
  1601|         0|            0|            0|  0.00%|    """
  1602|         0|            0|            0|  0.00%|    domain = Domain()
  1603|         0|            0|            0|  0.00%|    leader = None
  1604|         0|            0|            0|  0.00%|    if value[0] in CFWS_LEADER:
  1605|         0|            0|            0|  0.00%|        leader, value = get_cfws(value)
  1606|         0|            0|            0|  0.00%|    if not value:
  1607|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1608|         0|            0|            0|  0.00%|            "expected domain but found '{}'".format(value))
  1609|         0|            0|            0|  0.00%|    if value[0] == '[':
  1610|         0|            0|            0|  0.00%|        token, value = get_domain_literal(value)
  1611|         0|            0|            0|  0.00%|        if leader is not None:
  1612|         0|            0|            0|  0.00%|            token[:0] = [leader]
  1613|         0|            0|            0|  0.00%|        domain.append(token)
  1614|         0|            0|            0|  0.00%|        return domain, value
  1615|         0|            0|            0|  0.00%|    try:
  1616|         0|            0|            0|  0.00%|        token, value = get_dot_atom(value)
  1617|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  1618|         0|            0|            0|  0.00%|        token, value = get_atom(value)
  1619|         0|            0|            0|  0.00%|    if value and value[0] == '@':
  1620|         0|            0|            0|  0.00%|        raise errors.HeaderParseError('Invalid Domain')
  1621|         0|            0|            0|  0.00%|    if leader is not None:
  1622|         0|            0|            0|  0.00%|        token[:0] = [leader]
  1623|         0|            0|            0|  0.00%|    domain.append(token)
  1624|         0|            0|            0|  0.00%|    if value and value[0] == '.':
  1625|         0|            0|            0|  0.00%|        domain.defects.append(errors.ObsoleteHeaderDefect(
  1626|         0|            0|            0|  0.00%|            "domain is not a dot-atom (contains CFWS)"))
  1627|         0|            0|            0|  0.00%|        if domain[0].token_type == 'dot-atom':
  1628|         0|            0|            0|  0.00%|            domain[:] = domain[0]
  1629|         0|            0|            0|  0.00%|        while value and value[0] == '.':
  1630|         0|            0|            0|  0.00%|            domain.append(DOT)
  1631|         0|            0|            0|  0.00%|            token, value = get_atom(value[1:])
  1632|         0|            0|            0|  0.00%|            domain.append(token)
  1633|         0|            0|            0|  0.00%|    return domain, value
  1634|         0|            0|            0|  0.00%|
  1635|         0|            0|            0|  0.00%|def get_addr_spec(value):
  1636|         0|            0|            0|  0.00%|    """ addr-spec = local-part "@" domain
  1637|         0|            0|            0|  0.00%|
  1638|         0|            0|            0|  0.00%|    """
  1639|         0|            0|            0|  0.00%|    addr_spec = AddrSpec()
  1640|         0|            0|            0|  0.00%|    token, value = get_local_part(value)
  1641|         0|            0|            0|  0.00%|    addr_spec.append(token)
  1642|         0|            0|            0|  0.00%|    if not value or value[0] != '@':
  1643|         0|            0|            0|  0.00%|        addr_spec.defects.append(errors.InvalidHeaderDefect(
  1644|         0|            0|            0|  0.00%|            "addr-spec local part with no domain"))
  1645|         0|            0|            0|  0.00%|        return addr_spec, value
  1646|         0|            0|            0|  0.00%|    addr_spec.append(ValueTerminal('@', 'address-at-symbol'))
  1647|         0|            0|            0|  0.00%|    token, value = get_domain(value[1:])
  1648|         0|            0|            0|  0.00%|    addr_spec.append(token)
  1649|         0|            0|            0|  0.00%|    return addr_spec, value
  1650|         0|            0|            0|  0.00%|
  1651|         0|            0|            0|  0.00%|def get_obs_route(value):
  1652|         0|            0|            0|  0.00%|    """ obs-route = obs-domain-list ":"
  1653|         0|            0|            0|  0.00%|        obs-domain-list = *(CFWS / ",") "@" domain *("," [CFWS] ["@" domain])
  1654|         0|            0|            0|  0.00%|
  1655|         0|            0|            0|  0.00%|        Returns an obs-route token with the appropriate sub-tokens (that is,
  1656|         0|            0|            0|  0.00%|        there is no obs-domain-list in the parse tree).
  1657|         0|            0|            0|  0.00%|    """
  1658|         0|            0|            0|  0.00%|    obs_route = ObsRoute()
  1659|         0|            0|            0|  0.00%|    while value and (value[0]==',' or value[0] in CFWS_LEADER):
  1660|         0|            0|            0|  0.00%|        if value[0] in CFWS_LEADER:
  1661|         0|            0|            0|  0.00%|            token, value = get_cfws(value)
  1662|         0|            0|            0|  0.00%|            obs_route.append(token)
  1663|         0|            0|            0|  0.00%|        elif value[0] == ',':
  1664|         0|            0|            0|  0.00%|            obs_route.append(ListSeparator)
  1665|         0|            0|            0|  0.00%|            value = value[1:]
  1666|         0|            0|            0|  0.00%|    if not value or value[0] != '@':
  1667|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1668|         0|            0|            0|  0.00%|            "expected obs-route domain but found '{}'".format(value))
  1669|         0|            0|            0|  0.00%|    obs_route.append(RouteComponentMarker)
  1670|         0|            0|            0|  0.00%|    token, value = get_domain(value[1:])
  1671|         0|            0|            0|  0.00%|    obs_route.append(token)
  1672|         0|            0|            0|  0.00%|    while value and value[0]==',':
  1673|         0|            0|            0|  0.00%|        obs_route.append(ListSeparator)
  1674|         0|            0|            0|  0.00%|        value = value[1:]
  1675|         0|            0|            0|  0.00%|        if not value:
  1676|         0|            0|            0|  0.00%|            break
  1677|         0|            0|            0|  0.00%|        if value[0] in CFWS_LEADER:
  1678|         0|            0|            0|  0.00%|            token, value = get_cfws(value)
  1679|         0|            0|            0|  0.00%|            obs_route.append(token)
  1680|         0|            0|            0|  0.00%|        if value[0] == '@':
  1681|         0|            0|            0|  0.00%|            obs_route.append(RouteComponentMarker)
  1682|         0|            0|            0|  0.00%|            token, value = get_domain(value[1:])
  1683|         0|            0|            0|  0.00%|            obs_route.append(token)
  1684|         0|            0|            0|  0.00%|    if not value:
  1685|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("end of header while parsing obs-route")
  1686|         0|            0|            0|  0.00%|    if value[0] != ':':
  1687|         0|            0|            0|  0.00%|        raise errors.HeaderParseError( "expected ':' marking end of "
  1688|         0|            0|            0|  0.00%|            "obs-route but found '{}'".format(value))
  1689|         0|            0|            0|  0.00%|    obs_route.append(ValueTerminal(':', 'end-of-obs-route-marker'))
  1690|         0|            0|            0|  0.00%|    return obs_route, value[1:]
  1691|         0|            0|            0|  0.00%|
  1692|         0|            0|            0|  0.00%|def get_angle_addr(value):
  1693|         0|            0|            0|  0.00%|    """ angle-addr = [CFWS] "<" addr-spec ">" [CFWS] / obs-angle-addr
  1694|         0|            0|            0|  0.00%|        obs-angle-addr = [CFWS] "<" obs-route addr-spec ">" [CFWS]
  1695|         0|            0|            0|  0.00%|
  1696|         0|            0|            0|  0.00%|    """
  1697|         0|            0|            0|  0.00%|    angle_addr = AngleAddr()
  1698|         0|            0|            0|  0.00%|    if value[0] in CFWS_LEADER:
  1699|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1700|         0|            0|            0|  0.00%|        angle_addr.append(token)
  1701|         0|            0|            0|  0.00%|    if not value or value[0] != '<':
  1702|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1703|         0|            0|            0|  0.00%|            "expected angle-addr but found '{}'".format(value))
  1704|         0|            0|            0|  0.00%|    angle_addr.append(ValueTerminal('<', 'angle-addr-start'))
  1705|         0|            0|            0|  0.00%|    value = value[1:]
  1706|         0|            0|            0|  0.00%|    # Although it is not legal per RFC5322, SMTP uses '<>' in certain
  1707|         0|            0|            0|  0.00%|    # circumstances.
  1708|         0|            0|            0|  0.00%|    if value[0] == '>':
  1709|         0|            0|            0|  0.00%|        angle_addr.append(ValueTerminal('>', 'angle-addr-end'))
  1710|         0|            0|            0|  0.00%|        angle_addr.defects.append(errors.InvalidHeaderDefect(
  1711|         0|            0|            0|  0.00%|            "null addr-spec in angle-addr"))
  1712|         0|            0|            0|  0.00%|        value = value[1:]
  1713|         0|            0|            0|  0.00%|        return angle_addr, value
  1714|         0|            0|            0|  0.00%|    try:
  1715|         0|            0|            0|  0.00%|        token, value = get_addr_spec(value)
  1716|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  1717|         0|            0|            0|  0.00%|        try:
  1718|         0|            0|            0|  0.00%|            token, value = get_obs_route(value)
  1719|         0|            0|            0|  0.00%|            angle_addr.defects.append(errors.ObsoleteHeaderDefect(
  1720|         0|            0|            0|  0.00%|                "obsolete route specification in angle-addr"))
  1721|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  1722|         0|            0|            0|  0.00%|            raise errors.HeaderParseError(
  1723|         0|            0|            0|  0.00%|                "expected addr-spec or obs-route but found '{}'".format(value))
  1724|         0|            0|            0|  0.00%|        angle_addr.append(token)
  1725|         0|            0|            0|  0.00%|        token, value = get_addr_spec(value)
  1726|         0|            0|            0|  0.00%|    angle_addr.append(token)
  1727|         0|            0|            0|  0.00%|    if value and value[0] == '>':
  1728|         0|            0|            0|  0.00%|        value = value[1:]
  1729|         0|            0|            0|  0.00%|    else:
  1730|         0|            0|            0|  0.00%|        angle_addr.defects.append(errors.InvalidHeaderDefect(
  1731|         0|            0|            0|  0.00%|            "missing trailing '>' on angle-addr"))
  1732|         0|            0|            0|  0.00%|    angle_addr.append(ValueTerminal('>', 'angle-addr-end'))
  1733|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  1734|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1735|         0|            0|            0|  0.00%|        angle_addr.append(token)
  1736|         0|            0|            0|  0.00%|    return angle_addr, value
  1737|         0|            0|            0|  0.00%|
  1738|         0|            0|            0|  0.00%|def get_display_name(value):
  1739|         0|            0|            0|  0.00%|    """ display-name = phrase
  1740|         0|            0|            0|  0.00%|
  1741|         0|            0|            0|  0.00%|    Because this is simply a name-rule, we don't return a display-name
  1742|         0|            0|            0|  0.00%|    token containing a phrase, but rather a display-name token with
  1743|         0|            0|            0|  0.00%|    the content of the phrase.
  1744|         0|            0|            0|  0.00%|
  1745|         0|            0|            0|  0.00%|    """
  1746|         0|            0|            0|  0.00%|    display_name = DisplayName()
  1747|         0|            0|            0|  0.00%|    token, value = get_phrase(value)
  1748|         0|            0|            0|  0.00%|    display_name.extend(token[:])
  1749|         0|            0|            0|  0.00%|    display_name.defects = token.defects[:]
  1750|         0|            0|            0|  0.00%|    return display_name, value
  1751|         0|            0|            0|  0.00%|
  1752|         0|            0|            0|  0.00%|
  1753|         0|            0|            0|  0.00%|def get_name_addr(value):
  1754|         0|            0|            0|  0.00%|    """ name-addr = [display-name] angle-addr
  1755|         0|            0|            0|  0.00%|
  1756|         0|            0|            0|  0.00%|    """
  1757|         0|            0|            0|  0.00%|    name_addr = NameAddr()
  1758|         0|            0|            0|  0.00%|    # Both the optional display name and the angle-addr can start with cfws.
  1759|         0|            0|            0|  0.00%|    leader = None
  1760|         0|            0|            0|  0.00%|    if value[0] in CFWS_LEADER:
  1761|         0|            0|            0|  0.00%|        leader, value = get_cfws(value)
  1762|         0|            0|            0|  0.00%|        if not value:
  1763|         0|            0|            0|  0.00%|            raise errors.HeaderParseError(
  1764|         0|            0|            0|  0.00%|                "expected name-addr but found '{}'".format(leader))
  1765|         0|            0|            0|  0.00%|    if value[0] != '<':
  1766|         0|            0|            0|  0.00%|        if value[0] in PHRASE_ENDS:
  1767|         0|            0|            0|  0.00%|            raise errors.HeaderParseError(
  1768|         0|            0|            0|  0.00%|                "expected name-addr but found '{}'".format(value))
  1769|         0|            0|            0|  0.00%|        token, value = get_display_name(value)
  1770|         0|            0|            0|  0.00%|        if not value:
  1771|         0|            0|            0|  0.00%|            raise errors.HeaderParseError(
  1772|         0|            0|            0|  0.00%|                "expected name-addr but found '{}'".format(token))
  1773|         0|            0|            0|  0.00%|        if leader is not None:
  1774|         0|            0|            0|  0.00%|            token[0][:0] = [leader]
  1775|         0|            0|            0|  0.00%|            leader = None
  1776|         0|            0|            0|  0.00%|        name_addr.append(token)
  1777|         0|            0|            0|  0.00%|    token, value = get_angle_addr(value)
  1778|         0|            0|            0|  0.00%|    if leader is not None:
  1779|         0|            0|            0|  0.00%|        token[:0] = [leader]
  1780|         0|            0|            0|  0.00%|    name_addr.append(token)
  1781|         0|            0|            0|  0.00%|    return name_addr, value
  1782|         0|            0|            0|  0.00%|
  1783|         0|            0|            0|  0.00%|def get_mailbox(value):
  1784|         0|            0|            0|  0.00%|    """ mailbox = name-addr / addr-spec
  1785|         0|            0|            0|  0.00%|
  1786|         0|            0|            0|  0.00%|    """
  1787|         0|            0|            0|  0.00%|    # The only way to figure out if we are dealing with a name-addr or an
  1788|         0|            0|            0|  0.00%|    # addr-spec is to try parsing each one.
  1789|         0|            0|            0|  0.00%|    mailbox = Mailbox()
  1790|         0|            0|            0|  0.00%|    try:
  1791|         0|            0|            0|  0.00%|        token, value = get_name_addr(value)
  1792|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  1793|         0|            0|            0|  0.00%|        try:
  1794|         0|            0|            0|  0.00%|            token, value = get_addr_spec(value)
  1795|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  1796|         0|            0|            0|  0.00%|            raise errors.HeaderParseError(
  1797|         0|            0|            0|  0.00%|                "expected mailbox but found '{}'".format(value))
  1798|         0|            0|            0|  0.00%|    if any(isinstance(x, errors.InvalidHeaderDefect)
  1799|         0|            0|            0|  0.00%|                       for x in token.all_defects):
  1800|         0|            0|            0|  0.00%|        mailbox.token_type = 'invalid-mailbox'
  1801|         0|            0|            0|  0.00%|    mailbox.append(token)
  1802|         0|            0|            0|  0.00%|    return mailbox, value
  1803|         0|            0|            0|  0.00%|
  1804|         0|            0|            0|  0.00%|def get_invalid_mailbox(value, endchars):
  1805|         0|            0|            0|  0.00%|    """ Read everything up to one of the chars in endchars.
  1806|         0|            0|            0|  0.00%|
  1807|         0|            0|            0|  0.00%|    This is outside the formal grammar.  The InvalidMailbox TokenList that is
  1808|         0|            0|            0|  0.00%|    returned acts like a Mailbox, but the data attributes are None.
  1809|         0|            0|            0|  0.00%|
  1810|         0|            0|            0|  0.00%|    """
  1811|         0|            0|            0|  0.00%|    invalid_mailbox = InvalidMailbox()
  1812|         0|            0|            0|  0.00%|    while value and value[0] not in endchars:
  1813|         0|            0|            0|  0.00%|        if value[0] in PHRASE_ENDS:
  1814|         0|            0|            0|  0.00%|            invalid_mailbox.append(ValueTerminal(value[0],
  1815|         0|            0|            0|  0.00%|                                                 'misplaced-special'))
  1816|         0|            0|            0|  0.00%|            value = value[1:]
  1817|         0|            0|            0|  0.00%|        else:
  1818|         0|            0|            0|  0.00%|            token, value = get_phrase(value)
  1819|         0|            0|            0|  0.00%|            invalid_mailbox.append(token)
  1820|         0|            0|            0|  0.00%|    return invalid_mailbox, value
  1821|         0|            0|            0|  0.00%|
  1822|         0|            0|            0|  0.00%|def get_mailbox_list(value):
  1823|         0|            0|            0|  0.00%|    """ mailbox-list = (mailbox *("," mailbox)) / obs-mbox-list
  1824|         0|            0|            0|  0.00%|        obs-mbox-list = *([CFWS] ",") mailbox *("," [mailbox / CFWS])
  1825|         0|            0|            0|  0.00%|
  1826|         0|            0|            0|  0.00%|    For this routine we go outside the formal grammar in order to improve error
  1827|         0|            0|            0|  0.00%|    handling.  We recognize the end of the mailbox list only at the end of the
  1828|         0|            0|            0|  0.00%|    value or at a ';' (the group terminator).  This is so that we can turn
  1829|         0|            0|            0|  0.00%|    invalid mailboxes into InvalidMailbox tokens and continue parsing any
  1830|         0|            0|            0|  0.00%|    remaining valid mailboxes.  We also allow all mailbox entries to be null,
  1831|         0|            0|            0|  0.00%|    and this condition is handled appropriately at a higher level.
  1832|         0|            0|            0|  0.00%|
  1833|         0|            0|            0|  0.00%|    """
  1834|         0|            0|            0|  0.00%|    mailbox_list = MailboxList()
  1835|         0|            0|            0|  0.00%|    while value and value[0] != ';':
  1836|         0|            0|            0|  0.00%|        try:
  1837|         0|            0|            0|  0.00%|            token, value = get_mailbox(value)
  1838|         0|            0|            0|  0.00%|            mailbox_list.append(token)
  1839|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  1840|         0|            0|            0|  0.00%|            leader = None
  1841|         0|            0|            0|  0.00%|            if value[0] in CFWS_LEADER:
  1842|         0|            0|            0|  0.00%|                leader, value = get_cfws(value)
  1843|         0|            0|            0|  0.00%|                if not value or value[0] in ',;':
  1844|         0|            0|            0|  0.00%|                    mailbox_list.append(leader)
  1845|         0|            0|            0|  0.00%|                    mailbox_list.defects.append(errors.ObsoleteHeaderDefect(
  1846|         0|            0|            0|  0.00%|                        "empty element in mailbox-list"))
  1847|         0|            0|            0|  0.00%|                else:
  1848|         0|            0|            0|  0.00%|                    token, value = get_invalid_mailbox(value, ',;')
  1849|         0|            0|            0|  0.00%|                    if leader is not None:
  1850|         0|            0|            0|  0.00%|                        token[:0] = [leader]
  1851|         0|            0|            0|  0.00%|                    mailbox_list.append(token)
  1852|         0|            0|            0|  0.00%|                    mailbox_list.defects.append(errors.InvalidHeaderDefect(
  1853|         0|            0|            0|  0.00%|                        "invalid mailbox in mailbox-list"))
  1854|         0|            0|            0|  0.00%|            elif value[0] == ',':
  1855|         0|            0|            0|  0.00%|                mailbox_list.defects.append(errors.ObsoleteHeaderDefect(
  1856|         0|            0|            0|  0.00%|                    "empty element in mailbox-list"))
  1857|         0|            0|            0|  0.00%|            else:
  1858|         0|            0|            0|  0.00%|                token, value = get_invalid_mailbox(value, ',;')
  1859|         0|            0|            0|  0.00%|                if leader is not None:
  1860|         0|            0|            0|  0.00%|                    token[:0] = [leader]
  1861|         0|            0|            0|  0.00%|                mailbox_list.append(token)
  1862|         0|            0|            0|  0.00%|                mailbox_list.defects.append(errors.InvalidHeaderDefect(
  1863|         0|            0|            0|  0.00%|                    "invalid mailbox in mailbox-list"))
  1864|         0|            0|            0|  0.00%|        if value and value[0] not in ',;':
  1865|         0|            0|            0|  0.00%|            # Crap after mailbox; treat it as an invalid mailbox.
  1866|         0|            0|            0|  0.00%|            # The mailbox info will still be available.
  1867|         0|            0|            0|  0.00%|            mailbox = mailbox_list[-1]
  1868|         0|            0|            0|  0.00%|            mailbox.token_type = 'invalid-mailbox'
  1869|         0|            0|            0|  0.00%|            token, value = get_invalid_mailbox(value, ',;')
  1870|         0|            0|            0|  0.00%|            mailbox.extend(token)
  1871|         0|            0|            0|  0.00%|            mailbox_list.defects.append(errors.InvalidHeaderDefect(
  1872|         0|            0|            0|  0.00%|                "invalid mailbox in mailbox-list"))
  1873|         0|            0|            0|  0.00%|        if value and value[0] == ',':
  1874|         0|            0|            0|  0.00%|            mailbox_list.append(ListSeparator)
  1875|         0|            0|            0|  0.00%|            value = value[1:]
  1876|         0|            0|            0|  0.00%|    return mailbox_list, value
  1877|         0|            0|            0|  0.00%|
  1878|         0|            0|            0|  0.00%|
  1879|         0|            0|            0|  0.00%|def get_group_list(value):
  1880|         0|            0|            0|  0.00%|    """ group-list = mailbox-list / CFWS / obs-group-list
  1881|         0|            0|            0|  0.00%|        obs-group-list = 1*([CFWS] ",") [CFWS]
  1882|         0|            0|            0|  0.00%|
  1883|         0|            0|            0|  0.00%|    """
  1884|         0|            0|            0|  0.00%|    group_list = GroupList()
  1885|         0|            0|            0|  0.00%|    if not value:
  1886|         0|            0|            0|  0.00%|        group_list.defects.append(errors.InvalidHeaderDefect(
  1887|         0|            0|            0|  0.00%|            "end of header before group-list"))
  1888|         0|            0|            0|  0.00%|        return group_list, value
  1889|         0|            0|            0|  0.00%|    leader = None
  1890|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  1891|         0|            0|            0|  0.00%|        leader, value = get_cfws(value)
  1892|         0|            0|            0|  0.00%|        if not value:
  1893|         0|            0|            0|  0.00%|            # This should never happen in email parsing, since CFWS-only is a
  1894|         0|            0|            0|  0.00%|            # legal alternative to group-list in a group, which is the only
  1895|         0|            0|            0|  0.00%|            # place group-list appears.
  1896|         0|            0|            0|  0.00%|            group_list.defects.append(errors.InvalidHeaderDefect(
  1897|         0|            0|            0|  0.00%|                "end of header in group-list"))
  1898|         0|            0|            0|  0.00%|            group_list.append(leader)
  1899|         0|            0|            0|  0.00%|            return group_list, value
  1900|         0|            0|            0|  0.00%|        if value[0] == ';':
  1901|         0|            0|            0|  0.00%|            group_list.append(leader)
  1902|         0|            0|            0|  0.00%|            return group_list, value
  1903|         0|            0|            0|  0.00%|    token, value = get_mailbox_list(value)
  1904|         0|            0|            0|  0.00%|    if len(token.all_mailboxes)==0:
  1905|         0|            0|            0|  0.00%|        if leader is not None:
  1906|         0|            0|            0|  0.00%|            group_list.append(leader)
  1907|         0|            0|            0|  0.00%|        group_list.extend(token)
  1908|         0|            0|            0|  0.00%|        group_list.defects.append(errors.ObsoleteHeaderDefect(
  1909|         0|            0|            0|  0.00%|            "group-list with empty entries"))
  1910|         0|            0|            0|  0.00%|        return group_list, value
  1911|         0|            0|            0|  0.00%|    if leader is not None:
  1912|         0|            0|            0|  0.00%|        token[:0] = [leader]
  1913|         0|            0|            0|  0.00%|    group_list.append(token)
  1914|         0|            0|            0|  0.00%|    return group_list, value
  1915|         0|            0|            0|  0.00%|
  1916|         0|            0|            0|  0.00%|def get_group(value):
  1917|         0|            0|            0|  0.00%|    """ group = display-name ":" [group-list] ";" [CFWS]
  1918|         0|            0|            0|  0.00%|
  1919|         0|            0|            0|  0.00%|    """
  1920|         0|            0|            0|  0.00%|    group = Group()
  1921|         0|            0|            0|  0.00%|    token, value = get_display_name(value)
  1922|         0|            0|            0|  0.00%|    if not value or value[0] != ':':
  1923|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("expected ':' at end of group "
  1924|         0|            0|            0|  0.00%|            "display name but found '{}'".format(value))
  1925|         0|            0|            0|  0.00%|    group.append(token)
  1926|         0|            0|            0|  0.00%|    group.append(ValueTerminal(':', 'group-display-name-terminator'))
  1927|         0|            0|            0|  0.00%|    value = value[1:]
  1928|         0|            0|            0|  0.00%|    if value and value[0] == ';':
  1929|         0|            0|            0|  0.00%|        group.append(ValueTerminal(';', 'group-terminator'))
  1930|         0|            0|            0|  0.00%|        return group, value[1:]
  1931|         0|            0|            0|  0.00%|    token, value = get_group_list(value)
  1932|         0|            0|            0|  0.00%|    group.append(token)
  1933|         0|            0|            0|  0.00%|    if not value:
  1934|         0|            0|            0|  0.00%|        group.defects.append(errors.InvalidHeaderDefect(
  1935|         0|            0|            0|  0.00%|            "end of header in group"))
  1936|         0|            0|            0|  0.00%|    elif value[0] != ';':
  1937|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  1938|         0|            0|            0|  0.00%|            "expected ';' at end of group but found {}".format(value))
  1939|         0|            0|            0|  0.00%|    group.append(ValueTerminal(';', 'group-terminator'))
  1940|         0|            0|            0|  0.00%|    value = value[1:]
  1941|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  1942|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  1943|         0|            0|            0|  0.00%|        group.append(token)
  1944|         0|            0|            0|  0.00%|    return group, value
  1945|         0|            0|            0|  0.00%|
  1946|         0|            0|            0|  0.00%|def get_address(value):
  1947|         0|            0|            0|  0.00%|    """ address = mailbox / group
  1948|         0|            0|            0|  0.00%|
  1949|         0|            0|            0|  0.00%|    Note that counter-intuitively, an address can be either a single address or
  1950|         0|            0|            0|  0.00%|    a list of addresses (a group).  This is why the returned Address object has
  1951|         0|            0|            0|  0.00%|    a 'mailboxes' attribute which treats a single address as a list of length
  1952|         0|            0|            0|  0.00%|    one.  When you need to differentiate between to two cases, extract the single
  1953|         0|            0|            0|  0.00%|    element, which is either a mailbox or a group token.
  1954|         0|            0|            0|  0.00%|
  1955|         0|            0|            0|  0.00%|    """
  1956|         0|            0|            0|  0.00%|    # The formal grammar isn't very helpful when parsing an address.  mailbox
  1957|         0|            0|            0|  0.00%|    # and group, especially when allowing for obsolete forms, start off very
  1958|         0|            0|            0|  0.00%|    # similarly.  It is only when you reach one of @, <, or : that you know
  1959|         0|            0|            0|  0.00%|    # what you've got.  So, we try each one in turn, starting with the more
  1960|         0|            0|            0|  0.00%|    # likely of the two.  We could perhaps make this more efficient by looking
  1961|         0|            0|            0|  0.00%|    # for a phrase and then branching based on the next character, but that
  1962|         0|            0|            0|  0.00%|    # would be a premature optimization.
  1963|         0|            0|            0|  0.00%|    address = Address()
  1964|         0|            0|            0|  0.00%|    try:
  1965|         0|            0|            0|  0.00%|        token, value = get_group(value)
  1966|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  1967|         0|            0|            0|  0.00%|        try:
  1968|         0|            0|            0|  0.00%|            token, value = get_mailbox(value)
  1969|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  1970|         0|            0|            0|  0.00%|            raise errors.HeaderParseError(
  1971|         0|            0|            0|  0.00%|                "expected address but found '{}'".format(value))
  1972|         0|            0|            0|  0.00%|    address.append(token)
  1973|         0|            0|            0|  0.00%|    return address, value
  1974|         0|            0|            0|  0.00%|
  1975|         0|            0|            0|  0.00%|def get_address_list(value):
  1976|         0|            0|            0|  0.00%|    """ address_list = (address *("," address)) / obs-addr-list
  1977|         0|            0|            0|  0.00%|        obs-addr-list = *([CFWS] ",") address *("," [address / CFWS])
  1978|         0|            0|            0|  0.00%|
  1979|         0|            0|            0|  0.00%|    We depart from the formal grammar here by continuing to parse until the end
  1980|         0|            0|            0|  0.00%|    of the input, assuming the input to be entirely composed of an
  1981|         0|            0|            0|  0.00%|    address-list.  This is always true in email parsing, and allows us
  1982|         0|            0|            0|  0.00%|    to skip invalid addresses to parse additional valid ones.
  1983|         0|            0|            0|  0.00%|
  1984|         0|            0|            0|  0.00%|    """
  1985|         0|            0|            0|  0.00%|    address_list = AddressList()
  1986|         0|            0|            0|  0.00%|    while value:
  1987|         0|            0|            0|  0.00%|        try:
  1988|         0|            0|            0|  0.00%|            token, value = get_address(value)
  1989|         0|            0|            0|  0.00%|            address_list.append(token)
  1990|         0|            0|            0|  0.00%|        except errors.HeaderParseError as err:
  1991|         0|            0|            0|  0.00%|            leader = None
  1992|         0|            0|            0|  0.00%|            if value[0] in CFWS_LEADER:
  1993|         0|            0|            0|  0.00%|                leader, value = get_cfws(value)
  1994|         0|            0|            0|  0.00%|                if not value or value[0] == ',':
  1995|         0|            0|            0|  0.00%|                    address_list.append(leader)
  1996|         0|            0|            0|  0.00%|                    address_list.defects.append(errors.ObsoleteHeaderDefect(
  1997|         0|            0|            0|  0.00%|                        "address-list entry with no content"))
  1998|         0|            0|            0|  0.00%|                else:
  1999|         0|            0|            0|  0.00%|                    token, value = get_invalid_mailbox(value, ',')
  2000|         0|            0|            0|  0.00%|                    if leader is not None:
  2001|         0|            0|            0|  0.00%|                        token[:0] = [leader]
  2002|         0|            0|            0|  0.00%|                    address_list.append(Address([token]))
  2003|         0|            0|            0|  0.00%|                    address_list.defects.append(errors.InvalidHeaderDefect(
  2004|         0|            0|            0|  0.00%|                        "invalid address in address-list"))
  2005|         0|            0|            0|  0.00%|            elif value[0] == ',':
  2006|         0|            0|            0|  0.00%|                address_list.defects.append(errors.ObsoleteHeaderDefect(
  2007|         0|            0|            0|  0.00%|                    "empty element in address-list"))
  2008|         0|            0|            0|  0.00%|            else:
  2009|         0|            0|            0|  0.00%|                token, value = get_invalid_mailbox(value, ',')
  2010|         0|            0|            0|  0.00%|                if leader is not None:
  2011|         0|            0|            0|  0.00%|                    token[:0] = [leader]
  2012|         0|            0|            0|  0.00%|                address_list.append(Address([token]))
  2013|         0|            0|            0|  0.00%|                address_list.defects.append(errors.InvalidHeaderDefect(
  2014|         0|            0|            0|  0.00%|                    "invalid address in address-list"))
  2015|         0|            0|            0|  0.00%|        if value and value[0] != ',':
  2016|         0|            0|            0|  0.00%|            # Crap after address; treat it as an invalid mailbox.
  2017|         0|            0|            0|  0.00%|            # The mailbox info will still be available.
  2018|         0|            0|            0|  0.00%|            mailbox = address_list[-1][0]
  2019|         0|            0|            0|  0.00%|            mailbox.token_type = 'invalid-mailbox'
  2020|         0|            0|            0|  0.00%|            token, value = get_invalid_mailbox(value, ',')
  2021|         0|            0|            0|  0.00%|            mailbox.extend(token)
  2022|         0|            0|            0|  0.00%|            address_list.defects.append(errors.InvalidHeaderDefect(
  2023|         0|            0|            0|  0.00%|                "invalid address in address-list"))
  2024|         0|            0|            0|  0.00%|        if value:  # Must be a , at this point.
  2025|         0|            0|            0|  0.00%|            address_list.append(ValueTerminal(',', 'list-separator'))
  2026|         0|            0|            0|  0.00%|            value = value[1:]
  2027|         0|            0|            0|  0.00%|    return address_list, value
  2028|         0|            0|            0|  0.00%|
  2029|         0|            0|            0|  0.00%|
  2030|         0|            0|            0|  0.00%|def get_no_fold_literal(value):
  2031|         0|            0|            0|  0.00%|    """ no-fold-literal = "[" *dtext "]"
  2032|         0|            0|            0|  0.00%|    """
  2033|         0|            0|            0|  0.00%|    no_fold_literal = NoFoldLiteral()
  2034|         0|            0|            0|  0.00%|    if not value:
  2035|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2036|         0|            0|            0|  0.00%|            "expected no-fold-literal but found '{}'".format(value))
  2037|         0|            0|            0|  0.00%|    if value[0] != '[':
  2038|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2039|         0|            0|            0|  0.00%|            "expected '[' at the start of no-fold-literal "
  2040|         0|            0|            0|  0.00%|            "but found '{}'".format(value))
  2041|         0|            0|            0|  0.00%|    no_fold_literal.append(ValueTerminal('[', 'no-fold-literal-start'))
  2042|         0|            0|            0|  0.00%|    value = value[1:]
  2043|         0|            0|            0|  0.00%|    token, value = get_dtext(value)
  2044|         0|            0|            0|  0.00%|    no_fold_literal.append(token)
  2045|         0|            0|            0|  0.00%|    if not value or value[0] != ']':
  2046|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2047|         0|            0|            0|  0.00%|            "expected ']' at the end of no-fold-literal "
  2048|         0|            0|            0|  0.00%|            "but found '{}'".format(value))
  2049|         0|            0|            0|  0.00%|    no_fold_literal.append(ValueTerminal(']', 'no-fold-literal-end'))
  2050|         0|            0|            0|  0.00%|    return no_fold_literal, value[1:]
  2051|         0|            0|            0|  0.00%|
  2052|         0|            0|            0|  0.00%|def get_msg_id(value):
  2053|         0|            0|            0|  0.00%|    """msg-id = [CFWS] "<" id-left '@' id-right  ">" [CFWS]
  2054|         0|            0|            0|  0.00%|       id-left = dot-atom-text / obs-id-left
  2055|         0|            0|            0|  0.00%|       id-right = dot-atom-text / no-fold-literal / obs-id-right
  2056|         0|            0|            0|  0.00%|       no-fold-literal = "[" *dtext "]"
  2057|         0|            0|            0|  0.00%|    """
  2058|         0|            0|            0|  0.00%|    msg_id = MsgID()
  2059|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  2060|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2061|         0|            0|            0|  0.00%|        msg_id.append(token)
  2062|         0|            0|            0|  0.00%|    if not value or value[0] != '<':
  2063|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2064|         0|            0|            0|  0.00%|            "expected msg-id but found '{}'".format(value))
  2065|         0|            0|            0|  0.00%|    msg_id.append(ValueTerminal('<', 'msg-id-start'))
  2066|         0|            0|            0|  0.00%|    value = value[1:]
  2067|         0|            0|            0|  0.00%|    # Parse id-left.
  2068|         0|            0|            0|  0.00%|    try:
  2069|         0|            0|            0|  0.00%|        token, value = get_dot_atom_text(value)
  2070|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  2071|         0|            0|            0|  0.00%|        try:
  2072|         0|            0|            0|  0.00%|            # obs-id-left is same as local-part of add-spec.
  2073|         0|            0|            0|  0.00%|            token, value = get_obs_local_part(value)
  2074|         0|            0|            0|  0.00%|            msg_id.defects.append(errors.ObsoleteHeaderDefect(
  2075|         0|            0|            0|  0.00%|                "obsolete id-left in msg-id"))
  2076|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  2077|         0|            0|            0|  0.00%|            raise errors.HeaderParseError(
  2078|         0|            0|            0|  0.00%|                "expected dot-atom-text or obs-id-left"
  2079|         0|            0|            0|  0.00%|                " but found '{}'".format(value))
  2080|         0|            0|            0|  0.00%|    msg_id.append(token)
  2081|         0|            0|            0|  0.00%|    if not value or value[0] != '@':
  2082|         0|            0|            0|  0.00%|        msg_id.defects.append(errors.InvalidHeaderDefect(
  2083|         0|            0|            0|  0.00%|            "msg-id with no id-right"))
  2084|         0|            0|            0|  0.00%|        # Even though there is no id-right, if the local part
  2085|         0|            0|            0|  0.00%|        # ends with `>` let's just parse it too and return
  2086|         0|            0|            0|  0.00%|        # along with the defect.
  2087|         0|            0|            0|  0.00%|        if value and value[0] == '>':
  2088|         0|            0|            0|  0.00%|            msg_id.append(ValueTerminal('>', 'msg-id-end'))
  2089|         0|            0|            0|  0.00%|            value = value[1:]
  2090|         0|            0|            0|  0.00%|        return msg_id, value
  2091|         0|            0|            0|  0.00%|    msg_id.append(ValueTerminal('@', 'address-at-symbol'))
  2092|         0|            0|            0|  0.00%|    value = value[1:]
  2093|         0|            0|            0|  0.00%|    # Parse id-right.
  2094|         0|            0|            0|  0.00%|    try:
  2095|         0|            0|            0|  0.00%|        token, value = get_dot_atom_text(value)
  2096|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  2097|         0|            0|            0|  0.00%|        try:
  2098|         0|            0|            0|  0.00%|            token, value = get_no_fold_literal(value)
  2099|         0|            0|            0|  0.00%|        except errors.HeaderParseError as e:
  2100|         0|            0|            0|  0.00%|            try:
  2101|         0|            0|            0|  0.00%|                token, value = get_domain(value)
  2102|         0|            0|            0|  0.00%|                msg_id.defects.append(errors.ObsoleteHeaderDefect(
  2103|         0|            0|            0|  0.00%|                    "obsolete id-right in msg-id"))
  2104|         0|            0|            0|  0.00%|            except errors.HeaderParseError:
  2105|         0|            0|            0|  0.00%|                raise errors.HeaderParseError(
  2106|         0|            0|            0|  0.00%|                    "expected dot-atom-text, no-fold-literal or obs-id-right"
  2107|         0|            0|            0|  0.00%|                    " but found '{}'".format(value))
  2108|         0|            0|            0|  0.00%|    msg_id.append(token)
  2109|         0|            0|            0|  0.00%|    if value and value[0] == '>':
  2110|         0|            0|            0|  0.00%|        value = value[1:]
  2111|         0|            0|            0|  0.00%|    else:
  2112|         0|            0|            0|  0.00%|        msg_id.defects.append(errors.InvalidHeaderDefect(
  2113|         0|            0|            0|  0.00%|            "missing trailing '>' on msg-id"))
  2114|         0|            0|            0|  0.00%|    msg_id.append(ValueTerminal('>', 'msg-id-end'))
  2115|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  2116|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2117|         0|            0|            0|  0.00%|        msg_id.append(token)
  2118|         0|            0|            0|  0.00%|    return msg_id, value
  2119|         0|            0|            0|  0.00%|
  2120|         0|            0|            0|  0.00%|
  2121|         0|            0|            0|  0.00%|def parse_message_id(value):
  2122|         0|            0|            0|  0.00%|    """message-id      =   "Message-ID:" msg-id CRLF
  2123|         0|            0|            0|  0.00%|    """
  2124|         0|            0|            0|  0.00%|    message_id = MessageID()
  2125|         0|            0|            0|  0.00%|    try:
  2126|         0|            0|            0|  0.00%|        token, value = get_msg_id(value)
  2127|         0|            0|            0|  0.00%|        message_id.append(token)
  2128|         0|            0|            0|  0.00%|    except errors.HeaderParseError as ex:
  2129|         0|            0|            0|  0.00%|        token = get_unstructured(value)
  2130|         0|            0|            0|  0.00%|        message_id = InvalidMessageID(token)
  2131|         0|            0|            0|  0.00%|        message_id.defects.append(
  2132|         0|            0|            0|  0.00%|            errors.InvalidHeaderDefect("Invalid msg-id: {!r}".format(ex)))
  2133|         0|            0|            0|  0.00%|    else:
  2134|         0|            0|            0|  0.00%|        # Value after parsing a valid msg_id should be None.
  2135|         0|            0|            0|  0.00%|        if value:
  2136|         0|            0|            0|  0.00%|            message_id.defects.append(errors.InvalidHeaderDefect(
  2137|         0|            0|            0|  0.00%|                "Unexpected {!r}".format(value)))
  2138|         0|            0|            0|  0.00%|
  2139|         0|            0|            0|  0.00%|    return message_id
  2140|         0|            0|            0|  0.00%|
  2141|         0|            0|            0|  0.00%|#
  2142|         0|            0|            0|  0.00%|# XXX: As I begin to add additional header parsers, I'm realizing we probably
  2143|         0|            0|            0|  0.00%|# have two level of parser routines: the get_XXX methods that get a token in
  2144|         0|            0|            0|  0.00%|# the grammar, and parse_XXX methods that parse an entire field value.  So
  2145|         0|            0|            0|  0.00%|# get_address_list above should really be a parse_ method, as probably should
  2146|         0|            0|            0|  0.00%|# be get_unstructured.
  2147|         0|            0|            0|  0.00%|#
  2148|         0|            0|            0|  0.00%|
  2149|         1|  5.00679e-06|  5.00679e-06|  0.00%|def parse_mime_version(value):
  2150|         0|            0|            0|  0.00%|    """ mime-version = [CFWS] 1*digit [CFWS] "." [CFWS] 1*digit [CFWS]
  2151|         0|            0|            0|  0.00%|
  2152|         0|            0|            0|  0.00%|    """
  2153|         0|            0|            0|  0.00%|    # The [CFWS] is implicit in the RFC 2045 BNF.
  2154|         0|            0|            0|  0.00%|    # XXX: This routine is a bit verbose, should factor out a get_int method.
  2155|         1|  1.07288e-05|  1.07288e-05|  0.00%|    mime_version = MIMEVersion()
(call)|         1|  1.09673e-05|  1.09673e-05|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  2156|         1|  4.29153e-06|  4.29153e-06|  0.00%|    if not value:
  2157|         0|            0|            0|  0.00%|        mime_version.defects.append(errors.HeaderMissingRequiredValue(
  2158|         0|            0|            0|  0.00%|            "Missing MIME version number (eg: 1.0)"))
  2159|         0|            0|            0|  0.00%|        return mime_version
  2160|         1|  4.29153e-06|  4.29153e-06|  0.00%|    if value[0] in CFWS_LEADER:
  2161|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2162|         0|            0|            0|  0.00%|        mime_version.append(token)
  2163|         0|            0|            0|  0.00%|        if not value:
  2164|         0|            0|            0|  0.00%|            mime_version.defects.append(errors.HeaderMissingRequiredValue(
  2165|         0|            0|            0|  0.00%|                "Expected MIME version number but found only CFWS"))
  2166|         1|  3.57628e-06|  3.57628e-06|  0.00%|    digits = ''
  2167|         2|  8.10623e-06|  4.05312e-06|  0.00%|    while value and value[0] != '.' and value[0] not in CFWS_LEADER:
  2168|         1|  4.05312e-06|  4.05312e-06|  0.00%|        digits += value[0]
  2169|         1|   3.8147e-06|   3.8147e-06|  0.00%|        value = value[1:]
  2170|         1|  5.24521e-06|  5.24521e-06|  0.00%|    if not digits.isdigit():
  2171|         0|            0|            0|  0.00%|        mime_version.defects.append(errors.InvalidHeaderDefect(
  2172|         0|            0|            0|  0.00%|            "Expected MIME major version number but found {!r}".format(digits)))
  2173|         0|            0|            0|  0.00%|        mime_version.append(ValueTerminal(digits, 'xtext'))
  2174|         0|            0|            0|  0.00%|    else:
  2175|         1|  4.76837e-06|  4.76837e-06|  0.00%|        mime_version.major = int(digits)
  2176|         1|  1.16825e-05|  1.16825e-05|  0.00%|        mime_version.append(ValueTerminal(digits, 'digits'))
(call)|         1|  1.74046e-05|  1.74046e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  2177|         1|  4.29153e-06|  4.29153e-06|  0.00%|    if value and value[0] in CFWS_LEADER:
  2178|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2179|         0|            0|            0|  0.00%|        mime_version.append(token)
  2180|         1|  3.57628e-06|  3.57628e-06|  0.00%|    if not value or value[0] != '.':
  2181|         0|            0|            0|  0.00%|        if mime_version.major is not None:
  2182|         0|            0|            0|  0.00%|            mime_version.defects.append(errors.InvalidHeaderDefect(
  2183|         0|            0|            0|  0.00%|                "Incomplete MIME version; found only major number"))
  2184|         0|            0|            0|  0.00%|        if value:
  2185|         0|            0|            0|  0.00%|            mime_version.append(ValueTerminal(value, 'xtext'))
  2186|         0|            0|            0|  0.00%|        return mime_version
  2187|         1|  9.05991e-06|  9.05991e-06|  0.00%|    mime_version.append(ValueTerminal('.', 'version-separator'))
(call)|         1|  1.64509e-05|  1.64509e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  2188|         1|  4.29153e-06|  4.29153e-06|  0.00%|    value = value[1:]
  2189|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if value and value[0] in CFWS_LEADER:
  2190|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2191|         0|            0|            0|  0.00%|        mime_version.append(token)
  2192|         1|  5.00679e-06|  5.00679e-06|  0.00%|    if not value:
  2193|         0|            0|            0|  0.00%|        if mime_version.major is not None:
  2194|         0|            0|            0|  0.00%|            mime_version.defects.append(errors.InvalidHeaderDefect(
  2195|         0|            0|            0|  0.00%|                "Incomplete MIME version; found only major number"))
  2196|         0|            0|            0|  0.00%|        return mime_version
  2197|         1|  4.05312e-06|  4.05312e-06|  0.00%|    digits = ''
  2198|         2|  7.62939e-06|   3.8147e-06|  0.00%|    while value and value[0] not in CFWS_LEADER:
  2199|         1|   3.8147e-06|   3.8147e-06|  0.00%|        digits += value[0]
  2200|         1|   3.8147e-06|   3.8147e-06|  0.00%|        value = value[1:]
  2201|         1|  3.33786e-06|  3.33786e-06|  0.00%|    if not digits.isdigit():
  2202|         0|            0|            0|  0.00%|        mime_version.defects.append(errors.InvalidHeaderDefect(
  2203|         0|            0|            0|  0.00%|            "Expected MIME minor version number but found {!r}".format(digits)))
  2204|         0|            0|            0|  0.00%|        mime_version.append(ValueTerminal(digits, 'xtext'))
  2205|         0|            0|            0|  0.00%|    else:
  2206|         1|  4.29153e-06|  4.29153e-06|  0.00%|        mime_version.minor = int(digits)
  2207|         1|  9.05991e-06|  9.05991e-06|  0.00%|        mime_version.append(ValueTerminal(digits, 'digits'))
(call)|         1|   1.5974e-05|   1.5974e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  2208|         1|  5.72205e-06|  5.72205e-06|  0.00%|    if value and value[0] in CFWS_LEADER:
  2209|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2210|         0|            0|            0|  0.00%|        mime_version.append(token)
  2211|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if value:
  2212|         0|            0|            0|  0.00%|        mime_version.defects.append(errors.InvalidHeaderDefect(
  2213|         0|            0|            0|  0.00%|            "Excess non-CFWS text after MIME version"))
  2214|         0|            0|            0|  0.00%|        mime_version.append(ValueTerminal(value, 'xtext'))
  2215|         1|   3.8147e-06|   3.8147e-06|  0.00%|    return mime_version
  2216|         0|            0|            0|  0.00%|
  2217|         0|            0|            0|  0.00%|def get_invalid_parameter(value):
  2218|         0|            0|            0|  0.00%|    """ Read everything up to the next ';'.
  2219|         0|            0|            0|  0.00%|
  2220|         0|            0|            0|  0.00%|    This is outside the formal grammar.  The InvalidParameter TokenList that is
  2221|         0|            0|            0|  0.00%|    returned acts like a Parameter, but the data attributes are None.
  2222|         0|            0|            0|  0.00%|
  2223|         0|            0|            0|  0.00%|    """
  2224|         0|            0|            0|  0.00%|    invalid_parameter = InvalidParameter()
  2225|         0|            0|            0|  0.00%|    while value and value[0] != ';':
  2226|         0|            0|            0|  0.00%|        if value[0] in PHRASE_ENDS:
  2227|         0|            0|            0|  0.00%|            invalid_parameter.append(ValueTerminal(value[0],
  2228|         0|            0|            0|  0.00%|                                                   'misplaced-special'))
  2229|         0|            0|            0|  0.00%|            value = value[1:]
  2230|         0|            0|            0|  0.00%|        else:
  2231|         0|            0|            0|  0.00%|            token, value = get_phrase(value)
  2232|         0|            0|            0|  0.00%|            invalid_parameter.append(token)
  2233|         0|            0|            0|  0.00%|    return invalid_parameter, value
  2234|         0|            0|            0|  0.00%|
  2235|         5|  1.66893e-05|  3.33786e-06|  0.01%|def get_ttext(value):
  2236|         0|            0|            0|  0.00%|    """ttext = <matches _ttext_matcher>
  2237|         0|            0|            0|  0.00%|
  2238|         0|            0|            0|  0.00%|    We allow any non-TOKEN_ENDS in ttext, but add defects to the token's
  2239|         0|            0|            0|  0.00%|    defects list if we find non-ttext characters.  We also register defects for
  2240|         0|            0|            0|  0.00%|    *any* non-printables even though the RFC doesn't exclude all of them,
  2241|         0|            0|            0|  0.00%|    because we follow the spirit of RFC 5322.
  2242|         0|            0|            0|  0.00%|
  2243|         0|            0|            0|  0.00%|    """
  2244|         5|  2.64645e-05|  5.29289e-06|  0.01%|    m = _non_token_end_matcher(value)
  2245|         5|  1.81198e-05|  3.62396e-06|  0.01%|    if not m:
  2246|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2247|         0|            0|            0|  0.00%|            "expected ttext but found '{}'".format(value))
  2248|         5|  1.97887e-05|  3.95775e-06|  0.01%|    ttext = m.group()
  2249|         5|   1.7643e-05|  3.52859e-06|  0.01%|    value = value[len(ttext):]
  2250|         5|  4.48227e-05|  8.96454e-06|  0.02%|    ttext = ValueTerminal(ttext, 'ttext')
(call)|         5|  8.63075e-05|  1.72615e-05|  0.04%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  2251|         5|  4.48227e-05|  8.96454e-06|  0.02%|    _validate_xtext(ttext)
(call)|         5|   0.00015974|  3.19481e-05|  0.07%|# /usr/lib/python3.10/email/_header_value_parser.py:986 _validate_xtext
  2252|         5|   1.7643e-05|  3.52859e-06|  0.01%|    return ttext, value
  2253|         0|            0|            0|  0.00%|
  2254|         5|  1.97887e-05|  3.95775e-06|  0.01%|def get_token(value):
  2255|         0|            0|            0|  0.00%|    """token = [CFWS] 1*ttext [CFWS]
  2256|         0|            0|            0|  0.00%|
  2257|         0|            0|            0|  0.00%|    The RFC equivalent of ttext is any US-ASCII chars except space, ctls, or
  2258|         0|            0|            0|  0.00%|    tspecials.  We also exclude tabs even though the RFC doesn't.
  2259|         0|            0|            0|  0.00%|
  2260|         0|            0|            0|  0.00%|    The RFC implies the CFWS but is not explicit about it in the BNF.
  2261|         0|            0|            0|  0.00%|
  2262|         0|            0|            0|  0.00%|    """
  2263|         5|  4.41074e-05|  8.82149e-06|  0.02%|    mtoken = Token()
(call)|         5|  6.10352e-05|   1.2207e-05|  0.03%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  2264|         5|  2.00272e-05|  4.00543e-06|  0.01%|    if value and value[0] in CFWS_LEADER:
  2265|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2266|         0|            0|            0|  0.00%|        mtoken.append(token)
  2267|         5|  1.78814e-05|  3.57628e-06|  0.01%|    if value and value[0] in TOKEN_ENDS:
  2268|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2269|         0|            0|            0|  0.00%|            "expected token but found '{}'".format(value))
  2270|         5|  4.55379e-05|  9.10759e-06|  0.02%|    token, value = get_ttext(value)
(call)|         5|  0.000452042|  9.04083e-05|  0.19%|# /usr/lib/python3.10/email/_header_value_parser.py:2235 get_ttext
  2271|         5|  2.00272e-05|  4.00543e-06|  0.01%|    mtoken.append(token)
  2272|         5|  1.85966e-05|  3.71933e-06|  0.01%|    if value and value[0] in CFWS_LEADER:
  2273|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2274|         0|            0|            0|  0.00%|        mtoken.append(token)
  2275|         5|  1.85966e-05|  3.71933e-06|  0.01%|    return mtoken, value
  2276|         0|            0|            0|  0.00%|
  2277|         1|  5.00679e-06|  5.00679e-06|  0.00%|def get_attrtext(value):
  2278|         0|            0|            0|  0.00%|    """attrtext = 1*(any non-ATTRIBUTE_ENDS character)
  2279|         0|            0|            0|  0.00%|
  2280|         0|            0|            0|  0.00%|    We allow any non-ATTRIBUTE_ENDS in attrtext, but add defects to the
  2281|         0|            0|            0|  0.00%|    token's defects list if we find non-attrtext characters.  We also register
  2282|         0|            0|            0|  0.00%|    defects for *any* non-printables even though the RFC doesn't exclude all of
  2283|         0|            0|            0|  0.00%|    them, because we follow the spirit of RFC 5322.
  2284|         0|            0|            0|  0.00%|
  2285|         0|            0|            0|  0.00%|    """
  2286|         1|  4.52995e-06|  4.52995e-06|  0.00%|    m = _non_attribute_end_matcher(value)
  2287|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if not m:
  2288|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2289|         0|            0|            0|  0.00%|            "expected attrtext but found {!r}".format(value))
  2290|         1|  4.76837e-06|  4.76837e-06|  0.00%|    attrtext = m.group()
  2291|         1|  4.52995e-06|  4.52995e-06|  0.00%|    value = value[len(attrtext):]
  2292|         1|  9.05991e-06|  9.05991e-06|  0.00%|    attrtext = ValueTerminal(attrtext, 'attrtext')
(call)|         1|   1.5974e-05|   1.5974e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  2293|         1|  9.53674e-06|  9.53674e-06|  0.00%|    _validate_xtext(attrtext)
(call)|         1|  3.31402e-05|  3.31402e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:986 _validate_xtext
  2294|         1|   3.8147e-06|   3.8147e-06|  0.00%|    return attrtext, value
  2295|         0|            0|            0|  0.00%|
  2296|         1|  4.29153e-06|  4.29153e-06|  0.00%|def get_attribute(value):
  2297|         0|            0|            0|  0.00%|    """ [CFWS] 1*attrtext [CFWS]
  2298|         0|            0|            0|  0.00%|
  2299|         0|            0|            0|  0.00%|    This version of the BNF makes the CFWS explicit, and as usual we use a
  2300|         0|            0|            0|  0.00%|    value terminal for the actual run of characters.  The RFC equivalent of
  2301|         0|            0|            0|  0.00%|    attrtext is the token characters, with the subtraction of '*', "'", and '%'.
  2302|         0|            0|            0|  0.00%|    We include tab in the excluded set just as we do for token.
  2303|         0|            0|            0|  0.00%|
  2304|         0|            0|            0|  0.00%|    """
  2305|         1|  9.53674e-06|  9.53674e-06|  0.00%|    attribute = Attribute()
(call)|         1|  9.53674e-06|  9.53674e-06|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  2306|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if value and value[0] in CFWS_LEADER:
  2307|         1|   1.0252e-05|   1.0252e-05|  0.00%|        token, value = get_cfws(value)
(call)|         1|   8.7738e-05|   8.7738e-05|  0.04%|# /usr/lib/python3.10/email/_header_value_parser.py:1270 get_cfws
  2308|         1|  4.05312e-06|  4.05312e-06|  0.00%|        attribute.append(token)
  2309|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if value and value[0] in ATTRIBUTE_ENDS:
  2310|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2311|         0|            0|            0|  0.00%|            "expected token but found '{}'".format(value))
  2312|         1|  1.07288e-05|  1.07288e-05|  0.00%|    token, value = get_attrtext(value)
(call)|         1|  9.41753e-05|  9.41753e-05|  0.04%|# /usr/lib/python3.10/email/_header_value_parser.py:2277 get_attrtext
  2313|         1|  4.29153e-06|  4.29153e-06|  0.00%|    attribute.append(token)
  2314|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if value and value[0] in CFWS_LEADER:
  2315|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2316|         0|            0|            0|  0.00%|        attribute.append(token)
  2317|         1|  3.33786e-06|  3.33786e-06|  0.00%|    return attribute, value
  2318|         0|            0|            0|  0.00%|
  2319|         0|            0|            0|  0.00%|def get_extended_attrtext(value):
  2320|         0|            0|            0|  0.00%|    """attrtext = 1*(any non-ATTRIBUTE_ENDS character plus '%')
  2321|         0|            0|            0|  0.00%|
  2322|         0|            0|            0|  0.00%|    This is a special parsing routine so that we get a value that
  2323|         0|            0|            0|  0.00%|    includes % escapes as a single string (which we decode as a single
  2324|         0|            0|            0|  0.00%|    string later).
  2325|         0|            0|            0|  0.00%|
  2326|         0|            0|            0|  0.00%|    """
  2327|         0|            0|            0|  0.00%|    m = _non_extended_attribute_end_matcher(value)
  2328|         0|            0|            0|  0.00%|    if not m:
  2329|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2330|         0|            0|            0|  0.00%|            "expected extended attrtext but found {!r}".format(value))
  2331|         0|            0|            0|  0.00%|    attrtext = m.group()
  2332|         0|            0|            0|  0.00%|    value = value[len(attrtext):]
  2333|         0|            0|            0|  0.00%|    attrtext = ValueTerminal(attrtext, 'extended-attrtext')
  2334|         0|            0|            0|  0.00%|    _validate_xtext(attrtext)
  2335|         0|            0|            0|  0.00%|    return attrtext, value
  2336|         0|            0|            0|  0.00%|
  2337|         0|            0|            0|  0.00%|def get_extended_attribute(value):
  2338|         0|            0|            0|  0.00%|    """ [CFWS] 1*extended_attrtext [CFWS]
  2339|         0|            0|            0|  0.00%|
  2340|         0|            0|            0|  0.00%|    This is like the non-extended version except we allow % characters, so that
  2341|         0|            0|            0|  0.00%|    we can pick up an encoded value as a single string.
  2342|         0|            0|            0|  0.00%|
  2343|         0|            0|            0|  0.00%|    """
  2344|         0|            0|            0|  0.00%|    # XXX: should we have an ExtendedAttribute TokenList?
  2345|         0|            0|            0|  0.00%|    attribute = Attribute()
  2346|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  2347|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2348|         0|            0|            0|  0.00%|        attribute.append(token)
  2349|         0|            0|            0|  0.00%|    if value and value[0] in EXTENDED_ATTRIBUTE_ENDS:
  2350|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2351|         0|            0|            0|  0.00%|            "expected token but found '{}'".format(value))
  2352|         0|            0|            0|  0.00%|    token, value = get_extended_attrtext(value)
  2353|         0|            0|            0|  0.00%|    attribute.append(token)
  2354|         0|            0|            0|  0.00%|    if value and value[0] in CFWS_LEADER:
  2355|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2356|         0|            0|            0|  0.00%|        attribute.append(token)
  2357|         0|            0|            0|  0.00%|    return attribute, value
  2358|         0|            0|            0|  0.00%|
  2359|         0|            0|            0|  0.00%|def get_section(value):
  2360|         0|            0|            0|  0.00%|    """ '*' digits
  2361|         0|            0|            0|  0.00%|
  2362|         0|            0|            0|  0.00%|    The formal BNF is more complicated because leading 0s are not allowed.  We
  2363|         0|            0|            0|  0.00%|    check for that and add a defect.  We also assume no CFWS is allowed between
  2364|         0|            0|            0|  0.00%|    the '*' and the digits, though the RFC is not crystal clear on that.
  2365|         0|            0|            0|  0.00%|    The caller should already have dealt with leading CFWS.
  2366|         0|            0|            0|  0.00%|
  2367|         0|            0|            0|  0.00%|    """
  2368|         0|            0|            0|  0.00%|    section = Section()
  2369|         0|            0|            0|  0.00%|    if not value or value[0] != '*':
  2370|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("Expected section but found {}".format(
  2371|         0|            0|            0|  0.00%|                                        value))
  2372|         0|            0|            0|  0.00%|    section.append(ValueTerminal('*', 'section-marker'))
  2373|         0|            0|            0|  0.00%|    value = value[1:]
  2374|         0|            0|            0|  0.00%|    if not value or not value[0].isdigit():
  2375|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("Expected section number but "
  2376|         0|            0|            0|  0.00%|                                      "found {}".format(value))
  2377|         0|            0|            0|  0.00%|    digits = ''
  2378|         0|            0|            0|  0.00%|    while value and value[0].isdigit():
  2379|         0|            0|            0|  0.00%|        digits += value[0]
  2380|         0|            0|            0|  0.00%|        value = value[1:]
  2381|         0|            0|            0|  0.00%|    if digits[0] == '0' and digits != '0':
  2382|         0|            0|            0|  0.00%|        section.defects.append(errors.InvalidHeaderError(
  2383|         0|            0|            0|  0.00%|                "section number has an invalid leading 0"))
  2384|         0|            0|            0|  0.00%|    section.number = int(digits)
  2385|         0|            0|            0|  0.00%|    section.append(ValueTerminal(digits, 'digits'))
  2386|         0|            0|            0|  0.00%|    return section, value
  2387|         0|            0|            0|  0.00%|
  2388|         0|            0|            0|  0.00%|
  2389|         1|  4.05312e-06|  4.05312e-06|  0.00%|def get_value(value):
  2390|         0|            0|            0|  0.00%|    """ quoted-string / attribute
  2391|         0|            0|            0|  0.00%|
  2392|         0|            0|            0|  0.00%|    """
  2393|         1|  1.14441e-05|  1.14441e-05|  0.00%|    v = Value()
(call)|         1|  1.45435e-05|  1.45435e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  2394|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if not value:
  2395|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("Expected value but found end of string")
  2396|         1|   3.8147e-06|   3.8147e-06|  0.00%|    leader = None
  2397|         1|  5.00679e-06|  5.00679e-06|  0.00%|    if value[0] in CFWS_LEADER:
  2398|         0|            0|            0|  0.00%|        leader, value = get_cfws(value)
  2399|         1|  3.33786e-06|  3.33786e-06|  0.00%|    if not value:
  2400|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("Expected value but found "
  2401|         0|            0|            0|  0.00%|                                      "only {}".format(leader))
  2402|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if value[0] == '"':
  2403|         1|  9.05991e-06|  9.05991e-06|  0.00%|        token, value = get_quoted_string(value)
(call)|         1|  0.000362158|  0.000362158|  0.15%|# /usr/lib/python3.10/email/_header_value_parser.py:1283 get_quoted_string
  2404|         0|            0|            0|  0.00%|    else:
  2405|         0|            0|            0|  0.00%|        token, value = get_extended_attribute(value)
  2406|         1|  4.05312e-06|  4.05312e-06|  0.00%|    if leader is not None:
  2407|         0|            0|            0|  0.00%|        token[:0] = [leader]
  2408|         1|   3.8147e-06|   3.8147e-06|  0.00%|    v.append(token)
  2409|         1|  6.19888e-06|  6.19888e-06|  0.00%|    return v, value
  2410|         0|            0|            0|  0.00%|
  2411|         1|   6.4373e-06|   6.4373e-06|  0.00%|def get_parameter(value):
  2412|         0|            0|            0|  0.00%|    """ attribute [section] ["*"] [CFWS] "=" value
  2413|         0|            0|            0|  0.00%|
  2414|         0|            0|            0|  0.00%|    The CFWS is implied by the RFC but not made explicit in the BNF.  This
  2415|         0|            0|            0|  0.00%|    simplified form of the BNF from the RFC is made to conform with the RFC BNF
  2416|         0|            0|            0|  0.00%|    through some extra checks.  We do it this way because it makes both error
  2417|         0|            0|            0|  0.00%|    recovery and working with the resulting parse tree easier.
  2418|         0|            0|            0|  0.00%|    """
  2419|         0|            0|            0|  0.00%|    # It is possible CFWS would also be implicitly allowed between the section
  2420|         0|            0|            0|  0.00%|    # and the 'extended-attribute' marker (the '*') , but we've never seen that
  2421|         0|            0|            0|  0.00%|    # in the wild and we will therefore ignore the possibility.
  2422|         1|   1.3113e-05|   1.3113e-05|  0.01%|    param = Parameter()
(call)|         1|  1.04904e-05|  1.04904e-05|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  2423|         1|  1.35899e-05|  1.35899e-05|  0.01%|    token, value = get_attribute(value)
(call)|         1|  0.000249386|  0.000249386|  0.10%|# /usr/lib/python3.10/email/_header_value_parser.py:2296 get_attribute
  2424|         1|  5.00679e-06|  5.00679e-06|  0.00%|    param.append(token)
  2425|         1|  4.76837e-06|  4.76837e-06|  0.00%|    if not value or value[0] == ';':
  2426|         0|            0|            0|  0.00%|        param.defects.append(errors.InvalidHeaderDefect("Parameter contains "
  2427|         0|            0|            0|  0.00%|            "name ({}) but no value".format(token)))
  2428|         0|            0|            0|  0.00%|        return param, value
  2429|         1|  4.76837e-06|  4.76837e-06|  0.00%|    if value[0] == '*':
  2430|         0|            0|            0|  0.00%|        try:
  2431|         0|            0|            0|  0.00%|            token, value = get_section(value)
  2432|         0|            0|            0|  0.00%|            param.sectioned = True
  2433|         0|            0|            0|  0.00%|            param.append(token)
  2434|         0|            0|            0|  0.00%|        except errors.HeaderParseError:
  2435|         0|            0|            0|  0.00%|            pass
  2436|         0|            0|            0|  0.00%|        if not value:
  2437|         0|            0|            0|  0.00%|            raise errors.HeaderParseError("Incomplete parameter")
  2438|         0|            0|            0|  0.00%|        if value[0] == '*':
  2439|         0|            0|            0|  0.00%|            param.append(ValueTerminal('*', 'extended-parameter-marker'))
  2440|         0|            0|            0|  0.00%|            value = value[1:]
  2441|         0|            0|            0|  0.00%|            param.extended = True
  2442|         1|  4.76837e-06|  4.76837e-06|  0.00%|    if value[0] != '=':
  2443|         0|            0|            0|  0.00%|        raise errors.HeaderParseError("Parameter not followed by '='")
  2444|         1|  1.12057e-05|  1.12057e-05|  0.00%|    param.append(ValueTerminal('=', 'parameter-separator'))
(call)|         1|  1.66893e-05|  1.66893e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  2445|         1|  5.00679e-06|  5.00679e-06|  0.00%|    value = value[1:]
  2446|         1|  7.15256e-06|  7.15256e-06|  0.00%|    leader = None
  2447|         1|  4.52995e-06|  4.52995e-06|  0.00%|    if value and value[0] in CFWS_LEADER:
  2448|         0|            0|            0|  0.00%|        token, value = get_cfws(value)
  2449|         0|            0|            0|  0.00%|        param.append(token)
  2450|         1|  4.29153e-06|  4.29153e-06|  0.00%|    remainder = None
  2451|         1|  4.76837e-06|  4.76837e-06|  0.00%|    appendto = param
  2452|         1|  5.24521e-06|  5.24521e-06|  0.00%|    if param.extended and value and value[0] == '"':
  2453|         0|            0|            0|  0.00%|        # Now for some serious hackery to handle the common invalid case of
  2454|         0|            0|            0|  0.00%|        # double quotes around an extended value.  We also accept (with defect)
  2455|         0|            0|            0|  0.00%|        # a value marked as encoded that isn't really.
  2456|         0|            0|            0|  0.00%|        qstring, remainder = get_quoted_string(value)
  2457|         0|            0|            0|  0.00%|        inner_value = qstring.stripped_value
  2458|         0|            0|            0|  0.00%|        semi_valid = False
  2459|         0|            0|            0|  0.00%|        if param.section_number == 0:
  2460|         0|            0|            0|  0.00%|            if inner_value and inner_value[0] == "'":
  2461|         0|            0|            0|  0.00%|                semi_valid = True
  2462|         0|            0|            0|  0.00%|            else:
  2463|         0|            0|            0|  0.00%|                token, rest = get_attrtext(inner_value)
  2464|         0|            0|            0|  0.00%|                if rest and rest[0] == "'":
  2465|         0|            0|            0|  0.00%|                    semi_valid = True
  2466|         0|            0|            0|  0.00%|        else:
  2467|         0|            0|            0|  0.00%|            try:
  2468|         0|            0|            0|  0.00%|                token, rest = get_extended_attrtext(inner_value)
  2469|         0|            0|            0|  0.00%|            except:
  2470|         0|            0|            0|  0.00%|                pass
  2471|         0|            0|            0|  0.00%|            else:
  2472|         0|            0|            0|  0.00%|                if not rest:
  2473|         0|            0|            0|  0.00%|                    semi_valid = True
  2474|         0|            0|            0|  0.00%|        if semi_valid:
  2475|         0|            0|            0|  0.00%|            param.defects.append(errors.InvalidHeaderDefect(
  2476|         0|            0|            0|  0.00%|                "Quoted string value for extended parameter is invalid"))
  2477|         0|            0|            0|  0.00%|            param.append(qstring)
  2478|         0|            0|            0|  0.00%|            for t in qstring:
  2479|         0|            0|            0|  0.00%|                if t.token_type == 'bare-quoted-string':
  2480|         0|            0|            0|  0.00%|                    t[:] = []
  2481|         0|            0|            0|  0.00%|                    appendto = t
  2482|         0|            0|            0|  0.00%|                    break
  2483|         0|            0|            0|  0.00%|            value = inner_value
  2484|         0|            0|            0|  0.00%|        else:
  2485|         0|            0|            0|  0.00%|            remainder = None
  2486|         0|            0|            0|  0.00%|            param.defects.append(errors.InvalidHeaderDefect(
  2487|         0|            0|            0|  0.00%|                "Parameter marked as extended but appears to have a "
  2488|         0|            0|            0|  0.00%|                "quoted string value that is non-encoded"))
  2489|         1|  4.29153e-06|  4.29153e-06|  0.00%|    if value and value[0] == "'":
  2490|         0|            0|            0|  0.00%|        token = None
  2491|         0|            0|            0|  0.00%|    else:
  2492|         1|  1.26362e-05|  1.26362e-05|  0.01%|        token, value = get_value(value)
(call)|         1|  0.000435114|  0.000435114|  0.18%|# /usr/lib/python3.10/email/_header_value_parser.py:2389 get_value
  2493|         1|  5.00679e-06|  5.00679e-06|  0.00%|    if not param.extended or param.section_number > 0:
  2494|         1|  5.00679e-06|  5.00679e-06|  0.00%|        if not value or value[0] != "'":
  2495|         1|  5.24521e-06|  5.24521e-06|  0.00%|            appendto.append(token)
  2496|         1|  5.48363e-06|  5.48363e-06|  0.00%|            if remainder is not None:
  2497|         0|            0|            0|  0.00%|                assert not value, value
  2498|         0|            0|            0|  0.00%|                value = remainder
  2499|         1|  4.05312e-06|  4.05312e-06|  0.00%|            return param, value
  2500|         0|            0|            0|  0.00%|        param.defects.append(errors.InvalidHeaderDefect(
  2501|         0|            0|            0|  0.00%|            "Apparent initial-extended-value but attribute "
  2502|         0|            0|            0|  0.00%|            "was not marked as extended or was not initial section"))
  2503|         0|            0|            0|  0.00%|    if not value:
  2504|         0|            0|            0|  0.00%|        # Assume the charset/lang is missing and the token is the value.
  2505|         0|            0|            0|  0.00%|        param.defects.append(errors.InvalidHeaderDefect(
  2506|         0|            0|            0|  0.00%|            "Missing required charset/lang delimiters"))
  2507|         0|            0|            0|  0.00%|        appendto.append(token)
  2508|         0|            0|            0|  0.00%|        if remainder is None:
  2509|         0|            0|            0|  0.00%|            return param, value
  2510|         0|            0|            0|  0.00%|    else:
  2511|         0|            0|            0|  0.00%|        if token is not None:
  2512|         0|            0|            0|  0.00%|            for t in token:
  2513|         0|            0|            0|  0.00%|                if t.token_type == 'extended-attrtext':
  2514|         0|            0|            0|  0.00%|                    break
  2515|         0|            0|            0|  0.00%|            t.token_type == 'attrtext'
  2516|         0|            0|            0|  0.00%|            appendto.append(t)
  2517|         0|            0|            0|  0.00%|            param.charset = t.value
  2518|         0|            0|            0|  0.00%|        if value[0] != "'":
  2519|         0|            0|            0|  0.00%|            raise errors.HeaderParseError("Expected RFC2231 char/lang encoding "
  2520|         0|            0|            0|  0.00%|                                          "delimiter, but found {!r}".format(value))
  2521|         0|            0|            0|  0.00%|        appendto.append(ValueTerminal("'", 'RFC2231-delimiter'))
  2522|         0|            0|            0|  0.00%|        value = value[1:]
  2523|         0|            0|            0|  0.00%|        if value and value[0] != "'":
  2524|         0|            0|            0|  0.00%|            token, value = get_attrtext(value)
  2525|         0|            0|            0|  0.00%|            appendto.append(token)
  2526|         0|            0|            0|  0.00%|            param.lang = token.value
  2527|         0|            0|            0|  0.00%|            if not value or value[0] != "'":
  2528|         0|            0|            0|  0.00%|                raise errors.HeaderParseError("Expected RFC2231 char/lang encoding "
  2529|         0|            0|            0|  0.00%|                                  "delimiter, but found {}".format(value))
  2530|         0|            0|            0|  0.00%|        appendto.append(ValueTerminal("'", 'RFC2231-delimiter'))
  2531|         0|            0|            0|  0.00%|        value = value[1:]
  2532|         0|            0|            0|  0.00%|    if remainder is not None:
  2533|         0|            0|            0|  0.00%|        # Treat the rest of value as bare quoted string content.
  2534|         0|            0|            0|  0.00%|        v = Value()
  2535|         0|            0|            0|  0.00%|        while value:
  2536|         0|            0|            0|  0.00%|            if value[0] in WSP:
  2537|         0|            0|            0|  0.00%|                token, value = get_fws(value)
  2538|         0|            0|            0|  0.00%|            elif value[0] == '"':
  2539|         0|            0|            0|  0.00%|                token = ValueTerminal('"', 'DQUOTE')
  2540|         0|            0|            0|  0.00%|                value = value[1:]
  2541|         0|            0|            0|  0.00%|            else:
  2542|         0|            0|            0|  0.00%|                token, value = get_qcontent(value)
  2543|         0|            0|            0|  0.00%|            v.append(token)
  2544|         0|            0|            0|  0.00%|        token = v
  2545|         0|            0|            0|  0.00%|    else:
  2546|         0|            0|            0|  0.00%|        token, value = get_value(value)
  2547|         0|            0|            0|  0.00%|    appendto.append(token)
  2548|         0|            0|            0|  0.00%|    if remainder is not None:
  2549|         0|            0|            0|  0.00%|        assert not value, value
  2550|         0|            0|            0|  0.00%|        value = remainder
  2551|         0|            0|            0|  0.00%|    return param, value
  2552|         0|            0|            0|  0.00%|
  2553|         1|  5.48363e-06|  5.48363e-06|  0.00%|def parse_mime_parameters(value):
  2554|         0|            0|            0|  0.00%|    """ parameter *( ";" parameter )
  2555|         0|            0|            0|  0.00%|
  2556|         0|            0|            0|  0.00%|    That BNF is meant to indicate this routine should only be called after
  2557|         0|            0|            0|  0.00%|    finding and handling the leading ';'.  There is no corresponding rule in
  2558|         0|            0|            0|  0.00%|    the formal RFC grammar, but it is more convenient for us for the set of
  2559|         0|            0|            0|  0.00%|    parameters to be treated as its own TokenList.
  2560|         0|            0|            0|  0.00%|
  2561|         0|            0|            0|  0.00%|    This is 'parse' routine because it consumes the remaining value, but it
  2562|         0|            0|            0|  0.00%|    would never be called to parse a full header.  Instead it is called to
  2563|         0|            0|            0|  0.00%|    parse everything after the non-parameter value of a specific MIME header.
  2564|         0|            0|            0|  0.00%|
  2565|         0|            0|            0|  0.00%|    """
  2566|         1|  1.12057e-05|  1.12057e-05|  0.00%|    mime_parameters = MimeParameters()
(call)|         1|  1.04904e-05|  1.04904e-05|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  2567|         2|  8.58307e-06|  4.29153e-06|  0.00%|    while value:
  2568|         1|   3.8147e-06|   3.8147e-06|  0.00%|        try:
  2569|         1|   1.3113e-05|   1.3113e-05|  0.01%|            token, value = get_parameter(value)
(call)|         1|  0.000848055|  0.000848055|  0.35%|# /usr/lib/python3.10/email/_header_value_parser.py:2411 get_parameter
  2570|         1|  4.76837e-06|  4.76837e-06|  0.00%|            mime_parameters.append(token)
  2571|         0|            0|            0|  0.00%|        except errors.HeaderParseError as err:
  2572|         0|            0|            0|  0.00%|            leader = None
  2573|         0|            0|            0|  0.00%|            if value[0] in CFWS_LEADER:
  2574|         0|            0|            0|  0.00%|                leader, value = get_cfws(value)
  2575|         0|            0|            0|  0.00%|            if not value:
  2576|         0|            0|            0|  0.00%|                mime_parameters.append(leader)
  2577|         0|            0|            0|  0.00%|                return mime_parameters
  2578|         0|            0|            0|  0.00%|            if value[0] == ';':
  2579|         0|            0|            0|  0.00%|                if leader is not None:
  2580|         0|            0|            0|  0.00%|                    mime_parameters.append(leader)
  2581|         0|            0|            0|  0.00%|                mime_parameters.defects.append(errors.InvalidHeaderDefect(
  2582|         0|            0|            0|  0.00%|                    "parameter entry with no content"))
  2583|         0|            0|            0|  0.00%|            else:
  2584|         0|            0|            0|  0.00%|                token, value = get_invalid_parameter(value)
  2585|         0|            0|            0|  0.00%|                if leader:
  2586|         0|            0|            0|  0.00%|                    token[:0] = [leader]
  2587|         0|            0|            0|  0.00%|                mime_parameters.append(token)
  2588|         0|            0|            0|  0.00%|                mime_parameters.defects.append(errors.InvalidHeaderDefect(
  2589|         0|            0|            0|  0.00%|                    "invalid parameter {!r}".format(token)))
  2590|         1|  4.29153e-06|  4.29153e-06|  0.00%|        if value and value[0] != ';':
  2591|         0|            0|            0|  0.00%|            # Junk after the otherwise valid parameter.  Mark it as
  2592|         0|            0|            0|  0.00%|            # invalid, but it will have a value.
  2593|         0|            0|            0|  0.00%|            param = mime_parameters[-1]
  2594|         0|            0|            0|  0.00%|            param.token_type = 'invalid-parameter'
  2595|         0|            0|            0|  0.00%|            token, value = get_invalid_parameter(value)
  2596|         0|            0|            0|  0.00%|            param.extend(token)
  2597|         0|            0|            0|  0.00%|            mime_parameters.defects.append(errors.InvalidHeaderDefect(
  2598|         0|            0|            0|  0.00%|                "parameter with invalid trailing text {!r}".format(token)))
  2599|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if value:
  2600|         0|            0|            0|  0.00%|            # Must be a ';' at this point.
  2601|         0|            0|            0|  0.00%|            mime_parameters.append(ValueTerminal(';', 'parameter-separator'))
  2602|         0|            0|            0|  0.00%|            value = value[1:]
  2603|         1|   3.8147e-06|   3.8147e-06|  0.00%|    return mime_parameters
  2604|         0|            0|            0|  0.00%|
  2605|         0|            0|            0|  0.00%|def _find_mime_parameters(tokenlist, value):
  2606|         0|            0|            0|  0.00%|    """Do our best to find the parameters in an invalid MIME header
  2607|         0|            0|            0|  0.00%|
  2608|         0|            0|            0|  0.00%|    """
  2609|         0|            0|            0|  0.00%|    while value and value[0] != ';':
  2610|         0|            0|            0|  0.00%|        if value[0] in PHRASE_ENDS:
  2611|         0|            0|            0|  0.00%|            tokenlist.append(ValueTerminal(value[0], 'misplaced-special'))
  2612|         0|            0|            0|  0.00%|            value = value[1:]
  2613|         0|            0|            0|  0.00%|        else:
  2614|         0|            0|            0|  0.00%|            token, value = get_phrase(value)
  2615|         0|            0|            0|  0.00%|            tokenlist.append(token)
  2616|         0|            0|            0|  0.00%|    if not value:
  2617|         0|            0|            0|  0.00%|        return
  2618|         0|            0|            0|  0.00%|    tokenlist.append(ValueTerminal(';', 'parameter-separator'))
  2619|         0|            0|            0|  0.00%|    tokenlist.append(parse_mime_parameters(value[1:]))
  2620|         0|            0|            0|  0.00%|
  2621|         2|  9.29832e-06|  4.64916e-06|  0.00%|def parse_content_type_header(value):
  2622|         0|            0|            0|  0.00%|    """ maintype "/" subtype *( ";" parameter )
  2623|         0|            0|            0|  0.00%|
  2624|         0|            0|            0|  0.00%|    The maintype and substype are tokens.  Theoretically they could
  2625|         0|            0|            0|  0.00%|    be checked against the official IANA list + x-token, but we
  2626|         0|            0|            0|  0.00%|    don't do that.
  2627|         0|            0|            0|  0.00%|    """
  2628|         2|  2.36034e-05|  1.18017e-05|  0.01%|    ctype = ContentType()
(call)|         2|  2.55108e-05|  1.27554e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  2629|         2|  7.39098e-06|  3.69549e-06|  0.00%|    recover = False
  2630|         2|  6.67572e-06|  3.33786e-06|  0.00%|    if not value:
  2631|         0|            0|            0|  0.00%|        ctype.defects.append(errors.HeaderMissingRequiredValue(
  2632|         0|            0|            0|  0.00%|            "Missing content type specification"))
  2633|         0|            0|            0|  0.00%|        return ctype
  2634|         2|  7.15256e-06|  3.57628e-06|  0.00%|    try:
  2635|         2|  1.83582e-05|  9.17912e-06|  0.01%|        token, value = get_token(value)
(call)|         2|  0.000298262|  0.000149131|  0.12%|# /usr/lib/python3.10/email/_header_value_parser.py:2254 get_token
  2636|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  2637|         0|            0|            0|  0.00%|        ctype.defects.append(errors.InvalidHeaderDefect(
  2638|         0|            0|            0|  0.00%|            "Expected content maintype but found {!r}".format(value)))
  2639|         0|            0|            0|  0.00%|        _find_mime_parameters(ctype, value)
  2640|         0|            0|            0|  0.00%|        return ctype
  2641|         2|  8.82149e-06|  4.41074e-06|  0.00%|    ctype.append(token)
  2642|         0|            0|            0|  0.00%|    # XXX: If we really want to follow the formal grammar we should make
  2643|         0|            0|            0|  0.00%|    # mantype and subtype specialized TokenLists here.  Probably not worth it.
  2644|         2|  8.34465e-06|  4.17233e-06|  0.00%|    if not value or value[0] != '/':
  2645|         0|            0|            0|  0.00%|        ctype.defects.append(errors.InvalidHeaderDefect(
  2646|         0|            0|            0|  0.00%|            "Invalid content type"))
  2647|         0|            0|            0|  0.00%|        if value:
  2648|         0|            0|            0|  0.00%|            _find_mime_parameters(ctype, value)
  2649|         0|            0|            0|  0.00%|        return ctype
  2650|         2|  2.26498e-05|  1.13249e-05|  0.01%|    ctype.maintype = token.value.strip().lower()
(call)|         2|   0.00011754|  5.87702e-05|  0.05%|# /usr/lib/python3.10/email/_header_value_parser.py:132 value
  2651|         2|  2.24113e-05|  1.12057e-05|  0.01%|    ctype.append(ValueTerminal('/', 'content-type-separator'))
(call)|         2|  3.76701e-05|  1.88351e-05|  0.02%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  2652|         2|  8.34465e-06|  4.17233e-06|  0.00%|    value = value[1:]
  2653|         2|  7.86781e-06|  3.93391e-06|  0.00%|    try:
  2654|         2|  2.00272e-05|  1.00136e-05|  0.01%|        token, value = get_token(value)
(call)|         2|  0.000288248|  0.000144124|  0.12%|# /usr/lib/python3.10/email/_header_value_parser.py:2254 get_token
  2655|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  2656|         0|            0|            0|  0.00%|        ctype.defects.append(errors.InvalidHeaderDefect(
  2657|         0|            0|            0|  0.00%|            "Expected content subtype but found {!r}".format(value)))
  2658|         0|            0|            0|  0.00%|        _find_mime_parameters(ctype, value)
  2659|         0|            0|            0|  0.00%|        return ctype
  2660|         2|  1.00136e-05|  5.00679e-06|  0.00%|    ctype.append(token)
  2661|         2|  2.12193e-05|  1.06096e-05|  0.01%|    ctype.subtype = token.value.strip().lower()
(call)|         2|   0.00010848|  5.42402e-05|  0.04%|# /usr/lib/python3.10/email/_header_value_parser.py:132 value
  2662|         2|  9.77516e-06|  4.88758e-06|  0.00%|    if not value:
  2663|         1|  5.48363e-06|  5.48363e-06|  0.00%|        return ctype
  2664|         1|  3.33786e-06|  3.33786e-06|  0.00%|    if value[0] != ';':
  2665|         0|            0|            0|  0.00%|        ctype.defects.append(errors.InvalidHeaderDefect(
  2666|         0|            0|            0|  0.00%|            "Only parameters are valid after content type, but "
  2667|         0|            0|            0|  0.00%|            "found {!r}".format(value)))
  2668|         0|            0|            0|  0.00%|        # The RFC requires that a syntactically invalid content-type be treated
  2669|         0|            0|            0|  0.00%|        # as text/plain.  Perhaps we should postel this, but we should probably
  2670|         0|            0|            0|  0.00%|        # only do that if we were checking the subtype value against IANA.
  2671|         0|            0|            0|  0.00%|        del ctype.maintype, ctype.subtype
  2672|         0|            0|            0|  0.00%|        _find_mime_parameters(ctype, value)
  2673|         0|            0|            0|  0.00%|        return ctype
  2674|         1|  1.00136e-05|  1.00136e-05|  0.00%|    ctype.append(ValueTerminal(';', 'parameter-separator'))
(call)|         1|  1.62125e-05|  1.62125e-05|  0.01%|# /usr/lib/python3.10/email/_header_value_parser.py:876 __new__
  2675|         1|   1.3113e-05|   1.3113e-05|  0.01%|    ctype.append(parse_mime_parameters(value[1:]))
(call)|         1|  0.000917435|  0.000917435|  0.38%|# /usr/lib/python3.10/email/_header_value_parser.py:2553 parse_mime_parameters
  2676|         1|   3.8147e-06|   3.8147e-06|  0.00%|    return ctype
  2677|         0|            0|            0|  0.00%|
  2678|         0|            0|            0|  0.00%|def parse_content_disposition_header(value):
  2679|         0|            0|            0|  0.00%|    """ disposition-type *( ";" parameter )
  2680|         0|            0|            0|  0.00%|
  2681|         0|            0|            0|  0.00%|    """
  2682|         0|            0|            0|  0.00%|    disp_header = ContentDisposition()
  2683|         0|            0|            0|  0.00%|    if not value:
  2684|         0|            0|            0|  0.00%|        disp_header.defects.append(errors.HeaderMissingRequiredValue(
  2685|         0|            0|            0|  0.00%|            "Missing content disposition"))
  2686|         0|            0|            0|  0.00%|        return disp_header
  2687|         0|            0|            0|  0.00%|    try:
  2688|         0|            0|            0|  0.00%|        token, value = get_token(value)
  2689|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  2690|         0|            0|            0|  0.00%|        disp_header.defects.append(errors.InvalidHeaderDefect(
  2691|         0|            0|            0|  0.00%|            "Expected content disposition but found {!r}".format(value)))
  2692|         0|            0|            0|  0.00%|        _find_mime_parameters(disp_header, value)
  2693|         0|            0|            0|  0.00%|        return disp_header
  2694|         0|            0|            0|  0.00%|    disp_header.append(token)
  2695|         0|            0|            0|  0.00%|    disp_header.content_disposition = token.value.strip().lower()
  2696|         0|            0|            0|  0.00%|    if not value:
  2697|         0|            0|            0|  0.00%|        return disp_header
  2698|         0|            0|            0|  0.00%|    if value[0] != ';':
  2699|         0|            0|            0|  0.00%|        disp_header.defects.append(errors.InvalidHeaderDefect(
  2700|         0|            0|            0|  0.00%|            "Only parameters are valid after content disposition, but "
  2701|         0|            0|            0|  0.00%|            "found {!r}".format(value)))
  2702|         0|            0|            0|  0.00%|        _find_mime_parameters(disp_header, value)
  2703|         0|            0|            0|  0.00%|        return disp_header
  2704|         0|            0|            0|  0.00%|    disp_header.append(ValueTerminal(';', 'parameter-separator'))
  2705|         0|            0|            0|  0.00%|    disp_header.append(parse_mime_parameters(value[1:]))
  2706|         0|            0|            0|  0.00%|    return disp_header
  2707|         0|            0|            0|  0.00%|
  2708|         1|   3.8147e-06|   3.8147e-06|  0.00%|def parse_content_transfer_encoding_header(value):
  2709|         0|            0|            0|  0.00%|    """ mechanism
  2710|         0|            0|            0|  0.00%|
  2711|         0|            0|            0|  0.00%|    """
  2712|         0|            0|            0|  0.00%|    # We should probably validate the values, since the list is fixed.
  2713|         1|  1.04904e-05|  1.04904e-05|  0.00%|    cte_header = ContentTransferEncoding()
(call)|         1|  1.09673e-05|  1.09673e-05|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:121 __init__
  2714|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if not value:
  2715|         0|            0|            0|  0.00%|        cte_header.defects.append(errors.HeaderMissingRequiredValue(
  2716|         0|            0|            0|  0.00%|            "Missing content transfer encoding"))
  2717|         0|            0|            0|  0.00%|        return cte_header
  2718|         1|   3.8147e-06|   3.8147e-06|  0.00%|    try:
  2719|         1|  9.05991e-06|  9.05991e-06|  0.00%|        token, value = get_token(value)
(call)|         1|   0.00013113|   0.00013113|  0.05%|# /usr/lib/python3.10/email/_header_value_parser.py:2254 get_token
  2720|         0|            0|            0|  0.00%|    except errors.HeaderParseError:
  2721|         0|            0|            0|  0.00%|        cte_header.defects.append(errors.InvalidHeaderDefect(
  2722|         0|            0|            0|  0.00%|            "Expected content transfer encoding but found {!r}".format(value)))
  2723|         0|            0|            0|  0.00%|    else:
  2724|         1|  4.29153e-06|  4.29153e-06|  0.00%|        cte_header.append(token)
  2725|         1|  9.05991e-06|  9.05991e-06|  0.00%|        cte_header.cte = token.value.strip().lower()
(call)|         1|  4.81606e-05|  4.81606e-05|  0.02%|# /usr/lib/python3.10/email/_header_value_parser.py:132 value
  2726|         1|  5.48363e-06|  5.48363e-06|  0.00%|    if not value:
  2727|         1|   3.8147e-06|   3.8147e-06|  0.00%|        return cte_header
  2728|         0|            0|            0|  0.00%|    while value:
  2729|         0|            0|            0|  0.00%|        cte_header.defects.append(errors.InvalidHeaderDefect(
  2730|         0|            0|            0|  0.00%|            "Extra text after content transfer encoding"))
  2731|         0|            0|            0|  0.00%|        if value[0] in PHRASE_ENDS:
  2732|         0|            0|            0|  0.00%|            cte_header.append(ValueTerminal(value[0], 'misplaced-special'))
  2733|         0|            0|            0|  0.00%|            value = value[1:]
  2734|         0|            0|            0|  0.00%|        else:
  2735|         0|            0|            0|  0.00%|            token, value = get_phrase(value)
  2736|         0|            0|            0|  0.00%|            cte_header.append(token)
  2737|         0|            0|            0|  0.00%|    return cte_header
  2738|         0|            0|            0|  0.00%|
  2739|         0|            0|            0|  0.00%|
  2740|         0|            0|            0|  0.00%|#
  2741|         0|            0|            0|  0.00%|# Header folding
  2742|         0|            0|            0|  0.00%|#
  2743|         0|            0|            0|  0.00%|# Header folding is complex, with lots of rules and corner cases.  The
  2744|         0|            0|            0|  0.00%|# following code does its best to obey the rules and handle the corner
  2745|         0|            0|            0|  0.00%|# cases, but you can be sure there are few bugs:)
  2746|         0|            0|            0|  0.00%|#
  2747|         0|            0|            0|  0.00%|# This folder generally canonicalizes as it goes, preferring the stringified
  2748|         0|            0|            0|  0.00%|# version of each token.  The tokens contain information that supports the
  2749|         0|            0|            0|  0.00%|# folder, including which tokens can be encoded in which ways.
  2750|         0|            0|            0|  0.00%|#
  2751|         0|            0|            0|  0.00%|# Folded text is accumulated in a simple list of strings ('lines'), each
  2752|         0|            0|            0|  0.00%|# one of which should be less than policy.max_line_length ('maxlen').
  2753|         0|            0|            0|  0.00%|#
  2754|         0|            0|            0|  0.00%|
  2755|         0|            0|            0|  0.00%|def _steal_trailing_WSP_if_exists(lines):
  2756|         0|            0|            0|  0.00%|    wsp = ''
  2757|         0|            0|            0|  0.00%|    if lines and lines[-1] and lines[-1][-1] in WSP:
  2758|         0|            0|            0|  0.00%|        wsp = lines[-1][-1]
  2759|         0|            0|            0|  0.00%|        lines[-1] = lines[-1][:-1]
  2760|         0|            0|            0|  0.00%|    return wsp
  2761|         0|            0|            0|  0.00%|
  2762|         0|            0|            0|  0.00%|def _refold_parse_tree(parse_tree, *, policy):
  2763|         0|            0|            0|  0.00%|    """Return string of contents of parse_tree folded according to RFC rules.
  2764|         0|            0|            0|  0.00%|
  2765|         0|            0|            0|  0.00%|    """
  2766|         0|            0|            0|  0.00%|    # max_line_length 0/None means no limit, ie: infinitely long.
  2767|         0|            0|            0|  0.00%|    maxlen = policy.max_line_length or sys.maxsize
  2768|         0|            0|            0|  0.00%|    encoding = 'utf-8' if policy.utf8 else 'us-ascii'
  2769|         0|            0|            0|  0.00%|    lines = ['']
  2770|         0|            0|            0|  0.00%|    last_ew = None
  2771|         0|            0|            0|  0.00%|    wrap_as_ew_blocked = 0
  2772|         0|            0|            0|  0.00%|    want_encoding = False
  2773|         0|            0|            0|  0.00%|    end_ew_not_allowed = Terminal('', 'wrap_as_ew_blocked')
  2774|         0|            0|            0|  0.00%|    parts = list(parse_tree)
  2775|         0|            0|            0|  0.00%|    while parts:
  2776|         0|            0|            0|  0.00%|        part = parts.pop(0)
  2777|         0|            0|            0|  0.00%|        if part is end_ew_not_allowed:
  2778|         0|            0|            0|  0.00%|            wrap_as_ew_blocked -= 1
  2779|         0|            0|            0|  0.00%|            continue
  2780|         0|            0|            0|  0.00%|        tstr = str(part)
  2781|         0|            0|            0|  0.00%|        if part.token_type == 'ptext' and set(tstr) & SPECIALS:
  2782|         0|            0|            0|  0.00%|            # Encode if tstr contains special characters.
  2783|         0|            0|            0|  0.00%|            want_encoding = True
  2784|         0|            0|            0|  0.00%|        try:
  2785|         0|            0|            0|  0.00%|            tstr.encode(encoding)
  2786|         0|            0|            0|  0.00%|            charset = encoding
  2787|         0|            0|            0|  0.00%|        except UnicodeEncodeError:
  2788|         0|            0|            0|  0.00%|            if any(isinstance(x, errors.UndecodableBytesDefect)
  2789|         0|            0|            0|  0.00%|                   for x in part.all_defects):
  2790|         0|            0|            0|  0.00%|                charset = 'unknown-8bit'
  2791|         0|            0|            0|  0.00%|            else:
  2792|         0|            0|            0|  0.00%|                # If policy.utf8 is false this should really be taken from a
  2793|         0|            0|            0|  0.00%|                # 'charset' property on the policy.
  2794|         0|            0|            0|  0.00%|                charset = 'utf-8'
  2795|         0|            0|            0|  0.00%|            want_encoding = True
  2796|         0|            0|            0|  0.00%|        if part.token_type == 'mime-parameters':
  2797|         0|            0|            0|  0.00%|            # Mime parameter folding (using RFC2231) is extra special.
  2798|         0|            0|            0|  0.00%|            _fold_mime_parameters(part, lines, maxlen, encoding)
  2799|         0|            0|            0|  0.00%|            continue
  2800|         0|            0|            0|  0.00%|        if want_encoding and not wrap_as_ew_blocked:
  2801|         0|            0|            0|  0.00%|            if not part.as_ew_allowed:
  2802|         0|            0|            0|  0.00%|                want_encoding = False
  2803|         0|            0|            0|  0.00%|                last_ew = None
  2804|         0|            0|            0|  0.00%|                if part.syntactic_break:
  2805|         0|            0|            0|  0.00%|                    encoded_part = part.fold(policy=policy)[:-len(policy.linesep)]
  2806|         0|            0|            0|  0.00%|                    if policy.linesep not in encoded_part:
  2807|         0|            0|            0|  0.00%|                        # It fits on a single line
  2808|         0|            0|            0|  0.00%|                        if len(encoded_part) > maxlen - len(lines[-1]):
  2809|         0|            0|            0|  0.00%|                            # But not on this one, so start a new one.
  2810|         0|            0|            0|  0.00%|                            newline = _steal_trailing_WSP_if_exists(lines)
  2811|         0|            0|            0|  0.00%|                            # XXX what if encoded_part has no leading FWS?
  2812|         0|            0|            0|  0.00%|                            lines.append(newline)
  2813|         0|            0|            0|  0.00%|                        lines[-1] += encoded_part
  2814|         0|            0|            0|  0.00%|                        continue
  2815|         0|            0|            0|  0.00%|                # Either this is not a major syntactic break, so we don't
  2816|         0|            0|            0|  0.00%|                # want it on a line by itself even if it fits, or it
  2817|         0|            0|            0|  0.00%|                # doesn't fit on a line by itself.  Either way, fall through
  2818|         0|            0|            0|  0.00%|                # to unpacking the subparts and wrapping them.
  2819|         0|            0|            0|  0.00%|            if not hasattr(part, 'encode'):
  2820|         0|            0|            0|  0.00%|                # It's not a Terminal, do each piece individually.
  2821|         0|            0|            0|  0.00%|                parts = list(part) + parts
  2822|         0|            0|            0|  0.00%|            else:
  2823|         0|            0|            0|  0.00%|                # It's a terminal, wrap it as an encoded word, possibly
  2824|         0|            0|            0|  0.00%|                # combining it with previously encoded words if allowed.
  2825|         0|            0|            0|  0.00%|                last_ew = _fold_as_ew(tstr, lines, maxlen, last_ew,
  2826|         0|            0|            0|  0.00%|                                      part.ew_combine_allowed, charset)
  2827|         0|            0|            0|  0.00%|            want_encoding = False
  2828|         0|            0|            0|  0.00%|            continue
  2829|         0|            0|            0|  0.00%|        if len(tstr) <= maxlen - len(lines[-1]):
  2830|         0|            0|            0|  0.00%|            lines[-1] += tstr
  2831|         0|            0|            0|  0.00%|            continue
  2832|         0|            0|            0|  0.00%|        # This part is too long to fit.  The RFC wants us to break at
  2833|         0|            0|            0|  0.00%|        # "major syntactic breaks", so unless we don't consider this
  2834|         0|            0|            0|  0.00%|        # to be one, check if it will fit on the next line by itself.
  2835|         0|            0|            0|  0.00%|        if (part.syntactic_break and
  2836|         0|            0|            0|  0.00%|                len(tstr) + 1 <= maxlen):
  2837|         0|            0|            0|  0.00%|            newline = _steal_trailing_WSP_if_exists(lines)
  2838|         0|            0|            0|  0.00%|            if newline or part.startswith_fws():
  2839|         0|            0|            0|  0.00%|                lines.append(newline + tstr)
  2840|         0|            0|            0|  0.00%|                last_ew = None
  2841|         0|            0|            0|  0.00%|                continue
  2842|         0|            0|            0|  0.00%|        if not hasattr(part, 'encode'):
  2843|         0|            0|            0|  0.00%|            # It's not a terminal, try folding the subparts.
  2844|         0|            0|            0|  0.00%|            newparts = list(part)
  2845|         0|            0|            0|  0.00%|            if not part.as_ew_allowed:
  2846|         0|            0|            0|  0.00%|                wrap_as_ew_blocked += 1
  2847|         0|            0|            0|  0.00%|                newparts.append(end_ew_not_allowed)
  2848|         0|            0|            0|  0.00%|            parts = newparts + parts
  2849|         0|            0|            0|  0.00%|            continue
  2850|         0|            0|            0|  0.00%|        if part.as_ew_allowed and not wrap_as_ew_blocked:
  2851|         0|            0|            0|  0.00%|            # It doesn't need CTE encoding, but encode it anyway so we can
  2852|         0|            0|            0|  0.00%|            # wrap it.
  2853|         0|            0|            0|  0.00%|            parts.insert(0, part)
  2854|         0|            0|            0|  0.00%|            want_encoding = True
  2855|         0|            0|            0|  0.00%|            continue
  2856|         0|            0|            0|  0.00%|        # We can't figure out how to wrap, it, so give up.
  2857|         0|            0|            0|  0.00%|        newline = _steal_trailing_WSP_if_exists(lines)
  2858|         0|            0|            0|  0.00%|        if newline or part.startswith_fws():
  2859|         0|            0|            0|  0.00%|            lines.append(newline + tstr)
  2860|         0|            0|            0|  0.00%|        else:
  2861|         0|            0|            0|  0.00%|            # We can't fold it onto the next line either...
  2862|         0|            0|            0|  0.00%|            lines[-1] += tstr
  2863|         0|            0|            0|  0.00%|    return policy.linesep.join(lines) + policy.linesep
  2864|         0|            0|            0|  0.00%|
  2865|         0|            0|            0|  0.00%|def _fold_as_ew(to_encode, lines, maxlen, last_ew, ew_combine_allowed, charset):
  2866|         0|            0|            0|  0.00%|    """Fold string to_encode into lines as encoded word, combining if allowed.
  2867|         0|            0|            0|  0.00%|    Return the new value for last_ew, or None if ew_combine_allowed is False.
  2868|         0|            0|            0|  0.00%|
  2869|         0|            0|            0|  0.00%|    If there is already an encoded word in the last line of lines (indicated by
  2870|         0|            0|            0|  0.00%|    a non-None value for last_ew) and ew_combine_allowed is true, decode the
  2871|         0|            0|            0|  0.00%|    existing ew, combine it with to_encode, and re-encode.  Otherwise, encode
  2872|         0|            0|            0|  0.00%|    to_encode.  In either case, split to_encode as necessary so that the
  2873|         0|            0|            0|  0.00%|    encoded segments fit within maxlen.
  2874|         0|            0|            0|  0.00%|
  2875|         0|            0|            0|  0.00%|    """
  2876|         0|            0|            0|  0.00%|    if last_ew is not None and ew_combine_allowed:
  2877|         0|            0|            0|  0.00%|        to_encode = str(
  2878|         0|            0|            0|  0.00%|            get_unstructured(lines[-1][last_ew:] + to_encode))
  2879|         0|            0|            0|  0.00%|        lines[-1] = lines[-1][:last_ew]
  2880|         0|            0|            0|  0.00%|    if to_encode[0] in WSP:
  2881|         0|            0|            0|  0.00%|        # We're joining this to non-encoded text, so don't encode
  2882|         0|            0|            0|  0.00%|        # the leading blank.
  2883|         0|            0|            0|  0.00%|        leading_wsp = to_encode[0]
  2884|         0|            0|            0|  0.00%|        to_encode = to_encode[1:]
  2885|         0|            0|            0|  0.00%|        if (len(lines[-1]) == maxlen):
  2886|         0|            0|            0|  0.00%|            lines.append(_steal_trailing_WSP_if_exists(lines))
  2887|         0|            0|            0|  0.00%|        lines[-1] += leading_wsp
  2888|         0|            0|            0|  0.00%|    trailing_wsp = ''
  2889|         0|            0|            0|  0.00%|    if to_encode[-1] in WSP:
  2890|         0|            0|            0|  0.00%|        # Likewise for the trailing space.
  2891|         0|            0|            0|  0.00%|        trailing_wsp = to_encode[-1]
  2892|         0|            0|            0|  0.00%|        to_encode = to_encode[:-1]
  2893|         0|            0|            0|  0.00%|    new_last_ew = len(lines[-1]) if last_ew is None else last_ew
  2894|         0|            0|            0|  0.00%|
  2895|         0|            0|            0|  0.00%|    encode_as = 'utf-8' if charset == 'us-ascii' else charset
  2896|         0|            0|            0|  0.00%|
  2897|         0|            0|            0|  0.00%|    # The RFC2047 chrome takes up 7 characters plus the length
  2898|         0|            0|            0|  0.00%|    # of the charset name.
  2899|         0|            0|            0|  0.00%|    chrome_len = len(encode_as) + 7
  2900|         0|            0|            0|  0.00%|
  2901|         0|            0|            0|  0.00%|    if (chrome_len + 1) >= maxlen:
  2902|         0|            0|            0|  0.00%|        raise errors.HeaderParseError(
  2903|         0|            0|            0|  0.00%|            "max_line_length is too small to fit an encoded word")
  2904|         0|            0|            0|  0.00%|
  2905|         0|            0|            0|  0.00%|    while to_encode:
  2906|         0|            0|            0|  0.00%|        remaining_space = maxlen - len(lines[-1])
  2907|         0|            0|            0|  0.00%|        text_space = remaining_space - chrome_len
  2908|         0|            0|            0|  0.00%|        if text_space <= 0:
  2909|         0|            0|            0|  0.00%|            lines.append(' ')
  2910|         0|            0|            0|  0.00%|            continue
  2911|         0|            0|            0|  0.00%|
  2912|         0|            0|            0|  0.00%|        to_encode_word = to_encode[:text_space]
  2913|         0|            0|            0|  0.00%|        encoded_word = _ew.encode(to_encode_word, charset=encode_as)
  2914|         0|            0|            0|  0.00%|        excess = len(encoded_word) - remaining_space
  2915|         0|            0|            0|  0.00%|        while excess > 0:
  2916|         0|            0|            0|  0.00%|            # Since the chunk to encode is guaranteed to fit into less than 100 characters,
  2917|         0|            0|            0|  0.00%|            # shrinking it by one at a time shouldn't take long.
  2918|         0|            0|            0|  0.00%|            to_encode_word = to_encode_word[:-1]
  2919|         0|            0|            0|  0.00%|            encoded_word = _ew.encode(to_encode_word, charset=encode_as)
  2920|         0|            0|            0|  0.00%|            excess = len(encoded_word) - remaining_space
  2921|         0|            0|            0|  0.00%|        lines[-1] += encoded_word
  2922|         0|            0|            0|  0.00%|        to_encode = to_encode[len(to_encode_word):]
  2923|         0|            0|            0|  0.00%|
  2924|         0|            0|            0|  0.00%|        if to_encode:
  2925|         0|            0|            0|  0.00%|            lines.append(' ')
  2926|         0|            0|            0|  0.00%|            new_last_ew = len(lines[-1])
  2927|         0|            0|            0|  0.00%|    lines[-1] += trailing_wsp
  2928|         0|            0|            0|  0.00%|    return new_last_ew if ew_combine_allowed else None
  2929|         0|            0|            0|  0.00%|
  2930|         0|            0|            0|  0.00%|def _fold_mime_parameters(part, lines, maxlen, encoding):
  2931|         0|            0|            0|  0.00%|    """Fold TokenList 'part' into the 'lines' list as mime parameters.
  2932|         0|            0|            0|  0.00%|
  2933|         0|            0|            0|  0.00%|    Using the decoded list of parameters and values, format them according to
  2934|         0|            0|            0|  0.00%|    the RFC rules, including using RFC2231 encoding if the value cannot be
  2935|         0|            0|            0|  0.00%|    expressed in 'encoding' and/or the parameter+value is too long to fit
  2936|         0|            0|            0|  0.00%|    within 'maxlen'.
  2937|         0|            0|            0|  0.00%|
  2938|         0|            0|            0|  0.00%|    """
  2939|         0|            0|            0|  0.00%|    # Special case for RFC2231 encoding: start from decoded values and use
  2940|         0|            0|            0|  0.00%|    # RFC2231 encoding iff needed.
  2941|         0|            0|            0|  0.00%|    #
  2942|         0|            0|            0|  0.00%|    # Note that the 1 and 2s being added to the length calculations are
  2943|         0|            0|            0|  0.00%|    # accounting for the possibly-needed spaces and semicolons we'll be adding.
  2944|         0|            0|            0|  0.00%|    #
  2945|         0|            0|            0|  0.00%|    for name, value in part.params:
  2946|         0|            0|            0|  0.00%|        # XXX What if this ';' puts us over maxlen the first time through the
  2947|         0|            0|            0|  0.00%|        # loop?  We should split the header value onto a newline in that case,
  2948|         0|            0|            0|  0.00%|        # but to do that we need to recognize the need earlier or reparse the
  2949|         0|            0|            0|  0.00%|        # header, so I'm going to ignore that bug for now.  It'll only put us
  2950|         0|            0|            0|  0.00%|        # one character over.
  2951|         0|            0|            0|  0.00%|        if not lines[-1].rstrip().endswith(';'):
  2952|         0|            0|            0|  0.00%|            lines[-1] += ';'
  2953|         0|            0|            0|  0.00%|        charset = encoding
  2954|         0|            0|            0|  0.00%|        error_handler = 'strict'
  2955|         0|            0|            0|  0.00%|        try:
  2956|         0|            0|            0|  0.00%|            value.encode(encoding)
  2957|         0|            0|            0|  0.00%|            encoding_required = False
  2958|         0|            0|            0|  0.00%|        except UnicodeEncodeError:
  2959|         0|            0|            0|  0.00%|            encoding_required = True
  2960|         0|            0|            0|  0.00%|            if utils._has_surrogates(value):
  2961|         0|            0|            0|  0.00%|                charset = 'unknown-8bit'
  2962|         0|            0|            0|  0.00%|                error_handler = 'surrogateescape'
  2963|         0|            0|            0|  0.00%|            else:
  2964|         0|            0|            0|  0.00%|                charset = 'utf-8'
  2965|         0|            0|            0|  0.00%|        if encoding_required:
  2966|         0|            0|            0|  0.00%|            encoded_value = urllib.parse.quote(
  2967|         0|            0|            0|  0.00%|                value, safe='', errors=error_handler)
  2968|         0|            0|            0|  0.00%|            tstr = "{}*={}''{}".format(name, charset, encoded_value)
  2969|         0|            0|            0|  0.00%|        else:
  2970|         0|            0|            0|  0.00%|            tstr = '{}={}'.format(name, quote_string(value))
  2971|         0|            0|            0|  0.00%|        if len(lines[-1]) + len(tstr) + 1 < maxlen:
  2972|         0|            0|            0|  0.00%|            lines[-1] = lines[-1] + ' ' + tstr
  2973|         0|            0|            0|  0.00%|            continue
  2974|         0|            0|            0|  0.00%|        elif len(tstr) + 2 <= maxlen:
  2975|         0|            0|            0|  0.00%|            lines.append(' ' + tstr)
  2976|         0|            0|            0|  0.00%|            continue
  2977|         0|            0|            0|  0.00%|        # We need multiple sections.  We are allowed to mix encoded and
  2978|         0|            0|            0|  0.00%|        # non-encoded sections, but we aren't going to.  We'll encode them all.
  2979|         0|            0|            0|  0.00%|        section = 0
  2980|         0|            0|            0|  0.00%|        extra_chrome = charset + "''"
  2981|         0|            0|            0|  0.00%|        while value:
  2982|         0|            0|            0|  0.00%|            chrome_len = len(name) + len(str(section)) + 3 + len(extra_chrome)
  2983|         0|            0|            0|  0.00%|            if maxlen <= chrome_len + 3:
  2984|         0|            0|            0|  0.00%|                # We need room for the leading blank, the trailing semicolon,
  2985|         0|            0|            0|  0.00%|                # and at least one character of the value.  If we don't
  2986|         0|            0|            0|  0.00%|                # have that, we'd be stuck, so in that case fall back to
  2987|         0|            0|            0|  0.00%|                # the RFC standard width.
  2988|         0|            0|            0|  0.00%|                maxlen = 78
  2989|         0|            0|            0|  0.00%|            splitpoint = maxchars = maxlen - chrome_len - 2
  2990|         0|            0|            0|  0.00%|            while True:
  2991|         0|            0|            0|  0.00%|                partial = value[:splitpoint]
  2992|         0|            0|            0|  0.00%|                encoded_value = urllib.parse.quote(
  2993|         0|            0|            0|  0.00%|                    partial, safe='', errors=error_handler)
  2994|         0|            0|            0|  0.00%|                if len(encoded_value) <= maxchars:
  2995|         0|            0|            0|  0.00%|                    break
  2996|         0|            0|            0|  0.00%|                splitpoint -= 1
  2997|         0|            0|            0|  0.00%|            lines.append(" {}*{}*={}{}".format(
  2998|         0|            0|            0|  0.00%|                name, section, extra_chrome, encoded_value))
  2999|         0|            0|            0|  0.00%|            extra_chrome = ''
  3000|         0|            0|            0|  0.00%|            section += 1
  3001|         0|            0|            0|  0.00%|            value = value[splitpoint:]
  3002|         0|            0|            0|  0.00%|            if value:
  3003|         0|            0|            0|  0.00%|                lines[-1] += ';'
File: /usr/lib/python3.10/_strptime.py
File duration: 0.00439787s (1.81%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|  3.14713e-05|  1.57356e-05|  0.01%|"""Strptime-related classes and functions.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|CLASSES:
     4|         0|            0|            0|  0.00%|    LocaleTime -- Discovers and stores locale-specific time information
     5|         0|            0|            0|  0.00%|    TimeRE -- Creates regexes for pattern matching a string of text containing
     6|         0|            0|            0|  0.00%|                time information
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|FUNCTIONS:
     9|         0|            0|            0|  0.00%|    _getlang -- Figure out what language is being used for the locale
    10|         0|            0|            0|  0.00%|    strptime -- Calculates the time struct represented by the passed-in string
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|"""
    13|         1|  6.67572e-06|  6.67572e-06|  0.00%|import time
    14|         1|   1.0252e-05|   1.0252e-05|  0.00%|import locale
    15|         1|  9.05991e-06|  9.05991e-06|  0.00%|import calendar
    16|         1|  1.09673e-05|  1.09673e-05|  0.00%|from re import compile as re_compile
    17|         1|  9.53674e-06|  9.53674e-06|  0.00%|from re import IGNORECASE
    18|         1|  9.29832e-06|  9.29832e-06|  0.00%|from re import escape as re_escape
    19|         1|  1.12057e-05|  1.12057e-05|  0.00%|from datetime import (date as datetime_date,
    20|         0|            0|            0|  0.00%|                      timedelta as datetime_timedelta,
    21|         0|            0|            0|  0.00%|                      timezone as datetime_timezone)
    22|         1|  8.82149e-06|  8.82149e-06|  0.00%|from _thread import allocate_lock as _thread_allocate_lock
    23|         0|            0|            0|  0.00%|
    24|         1|  8.82149e-06|  8.82149e-06|  0.00%|__all__ = []
    25|         0|            0|            0|  0.00%|
    26|         4|   2.0504e-05|    5.126e-06|  0.01%|def _getlang():
    27|         0|            0|            0|  0.00%|    # Figure out what the current language is set to.
    28|         3|  2.76566e-05|  9.21885e-06|  0.01%|    return locale.getlocale(locale.LC_TIME)
(call)|         3|  0.000328541|  0.000109514|  0.14%|# /usr/lib/python3.10/locale.py:587 getlocale
    29|         0|            0|            0|  0.00%|
    30|         3|  0.000100613|  3.35375e-05|  0.04%|class LocaleTime(object):
(call)|         1|  0.000100613|  0.000100613|  0.04%|# /usr/lib/python3.10/_strptime.py:30 LocaleTime
    31|         1|  4.29153e-06|  4.29153e-06|  0.00%|    """Stores and handles locale-specific information related to time.
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|    ATTRIBUTES:
    34|         0|            0|            0|  0.00%|        f_weekday -- full weekday names (7-item list)
    35|         0|            0|            0|  0.00%|        a_weekday -- abbreviated weekday names (7-item list)
    36|         0|            0|            0|  0.00%|        f_month -- full month names (13-item list; dummy value in [0], which
    37|         0|            0|            0|  0.00%|                    is added by code)
    38|         0|            0|            0|  0.00%|        a_month -- abbreviated month names (13-item list, dummy value in
    39|         0|            0|            0|  0.00%|                    [0], which is added by code)
    40|         0|            0|            0|  0.00%|        am_pm -- AM/PM representation (2-item list)
    41|         0|            0|            0|  0.00%|        LC_date_time -- format string for date/time representation (string)
    42|         0|            0|            0|  0.00%|        LC_date -- format string for date representation (string)
    43|         0|            0|            0|  0.00%|        LC_time -- format string for time representation (string)
    44|         0|            0|            0|  0.00%|        timezone -- daylight- and non-daylight-savings timezone representation
    45|         0|            0|            0|  0.00%|                    (2-item list of sets)
    46|         0|            0|            0|  0.00%|        lang -- Language used by instance (2-item tuple)
    47|         0|            0|            0|  0.00%|    """
    48|         0|            0|            0|  0.00%|
    49|         2|  1.04904e-05|  5.24521e-06|  0.00%|    def __init__(self):
    50|         0|            0|            0|  0.00%|        """Set all attributes.
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|        Order of methods called matters for dependency reasons.
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|        The locale language is set at the offset and then checked again before
    55|         0|            0|            0|  0.00%|        exiting.  This is to make sure that the attributes were not set with a
    56|         0|            0|            0|  0.00%|        mix of information from more than one locale.  This would most likely
    57|         0|            0|            0|  0.00%|        happen when using threads where one thread calls a locale-dependent
    58|         0|            0|            0|  0.00%|        function while another thread changes the locale while the function in
    59|         0|            0|            0|  0.00%|        the other thread is still running.  Proper coding would call for
    60|         0|            0|            0|  0.00%|        locks to prevent changing the locale while locale-dependent code is
    61|         0|            0|            0|  0.00%|        running.  The check here is done in case someone does not think about
    62|         0|            0|            0|  0.00%|        doing this.
    63|         0|            0|            0|  0.00%|
    64|         0|            0|            0|  0.00%|        Only other possible issue is if someone changed the timezone and did
    65|         0|            0|            0|  0.00%|        not call tz.tzset .  That is an issue for the programmer, though,
    66|         0|            0|            0|  0.00%|        since changing the timezone is worthless without that call.
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|        """
    69|         1|  9.77516e-06|  9.77516e-06|  0.00%|        self.lang = _getlang()
(call)|         1|  0.000142813|  0.000142813|  0.06%|# /usr/lib/python3.10/_strptime.py:26 _getlang
    70|         1|   1.0252e-05|   1.0252e-05|  0.00%|        self.__calc_weekday()
(call)|         1|  0.000374794|  0.000374794|  0.15%|# /usr/lib/python3.10/_strptime.py:80 __calc_weekday
    71|         1|   1.0252e-05|   1.0252e-05|  0.00%|        self.__calc_month()
(call)|         1|  0.000630617|  0.000630617|  0.26%|# /usr/lib/python3.10/_strptime.py:88 __calc_month
    72|         1|  1.04904e-05|  1.04904e-05|  0.00%|        self.__calc_am_pm()
(call)|         1|  4.14848e-05|  4.14848e-05|  0.02%|# /usr/lib/python3.10/_strptime.py:95 __calc_am_pm
    73|         1|   1.5974e-05|   1.5974e-05|  0.01%|        self.__calc_timezone()
(call)|         1|  5.07832e-05|  5.07832e-05|  0.02%|# /usr/lib/python3.10/_strptime.py:152 __calc_timezone
    74|         1|  1.28746e-05|  1.28746e-05|  0.01%|        self.__calc_date_time()
(call)|         1|  0.000897646|  0.000897646|  0.37%|# /usr/lib/python3.10/_strptime.py:107 __calc_date_time
    75|         1|  9.29832e-06|  9.29832e-06|  0.00%|        if _getlang() != self.lang:
(call)|         1|  0.000106812|  0.000106812|  0.04%|# /usr/lib/python3.10/_strptime.py:26 _getlang
    76|         0|            0|            0|  0.00%|            raise ValueError("locale changed during initialization")
    77|         1|  4.52995e-06|  4.52995e-06|  0.00%|        if time.tzname != self.tzname or time.daylight != self.daylight:
    78|         0|            0|            0|  0.00%|            raise ValueError("timezone changed during initialization")
    79|         0|            0|            0|  0.00%|
    80|         2|  9.77516e-06|  4.88758e-06|  0.00%|    def __calc_weekday(self):
    81|         0|            0|            0|  0.00%|        # Set self.a_weekday and self.f_weekday using the calendar
    82|         0|            0|            0|  0.00%|        # module.
    83|        10|  7.93934e-05|  7.93934e-06|  0.03%|        a_weekday = [calendar.day_abbr[i].lower() for i in range(7)]
(call)|         7|  0.000113249|  1.61784e-05|  0.05%|# /usr/lib/python3.10/calendar.py:77 __getitem__
(call)|         1|  0.000183105|  0.000183105|  0.08%|# /usr/lib/python3.10/_strptime.py:83 <listcomp>
    84|        10|  7.41482e-05|  7.41482e-06|  0.03%|        f_weekday = [calendar.day_name[i].lower() for i in range(7)]
(call)|         7|  9.58443e-05|   1.3692e-05|  0.04%|# /usr/lib/python3.10/calendar.py:77 __getitem__
(call)|         1|  0.000161409|  0.000161409|  0.07%|# /usr/lib/python3.10/_strptime.py:84 <listcomp>
    85|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.a_weekday = a_weekday
    86|         1|  4.29153e-06|  4.29153e-06|  0.00%|        self.f_weekday = f_weekday
    87|         0|            0|            0|  0.00%|
    88|         2|  8.58307e-06|  4.29153e-06|  0.00%|    def __calc_month(self):
    89|         0|            0|            0|  0.00%|        # Set self.f_month and self.a_month using the calendar module.
    90|        16|  0.000120163|  7.51019e-06|  0.05%|        a_month = [calendar.month_abbr[i].lower() for i in range(13)]
(call)|        13|  0.000194073|  1.49287e-05|  0.08%|# /usr/lib/python3.10/calendar.py:58 __getitem__
(call)|         1|  0.000304699|  0.000304699|  0.13%|# /usr/lib/python3.10/_strptime.py:90 <listcomp>
    91|        16|  0.000119448|  7.46548e-06|  0.05%|        f_month = [calendar.month_name[i].lower() for i in range(13)]
(call)|        13|  0.000185966|  1.43051e-05|  0.08%|# /usr/lib/python3.10/calendar.py:58 __getitem__
(call)|         1|  0.000295639|  0.000295639|  0.12%|# /usr/lib/python3.10/_strptime.py:91 <listcomp>
    92|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.a_month = a_month
    93|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.f_month = f_month
    94|         0|            0|            0|  0.00%|
    95|         2|  8.58307e-06|  4.29153e-06|  0.00%|    def __calc_am_pm(self):
    96|         0|            0|            0|  0.00%|        # Set self.am_pm by using time.strftime().
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|        # The magic date (1999,3,17,hour,44,55,2,76,0) is not really that
    99|         0|            0|            0|  0.00%|        # magical; just happened to have used it everywhere else where a
   100|         0|            0|            0|  0.00%|        # static date was needed.
   101|         1|   3.8147e-06|   3.8147e-06|  0.00%|        am_pm = []
   102|         3|  1.16825e-05|  3.89417e-06|  0.00%|        for hour in (1, 22):
   103|         2|   1.0252e-05|    5.126e-06|  0.00%|            time_tuple = time.struct_time((1999,3,17,hour,44,55,2,76,0))
   104|         2|  8.58307e-06|  4.29153e-06|  0.00%|            am_pm.append(time.strftime("%p", time_tuple).lower())
   105|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.am_pm = am_pm
   106|         0|            0|            0|  0.00%|
   107|         2|  1.04904e-05|  5.24521e-06|  0.00%|    def __calc_date_time(self):
   108|         0|            0|            0|  0.00%|        # Set self.date_time, self.date, & self.time by using
   109|         0|            0|            0|  0.00%|        # time.strftime().
   110|         0|            0|            0|  0.00%|
   111|         0|            0|            0|  0.00%|        # Use (1999,3,17,22,44,55,2,76,0) for magic date because the amount of
   112|         0|            0|            0|  0.00%|        # overloaded numbers is minimized.  The order in which searches for
   113|         0|            0|            0|  0.00%|        # values within the format string is very important; it eliminates
   114|         0|            0|            0|  0.00%|        # possible ambiguity for what something represents.
   115|         1|  5.48363e-06|  5.48363e-06|  0.00%|        time_tuple = time.struct_time((1999,3,17,22,44,55,2,76,0))
   116|         1|  5.00679e-06|  5.00679e-06|  0.00%|        date_time = [None, None, None]
   117|         1|  6.67572e-06|  6.67572e-06|  0.00%|        date_time[0] = time.strftime("%c", time_tuple).lower()
   118|         1|  7.39098e-06|  7.39098e-06|  0.00%|        date_time[1] = time.strftime("%x", time_tuple).lower()
   119|         1|  5.48363e-06|  5.48363e-06|  0.00%|        date_time[2] = time.strftime("%X", time_tuple).lower()
   120|         2|  1.07288e-05|  5.36442e-06|  0.00%|        replacement_pairs = [('%', '%%'), (self.f_weekday[2], '%A'),
   121|         1|  5.24521e-06|  5.24521e-06|  0.00%|                    (self.f_month[3], '%B'), (self.a_weekday[2], '%a'),
   122|         1|  4.76837e-06|  4.76837e-06|  0.00%|                    (self.a_month[3], '%b'), (self.am_pm[1], '%p'),
   123|         1|   1.7643e-05|   1.7643e-05|  0.01%|                    ('1999', '%Y'), ('99', '%y'), ('22', '%H'),
   124|         1|  5.24521e-06|  5.24521e-06|  0.00%|                    ('44', '%M'), ('55', '%S'), ('76', '%j'),
   125|         1|  4.76837e-06|  4.76837e-06|  0.00%|                    ('17', '%d'), ('03', '%m'), ('3', '%m'),
   126|         0|            0|            0|  0.00%|                    # '3' needed for when no leading zero.
   127|         1|  4.52995e-06|  4.52995e-06|  0.00%|                    ('2', '%w'), ('10', '%I')]
   128|        13|  5.19753e-05|   3.9981e-06|  0.02%|        replacement_pairs.extend([(tz, "%Z") for tz_values in self.timezone
(call)|         1|  5.50747e-05|  5.50747e-05|  0.02%|# /usr/lib/python3.10/_strptime.py:128 <listcomp>
   129|         5|  1.50204e-05|  3.00407e-06|  0.01%|                                                for tz in tz_values])
   130|         4|  1.69277e-05|  4.23193e-06|  0.01%|        for offset,directive in ((0,'%c'), (1,'%x'), (2,'%X')):
   131|         3|  1.21593e-05|  4.05312e-06|  0.01%|            current_format = date_time[offset]
   132|        63|  0.000219345|  3.48167e-06|  0.09%|            for old, new in replacement_pairs:
   133|         0|            0|            0|  0.00%|                # Must deal with possible lack of locale info
   134|         0|            0|            0|  0.00%|                # manifesting itself as the empty string (e.g., Swedish's
   135|         0|            0|            0|  0.00%|                # lack of AM/PM info) or a platform returning a tuple of empty
   136|         0|            0|            0|  0.00%|                # strings (e.g., MacOS 9 having timezone as ('','')).
   137|        60|  0.000208855|  3.48091e-06|  0.09%|                if old:
   138|        60|  0.000216246|  3.60409e-06|  0.09%|                    current_format = current_format.replace(old, new)
   139|         0|            0|            0|  0.00%|            # If %W is used, then Sunday, 2005-01-03 will fall on week 0 since
   140|         0|            0|            0|  0.00%|            # 2005-01-03 occurs before the first Monday of the year.  Otherwise
   141|         0|            0|            0|  0.00%|            # %U is used.
   142|         3|  1.28746e-05|  4.29153e-06|  0.01%|            time_tuple = time.struct_time((1999,1,3,1,1,1,6,3,0))
   143|         3|  1.62125e-05|  5.40415e-06|  0.01%|            if '00' in time.strftime(directive, time_tuple):
   144|         0|            0|            0|  0.00%|                U_W = '%W'
   145|         0|            0|            0|  0.00%|            else:
   146|         3|  1.26362e-05|  4.21206e-06|  0.01%|                U_W = '%U'
   147|         3|  1.19209e-05|  3.97364e-06|  0.00%|            date_time[offset] = current_format.replace('11', U_W)
   148|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.LC_date_time = date_time[0]
   149|         1|  5.24521e-06|  5.24521e-06|  0.00%|        self.LC_date = date_time[1]
   150|         1|  6.19888e-06|  6.19888e-06|  0.00%|        self.LC_time = date_time[2]
   151|         0|            0|            0|  0.00%|
   152|         2|  9.77516e-06|  4.88758e-06|  0.00%|    def __calc_timezone(self):
   153|         0|            0|            0|  0.00%|        # Set self.timezone by using time.tzname.
   154|         0|            0|            0|  0.00%|        # Do not worry about possibility of time.tzname[0] == time.tzname[1]
   155|         0|            0|            0|  0.00%|        # and time.daylight; handle that in strptime.
   156|         1|   3.8147e-06|   3.8147e-06|  0.00%|        try:
   157|         1|   1.7643e-05|   1.7643e-05|  0.01%|            time.tzset()
   158|         0|            0|            0|  0.00%|        except AttributeError:
   159|         0|            0|            0|  0.00%|            pass
   160|         1|  5.96046e-06|  5.96046e-06|  0.00%|        self.tzname = time.tzname
   161|         1|  4.05312e-06|  4.05312e-06|  0.00%|        self.daylight = time.daylight
   162|         1|  4.76837e-06|  4.76837e-06|  0.00%|        no_saving = frozenset({"utc", "gmt", self.tzname[0].lower()})
   163|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if self.daylight:
   164|         0|            0|            0|  0.00%|            has_saving = frozenset({self.tzname[1].lower()})
   165|         0|            0|            0|  0.00%|        else:
   166|         1|   3.8147e-06|   3.8147e-06|  0.00%|            has_saving = frozenset()
   167|         1|  3.57628e-06|  3.57628e-06|  0.00%|        self.timezone = (no_saving, has_saving)
   168|         0|            0|            0|  0.00%|
   169|         0|            0|            0|  0.00%|
   170|         3|  5.24521e-05|   1.7484e-05|  0.02%|class TimeRE(dict):
(call)|         1|  3.91006e-05|  3.91006e-05|  0.02%|# /usr/lib/python3.10/_strptime.py:170 TimeRE
   171|         1|  4.29153e-06|  4.29153e-06|  0.00%|    """Handle conversion from format directives to regexes."""
   172|         0|            0|            0|  0.00%|
   173|         2|  1.40667e-05|  7.03335e-06|  0.01%|    def __init__(self, locale_time=None):
   174|         0|            0|            0|  0.00%|        """Create keys/values.
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|        Order of execution is important for dependency reasons.
   177|         0|            0|            0|  0.00%|
   178|         0|            0|            0|  0.00%|        """
   179|         1|  5.00679e-06|  5.00679e-06|  0.00%|        if locale_time:
   180|         0|            0|            0|  0.00%|            self.locale_time = locale_time
   181|         0|            0|            0|  0.00%|        else:
   182|         1|  1.16825e-05|  1.16825e-05|  0.00%|            self.locale_time = LocaleTime()
(call)|         1|   0.00233316|   0.00233316|  0.96%|# /usr/lib/python3.10/_strptime.py:49 __init__
   183|         1|  5.00679e-06|  5.00679e-06|  0.00%|        base = super()
   184|        19|  8.01086e-05|  4.21624e-06|  0.03%|        base.__init__({
   185|         0|            0|            0|  0.00%|            # The " [1-9]" part of the regex is to make %c from ANSI C work
   186|         1|  4.29153e-06|  4.29153e-06|  0.00%|            'd': r"(?P<d>3[0-1]|[1-2]\d|0[1-9]|[1-9]| [1-9])",
   187|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'f': r"(?P<f>[0-9]{1,6})",
   188|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'H': r"(?P<H>2[0-3]|[0-1]\d|\d)",
   189|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'I': r"(?P<I>1[0-2]|0[1-9]|[1-9])",
   190|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'G': r"(?P<G>\d\d\d\d)",
   191|         1|  3.57628e-06|  3.57628e-06|  0.00%|            'j': r"(?P<j>36[0-6]|3[0-5]\d|[1-2]\d\d|0[1-9]\d|00[1-9]|[1-9]\d|0[1-9]|[1-9])",
   192|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'm': r"(?P<m>1[0-2]|0[1-9]|[1-9])",
   193|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'M': r"(?P<M>[0-5]\d|\d)",
   194|         1|  3.09944e-06|  3.09944e-06|  0.00%|            'S': r"(?P<S>6[0-1]|[0-5]\d|\d)",
   195|         1|  2.86102e-06|  2.86102e-06|  0.00%|            'U': r"(?P<U>5[0-3]|[0-4]\d|\d)",
   196|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'w': r"(?P<w>[0-6])",
   197|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'u': r"(?P<u>[1-7])",
   198|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'V': r"(?P<V>5[0-3]|0[1-9]|[1-4]\d|\d)",
   199|         0|            0|            0|  0.00%|            # W is set below by using 'U'
   200|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'y': r"(?P<y>\d\d)",
   201|         0|            0|            0|  0.00%|            #XXX: Does 'Y' need to worry about having less or more than
   202|         0|            0|            0|  0.00%|            #     4 digits?
   203|         1|  3.33786e-06|  3.33786e-06|  0.00%|            'Y': r"(?P<Y>\d\d\d\d)",
   204|         1|  3.57628e-06|  3.57628e-06|  0.00%|            'z': r"(?P<z>[+-]\d\d:?[0-5]\d(:?[0-5]\d(\.\d{1,6})?)?|(?-i:Z))",
   205|         1|  1.07288e-05|  1.07288e-05|  0.00%|            'A': self.__seqToRE(self.locale_time.f_weekday, 'A'),
(call)|         1|  0.000222206|  0.000222206|  0.09%|# /usr/lib/python3.10/_strptime.py:219 __seqToRE
   206|         1|   1.0252e-05|   1.0252e-05|  0.00%|            'a': self.__seqToRE(self.locale_time.a_weekday, 'a'),
(call)|         1|  0.000198841|  0.000198841|  0.08%|# /usr/lib/python3.10/_strptime.py:219 __seqToRE
   207|         1|  1.12057e-05|  1.12057e-05|  0.00%|            'B': self.__seqToRE(self.locale_time.f_month[1:], 'B'),
(call)|         1|  0.000310421|  0.000310421|  0.13%|# /usr/lib/python3.10/_strptime.py:219 __seqToRE
   208|         1|  1.12057e-05|  1.12057e-05|  0.00%|            'b': self.__seqToRE(self.locale_time.a_month[1:], 'b'),
(call)|         1|  0.000308514|  0.000308514|  0.13%|# /usr/lib/python3.10/_strptime.py:219 __seqToRE
   209|         1|  1.09673e-05|  1.09673e-05|  0.00%|            'p': self.__seqToRE(self.locale_time.am_pm, 'p'),
(call)|         1|  8.22544e-05|  8.22544e-05|  0.03%|# /usr/lib/python3.10/_strptime.py:219 __seqToRE
   210|        17|  6.19888e-05|   3.6464e-06|  0.03%|            'Z': self.__seqToRE((tz for tz_names in self.locale_time.timezone
(call)|         1|  0.000184298|  0.000184298|  0.08%|# /usr/lib/python3.10/_strptime.py:219 __seqToRE
   211|         5|  1.43051e-05|  2.86102e-06|  0.01%|                                        for tz in tz_names),
   212|         1|  4.05312e-06|  4.05312e-06|  0.00%|                                'Z'),
   213|         1|  3.33786e-06|  3.33786e-06|  0.00%|            '%': '%'})
   214|         1|  5.00679e-06|  5.00679e-06|  0.00%|        base.__setitem__('W', base.__getitem__('U').replace('U', 'W'))
   215|         1|  1.43051e-05|  1.43051e-05|  0.01%|        base.__setitem__('c', self.pattern(self.locale_time.LC_date_time))
(call)|         1|   0.00918031|   0.00918031|  3.78%|# /usr/lib/python3.10/_strptime.py:238 pattern
   216|         1|  1.16825e-05|  1.16825e-05|  0.00%|        base.__setitem__('x', self.pattern(self.locale_time.LC_date))
(call)|         1|  0.000189781|  0.000189781|  0.08%|# /usr/lib/python3.10/_strptime.py:238 pattern
   217|         1|  1.23978e-05|  1.23978e-05|  0.01%|        base.__setitem__('X', self.pattern(self.locale_time.LC_time))
(call)|         1|  0.000187159|  0.000187159|  0.08%|# /usr/lib/python3.10/_strptime.py:238 pattern
   218|         0|            0|            0|  0.00%|
   219|         7|   2.5034e-05|  3.57628e-06|  0.01%|    def __seqToRE(self, to_convert, directive):
   220|         0|            0|            0|  0.00%|        """Convert a list to a regex string for matching a directive.
   221|         0|            0|            0|  0.00%|
   222|         0|            0|            0|  0.00%|        Want possible matching values to be from longest to shortest.  This
   223|         0|            0|            0|  0.00%|        prevents the possibility of a match occurring for a value that also
   224|         0|            0|            0|  0.00%|        a substring of a larger value that should have matched (e.g., 'abc'
   225|         0|            0|            0|  0.00%|        matching when 'abcdef' should have been the match).
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|        """
   228|         6|  4.74453e-05|  7.90755e-06|  0.02%|        to_convert = sorted(to_convert, key=len, reverse=True)
(call)|         4|  5.93662e-05|  1.48416e-05|  0.02%|# /usr/lib/python3.10/_strptime.py:210 <genexpr>
   229|         6|  2.07424e-05|  3.45707e-06|  0.01%|        for value in to_convert:
   230|         6|  1.83582e-05|  3.05971e-06|  0.01%|            if value != '':
   231|         6|  1.95503e-05|  3.25839e-06|  0.01%|                break
   232|         0|            0|            0|  0.00%|        else:
   233|         0|            0|            0|  0.00%|            return ''
   234|       104|  0.000705004|  6.77888e-06|  0.29%|        regex = '|'.join(re_escape(stuff) for stuff in to_convert)
(call)|        43|  0.000373602|  8.68842e-06|  0.15%|# /usr/lib/python3.10/re.py:269 escape
(call)|        49|  0.000836372|  1.70688e-05|  0.34%|# /usr/lib/python3.10/_strptime.py:234 <genexpr>
   235|         6|  2.24113e-05|  3.73522e-06|  0.01%|        regex = '(?P<%s>%s' % (directive, regex)
   236|         6|   2.0504e-05|  3.41733e-06|  0.01%|        return '%s)' % regex
   237|         0|            0|            0|  0.00%|
   238|         5|  1.85966e-05|  3.71933e-06|  0.01%|    def pattern(self, format):
   239|         0|            0|            0|  0.00%|        """Return regex pattern for the format string.
   240|         0|            0|            0|  0.00%|
   241|         0|            0|            0|  0.00%|        Need to make sure that any characters that might be interpreted as
   242|         0|            0|            0|  0.00%|        regex syntax are escaped.
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|        """
   245|         4|  1.40667e-05|  3.51667e-06|  0.01%|        processed_format = ''
   246|         0|            0|            0|  0.00%|        # The sub() call escapes all characters that might be misconstrued
   247|         0|            0|            0|  0.00%|        # as regex syntax.  Cannot use re.escape since we have to deal with
   248|         0|            0|            0|  0.00%|        # format directives (%m, etc.).
   249|         4|  3.62396e-05|  9.05991e-06|  0.01%|        regex_chars = re_compile(r"([\\.^$*+?\(\){}\[\]|])")
(call)|         4|   0.00612569|   0.00153142|  2.52%|# /usr/lib/python3.10/re.py:249 compile
   250|         4|  5.10216e-05|  1.27554e-05|  0.02%|        format = regex_chars.sub(r"\\\1", format)
(call)|         4|  0.000528574|  0.000132143|  0.22%|# /usr/lib/python3.10/re.py:324 _subx
   251|         4|  3.43323e-05|  8.58307e-06|  0.01%|        whitespace_replacement = re_compile(r'\s+')
(call)|         4|   0.00205374|  0.000513434|  0.85%|# /usr/lib/python3.10/re.py:249 compile
   252|         4|  4.60148e-05|  1.15037e-05|  0.02%|        format = whitespace_replacement.sub(r'\\s+', format)
(call)|         4|  0.000457525|  0.000114381|  0.19%|# /usr/lib/python3.10/re.py:324 _subx
   253|        20|  6.38962e-05|  3.19481e-06|  0.03%|        while '%' in format:
   254|        16|  5.60284e-05|  3.50177e-06|  0.02%|            directive_index = format.index('%')+1
   255|        32|  0.000101805|   3.1814e-06|  0.04%|            processed_format = "%s%s%s" % (processed_format,
   256|        16|  5.05447e-05|  3.15905e-06|  0.02%|                                           format[:directive_index-1],
   257|        16|    5.126e-05|  3.20375e-06|  0.02%|                                           self[format[directive_index]])
   258|        16|  4.98295e-05|  3.11434e-06|  0.02%|            format = format[directive_index+1:]
   259|         4|  1.66893e-05|  4.17233e-06|  0.01%|        return "%s%s" % (processed_format, format)
   260|         0|            0|            0|  0.00%|
   261|         2|  9.29832e-06|  4.64916e-06|  0.00%|    def compile(self, format):
   262|         0|            0|            0|  0.00%|        """Return a compiled re object for the format string."""
   263|         1|  1.74046e-05|  1.74046e-05|  0.01%|        return re_compile(self.pattern(format), IGNORECASE)
(call)|         1|  0.000194311|  0.000194311|  0.08%|# /usr/lib/python3.10/_strptime.py:238 pattern
(call)|         1|    0.0194461|    0.0194461|  8.00%|# /usr/lib/python3.10/re.py:249 compile
   264|         0|            0|            0|  0.00%|
   265|         1|  9.05991e-06|  9.05991e-06|  0.00%|_cache_lock = _thread_allocate_lock()
   266|         0|            0|            0|  0.00%|# DO NOT modify _TimeRE_cache or _regex_cache without acquiring the cache lock
   267|         0|            0|            0|  0.00%|# first!
   268|         1|  3.24249e-05|  3.24249e-05|  0.01%|_TimeRE_cache = TimeRE()
(call)|         1|    0.0134842|    0.0134842|  5.55%|# /usr/lib/python3.10/_strptime.py:173 __init__
   269|         1|  9.53674e-06|  9.53674e-06|  0.00%|_CACHE_MAX_SIZE = 5 # Max number of regexes stored in _regex_cache
   270|         1|  9.29832e-06|  9.29832e-06|  0.00%|_regex_cache = {}
   271|         0|            0|            0|  0.00%|
   272|         1|  9.05991e-06|  9.05991e-06|  0.00%|def _calc_julian_from_U_or_W(year, week_of_year, day_of_week, week_starts_Mon):
   273|         0|            0|            0|  0.00%|    """Calculate the Julian day based on the year, week of the year, and day of
   274|         0|            0|            0|  0.00%|    the week, with week_start_day representing whether the week of the year
   275|         0|            0|            0|  0.00%|    assumes the week starts on Sunday or Monday (6 or 0)."""
   276|         0|            0|            0|  0.00%|    first_weekday = datetime_date(year, 1, 1).weekday()
   277|         0|            0|            0|  0.00%|    # If we are dealing with the %U directive (week starts on Sunday), it's
   278|         0|            0|            0|  0.00%|    # easier to just shift the view to Sunday being the first day of the
   279|         0|            0|            0|  0.00%|    # week.
   280|         0|            0|            0|  0.00%|    if not week_starts_Mon:
   281|         0|            0|            0|  0.00%|        first_weekday = (first_weekday + 1) % 7
   282|         0|            0|            0|  0.00%|        day_of_week = (day_of_week + 1) % 7
   283|         0|            0|            0|  0.00%|    # Need to watch out for a week 0 (when the first day of the year is not
   284|         0|            0|            0|  0.00%|    # the same as that specified by %U or %W).
   285|         0|            0|            0|  0.00%|    week_0_length = (7 - first_weekday) % 7
   286|         0|            0|            0|  0.00%|    if week_of_year == 0:
   287|         0|            0|            0|  0.00%|        return 1 + day_of_week - first_weekday
   288|         0|            0|            0|  0.00%|    else:
   289|         0|            0|            0|  0.00%|        days_to_week = week_0_length + (7 * (week_of_year - 1))
   290|         0|            0|            0|  0.00%|        return 1 + days_to_week + day_of_week
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         1|  8.82149e-06|  8.82149e-06|  0.00%|def _calc_julian_from_V(iso_year, iso_week, iso_weekday):
   294|         0|            0|            0|  0.00%|    """Calculate the Julian day based on the ISO 8601 year, week, and weekday.
   295|         0|            0|            0|  0.00%|    ISO weeks start on Mondays, with week 01 being the week containing 4 Jan.
   296|         0|            0|            0|  0.00%|    ISO week days range from 1 (Monday) to 7 (Sunday).
   297|         0|            0|            0|  0.00%|    """
   298|         0|            0|            0|  0.00%|    correction = datetime_date(iso_year, 1, 4).isoweekday() + 3
   299|         0|            0|            0|  0.00%|    ordinal = (iso_week * 7) + iso_weekday - correction
   300|         0|            0|            0|  0.00%|    # ordinal may be negative or 0 now, which means the date is in the previous
   301|         0|            0|            0|  0.00%|    # calendar year
   302|         0|            0|            0|  0.00%|    if ordinal < 1:
   303|         0|            0|            0|  0.00%|        ordinal += datetime_date(iso_year, 1, 1).toordinal()
   304|         0|            0|            0|  0.00%|        iso_year -= 1
   305|         0|            0|            0|  0.00%|        ordinal -= datetime_date(iso_year, 1, 1).toordinal()
   306|         0|            0|            0|  0.00%|    return iso_year, ordinal
   307|         0|            0|            0|  0.00%|
   308|         0|            0|            0|  0.00%|
   309|         2|  1.71661e-05|  8.58307e-06|  0.01%|def _strptime(data_string, format="%a %b %d %H:%M:%S %Y"):
   310|         0|            0|            0|  0.00%|    """Return a 2-tuple consisting of a time struct and an int containing
   311|         0|            0|            0|  0.00%|    the number of microseconds based on the input string and the
   312|         0|            0|            0|  0.00%|    format string."""
   313|         0|            0|            0|  0.00%|
   314|         3|  2.31266e-05|  7.70887e-06|  0.01%|    for index, arg in enumerate([data_string, format]):
   315|         2|  1.62125e-05|  8.10623e-06|  0.01%|        if not isinstance(arg, str):
   316|         0|            0|            0|  0.00%|            msg = "strptime() argument {} must be str, not {}"
   317|         0|            0|            0|  0.00%|            raise TypeError(msg.format(index, type(arg)))
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|    global _TimeRE_cache, _regex_cache
   320|         2|   1.5974e-05|  7.98702e-06|  0.01%|    with _cache_lock:
   321|         1|  9.53674e-06|  9.53674e-06|  0.00%|        locale_time = _TimeRE_cache.locale_time
   322|         3|  3.17097e-05|  1.05699e-05|  0.01%|        if (_getlang() != locale_time.lang or
(call)|         1|  0.000118256|  0.000118256|  0.05%|# /usr/lib/python3.10/_strptime.py:26 _getlang
   323|         1|  9.05991e-06|  9.05991e-06|  0.00%|            time.tzname != locale_time.tzname or
   324|         1|  6.67572e-06|  6.67572e-06|  0.00%|            time.daylight != locale_time.daylight):
   325|         0|            0|            0|  0.00%|            _TimeRE_cache = TimeRE()
   326|         0|            0|            0|  0.00%|            _regex_cache.clear()
   327|         0|            0|            0|  0.00%|            locale_time = _TimeRE_cache.locale_time
   328|         1|  6.67572e-06|  6.67572e-06|  0.00%|        if len(_regex_cache) > _CACHE_MAX_SIZE:
   329|         0|            0|            0|  0.00%|            _regex_cache.clear()
   330|         1|  7.86781e-06|  7.86781e-06|  0.00%|        format_regex = _regex_cache.get(format)
   331|         1|  7.62939e-06|  7.62939e-06|  0.00%|        if not format_regex:
   332|         1|  7.15256e-06|  7.15256e-06|  0.00%|            try:
   333|         1|  1.97887e-05|  1.97887e-05|  0.01%|                format_regex = _TimeRE_cache.compile(format)
(call)|         1|    0.0196621|    0.0196621|  8.09%|# /usr/lib/python3.10/_strptime.py:261 compile
   334|         0|            0|            0|  0.00%|            # KeyError raised when a bad format is found; can be specified as
   335|         0|            0|            0|  0.00%|            # \\, in which case it was a stray % but with a space after it
   336|         0|            0|            0|  0.00%|            except KeyError as err:
   337|         0|            0|            0|  0.00%|                bad_directive = err.args[0]
   338|         0|            0|            0|  0.00%|                if bad_directive == "\\":
   339|         0|            0|            0|  0.00%|                    bad_directive = "%"
   340|         0|            0|            0|  0.00%|                del err
   341|         0|            0|            0|  0.00%|                raise ValueError("'%s' is a bad directive in format '%s'" %
   342|         0|            0|            0|  0.00%|                                    (bad_directive, format)) from None
   343|         0|            0|            0|  0.00%|            # IndexError only occurs when the format string is "%"
   344|         0|            0|            0|  0.00%|            except IndexError:
   345|         0|            0|            0|  0.00%|                raise ValueError("stray %% in format '%s'" % format) from None
   346|         1|  8.82149e-06|  8.82149e-06|  0.00%|            _regex_cache[format] = format_regex
   347|         1|  1.07288e-05|  1.07288e-05|  0.00%|    found = format_regex.match(data_string)
   348|         1|  7.62939e-06|  7.62939e-06|  0.00%|    if not found:
   349|         0|            0|            0|  0.00%|        raise ValueError("time data %r does not match format %r" %
   350|         0|            0|            0|  0.00%|                         (data_string, format))
   351|         1|  8.82149e-06|  8.82149e-06|  0.00%|    if len(data_string) != found.end():
   352|         0|            0|            0|  0.00%|        raise ValueError("unconverted data remains: %s" %
   353|         0|            0|            0|  0.00%|                          data_string[found.end():])
   354|         0|            0|            0|  0.00%|
   355|         1|  7.39098e-06|  7.39098e-06|  0.00%|    iso_year = year = None
   356|         1|  7.62939e-06|  7.62939e-06|  0.00%|    month = day = 1
   357|         1|  7.15256e-06|  7.15256e-06|  0.00%|    hour = minute = second = fraction = 0
   358|         1|  7.62939e-06|  7.62939e-06|  0.00%|    tz = -1
   359|         1|  7.15256e-06|  7.15256e-06|  0.00%|    gmtoff = None
   360|         1|  7.15256e-06|  7.15256e-06|  0.00%|    gmtoff_fraction = 0
   361|         0|            0|            0|  0.00%|    # Default to -1 to signify that values not known; not critical to have,
   362|         0|            0|            0|  0.00%|    # though
   363|         1|  8.34465e-06|  8.34465e-06|  0.00%|    iso_week = week_of_year = None
   364|         1|  7.15256e-06|  7.15256e-06|  0.00%|    week_of_year_start = None
   365|         0|            0|            0|  0.00%|    # weekday and julian defaulted to None so as to signal need to calculate
   366|         0|            0|            0|  0.00%|    # values
   367|         1|  9.29832e-06|  9.29832e-06|  0.00%|    weekday = julian = None
   368|         1|  8.58307e-06|  8.58307e-06|  0.00%|    found_dict = found.groupdict()
   369|         4|  2.90871e-05|  7.27177e-06|  0.01%|    for group_key in found_dict.keys():
   370|         0|            0|            0|  0.00%|        # Directives not explicitly handled below:
   371|         0|            0|            0|  0.00%|        #   c, x, X
   372|         0|            0|            0|  0.00%|        #      handled by making out of other directives
   373|         0|            0|            0|  0.00%|        #   U, W
   374|         0|            0|            0|  0.00%|        #      worthless without day of the week
   375|         3|  1.71661e-05|  5.72205e-06|  0.01%|        if group_key == 'y':
   376|         0|            0|            0|  0.00%|            year = int(found_dict['y'])
   377|         0|            0|            0|  0.00%|            # Open Group specification for strptime() states that a %y
   378|         0|            0|            0|  0.00%|            #value in the range of [00, 68] is in the century 2000, while
   379|         0|            0|            0|  0.00%|            #[69,99] is in the century 1900
   380|         0|            0|            0|  0.00%|            if year <= 68:
   381|         0|            0|            0|  0.00%|                year += 2000
   382|         0|            0|            0|  0.00%|            else:
   383|         0|            0|            0|  0.00%|                year += 1900
   384|         3|  2.07424e-05|  6.91414e-06|  0.01%|        elif group_key == 'Y':
   385|         1|  7.62939e-06|  7.62939e-06|  0.00%|            year = int(found_dict['Y'])
   386|         2|  1.04904e-05|  5.24521e-06|  0.00%|        elif group_key == 'G':
   387|         0|            0|            0|  0.00%|            iso_year = int(found_dict['G'])
   388|         2|  1.16825e-05|  5.84126e-06|  0.00%|        elif group_key == 'm':
   389|         1|  8.34465e-06|  8.34465e-06|  0.00%|            month = int(found_dict['m'])
   390|         1|  5.48363e-06|  5.48363e-06|  0.00%|        elif group_key == 'B':
   391|         0|            0|            0|  0.00%|            month = locale_time.f_month.index(found_dict['B'].lower())
   392|         1|   6.4373e-06|   6.4373e-06|  0.00%|        elif group_key == 'b':
   393|         0|            0|            0|  0.00%|            month = locale_time.a_month.index(found_dict['b'].lower())
   394|         1|  6.19888e-06|  6.19888e-06|  0.00%|        elif group_key == 'd':
   395|         1|  6.67572e-06|  6.67572e-06|  0.00%|            day = int(found_dict['d'])
   396|         0|            0|            0|  0.00%|        elif group_key == 'H':
   397|         0|            0|            0|  0.00%|            hour = int(found_dict['H'])
   398|         0|            0|            0|  0.00%|        elif group_key == 'I':
   399|         0|            0|            0|  0.00%|            hour = int(found_dict['I'])
   400|         0|            0|            0|  0.00%|            ampm = found_dict.get('p', '').lower()
   401|         0|            0|            0|  0.00%|            # If there was no AM/PM indicator, we'll treat this like AM
   402|         0|            0|            0|  0.00%|            if ampm in ('', locale_time.am_pm[0]):
   403|         0|            0|            0|  0.00%|                # We're in AM so the hour is correct unless we're
   404|         0|            0|            0|  0.00%|                # looking at 12 midnight.
   405|         0|            0|            0|  0.00%|                # 12 midnight == 12 AM == hour 0
   406|         0|            0|            0|  0.00%|                if hour == 12:
   407|         0|            0|            0|  0.00%|                    hour = 0
   408|         0|            0|            0|  0.00%|            elif ampm == locale_time.am_pm[1]:
   409|         0|            0|            0|  0.00%|                # We're in PM so we need to add 12 to the hour unless
   410|         0|            0|            0|  0.00%|                # we're looking at 12 noon.
   411|         0|            0|            0|  0.00%|                # 12 noon == 12 PM == hour 12
   412|         0|            0|            0|  0.00%|                if hour != 12:
   413|         0|            0|            0|  0.00%|                    hour += 12
   414|         0|            0|            0|  0.00%|        elif group_key == 'M':
   415|         0|            0|            0|  0.00%|            minute = int(found_dict['M'])
   416|         0|            0|            0|  0.00%|        elif group_key == 'S':
   417|         0|            0|            0|  0.00%|            second = int(found_dict['S'])
   418|         0|            0|            0|  0.00%|        elif group_key == 'f':
   419|         0|            0|            0|  0.00%|            s = found_dict['f']
   420|         0|            0|            0|  0.00%|            # Pad to always return microseconds.
   421|         0|            0|            0|  0.00%|            s += "0" * (6 - len(s))
   422|         0|            0|            0|  0.00%|            fraction = int(s)
   423|         0|            0|            0|  0.00%|        elif group_key == 'A':
   424|         0|            0|            0|  0.00%|            weekday = locale_time.f_weekday.index(found_dict['A'].lower())
   425|         0|            0|            0|  0.00%|        elif group_key == 'a':
   426|         0|            0|            0|  0.00%|            weekday = locale_time.a_weekday.index(found_dict['a'].lower())
   427|         0|            0|            0|  0.00%|        elif group_key == 'w':
   428|         0|            0|            0|  0.00%|            weekday = int(found_dict['w'])
   429|         0|            0|            0|  0.00%|            if weekday == 0:
   430|         0|            0|            0|  0.00%|                weekday = 6
   431|         0|            0|            0|  0.00%|            else:
   432|         0|            0|            0|  0.00%|                weekday -= 1
   433|         0|            0|            0|  0.00%|        elif group_key == 'u':
   434|         0|            0|            0|  0.00%|            weekday = int(found_dict['u'])
   435|         0|            0|            0|  0.00%|            weekday -= 1
   436|         0|            0|            0|  0.00%|        elif group_key == 'j':
   437|         0|            0|            0|  0.00%|            julian = int(found_dict['j'])
   438|         0|            0|            0|  0.00%|        elif group_key in ('U', 'W'):
   439|         0|            0|            0|  0.00%|            week_of_year = int(found_dict[group_key])
   440|         0|            0|            0|  0.00%|            if group_key == 'U':
   441|         0|            0|            0|  0.00%|                # U starts week on Sunday.
   442|         0|            0|            0|  0.00%|                week_of_year_start = 6
   443|         0|            0|            0|  0.00%|            else:
   444|         0|            0|            0|  0.00%|                # W starts week on Monday.
   445|         0|            0|            0|  0.00%|                week_of_year_start = 0
   446|         0|            0|            0|  0.00%|        elif group_key == 'V':
   447|         0|            0|            0|  0.00%|            iso_week = int(found_dict['V'])
   448|         0|            0|            0|  0.00%|        elif group_key == 'z':
   449|         0|            0|            0|  0.00%|            z = found_dict['z']
   450|         0|            0|            0|  0.00%|            if z == 'Z':
   451|         0|            0|            0|  0.00%|                gmtoff = 0
   452|         0|            0|            0|  0.00%|            else:
   453|         0|            0|            0|  0.00%|                if z[3] == ':':
   454|         0|            0|            0|  0.00%|                    z = z[:3] + z[4:]
   455|         0|            0|            0|  0.00%|                    if len(z) > 5:
   456|         0|            0|            0|  0.00%|                        if z[5] != ':':
   457|         0|            0|            0|  0.00%|                            msg = f"Inconsistent use of : in {found_dict['z']}"
   458|         0|            0|            0|  0.00%|                            raise ValueError(msg)
   459|         0|            0|            0|  0.00%|                        z = z[:5] + z[6:]
   460|         0|            0|            0|  0.00%|                hours = int(z[1:3])
   461|         0|            0|            0|  0.00%|                minutes = int(z[3:5])
   462|         0|            0|            0|  0.00%|                seconds = int(z[5:7] or 0)
   463|         0|            0|            0|  0.00%|                gmtoff = (hours * 60 * 60) + (minutes * 60) + seconds
   464|         0|            0|            0|  0.00%|                gmtoff_remainder = z[8:]
   465|         0|            0|            0|  0.00%|                # Pad to always return microseconds.
   466|         0|            0|            0|  0.00%|                gmtoff_remainder_padding = "0" * (6 - len(gmtoff_remainder))
   467|         0|            0|            0|  0.00%|                gmtoff_fraction = int(gmtoff_remainder + gmtoff_remainder_padding)
   468|         0|            0|            0|  0.00%|                if z.startswith("-"):
   469|         0|            0|            0|  0.00%|                    gmtoff = -gmtoff
   470|         0|            0|            0|  0.00%|                    gmtoff_fraction = -gmtoff_fraction
   471|         0|            0|            0|  0.00%|        elif group_key == 'Z':
   472|         0|            0|            0|  0.00%|            # Since -1 is default value only need to worry about setting tz if
   473|         0|            0|            0|  0.00%|            # it can be something other than -1.
   474|         0|            0|            0|  0.00%|            found_zone = found_dict['Z'].lower()
   475|         0|            0|            0|  0.00%|            for value, tz_values in enumerate(locale_time.timezone):
   476|         0|            0|            0|  0.00%|                if found_zone in tz_values:
   477|         0|            0|            0|  0.00%|                    # Deal with bad locale setup where timezone names are the
   478|         0|            0|            0|  0.00%|                    # same and yet time.daylight is true; too ambiguous to
   479|         0|            0|            0|  0.00%|                    # be able to tell what timezone has daylight savings
   480|         0|            0|            0|  0.00%|                    if (time.tzname[0] == time.tzname[1] and
   481|         0|            0|            0|  0.00%|                       time.daylight and found_zone not in ("utc", "gmt")):
   482|         0|            0|            0|  0.00%|                        break
   483|         0|            0|            0|  0.00%|                    else:
   484|         0|            0|            0|  0.00%|                        tz = value
   485|         0|            0|            0|  0.00%|                        break
   486|         0|            0|            0|  0.00%|    # Deal with the cases where ambiguities arize
   487|         0|            0|            0|  0.00%|    # don't assume default values for ISO week/year
   488|         1|  5.48363e-06|  5.48363e-06|  0.00%|    if year is None and iso_year is not None:
   489|         0|            0|            0|  0.00%|        if iso_week is None or weekday is None:
   490|         0|            0|            0|  0.00%|            raise ValueError("ISO year directive '%G' must be used with "
   491|         0|            0|            0|  0.00%|                             "the ISO week directive '%V' and a weekday "
   492|         0|            0|            0|  0.00%|                             "directive ('%A', '%a', '%w', or '%u').")
   493|         0|            0|            0|  0.00%|        if julian is not None:
   494|         0|            0|            0|  0.00%|            raise ValueError("Day of the year directive '%j' is not "
   495|         0|            0|            0|  0.00%|                             "compatible with ISO year directive '%G'. "
   496|         0|            0|            0|  0.00%|                             "Use '%Y' instead.")
   497|         1|  6.19888e-06|  6.19888e-06|  0.00%|    elif week_of_year is None and iso_week is not None:
   498|         0|            0|            0|  0.00%|        if weekday is None:
   499|         0|            0|            0|  0.00%|            raise ValueError("ISO week directive '%V' must be used with "
   500|         0|            0|            0|  0.00%|                             "the ISO year directive '%G' and a weekday "
   501|         0|            0|            0|  0.00%|                             "directive ('%A', '%a', '%w', or '%u').")
   502|         0|            0|            0|  0.00%|        else:
   503|         0|            0|            0|  0.00%|            raise ValueError("ISO week directive '%V' is incompatible with "
   504|         0|            0|            0|  0.00%|                             "the year directive '%Y'. Use the ISO year '%G' "
   505|         0|            0|            0|  0.00%|                             "instead.")
   506|         0|            0|            0|  0.00%|
   507|         1|  6.67572e-06|  6.67572e-06|  0.00%|    leap_year_fix = False
   508|         1|  5.96046e-06|  5.96046e-06|  0.00%|    if year is None and month == 2 and day == 29:
   509|         0|            0|            0|  0.00%|        year = 1904  # 1904 is first leap year of 20th century
   510|         0|            0|            0|  0.00%|        leap_year_fix = True
   511|         1|  6.19888e-06|  6.19888e-06|  0.00%|    elif year is None:
   512|         0|            0|            0|  0.00%|        year = 1900
   513|         0|            0|            0|  0.00%|
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    # If we know the week of the year and what day of that week, we can figure
   516|         0|            0|            0|  0.00%|    # out the Julian day of the year.
   517|         1|   6.4373e-06|   6.4373e-06|  0.00%|    if julian is None and weekday is not None:
   518|         0|            0|            0|  0.00%|        if week_of_year is not None:
   519|         0|            0|            0|  0.00%|            week_starts_Mon = True if week_of_year_start == 0 else False
   520|         0|            0|            0|  0.00%|            julian = _calc_julian_from_U_or_W(year, week_of_year, weekday,
   521|         0|            0|            0|  0.00%|                                                week_starts_Mon)
   522|         0|            0|            0|  0.00%|        elif iso_year is not None and iso_week is not None:
   523|         0|            0|            0|  0.00%|            year, julian = _calc_julian_from_V(iso_year, iso_week, weekday + 1)
   524|         0|            0|            0|  0.00%|        if julian is not None and julian <= 0:
   525|         0|            0|            0|  0.00%|            year -= 1
   526|         0|            0|            0|  0.00%|            yday = 366 if calendar.isleap(year) else 365
   527|         0|            0|            0|  0.00%|            julian += yday
   528|         0|            0|            0|  0.00%|
   529|         1|  6.67572e-06|  6.67572e-06|  0.00%|    if julian is None:
   530|         0|            0|            0|  0.00%|        # Cannot pre-calculate datetime_date() since can change in Julian
   531|         0|            0|            0|  0.00%|        # calculation and thus could have different value for the day of
   532|         0|            0|            0|  0.00%|        # the week calculation.
   533|         0|            0|            0|  0.00%|        # Need to add 1 to result since first day of the year is 1, not 0.
   534|         3|  2.12193e-05|  7.07308e-06|  0.01%|        julian = datetime_date(year, month, day).toordinal() - \
   535|         2|  1.19209e-05|  5.96046e-06|  0.00%|                  datetime_date(year, 1, 1).toordinal() + 1
   536|         0|            0|            0|  0.00%|    else:  # Assume that if they bothered to include Julian day (or if it was
   537|         0|            0|            0|  0.00%|           # calculated above with year/week/weekday) it will be accurate.
   538|         0|            0|            0|  0.00%|        datetime_result = datetime_date.fromordinal(
   539|         0|            0|            0|  0.00%|                            (julian - 1) +
   540|         0|            0|            0|  0.00%|                            datetime_date(year, 1, 1).toordinal())
   541|         0|            0|            0|  0.00%|        year = datetime_result.year
   542|         0|            0|            0|  0.00%|        month = datetime_result.month
   543|         0|            0|            0|  0.00%|        day = datetime_result.day
   544|         1|  5.48363e-06|  5.48363e-06|  0.00%|    if weekday is None:
   545|         1|  7.15256e-06|  7.15256e-06|  0.00%|        weekday = datetime_date(year, month, day).weekday()
   546|         0|            0|            0|  0.00%|    # Add timezone info
   547|         1|  7.15256e-06|  7.15256e-06|  0.00%|    tzname = found_dict.get("Z")
   548|         0|            0|            0|  0.00%|
   549|         1|  6.19888e-06|  6.19888e-06|  0.00%|    if leap_year_fix:
   550|         0|            0|            0|  0.00%|        # the caller didn't supply a year but asked for Feb 29th. We couldn't
   551|         0|            0|            0|  0.00%|        # use the default of 1900 for computations. We set it back to ensure
   552|         0|            0|            0|  0.00%|        # that February 29th is smaller than March 1st.
   553|         0|            0|            0|  0.00%|        year = 1900
   554|         0|            0|            0|  0.00%|
   555|         3|   1.7643e-05|  5.88099e-06|  0.01%|    return (year, month, day,
   556|         1|  6.19888e-06|  6.19888e-06|  0.00%|            hour, minute, second,
   557|         2|  1.09673e-05|  5.48363e-06|  0.00%|            weekday, julian, tz, tzname, gmtoff), fraction, gmtoff_fraction
   558|         0|            0|            0|  0.00%|
   559|         1|  8.58307e-06|  8.58307e-06|  0.00%|def _strptime_time(data_string, format="%a %b %d %H:%M:%S %Y"):
   560|         0|            0|            0|  0.00%|    """Return a time struct based on the input string and the
   561|         0|            0|            0|  0.00%|    format string."""
   562|         0|            0|            0|  0.00%|    tt = _strptime(data_string, format)[0]
   563|         0|            0|            0|  0.00%|    return time.struct_time(tt[:time._STRUCT_TM_ITEMS])
   564|         0|            0|            0|  0.00%|
   565|         2|  1.38283e-05|  6.91414e-06|  0.01%|def _strptime_datetime(cls, data_string, format="%a %b %d %H:%M:%S %Y"):
   566|         0|            0|            0|  0.00%|    """Return a class cls instance based on the input string and the
   567|         0|            0|            0|  0.00%|    format string."""
   568|         1|  1.74046e-05|  1.74046e-05|  0.01%|    tt, fraction, gmtoff_fraction = _strptime(data_string, format)
(call)|         1|      0.02033|      0.02033|  8.37%|# /usr/lib/python3.10/_strptime.py:309 _strptime
   569|         1|  4.76837e-06|  4.76837e-06|  0.00%|    tzname, gmtoff = tt[-2:]
   570|         1|  5.48363e-06|  5.48363e-06|  0.00%|    args = tt[:6] + (fraction,)
   571|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if gmtoff is not None:
   572|         0|            0|            0|  0.00%|        tzdelta = datetime_timedelta(seconds=gmtoff, microseconds=gmtoff_fraction)
   573|         0|            0|            0|  0.00%|        if tzname:
   574|         0|            0|            0|  0.00%|            tz = datetime_timezone(tzdelta, tzname)
   575|         0|            0|            0|  0.00%|        else:
   576|         0|            0|            0|  0.00%|            tz = datetime_timezone(tzdelta)
   577|         0|            0|            0|  0.00%|        args += (tz,)
   578|         0|            0|            0|  0.00%|
   579|         1|  4.76837e-06|  4.76837e-06|  0.00%|    return cls(*args)
File: /usr/lib/python3.10/smtplib.py
File duration: 0.00236893s (0.98%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         1|  3.19481e-05|  3.19481e-05|  0.01%|#! /usr/bin/env python3
     2|         0|            0|            0|  0.00%|
     3|         1|  2.07424e-05|  2.07424e-05|  0.01%|'''SMTP/ESMTP client class.
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|This should follow RFC 821 (SMTP), RFC 1869 (ESMTP), RFC 2554 (SMTP
     6|         0|            0|            0|  0.00%|Authentication) and RFC 2487 (Secure SMTP over TLS).
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|Notes:
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|Please remember, when doing ESMTP, that the names of the SMTP service
    11|         0|            0|            0|  0.00%|extensions are NOT the same thing as the option keywords for the RCPT
    12|         0|            0|            0|  0.00%|and MAIL commands!
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|Example:
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|  >>> import smtplib
    17|         0|            0|            0|  0.00%|  >>> s=smtplib.SMTP("localhost")
    18|         0|            0|            0|  0.00%|  >>> print(s.help())
    19|         0|            0|            0|  0.00%|  This is Sendmail version 8.8.4
    20|         0|            0|            0|  0.00%|  Topics:
    21|         0|            0|            0|  0.00%|      HELO    EHLO    MAIL    RCPT    DATA
    22|         0|            0|            0|  0.00%|      RSET    NOOP    QUIT    HELP    VRFY
    23|         0|            0|            0|  0.00%|      EXPN    VERB    ETRN    DSN
    24|         0|            0|            0|  0.00%|  For more info use "HELP <topic>".
    25|         0|            0|            0|  0.00%|  To report bugs in the implementation send email to
    26|         0|            0|            0|  0.00%|      sendmail-bugs@sendmail.org.
    27|         0|            0|            0|  0.00%|  For local information send email to Postmaster at your site.
    28|         0|            0|            0|  0.00%|  End of HELP info
    29|         0|            0|            0|  0.00%|  >>> s.putcmd("vrfy","someone@here")
    30|         0|            0|            0|  0.00%|  >>> s.getreply()
    31|         0|            0|            0|  0.00%|  (250, "Somebody OverHere <somebody@here.my.org>")
    32|         0|            0|            0|  0.00%|  >>> s.quit()
    33|         0|            0|            0|  0.00%|'''
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|# Author: The Dragon De Monsyne <dragondm@integral.org>
    36|         0|            0|            0|  0.00%|# ESMTP support, test code and doc fixes added by
    37|         0|            0|            0|  0.00%|#     Eric S. Raymond <esr@thyrsus.com>
    38|         0|            0|            0|  0.00%|# Better RFC 821 compliance (MAIL and RCPT, and CRLF in data)
    39|         0|            0|            0|  0.00%|#     by Carey Evans <c.evans@clear.net.nz>, for picky mail servers.
    40|         0|            0|            0|  0.00%|# RFC 2554 (authentication) support by Gerhard Haering <gerhard@bigfoot.de>.
    41|         0|            0|            0|  0.00%|#
    42|         0|            0|            0|  0.00%|# This was modified from the Python 1.5 library HTTP lib.
    43|         0|            0|            0|  0.00%|
    44|         1|  1.64509e-05|  1.64509e-05|  0.01%|import socket
    45|         1|  1.45435e-05|  1.45435e-05|  0.01%|import io
    46|         1|   1.5974e-05|   1.5974e-05|  0.01%|import re
    47|         1|   1.4782e-05|   1.4782e-05|  0.01%|import email.utils
    48|         1|   1.4782e-05|   1.4782e-05|  0.01%|import email.message
    49|         1|  4.33922e-05|  4.33922e-05|  0.02%|import email.generator
(call)|         1|    0.0172949|    0.0172949|  7.12%|# <frozen importlib._bootstrap>:1022 _find_and_load
    50|         1|  1.57356e-05|  1.57356e-05|  0.01%|import base64
    51|         1|  5.55515e-05|  5.55515e-05|  0.02%|import hmac
(call)|         1|     0.020504|     0.020504|  8.44%|# <frozen importlib._bootstrap>:1022 _find_and_load
    52|         1|  1.62125e-05|  1.62125e-05|  0.01%|import copy
    53|         1|  1.57356e-05|  1.57356e-05|  0.01%|import datetime
    54|         1|  1.71661e-05|  1.71661e-05|  0.01%|import sys
    55|         1|  1.64509e-05|  1.64509e-05|  0.01%|from email.base64mime import body_encode as encode_base64
    56|         0|            0|            0|  0.00%|
    57|         1|  1.54972e-05|  1.54972e-05|  0.01%|__all__ = ["SMTPException", "SMTPNotSupportedError", "SMTPServerDisconnected", "SMTPResponseException",
    58|         0|            0|            0|  0.00%|           "SMTPSenderRefused", "SMTPRecipientsRefused", "SMTPDataError",
    59|         0|            0|            0|  0.00%|           "SMTPConnectError", "SMTPHeloError", "SMTPAuthenticationError",
    60|         0|            0|            0|  0.00%|           "quoteaddr", "quotedata", "SMTP"]
    61|         0|            0|            0|  0.00%|
    62|         1|  1.43051e-05|  1.43051e-05|  0.01%|SMTP_PORT = 25
    63|         1|  1.43051e-05|  1.43051e-05|  0.01%|SMTP_SSL_PORT = 465
    64|         1|  2.19345e-05|  2.19345e-05|  0.01%|CRLF = "\r\n"
    65|         1|  1.50204e-05|  1.50204e-05|  0.01%|bCRLF = b"\r\n"
    66|         1|  1.40667e-05|  1.40667e-05|  0.01%|_MAXLINE = 8192 # more than 8 times larger than RFC 821, 4.5.3
    67|         1|  1.50204e-05|  1.50204e-05|  0.01%|_MAXCHALLENGE = 5  # Maximum number of AUTH challenges sent
    68|         0|            0|            0|  0.00%|
    69|         1|  4.14848e-05|  4.14848e-05|  0.02%|OLDSTYLE_AUTH = re.compile(r"auth=(.*)", re.I)
(call)|         1|   0.00407958|   0.00407958|  1.68%|# /usr/lib/python3.10/re.py:249 compile
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|# Exception classes used by this module.
    72|         3|   7.1764e-05|  2.39213e-05|  0.03%|class SMTPException(OSError):
(call)|         1|  2.16961e-05|  2.16961e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:72 SMTPException
    73|         1|  3.09944e-06|  3.09944e-06|  0.00%|    """Base class for all exceptions raised by this module."""
    74|         0|            0|            0|  0.00%|
    75|         3|  6.93798e-05|  2.31266e-05|  0.03%|class SMTPNotSupportedError(SMTPException):
(call)|         1|  2.26498e-05|  2.26498e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:75 SMTPNotSupportedError
    76|         1|  3.33786e-06|  3.33786e-06|  0.00%|    """The command or option is not supported by the SMTP server.
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|    This exception is raised when an attempt is made to run a command or a
    79|         0|            0|            0|  0.00%|    command with an option which is not supported by the server.
    80|         0|            0|            0|  0.00%|    """
    81|         0|            0|            0|  0.00%|
    82|         3|   9.5129e-05|  3.17097e-05|  0.04%|class SMTPServerDisconnected(SMTPException):
(call)|         1|  2.21729e-05|  2.21729e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:82 SMTPServerDisconnected
    83|         1|   2.6226e-06|   2.6226e-06|  0.00%|    """Not connected to any SMTP server.
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|    This exception is raised when the server unexpectedly disconnects,
    86|         0|            0|            0|  0.00%|    or when an attempt is made to use the SMTP instance before
    87|         0|            0|            0|  0.00%|    connecting it to a server.
    88|         0|            0|            0|  0.00%|    """
    89|         0|            0|            0|  0.00%|
    90|         3|  6.53267e-05|  2.17756e-05|  0.03%|class SMTPResponseException(SMTPException):
(call)|         1|  2.57492e-05|  2.57492e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:90 SMTPResponseException
    91|         1|  3.09944e-06|  3.09944e-06|  0.00%|    """Base class for all exceptions that include an SMTP error code.
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|    These exceptions are generated in some instances when the SMTP
    94|         0|            0|            0|  0.00%|    server returns an error code.  The error code is stored in the
    95|         0|            0|            0|  0.00%|    `smtp_code' attribute of the error, and the `smtp_error' attribute
    96|         0|            0|            0|  0.00%|    is set to the error message.
    97|         0|            0|            0|  0.00%|    """
    98|         0|            0|            0|  0.00%|
    99|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def __init__(self, code, msg):
   100|         0|            0|            0|  0.00%|        self.smtp_code = code
   101|         0|            0|            0|  0.00%|        self.smtp_error = msg
   102|         0|            0|            0|  0.00%|        self.args = (code, msg)
   103|         0|            0|            0|  0.00%|
   104|         3|   6.4373e-05|  2.14577e-05|  0.03%|class SMTPSenderRefused(SMTPResponseException):
(call)|         1|  2.52724e-05|  2.52724e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:104 SMTPSenderRefused
   105|         1|  3.33786e-06|  3.33786e-06|  0.00%|    """Sender address refused.
   106|         0|            0|            0|  0.00%|
   107|         0|            0|            0|  0.00%|    In addition to the attributes set by on all SMTPResponseException
   108|         0|            0|            0|  0.00%|    exceptions, this sets `sender' to the string that the SMTP refused.
   109|         0|            0|            0|  0.00%|    """
   110|         0|            0|            0|  0.00%|
   111|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def __init__(self, code, msg, sender):
   112|         0|            0|            0|  0.00%|        self.smtp_code = code
   113|         0|            0|            0|  0.00%|        self.smtp_error = msg
   114|         0|            0|            0|  0.00%|        self.sender = sender
   115|         0|            0|            0|  0.00%|        self.args = (code, msg, sender)
   116|         0|            0|            0|  0.00%|
   117|         3|  6.12736e-05|  2.04245e-05|  0.03%|class SMTPRecipientsRefused(SMTPException):
(call)|         1|   2.5034e-05|   2.5034e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:117 SMTPRecipientsRefused
   118|         1|  3.33786e-06|  3.33786e-06|  0.00%|    """All recipient addresses refused.
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|    The errors for each recipient are accessible through the attribute
   121|         0|            0|            0|  0.00%|    'recipients', which is a dictionary of exactly the same sort as
   122|         0|            0|            0|  0.00%|    SMTP.sendmail() returns.
   123|         0|            0|            0|  0.00%|    """
   124|         0|            0|            0|  0.00%|
   125|         1|  3.57628e-06|  3.57628e-06|  0.00%|    def __init__(self, recipients):
   126|         0|            0|            0|  0.00%|        self.recipients = recipients
   127|         0|            0|            0|  0.00%|        self.args = (recipients,)
   128|         0|            0|            0|  0.00%|
   129|         0|            0|            0|  0.00%|
   130|         3|   6.7234e-05|  2.24113e-05|  0.03%|class SMTPDataError(SMTPResponseException):
(call)|         1|  2.52724e-05|  2.52724e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:130 SMTPDataError
   131|         1|  3.09944e-06|  3.09944e-06|  0.00%|    """The SMTP server didn't accept the data."""
   132|         0|            0|            0|  0.00%|
   133|         3|  6.07967e-05|  2.02656e-05|  0.03%|class SMTPConnectError(SMTPResponseException):
(call)|         1|  2.09808e-05|  2.09808e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:133 SMTPConnectError
   134|         1|  3.33786e-06|  3.33786e-06|  0.00%|    """Error during connection establishment."""
   135|         0|            0|            0|  0.00%|
   136|         3|  6.12736e-05|  2.04245e-05|  0.03%|class SMTPHeloError(SMTPResponseException):
(call)|         1|  2.12193e-05|  2.12193e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:136 SMTPHeloError
   137|         1|  3.33786e-06|  3.33786e-06|  0.00%|    """The server refused our HELO reply."""
   138|         0|            0|            0|  0.00%|
   139|         3|  6.07967e-05|  2.02656e-05|  0.03%|class SMTPAuthenticationError(SMTPResponseException):
(call)|         1|  2.09808e-05|  2.09808e-05|  0.01%|# /usr/lib/python3.10/smtplib.py:139 SMTPAuthenticationError
   140|         1|  3.33786e-06|  3.33786e-06|  0.00%|    """Authentication error.
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|    Most probably the server didn't accept the username/password
   143|         0|            0|            0|  0.00%|    combination provided.
   144|         0|            0|            0|  0.00%|    """
   145|         0|            0|            0|  0.00%|
   146|         1|  1.43051e-05|  1.43051e-05|  0.01%|def quoteaddr(addrstring):
   147|         0|            0|            0|  0.00%|    """Quote a subset of the email addresses defined by RFC 821.
   148|         0|            0|            0|  0.00%|
   149|         0|            0|            0|  0.00%|    Should be able to handle anything email.utils.parseaddr can handle.
   150|         0|            0|            0|  0.00%|    """
   151|         0|            0|            0|  0.00%|    displayname, addr = email.utils.parseaddr(addrstring)
   152|         0|            0|            0|  0.00%|    if (displayname, addr) == ('', ''):
   153|         0|            0|            0|  0.00%|        # parseaddr couldn't parse it, use it as is and hope for the best.
   154|         0|            0|            0|  0.00%|        if addrstring.strip().startswith('<'):
   155|         0|            0|            0|  0.00%|            return addrstring
   156|         0|            0|            0|  0.00%|        return "<%s>" % addrstring
   157|         0|            0|            0|  0.00%|    return "<%s>" % addr
   158|         0|            0|            0|  0.00%|
   159|         1|  1.54972e-05|  1.54972e-05|  0.01%|def _addr_only(addrstring):
   160|         0|            0|            0|  0.00%|    displayname, addr = email.utils.parseaddr(addrstring)
   161|         0|            0|            0|  0.00%|    if (displayname, addr) == ('', ''):
   162|         0|            0|            0|  0.00%|        # parseaddr couldn't parse it, so use it as is.
   163|         0|            0|            0|  0.00%|        return addrstring
   164|         0|            0|            0|  0.00%|    return addr
   165|         0|            0|            0|  0.00%|
   166|         0|            0|            0|  0.00%|# Legacy method kept for backward compatibility.
   167|         1|   1.4782e-05|   1.4782e-05|  0.01%|def quotedata(data):
   168|         0|            0|            0|  0.00%|    """Quote data for email.
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|    Double leading '.', and change Unix newline '\\n', or Mac '\\r' into
   171|         0|            0|            0|  0.00%|    internet CRLF end-of-line.
   172|         0|            0|            0|  0.00%|    """
   173|         0|            0|            0|  0.00%|    return re.sub(r'(?m)^\.', '..',
   174|         0|            0|            0|  0.00%|        re.sub(r'(?:\r\n|\n|\r(?!\n))', CRLF, data))
   175|         0|            0|            0|  0.00%|
   176|         1|  1.40667e-05|  1.40667e-05|  0.01%|def _quote_periods(bindata):
   177|         0|            0|            0|  0.00%|    return re.sub(br'(?m)^\.', b'..', bindata)
   178|         0|            0|            0|  0.00%|
   179|         1|  1.38283e-05|  1.38283e-05|  0.01%|def _fix_eols(data):
   180|         0|            0|            0|  0.00%|    return  re.sub(r'(?:\r\n|\n|\r(?!\n))', CRLF, data)
   181|         0|            0|            0|  0.00%|
   182|         1|  1.52588e-05|  1.52588e-05|  0.01%|try:
   183|         1|  5.60284e-05|  5.60284e-05|  0.02%|    import ssl
(call)|         1|     0.115405|     0.115405| 47.51%|# <frozen importlib._bootstrap>:1022 _find_and_load
   184|         0|            0|            0|  0.00%|except ImportError:
   185|         0|            0|            0|  0.00%|    _have_ssl = False
   186|         0|            0|            0|  0.00%|else:
   187|         1|  1.64509e-05|  1.64509e-05|  0.01%|    _have_ssl = True
   188|         0|            0|            0|  0.00%|
   189|         0|            0|            0|  0.00%|
   190|         3|  9.60827e-05|  3.20276e-05|  0.04%|class SMTP:
(call)|         1|  0.000547647|  0.000547647|  0.23%|# /usr/lib/python3.10/smtplib.py:190 SMTP
   191|         1|  6.67572e-06|  6.67572e-06|  0.00%|    """This class manages a connection to an SMTP or ESMTP server.
   192|         0|            0|            0|  0.00%|    SMTP Objects:
   193|         0|            0|            0|  0.00%|        SMTP objects have the following attributes:
   194|         0|            0|            0|  0.00%|            helo_resp
   195|         0|            0|            0|  0.00%|                This is the message given by the server in response to the
   196|         0|            0|            0|  0.00%|                most recent HELO command.
   197|         0|            0|            0|  0.00%|
   198|         0|            0|            0|  0.00%|            ehlo_resp
   199|         0|            0|            0|  0.00%|                This is the message given by the server in response to the
   200|         0|            0|            0|  0.00%|                most recent EHLO command. This is usually multiline.
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|            does_esmtp
   203|         0|            0|            0|  0.00%|                This is a True value _after you do an EHLO command_, if the
   204|         0|            0|            0|  0.00%|                server supports ESMTP.
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|            esmtp_features
   207|         0|            0|            0|  0.00%|                This is a dictionary, which, if the server supports ESMTP,
   208|         0|            0|            0|  0.00%|                will _after you do an EHLO command_, contain the names of the
   209|         0|            0|            0|  0.00%|                SMTP service extensions this server supports, and their
   210|         0|            0|            0|  0.00%|                parameters (if any).
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|                Note, all extension names are mapped to lower case in the
   213|         0|            0|            0|  0.00%|                dictionary.
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|        See each method's docstrings for details.  In general, there is a
   216|         0|            0|            0|  0.00%|        method of the same name to perform each SMTP command.  There is also a
   217|         0|            0|            0|  0.00%|        method called 'sendmail' that will do an entire mail transaction.
   218|         0|            0|            0|  0.00%|        """
   219|         1|  1.04904e-05|  1.04904e-05|  0.00%|    debuglevel = 0
   220|         0|            0|            0|  0.00%|
   221|         1|  1.04904e-05|  1.04904e-05|  0.00%|    sock = None
   222|         1|  1.04904e-05|  1.04904e-05|  0.00%|    file = None
   223|         1|  1.00136e-05|  1.00136e-05|  0.00%|    helo_resp = None
   224|         1|  1.00136e-05|  1.00136e-05|  0.00%|    ehlo_msg = "ehlo"
   225|         1|  1.00136e-05|  1.00136e-05|  0.00%|    ehlo_resp = None
   226|         1|   1.0252e-05|   1.0252e-05|  0.00%|    does_esmtp = False
   227|         1|  9.77516e-06|  9.77516e-06|  0.00%|    default_port = SMTP_PORT
   228|         0|            0|            0|  0.00%|
   229|         3|  2.69413e-05|  8.98043e-06|  0.01%|    def __init__(self, host='', port=0, local_hostname=None,
   230|         1|  1.12057e-05|  1.12057e-05|  0.00%|                 timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
   231|         1|  9.77516e-06|  9.77516e-06|  0.00%|                 source_address=None):
   232|         0|            0|            0|  0.00%|        """Initialize a new instance.
   233|         0|            0|            0|  0.00%|
   234|         0|            0|            0|  0.00%|        If specified, `host` is the name of the remote host to which to
   235|         0|            0|            0|  0.00%|        connect.  If specified, `port` specifies the port to which to connect.
   236|         0|            0|            0|  0.00%|        By default, smtplib.SMTP_PORT is used.  If a host is specified the
   237|         0|            0|            0|  0.00%|        connect method is called, and if it returns anything other than a
   238|         0|            0|            0|  0.00%|        success code an SMTPConnectError is raised.  If specified,
   239|         0|            0|            0|  0.00%|        `local_hostname` is used as the FQDN of the local host in the HELO/EHLO
   240|         0|            0|            0|  0.00%|        command.  Otherwise, the local hostname is found using
   241|         0|            0|            0|  0.00%|        socket.getfqdn(). The `source_address` parameter takes a 2-tuple (host,
   242|         0|            0|            0|  0.00%|        port) for the socket to bind to as its source address before
   243|         0|            0|            0|  0.00%|        connecting. If the host is '' and port is 0, the OS default behavior
   244|         0|            0|            0|  0.00%|        will be used.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|        """
   247|         1|  4.52995e-06|  4.52995e-06|  0.00%|        self._host = host
   248|         1|  5.00679e-06|  5.00679e-06|  0.00%|        self.timeout = timeout
   249|         1|  5.24521e-06|  5.24521e-06|  0.00%|        self.esmtp_features = {}
   250|         1|  4.76837e-06|  4.76837e-06|  0.00%|        self.command_encoding = 'ascii'
   251|         1|  4.29153e-06|  4.29153e-06|  0.00%|        self.source_address = source_address
   252|         1|  4.76837e-06|  4.76837e-06|  0.00%|        self._auth_challenge_count = 0
   253|         0|            0|            0|  0.00%|
   254|         1|  3.57628e-06|  3.57628e-06|  0.00%|        if host:
   255|         1|  1.45435e-05|  1.45435e-05|  0.01%|            (code, msg) = self.connect(host, port)
(call)|         1|      0.03179|      0.03179| 13.09%|# /usr/lib/python3.10/smtplib.py:315 connect
   256|         0|            0|            0|  0.00%|            if code != 220:
   257|         0|            0|            0|  0.00%|                self.close()
   258|         0|            0|            0|  0.00%|                raise SMTPConnectError(code, msg)
   259|         0|            0|            0|  0.00%|        if local_hostname is not None:
   260|         0|            0|            0|  0.00%|            self.local_hostname = local_hostname
   261|         0|            0|            0|  0.00%|        else:
   262|         0|            0|            0|  0.00%|            # RFC 2821 says we should use the fqdn in the EHLO/HELO verb, and
   263|         0|            0|            0|  0.00%|            # if that can't be calculated, that we should use a domain literal
   264|         0|            0|            0|  0.00%|            # instead (essentially an encoded IP address like [A.B.C.D]).
   265|         0|            0|            0|  0.00%|            fqdn = socket.getfqdn()
   266|         0|            0|            0|  0.00%|            if '.' in fqdn:
   267|         0|            0|            0|  0.00%|                self.local_hostname = fqdn
   268|         0|            0|            0|  0.00%|            else:
   269|         0|            0|            0|  0.00%|                # We can't find an fqdn hostname, so use a domain literal
   270|         0|            0|            0|  0.00%|                addr = '127.0.0.1'
   271|         0|            0|            0|  0.00%|                try:
   272|         0|            0|            0|  0.00%|                    addr = socket.gethostbyname(socket.gethostname())
   273|         0|            0|            0|  0.00%|                except socket.gaierror:
   274|         0|            0|            0|  0.00%|                    pass
   275|         0|            0|            0|  0.00%|                self.local_hostname = '[%s]' % addr
   276|         0|            0|            0|  0.00%|
   277|         1|  6.67572e-06|  6.67572e-06|  0.00%|    def __enter__(self):
   278|         0|            0|            0|  0.00%|        return self
   279|         0|            0|            0|  0.00%|
   280|         1|  1.26362e-05|  1.26362e-05|  0.01%|    def __exit__(self, *args):
   281|         0|            0|            0|  0.00%|        try:
   282|         0|            0|            0|  0.00%|            code, message = self.docmd("QUIT")
   283|         0|            0|            0|  0.00%|            if code != 221:
   284|         0|            0|            0|  0.00%|                raise SMTPResponseException(code, message)
   285|         0|            0|            0|  0.00%|        except SMTPServerDisconnected:
   286|         0|            0|            0|  0.00%|            pass
   287|         0|            0|            0|  0.00%|        finally:
   288|         0|            0|            0|  0.00%|            self.close()
   289|         0|            0|            0|  0.00%|
   290|         1|  1.04904e-05|  1.04904e-05|  0.00%|    def set_debuglevel(self, debuglevel):
   291|         0|            0|            0|  0.00%|        """Set the debug output level.
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|        A non-false value results in debug messages for connection and for all
   294|         0|            0|            0|  0.00%|        messages sent to and received from the server.
   295|         0|            0|            0|  0.00%|
   296|         0|            0|            0|  0.00%|        """
   297|         0|            0|            0|  0.00%|        self.debuglevel = debuglevel
   298|         0|            0|            0|  0.00%|
   299|         1|  1.00136e-05|  1.00136e-05|  0.00%|    def _print_debug(self, *args):
   300|         0|            0|            0|  0.00%|        if self.debuglevel > 1:
   301|         0|            0|            0|  0.00%|            print(datetime.datetime.now().time(), *args, file=sys.stderr)
   302|         0|            0|            0|  0.00%|        else:
   303|         0|            0|            0|  0.00%|            print(*args, file=sys.stderr)
   304|         0|            0|            0|  0.00%|
   305|         2|  1.35899e-05|  6.79493e-06|  0.01%|    def _get_socket(self, host, port, timeout):
   306|         0|            0|            0|  0.00%|        # This makes it simpler for SMTP_SSL to use the SMTP connect code
   307|         0|            0|            0|  0.00%|        # and just alter the socket connection bit.
   308|         1|  4.52995e-06|  4.52995e-06|  0.00%|        if timeout is not None and not timeout:
   309|         0|            0|            0|  0.00%|            raise ValueError('Non-blocking socket (timeout=0) is not supported')
   310|         1|  4.29153e-06|  4.29153e-06|  0.00%|        if self.debuglevel > 0:
   311|         0|            0|            0|  0.00%|            self._print_debug('connect: to', (host, port), self.source_address)
   312|         2|  1.81198e-05|  9.05991e-06|  0.01%|        return socket.create_connection((host, port), timeout,
(call)|         1|    0.0317051|    0.0317051| 13.05%|# /usr/lib/python3.10/socket.py:808 create_connection
   313|         1|  3.57628e-06|  3.57628e-06|  0.00%|                                        self.source_address)
   314|         0|            0|            0|  0.00%|
   315|         2|  1.52588e-05|  7.62939e-06|  0.01%|    def connect(self, host='localhost', port=0, source_address=None):
   316|         0|            0|            0|  0.00%|        """Connect to a host on a given port.
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|        If the hostname ends with a colon (`:') followed by a number, and
   319|         0|            0|            0|  0.00%|        there is no port specified, that suffix will be stripped off and the
   320|         0|            0|            0|  0.00%|        number interpreted as the port number to use.
   321|         0|            0|            0|  0.00%|
   322|         0|            0|            0|  0.00%|        Note: This method is automatically invoked by __init__, if a host is
   323|         0|            0|            0|  0.00%|        specified during instantiation.
   324|         0|            0|            0|  0.00%|
   325|         0|            0|            0|  0.00%|        """
   326|         0|            0|            0|  0.00%|
   327|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if source_address:
   328|         0|            0|            0|  0.00%|            self.source_address = source_address
   329|         0|            0|            0|  0.00%|
   330|         1|  5.24521e-06|  5.24521e-06|  0.00%|        if not port and (host.find(':') == host.rfind(':')):
   331|         1|  4.52995e-06|  4.52995e-06|  0.00%|            i = host.rfind(':')
   332|         1|  5.72205e-06|  5.72205e-06|  0.00%|            if i >= 0:
   333|         0|            0|            0|  0.00%|                host, port = host[:i], host[i + 1:]
   334|         0|            0|            0|  0.00%|                try:
   335|         0|            0|            0|  0.00%|                    port = int(port)
   336|         0|            0|            0|  0.00%|                except ValueError:
   337|         0|            0|            0|  0.00%|                    raise OSError("nonnumeric port")
   338|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if not port:
   339|         1|  4.52995e-06|  4.52995e-06|  0.00%|            port = self.default_port
   340|         1|  4.76837e-06|  4.76837e-06|  0.00%|        sys.audit("smtplib.connect", self, host, port)
   341|         1|  1.33514e-05|  1.33514e-05|  0.01%|        self.sock = self._get_socket(host, port, self.timeout)
(call)|         1|    0.0317392|    0.0317392| 13.07%|# /usr/lib/python3.10/smtplib.py:305 _get_socket
   342|         0|            0|            0|  0.00%|        self.file = None
   343|         0|            0|            0|  0.00%|        (code, msg) = self.getreply()
   344|         0|            0|            0|  0.00%|        if self.debuglevel > 0:
   345|         0|            0|            0|  0.00%|            self._print_debug('connect:', repr(msg))
   346|         0|            0|            0|  0.00%|        return (code, msg)
   347|         0|            0|            0|  0.00%|
   348|         1|  1.09673e-05|  1.09673e-05|  0.00%|    def send(self, s):
   349|         0|            0|            0|  0.00%|        """Send `s' to the server."""
   350|         0|            0|            0|  0.00%|        if self.debuglevel > 0:
   351|         0|            0|            0|  0.00%|            self._print_debug('send:', repr(s))
   352|         0|            0|            0|  0.00%|        if self.sock:
   353|         0|            0|            0|  0.00%|            if isinstance(s, str):
   354|         0|            0|            0|  0.00%|                # send is used by the 'data' command, where command_encoding
   355|         0|            0|            0|  0.00%|                # should not be used, but 'data' needs to convert the string to
   356|         0|            0|            0|  0.00%|                # binary itself anyway, so that's not a problem.
   357|         0|            0|            0|  0.00%|                s = s.encode(self.command_encoding)
   358|         0|            0|            0|  0.00%|            sys.audit("smtplib.send", self, s)
   359|         0|            0|            0|  0.00%|            try:
   360|         0|            0|            0|  0.00%|                self.sock.sendall(s)
   361|         0|            0|            0|  0.00%|            except OSError:
   362|         0|            0|            0|  0.00%|                self.close()
   363|         0|            0|            0|  0.00%|                raise SMTPServerDisconnected('Server not connected')
   364|         0|            0|            0|  0.00%|        else:
   365|         0|            0|            0|  0.00%|            raise SMTPServerDisconnected('please run connect() first')
   366|         0|            0|            0|  0.00%|
   367|         1|  1.00136e-05|  1.00136e-05|  0.00%|    def putcmd(self, cmd, args=""):
   368|         0|            0|            0|  0.00%|        """Send a command to the server."""
   369|         0|            0|            0|  0.00%|        if args == "":
   370|         0|            0|            0|  0.00%|            s = cmd
   371|         0|            0|            0|  0.00%|        else:
   372|         0|            0|            0|  0.00%|            s = f'{cmd} {args}'
   373|         0|            0|            0|  0.00%|        if '\r' in s or '\n' in s:
   374|         0|            0|            0|  0.00%|            s = s.replace('\n', '\\n').replace('\r', '\\r')
   375|         0|            0|            0|  0.00%|            raise ValueError(
   376|         0|            0|            0|  0.00%|                f'command and arguments contain prohibited newline characters: {s}'
   377|         0|            0|            0|  0.00%|            )
   378|         0|            0|            0|  0.00%|        self.send(f'{s}{CRLF}')
   379|         0|            0|            0|  0.00%|
   380|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def getreply(self):
   381|         0|            0|            0|  0.00%|        """Get a reply from the server.
   382|         0|            0|            0|  0.00%|
   383|         0|            0|            0|  0.00%|        Returns a tuple consisting of:
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|          - server response code (e.g. '250', or such, if all goes well)
   386|         0|            0|            0|  0.00%|            Note: returns -1 if it can't read response code.
   387|         0|            0|            0|  0.00%|
   388|         0|            0|            0|  0.00%|          - server response string corresponding to response code (multiline
   389|         0|            0|            0|  0.00%|            responses are converted to a single, multiline string).
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|        Raises SMTPServerDisconnected if end-of-file is reached.
   392|         0|            0|            0|  0.00%|        """
   393|         0|            0|            0|  0.00%|        resp = []
   394|         0|            0|            0|  0.00%|        if self.file is None:
   395|         0|            0|            0|  0.00%|            self.file = self.sock.makefile('rb')
   396|         0|            0|            0|  0.00%|        while 1:
   397|         0|            0|            0|  0.00%|            try:
   398|         0|            0|            0|  0.00%|                line = self.file.readline(_MAXLINE + 1)
   399|         0|            0|            0|  0.00%|            except OSError as e:
   400|         0|            0|            0|  0.00%|                self.close()
   401|         0|            0|            0|  0.00%|                raise SMTPServerDisconnected("Connection unexpectedly closed: "
   402|         0|            0|            0|  0.00%|                                             + str(e))
   403|         0|            0|            0|  0.00%|            if not line:
   404|         0|            0|            0|  0.00%|                self.close()
   405|         0|            0|            0|  0.00%|                raise SMTPServerDisconnected("Connection unexpectedly closed")
   406|         0|            0|            0|  0.00%|            if self.debuglevel > 0:
   407|         0|            0|            0|  0.00%|                self._print_debug('reply:', repr(line))
   408|         0|            0|            0|  0.00%|            if len(line) > _MAXLINE:
   409|         0|            0|            0|  0.00%|                self.close()
   410|         0|            0|            0|  0.00%|                raise SMTPResponseException(500, "Line too long.")
   411|         0|            0|            0|  0.00%|            resp.append(line[4:].strip(b' \t\r\n'))
   412|         0|            0|            0|  0.00%|            code = line[:3]
   413|         0|            0|            0|  0.00%|            # Check that the error code is syntactically correct.
   414|         0|            0|            0|  0.00%|            # Don't attempt to read a continuation line if it is broken.
   415|         0|            0|            0|  0.00%|            try:
   416|         0|            0|            0|  0.00%|                errcode = int(code)
   417|         0|            0|            0|  0.00%|            except ValueError:
   418|         0|            0|            0|  0.00%|                errcode = -1
   419|         0|            0|            0|  0.00%|                break
   420|         0|            0|            0|  0.00%|            # Check if multiline response.
   421|         0|            0|            0|  0.00%|            if line[3:4] != b"-":
   422|         0|            0|            0|  0.00%|                break
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|        errmsg = b"\n".join(resp)
   425|         0|            0|            0|  0.00%|        if self.debuglevel > 0:
   426|         0|            0|            0|  0.00%|            self._print_debug('reply: retcode (%s); Msg: %a' % (errcode, errmsg))
   427|         0|            0|            0|  0.00%|        return errcode, errmsg
   428|         0|            0|            0|  0.00%|
   429|         1|  1.04904e-05|  1.04904e-05|  0.00%|    def docmd(self, cmd, args=""):
   430|         0|            0|            0|  0.00%|        """Send a command, and return its response code."""
   431|         0|            0|            0|  0.00%|        self.putcmd(cmd, args)
   432|         0|            0|            0|  0.00%|        return self.getreply()
   433|         0|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|    # std smtp commands
   435|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def helo(self, name=''):
   436|         0|            0|            0|  0.00%|        """SMTP 'helo' command.
   437|         0|            0|            0|  0.00%|        Hostname to send for this command defaults to the FQDN of the local
   438|         0|            0|            0|  0.00%|        host.
   439|         0|            0|            0|  0.00%|        """
   440|         0|            0|            0|  0.00%|        self.putcmd("helo", name or self.local_hostname)
   441|         0|            0|            0|  0.00%|        (code, msg) = self.getreply()
   442|         0|            0|            0|  0.00%|        self.helo_resp = msg
   443|         0|            0|            0|  0.00%|        return (code, msg)
   444|         0|            0|            0|  0.00%|
   445|         1|  9.77516e-06|  9.77516e-06|  0.00%|    def ehlo(self, name=''):
   446|         0|            0|            0|  0.00%|        """ SMTP 'ehlo' command.
   447|         0|            0|            0|  0.00%|        Hostname to send for this command defaults to the FQDN of the local
   448|         0|            0|            0|  0.00%|        host.
   449|         0|            0|            0|  0.00%|        """
   450|         0|            0|            0|  0.00%|        self.esmtp_features = {}
   451|         0|            0|            0|  0.00%|        self.putcmd(self.ehlo_msg, name or self.local_hostname)
   452|         0|            0|            0|  0.00%|        (code, msg) = self.getreply()
   453|         0|            0|            0|  0.00%|        # According to RFC1869 some (badly written)
   454|         0|            0|            0|  0.00%|        # MTA's will disconnect on an ehlo. Toss an exception if
   455|         0|            0|            0|  0.00%|        # that happens -ddm
   456|         0|            0|            0|  0.00%|        if code == -1 and len(msg) == 0:
   457|         0|            0|            0|  0.00%|            self.close()
   458|         0|            0|            0|  0.00%|            raise SMTPServerDisconnected("Server not connected")
   459|         0|            0|            0|  0.00%|        self.ehlo_resp = msg
   460|         0|            0|            0|  0.00%|        if code != 250:
   461|         0|            0|            0|  0.00%|            return (code, msg)
   462|         0|            0|            0|  0.00%|        self.does_esmtp = True
   463|         0|            0|            0|  0.00%|        #parse the ehlo response -ddm
   464|         0|            0|            0|  0.00%|        assert isinstance(self.ehlo_resp, bytes), repr(self.ehlo_resp)
   465|         0|            0|            0|  0.00%|        resp = self.ehlo_resp.decode("latin-1").split('\n')
   466|         0|            0|            0|  0.00%|        del resp[0]
   467|         0|            0|            0|  0.00%|        for each in resp:
   468|         0|            0|            0|  0.00%|            # To be able to communicate with as many SMTP servers as possible,
   469|         0|            0|            0|  0.00%|            # we have to take the old-style auth advertisement into account,
   470|         0|            0|            0|  0.00%|            # because:
   471|         0|            0|            0|  0.00%|            # 1) Else our SMTP feature parser gets confused.
   472|         0|            0|            0|  0.00%|            # 2) There are some servers that only advertise the auth methods we
   473|         0|            0|            0|  0.00%|            #    support using the old style.
   474|         0|            0|            0|  0.00%|            auth_match = OLDSTYLE_AUTH.match(each)
   475|         0|            0|            0|  0.00%|            if auth_match:
   476|         0|            0|            0|  0.00%|                # This doesn't remove duplicates, but that's no problem
   477|         0|            0|            0|  0.00%|                self.esmtp_features["auth"] = self.esmtp_features.get("auth", "") \
   478|         0|            0|            0|  0.00%|                        + " " + auth_match.groups(0)[0]
   479|         0|            0|            0|  0.00%|                continue
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|            # RFC 1869 requires a space between ehlo keyword and parameters.
   482|         0|            0|            0|  0.00%|            # It's actually stricter, in that only spaces are allowed between
   483|         0|            0|            0|  0.00%|            # parameters, but were not going to check for that here.  Note
   484|         0|            0|            0|  0.00%|            # that the space isn't present if there are no parameters.
   485|         0|            0|            0|  0.00%|            m = re.match(r'(?P<feature>[A-Za-z0-9][A-Za-z0-9\-]*) ?', each)
   486|         0|            0|            0|  0.00%|            if m:
   487|         0|            0|            0|  0.00%|                feature = m.group("feature").lower()
   488|         0|            0|            0|  0.00%|                params = m.string[m.end("feature"):].strip()
   489|         0|            0|            0|  0.00%|                if feature == "auth":
   490|         0|            0|            0|  0.00%|                    self.esmtp_features[feature] = self.esmtp_features.get(feature, "") \
   491|         0|            0|            0|  0.00%|                            + " " + params
   492|         0|            0|            0|  0.00%|                else:
   493|         0|            0|            0|  0.00%|                    self.esmtp_features[feature] = params
   494|         0|            0|            0|  0.00%|        return (code, msg)
   495|         0|            0|            0|  0.00%|
   496|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def has_extn(self, opt):
   497|         0|            0|            0|  0.00%|        """Does the server support a given SMTP service extension?"""
   498|         0|            0|            0|  0.00%|        return opt.lower() in self.esmtp_features
   499|         0|            0|            0|  0.00%|
   500|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def help(self, args=''):
   501|         0|            0|            0|  0.00%|        """SMTP 'help' command.
   502|         0|            0|            0|  0.00%|        Returns help text from server."""
   503|         0|            0|            0|  0.00%|        self.putcmd("help", args)
   504|         0|            0|            0|  0.00%|        return self.getreply()[1]
   505|         0|            0|            0|  0.00%|
   506|         1|  1.00136e-05|  1.00136e-05|  0.00%|    def rset(self):
   507|         0|            0|            0|  0.00%|        """SMTP 'rset' command -- resets session."""
   508|         0|            0|            0|  0.00%|        self.command_encoding = 'ascii'
   509|         0|            0|            0|  0.00%|        return self.docmd("rset")
   510|         0|            0|            0|  0.00%|
   511|         1|  1.12057e-05|  1.12057e-05|  0.00%|    def _rset(self):
   512|         0|            0|            0|  0.00%|        """Internal 'rset' command which ignores any SMTPServerDisconnected error.
   513|         0|            0|            0|  0.00%|
   514|         0|            0|            0|  0.00%|        Used internally in the library, since the server disconnected error
   515|         0|            0|            0|  0.00%|        should appear to the application when the *next* command is issued, if
   516|         0|            0|            0|  0.00%|        we are doing an internal "safety" reset.
   517|         0|            0|            0|  0.00%|        """
   518|         0|            0|            0|  0.00%|        try:
   519|         0|            0|            0|  0.00%|            self.rset()
   520|         0|            0|            0|  0.00%|        except SMTPServerDisconnected:
   521|         0|            0|            0|  0.00%|            pass
   522|         0|            0|            0|  0.00%|
   523|         1|  1.12057e-05|  1.12057e-05|  0.00%|    def noop(self):
   524|         0|            0|            0|  0.00%|        """SMTP 'noop' command -- doesn't do anything :>"""
   525|         0|            0|            0|  0.00%|        return self.docmd("noop")
   526|         0|            0|            0|  0.00%|
   527|         1|  1.04904e-05|  1.04904e-05|  0.00%|    def mail(self, sender, options=()):
   528|         0|            0|            0|  0.00%|        """SMTP 'mail' command -- begins mail xfer session.
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|        This method may raise the following exceptions:
   531|         0|            0|            0|  0.00%|
   532|         0|            0|            0|  0.00%|         SMTPNotSupportedError  The options parameter includes 'SMTPUTF8'
   533|         0|            0|            0|  0.00%|                                but the SMTPUTF8 extension is not supported by
   534|         0|            0|            0|  0.00%|                                the server.
   535|         0|            0|            0|  0.00%|        """
   536|         0|            0|            0|  0.00%|        optionlist = ''
   537|         0|            0|            0|  0.00%|        if options and self.does_esmtp:
   538|         0|            0|            0|  0.00%|            if any(x.lower()=='smtputf8' for x in options):
   539|         0|            0|            0|  0.00%|                if self.has_extn('smtputf8'):
   540|         0|            0|            0|  0.00%|                    self.command_encoding = 'utf-8'
   541|         0|            0|            0|  0.00%|                else:
   542|         0|            0|            0|  0.00%|                    raise SMTPNotSupportedError(
   543|         0|            0|            0|  0.00%|                        'SMTPUTF8 not supported by server')
   544|         0|            0|            0|  0.00%|            optionlist = ' ' + ' '.join(options)
   545|         0|            0|            0|  0.00%|        self.putcmd("mail", "FROM:%s%s" % (quoteaddr(sender), optionlist))
   546|         0|            0|            0|  0.00%|        return self.getreply()
   547|         0|            0|            0|  0.00%|
   548|         1|  9.77516e-06|  9.77516e-06|  0.00%|    def rcpt(self, recip, options=()):
   549|         0|            0|            0|  0.00%|        """SMTP 'rcpt' command -- indicates 1 recipient for this mail."""
   550|         0|            0|            0|  0.00%|        optionlist = ''
   551|         0|            0|            0|  0.00%|        if options and self.does_esmtp:
   552|         0|            0|            0|  0.00%|            optionlist = ' ' + ' '.join(options)
   553|         0|            0|            0|  0.00%|        self.putcmd("rcpt", "TO:%s%s" % (quoteaddr(recip), optionlist))
   554|         0|            0|            0|  0.00%|        return self.getreply()
   555|         0|            0|            0|  0.00%|
   556|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def data(self, msg):
   557|         0|            0|            0|  0.00%|        """SMTP 'DATA' command -- sends message data to server.
   558|         0|            0|            0|  0.00%|
   559|         0|            0|            0|  0.00%|        Automatically quotes lines beginning with a period per rfc821.
   560|         0|            0|            0|  0.00%|        Raises SMTPDataError if there is an unexpected reply to the
   561|         0|            0|            0|  0.00%|        DATA command; the return value from this method is the final
   562|         0|            0|            0|  0.00%|        response code received when the all data is sent.  If msg
   563|         0|            0|            0|  0.00%|        is a string, lone '\\r' and '\\n' characters are converted to
   564|         0|            0|            0|  0.00%|        '\\r\\n' characters.  If msg is bytes, it is transmitted as is.
   565|         0|            0|            0|  0.00%|        """
   566|         0|            0|            0|  0.00%|        self.putcmd("data")
   567|         0|            0|            0|  0.00%|        (code, repl) = self.getreply()
   568|         0|            0|            0|  0.00%|        if self.debuglevel > 0:
   569|         0|            0|            0|  0.00%|            self._print_debug('data:', (code, repl))
   570|         0|            0|            0|  0.00%|        if code != 354:
   571|         0|            0|            0|  0.00%|            raise SMTPDataError(code, repl)
   572|         0|            0|            0|  0.00%|        else:
   573|         0|            0|            0|  0.00%|            if isinstance(msg, str):
   574|         0|            0|            0|  0.00%|                msg = _fix_eols(msg).encode('ascii')
   575|         0|            0|            0|  0.00%|            q = _quote_periods(msg)
   576|         0|            0|            0|  0.00%|            if q[-2:] != bCRLF:
   577|         0|            0|            0|  0.00%|                q = q + bCRLF
   578|         0|            0|            0|  0.00%|            q = q + b"." + bCRLF
   579|         0|            0|            0|  0.00%|            self.send(q)
   580|         0|            0|            0|  0.00%|            (code, msg) = self.getreply()
   581|         0|            0|            0|  0.00%|            if self.debuglevel > 0:
   582|         0|            0|            0|  0.00%|                self._print_debug('data:', (code, msg))
   583|         0|            0|            0|  0.00%|            return (code, msg)
   584|         0|            0|            0|  0.00%|
   585|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def verify(self, address):
   586|         0|            0|            0|  0.00%|        """SMTP 'verify' command -- checks for address validity."""
   587|         0|            0|            0|  0.00%|        self.putcmd("vrfy", _addr_only(address))
   588|         0|            0|            0|  0.00%|        return self.getreply()
   589|         0|            0|            0|  0.00%|    # a.k.a.
   590|         1|  1.16825e-05|  1.16825e-05|  0.00%|    vrfy = verify
   591|         0|            0|            0|  0.00%|
   592|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def expn(self, address):
   593|         0|            0|            0|  0.00%|        """SMTP 'expn' command -- expands a mailing list."""
   594|         0|            0|            0|  0.00%|        self.putcmd("expn", _addr_only(address))
   595|         0|            0|            0|  0.00%|        return self.getreply()
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|    # some useful methods
   598|         0|            0|            0|  0.00%|
   599|         1|  9.53674e-06|  9.53674e-06|  0.00%|    def ehlo_or_helo_if_needed(self):
   600|         0|            0|            0|  0.00%|        """Call self.ehlo() and/or self.helo() if needed.
   601|         0|            0|            0|  0.00%|
   602|         0|            0|            0|  0.00%|        If there has been no previous EHLO or HELO command this session, this
   603|         0|            0|            0|  0.00%|        method tries ESMTP EHLO first.
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|        This method may raise the following exceptions:
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|         SMTPHeloError            The server didn't reply properly to
   608|         0|            0|            0|  0.00%|                                  the helo greeting.
   609|         0|            0|            0|  0.00%|        """
   610|         0|            0|            0|  0.00%|        if self.helo_resp is None and self.ehlo_resp is None:
   611|         0|            0|            0|  0.00%|            if not (200 <= self.ehlo()[0] <= 299):
   612|         0|            0|            0|  0.00%|                (code, resp) = self.helo()
   613|         0|            0|            0|  0.00%|                if not (200 <= code <= 299):
   614|         0|            0|            0|  0.00%|                    raise SMTPHeloError(code, resp)
   615|         0|            0|            0|  0.00%|
   616|         1|  1.04904e-05|  1.04904e-05|  0.00%|    def auth(self, mechanism, authobject, *, initial_response_ok=True):
   617|         0|            0|            0|  0.00%|        """Authentication command - requires response processing.
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|        'mechanism' specifies which authentication mechanism is to
   620|         0|            0|            0|  0.00%|        be used - the valid values are those listed in the 'auth'
   621|         0|            0|            0|  0.00%|        element of 'esmtp_features'.
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|        'authobject' must be a callable object taking a single argument:
   624|         0|            0|            0|  0.00%|
   625|         0|            0|            0|  0.00%|                data = authobject(challenge)
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|        It will be called to process the server's challenge response; the
   628|         0|            0|            0|  0.00%|        challenge argument it is passed will be a bytes.  It should return
   629|         0|            0|            0|  0.00%|        an ASCII string that will be base64 encoded and sent to the server.
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|        Keyword arguments:
   632|         0|            0|            0|  0.00%|            - initial_response_ok: Allow sending the RFC 4954 initial-response
   633|         0|            0|            0|  0.00%|              to the AUTH command, if the authentication methods supports it.
   634|         0|            0|            0|  0.00%|        """
   635|         0|            0|            0|  0.00%|        # RFC 4954 allows auth methods to provide an initial response.  Not all
   636|         0|            0|            0|  0.00%|        # methods support it.  By definition, if they return something other
   637|         0|            0|            0|  0.00%|        # than None when challenge is None, then they do.  See issue #15014.
   638|         0|            0|            0|  0.00%|        mechanism = mechanism.upper()
   639|         0|            0|            0|  0.00%|        initial_response = (authobject() if initial_response_ok else None)
   640|         0|            0|            0|  0.00%|        if initial_response is not None:
   641|         0|            0|            0|  0.00%|            response = encode_base64(initial_response.encode('ascii'), eol='')
   642|         0|            0|            0|  0.00%|            (code, resp) = self.docmd("AUTH", mechanism + " " + response)
   643|         0|            0|            0|  0.00%|            self._auth_challenge_count = 1
   644|         0|            0|            0|  0.00%|        else:
   645|         0|            0|            0|  0.00%|            (code, resp) = self.docmd("AUTH", mechanism)
   646|         0|            0|            0|  0.00%|            self._auth_challenge_count = 0
   647|         0|            0|            0|  0.00%|        # If server responds with a challenge, send the response.
   648|         0|            0|            0|  0.00%|        while code == 334:
   649|         0|            0|            0|  0.00%|            self._auth_challenge_count += 1
   650|         0|            0|            0|  0.00%|            challenge = base64.decodebytes(resp)
   651|         0|            0|            0|  0.00%|            response = encode_base64(
   652|         0|            0|            0|  0.00%|                authobject(challenge).encode('ascii'), eol='')
   653|         0|            0|            0|  0.00%|            (code, resp) = self.docmd(response)
   654|         0|            0|            0|  0.00%|            # If server keeps sending challenges, something is wrong.
   655|         0|            0|            0|  0.00%|            if self._auth_challenge_count > _MAXCHALLENGE:
   656|         0|            0|            0|  0.00%|                raise SMTPException(
   657|         0|            0|            0|  0.00%|                    "Server AUTH mechanism infinite loop. Last response: "
   658|         0|            0|            0|  0.00%|                    + repr((code, resp))
   659|         0|            0|            0|  0.00%|                )
   660|         0|            0|            0|  0.00%|        if code in (235, 503):
   661|         0|            0|            0|  0.00%|            return (code, resp)
   662|         0|            0|            0|  0.00%|        raise SMTPAuthenticationError(code, resp)
   663|         0|            0|            0|  0.00%|
   664|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def auth_cram_md5(self, challenge=None):
   665|         0|            0|            0|  0.00%|        """ Authobject to use with CRAM-MD5 authentication. Requires self.user
   666|         0|            0|            0|  0.00%|        and self.password to be set."""
   667|         0|            0|            0|  0.00%|        # CRAM-MD5 does not support initial-response.
   668|         0|            0|            0|  0.00%|        if challenge is None:
   669|         0|            0|            0|  0.00%|            return None
   670|         0|            0|            0|  0.00%|        return self.user + " " + hmac.HMAC(
   671|         0|            0|            0|  0.00%|            self.password.encode('ascii'), challenge, 'md5').hexdigest()
   672|         0|            0|            0|  0.00%|
   673|         1|  1.04904e-05|  1.04904e-05|  0.00%|    def auth_plain(self, challenge=None):
   674|         0|            0|            0|  0.00%|        """ Authobject to use with PLAIN authentication. Requires self.user and
   675|         0|            0|            0|  0.00%|        self.password to be set."""
   676|         0|            0|            0|  0.00%|        return "\0%s\0%s" % (self.user, self.password)
   677|         0|            0|            0|  0.00%|
   678|         1|  1.00136e-05|  1.00136e-05|  0.00%|    def auth_login(self, challenge=None):
   679|         0|            0|            0|  0.00%|        """ Authobject to use with LOGIN authentication. Requires self.user and
   680|         0|            0|            0|  0.00%|        self.password to be set."""
   681|         0|            0|            0|  0.00%|        if challenge is None or self._auth_challenge_count < 2:
   682|         0|            0|            0|  0.00%|            return self.user
   683|         0|            0|            0|  0.00%|        else:
   684|         0|            0|            0|  0.00%|            return self.password
   685|         0|            0|            0|  0.00%|
   686|         1|  1.12057e-05|  1.12057e-05|  0.00%|    def login(self, user, password, *, initial_response_ok=True):
   687|         0|            0|            0|  0.00%|        """Log in on an SMTP server that requires authentication.
   688|         0|            0|            0|  0.00%|
   689|         0|            0|            0|  0.00%|        The arguments are:
   690|         0|            0|            0|  0.00%|            - user:         The user name to authenticate with.
   691|         0|            0|            0|  0.00%|            - password:     The password for the authentication.
   692|         0|            0|            0|  0.00%|
   693|         0|            0|            0|  0.00%|        Keyword arguments:
   694|         0|            0|            0|  0.00%|            - initial_response_ok: Allow sending the RFC 4954 initial-response
   695|         0|            0|            0|  0.00%|              to the AUTH command, if the authentication methods supports it.
   696|         0|            0|            0|  0.00%|
   697|         0|            0|            0|  0.00%|        If there has been no previous EHLO or HELO command this session, this
   698|         0|            0|            0|  0.00%|        method tries ESMTP EHLO first.
   699|         0|            0|            0|  0.00%|
   700|         0|            0|            0|  0.00%|        This method will return normally if the authentication was successful.
   701|         0|            0|            0|  0.00%|
   702|         0|            0|            0|  0.00%|        This method may raise the following exceptions:
   703|         0|            0|            0|  0.00%|
   704|         0|            0|            0|  0.00%|         SMTPHeloError            The server didn't reply properly to
   705|         0|            0|            0|  0.00%|                                  the helo greeting.
   706|         0|            0|            0|  0.00%|         SMTPAuthenticationError  The server didn't accept the username/
   707|         0|            0|            0|  0.00%|                                  password combination.
   708|         0|            0|            0|  0.00%|         SMTPNotSupportedError    The AUTH command is not supported by the
   709|         0|            0|            0|  0.00%|                                  server.
   710|         0|            0|            0|  0.00%|         SMTPException            No suitable authentication method was
   711|         0|            0|            0|  0.00%|                                  found.
   712|         0|            0|            0|  0.00%|        """
   713|         0|            0|            0|  0.00%|
   714|         0|            0|            0|  0.00%|        self.ehlo_or_helo_if_needed()
   715|         0|            0|            0|  0.00%|        if not self.has_extn("auth"):
   716|         0|            0|            0|  0.00%|            raise SMTPNotSupportedError(
   717|         0|            0|            0|  0.00%|                "SMTP AUTH extension not supported by server.")
   718|         0|            0|            0|  0.00%|
   719|         0|            0|            0|  0.00%|        # Authentication methods the server claims to support
   720|         0|            0|            0|  0.00%|        advertised_authlist = self.esmtp_features["auth"].split()
   721|         0|            0|            0|  0.00%|
   722|         0|            0|            0|  0.00%|        # Authentication methods we can handle in our preferred order:
   723|         0|            0|            0|  0.00%|        preferred_auths = ['CRAM-MD5', 'PLAIN', 'LOGIN']
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        # We try the supported authentications in our preferred order, if
   726|         0|            0|            0|  0.00%|        # the server supports them.
   727|         0|            0|            0|  0.00%|        authlist = [auth for auth in preferred_auths
   728|         0|            0|            0|  0.00%|                    if auth in advertised_authlist]
   729|         0|            0|            0|  0.00%|        if not authlist:
   730|         0|            0|            0|  0.00%|            raise SMTPException("No suitable authentication method found.")
   731|         0|            0|            0|  0.00%|
   732|         0|            0|            0|  0.00%|        # Some servers advertise authentication methods they don't really
   733|         0|            0|            0|  0.00%|        # support, so if authentication fails, we continue until we've tried
   734|         0|            0|            0|  0.00%|        # all methods.
   735|         0|            0|            0|  0.00%|        self.user, self.password = user, password
   736|         0|            0|            0|  0.00%|        for authmethod in authlist:
   737|         0|            0|            0|  0.00%|            method_name = 'auth_' + authmethod.lower().replace('-', '_')
   738|         0|            0|            0|  0.00%|            try:
   739|         0|            0|            0|  0.00%|                (code, resp) = self.auth(
   740|         0|            0|            0|  0.00%|                    authmethod, getattr(self, method_name),
   741|         0|            0|            0|  0.00%|                    initial_response_ok=initial_response_ok)
   742|         0|            0|            0|  0.00%|                # 235 == 'Authentication successful'
   743|         0|            0|            0|  0.00%|                # 503 == 'Error: already authenticated'
   744|         0|            0|            0|  0.00%|                if code in (235, 503):
   745|         0|            0|            0|  0.00%|                    return (code, resp)
   746|         0|            0|            0|  0.00%|            except SMTPAuthenticationError as e:
   747|         0|            0|            0|  0.00%|                last_exception = e
   748|         0|            0|            0|  0.00%|
   749|         0|            0|            0|  0.00%|        # We could not login successfully.  Return result of last attempt.
   750|         0|            0|            0|  0.00%|        raise last_exception
   751|         0|            0|            0|  0.00%|
   752|         1|  1.07288e-05|  1.07288e-05|  0.00%|    def starttls(self, keyfile=None, certfile=None, context=None):
   753|         0|            0|            0|  0.00%|        """Puts the connection to the SMTP server into TLS mode.
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|        If there has been no previous EHLO or HELO command this session, this
   756|         0|            0|            0|  0.00%|        method tries ESMTP EHLO first.
   757|         0|            0|            0|  0.00%|
   758|         0|            0|            0|  0.00%|        If the server supports TLS, this will encrypt the rest of the SMTP
   759|         0|            0|            0|  0.00%|        session. If you provide the keyfile and certfile parameters,
   760|         0|            0|            0|  0.00%|        the identity of the SMTP server and client can be checked. This,
   761|         0|            0|            0|  0.00%|        however, depends on whether the socket module really checks the
   762|         0|            0|            0|  0.00%|        certificates.
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|        This method may raise the following exceptions:
   765|         0|            0|            0|  0.00%|
   766|         0|            0|            0|  0.00%|         SMTPHeloError            The server didn't reply properly to
   767|         0|            0|            0|  0.00%|                                  the helo greeting.
   768|         0|            0|            0|  0.00%|        """
   769|         0|            0|            0|  0.00%|        self.ehlo_or_helo_if_needed()
   770|         0|            0|            0|  0.00%|        if not self.has_extn("starttls"):
   771|         0|            0|            0|  0.00%|            raise SMTPNotSupportedError(
   772|         0|            0|            0|  0.00%|                "STARTTLS extension not supported by server.")
   773|         0|            0|            0|  0.00%|        (resp, reply) = self.docmd("STARTTLS")
   774|         0|            0|            0|  0.00%|        if resp == 220:
   775|         0|            0|            0|  0.00%|            if not _have_ssl:
   776|         0|            0|            0|  0.00%|                raise RuntimeError("No SSL support included in this Python")
   777|         0|            0|            0|  0.00%|            if context is not None and keyfile is not None:
   778|         0|            0|            0|  0.00%|                raise ValueError("context and keyfile arguments are mutually "
   779|         0|            0|            0|  0.00%|                                 "exclusive")
   780|         0|            0|            0|  0.00%|            if context is not None and certfile is not None:
   781|         0|            0|            0|  0.00%|                raise ValueError("context and certfile arguments are mutually "
   782|         0|            0|            0|  0.00%|                                 "exclusive")
   783|         0|            0|            0|  0.00%|            if keyfile is not None or certfile is not None:
   784|         0|            0|            0|  0.00%|                import warnings
   785|         0|            0|            0|  0.00%|                warnings.warn("keyfile and certfile are deprecated, use a "
   786|         0|            0|            0|  0.00%|                              "custom context instead", DeprecationWarning, 2)
   787|         0|            0|            0|  0.00%|            if context is None:
   788|         0|            0|            0|  0.00%|                context = ssl._create_stdlib_context(certfile=certfile,
   789|         0|            0|            0|  0.00%|                                                     keyfile=keyfile)
   790|         0|            0|            0|  0.00%|            self.sock = context.wrap_socket(self.sock,
   791|         0|            0|            0|  0.00%|                                            server_hostname=self._host)
   792|         0|            0|            0|  0.00%|            self.file = None
   793|         0|            0|            0|  0.00%|            # RFC 3207:
   794|         0|            0|            0|  0.00%|            # The client MUST discard any knowledge obtained from
   795|         0|            0|            0|  0.00%|            # the server, such as the list of SMTP service extensions,
   796|         0|            0|            0|  0.00%|            # which was not obtained from the TLS negotiation itself.
   797|         0|            0|            0|  0.00%|            self.helo_resp = None
   798|         0|            0|            0|  0.00%|            self.ehlo_resp = None
   799|         0|            0|            0|  0.00%|            self.esmtp_features = {}
   800|         0|            0|            0|  0.00%|            self.does_esmtp = False
   801|         0|            0|            0|  0.00%|        else:
   802|         0|            0|            0|  0.00%|            # RFC 3207:
   803|         0|            0|            0|  0.00%|            # 501 Syntax error (no parameters allowed)
   804|         0|            0|            0|  0.00%|            # 454 TLS not available due to temporary reason
   805|         0|            0|            0|  0.00%|            raise SMTPResponseException(resp, reply)
   806|         0|            0|            0|  0.00%|        return (resp, reply)
   807|         0|            0|            0|  0.00%|
   808|         2|  2.09808e-05|  1.04904e-05|  0.01%|    def sendmail(self, from_addr, to_addrs, msg, mail_options=(),
   809|         1|  1.00136e-05|  1.00136e-05|  0.00%|                 rcpt_options=()):
   810|         0|            0|            0|  0.00%|        """This command performs an entire mail transaction.
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|        The arguments are:
   813|         0|            0|            0|  0.00%|            - from_addr    : The address sending this mail.
   814|         0|            0|            0|  0.00%|            - to_addrs     : A list of addresses to send this mail to.  A bare
   815|         0|            0|            0|  0.00%|                             string will be treated as a list with 1 address.
   816|         0|            0|            0|  0.00%|            - msg          : The message to send.
   817|         0|            0|            0|  0.00%|            - mail_options : List of ESMTP options (such as 8bitmime) for the
   818|         0|            0|            0|  0.00%|                             mail command.
   819|         0|            0|            0|  0.00%|            - rcpt_options : List of ESMTP options (such as DSN commands) for
   820|         0|            0|            0|  0.00%|                             all the rcpt commands.
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|        msg may be a string containing characters in the ASCII range, or a byte
   823|         0|            0|            0|  0.00%|        string.  A string is encoded to bytes using the ascii codec, and lone
   824|         0|            0|            0|  0.00%|        \\r and \\n characters are converted to \\r\\n characters.
   825|         0|            0|            0|  0.00%|
   826|         0|            0|            0|  0.00%|        If there has been no previous EHLO or HELO command this session, this
   827|         0|            0|            0|  0.00%|        method tries ESMTP EHLO first.  If the server does ESMTP, message size
   828|         0|            0|            0|  0.00%|        and each of the specified options will be passed to it.  If EHLO
   829|         0|            0|            0|  0.00%|        fails, HELO will be tried and ESMTP options suppressed.
   830|         0|            0|            0|  0.00%|
   831|         0|            0|            0|  0.00%|        This method will return normally if the mail is accepted for at least
   832|         0|            0|            0|  0.00%|        one recipient.  It returns a dictionary, with one entry for each
   833|         0|            0|            0|  0.00%|        recipient that was refused.  Each entry contains a tuple of the SMTP
   834|         0|            0|            0|  0.00%|        error code and the accompanying error message sent by the server.
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|        This method may raise the following exceptions:
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|         SMTPHeloError          The server didn't reply properly to
   839|         0|            0|            0|  0.00%|                                the helo greeting.
   840|         0|            0|            0|  0.00%|         SMTPRecipientsRefused  The server rejected ALL recipients
   841|         0|            0|            0|  0.00%|                                (no mail was sent).
   842|         0|            0|            0|  0.00%|         SMTPSenderRefused      The server didn't accept the from_addr.
   843|         0|            0|            0|  0.00%|         SMTPDataError          The server replied with an unexpected
   844|         0|            0|            0|  0.00%|                                error code (other than a refusal of
   845|         0|            0|            0|  0.00%|                                a recipient).
   846|         0|            0|            0|  0.00%|         SMTPNotSupportedError  The mail_options parameter includes 'SMTPUTF8'
   847|         0|            0|            0|  0.00%|                                but the SMTPUTF8 extension is not supported by
   848|         0|            0|            0|  0.00%|                                the server.
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|        Note: the connection will be open even after an exception is raised.
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|        Example:
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|         >>> import smtplib
   855|         0|            0|            0|  0.00%|         >>> s=smtplib.SMTP("localhost")
   856|         0|            0|            0|  0.00%|         >>> tolist=["one@one.org","two@two.org","three@three.org","four@four.org"]
   857|         0|            0|            0|  0.00%|         >>> msg = '''\\
   858|         0|            0|            0|  0.00%|         ... From: Me@my.org
   859|         0|            0|            0|  0.00%|         ... Subject: testin'...
   860|         0|            0|            0|  0.00%|         ...
   861|         0|            0|            0|  0.00%|         ... This is a test '''
   862|         0|            0|            0|  0.00%|         >>> s.sendmail("me@my.org",tolist,msg)
   863|         0|            0|            0|  0.00%|         { "three@three.org" : ( 550 ,"User unknown" ) }
   864|         0|            0|            0|  0.00%|         >>> s.quit()
   865|         0|            0|            0|  0.00%|
   866|         0|            0|            0|  0.00%|        In the above example, the message was accepted for delivery to three
   867|         0|            0|            0|  0.00%|        of the four addresses, and one was rejected, with the error code
   868|         0|            0|            0|  0.00%|        550.  If all addresses are accepted, then the method will return an
   869|         0|            0|            0|  0.00%|        empty dictionary.
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|        """
   872|         0|            0|            0|  0.00%|        self.ehlo_or_helo_if_needed()
   873|         0|            0|            0|  0.00%|        esmtp_opts = []
   874|         0|            0|            0|  0.00%|        if isinstance(msg, str):
   875|         0|            0|            0|  0.00%|            msg = _fix_eols(msg).encode('ascii')
   876|         0|            0|            0|  0.00%|        if self.does_esmtp:
   877|         0|            0|            0|  0.00%|            if self.has_extn('size'):
   878|         0|            0|            0|  0.00%|                esmtp_opts.append("size=%d" % len(msg))
   879|         0|            0|            0|  0.00%|            for option in mail_options:
   880|         0|            0|            0|  0.00%|                esmtp_opts.append(option)
   881|         0|            0|            0|  0.00%|        (code, resp) = self.mail(from_addr, esmtp_opts)
   882|         0|            0|            0|  0.00%|        if code != 250:
   883|         0|            0|            0|  0.00%|            if code == 421:
   884|         0|            0|            0|  0.00%|                self.close()
   885|         0|            0|            0|  0.00%|            else:
   886|         0|            0|            0|  0.00%|                self._rset()
   887|         0|            0|            0|  0.00%|            raise SMTPSenderRefused(code, resp, from_addr)
   888|         0|            0|            0|  0.00%|        senderrs = {}
   889|         0|            0|            0|  0.00%|        if isinstance(to_addrs, str):
   890|         0|            0|            0|  0.00%|            to_addrs = [to_addrs]
   891|         0|            0|            0|  0.00%|        for each in to_addrs:
   892|         0|            0|            0|  0.00%|            (code, resp) = self.rcpt(each, rcpt_options)
   893|         0|            0|            0|  0.00%|            if (code != 250) and (code != 251):
   894|         0|            0|            0|  0.00%|                senderrs[each] = (code, resp)
   895|         0|            0|            0|  0.00%|            if code == 421:
   896|         0|            0|            0|  0.00%|                self.close()
   897|         0|            0|            0|  0.00%|                raise SMTPRecipientsRefused(senderrs)
   898|         0|            0|            0|  0.00%|        if len(senderrs) == len(to_addrs):
   899|         0|            0|            0|  0.00%|            # the server refused all our recipients
   900|         0|            0|            0|  0.00%|            self._rset()
   901|         0|            0|            0|  0.00%|            raise SMTPRecipientsRefused(senderrs)
   902|         0|            0|            0|  0.00%|        (code, resp) = self.data(msg)
   903|         0|            0|            0|  0.00%|        if code != 250:
   904|         0|            0|            0|  0.00%|            if code == 421:
   905|         0|            0|            0|  0.00%|                self.close()
   906|         0|            0|            0|  0.00%|            else:
   907|         0|            0|            0|  0.00%|                self._rset()
   908|         0|            0|            0|  0.00%|            raise SMTPDataError(code, resp)
   909|         0|            0|            0|  0.00%|        #if we got here then somebody got our mail
   910|         0|            0|            0|  0.00%|        return senderrs
   911|         0|            0|            0|  0.00%|
   912|         2|  1.62125e-05|  8.10623e-06|  0.01%|    def send_message(self, msg, from_addr=None, to_addrs=None,
   913|         1|  1.00136e-05|  1.00136e-05|  0.00%|                     mail_options=(), rcpt_options=()):
   914|         0|            0|            0|  0.00%|        """Converts message to a bytestring and passes it to sendmail.
   915|         0|            0|            0|  0.00%|
   916|         0|            0|            0|  0.00%|        The arguments are as for sendmail, except that msg is an
   917|         0|            0|            0|  0.00%|        email.message.Message object.  If from_addr is None or to_addrs is
   918|         0|            0|            0|  0.00%|        None, these arguments are taken from the headers of the Message as
   919|         0|            0|            0|  0.00%|        described in RFC 2822 (a ValueError is raised if there is more than
   920|         0|            0|            0|  0.00%|        one set of 'Resent-' headers).  Regardless of the values of from_addr and
   921|         0|            0|            0|  0.00%|        to_addr, any Bcc field (or Resent-Bcc field, when the Message is a
   922|         0|            0|            0|  0.00%|        resent) of the Message object won't be transmitted.  The Message
   923|         0|            0|            0|  0.00%|        object is then serialized using email.generator.BytesGenerator and
   924|         0|            0|            0|  0.00%|        sendmail is called to transmit the message.  If the sender or any of
   925|         0|            0|            0|  0.00%|        the recipient addresses contain non-ASCII and the server advertises the
   926|         0|            0|            0|  0.00%|        SMTPUTF8 capability, the policy is cloned with utf8 set to True for the
   927|         0|            0|            0|  0.00%|        serialization, and SMTPUTF8 and BODY=8BITMIME are asserted on the send.
   928|         0|            0|            0|  0.00%|        If the server does not support SMTPUTF8, an SMTPNotSupported error is
   929|         0|            0|            0|  0.00%|        raised.  Otherwise the generator is called without modifying the
   930|         0|            0|            0|  0.00%|        policy.
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|        """
   933|         0|            0|            0|  0.00%|        # 'Resent-Date' is a mandatory field if the Message is resent (RFC 2822
   934|         0|            0|            0|  0.00%|        # Section 3.6.6). In such a case, we use the 'Resent-*' fields.  However,
   935|         0|            0|            0|  0.00%|        # if there is more than one 'Resent-' block there's no way to
   936|         0|            0|            0|  0.00%|        # unambiguously determine which one is the most recent in all cases,
   937|         0|            0|            0|  0.00%|        # so rather than guess we raise a ValueError in that case.
   938|         0|            0|            0|  0.00%|        #
   939|         0|            0|            0|  0.00%|        # TODO implement heuristics to guess the correct Resent-* block with an
   940|         0|            0|            0|  0.00%|        # option allowing the user to enable the heuristics.  (It should be
   941|         0|            0|            0|  0.00%|        # possible to guess correctly almost all of the time.)
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|        self.ehlo_or_helo_if_needed()
   944|         0|            0|            0|  0.00%|        resent = msg.get_all('Resent-Date')
   945|         0|            0|            0|  0.00%|        if resent is None:
   946|         0|            0|            0|  0.00%|            header_prefix = ''
   947|         0|            0|            0|  0.00%|        elif len(resent) == 1:
   948|         0|            0|            0|  0.00%|            header_prefix = 'Resent-'
   949|         0|            0|            0|  0.00%|        else:
   950|         0|            0|            0|  0.00%|            raise ValueError("message has more than one 'Resent-' header block")
   951|         0|            0|            0|  0.00%|        if from_addr is None:
   952|         0|            0|            0|  0.00%|            # Prefer the sender field per RFC 2822:3.6.2.
   953|         0|            0|            0|  0.00%|            from_addr = (msg[header_prefix + 'Sender']
   954|         0|            0|            0|  0.00%|                           if (header_prefix + 'Sender') in msg
   955|         0|            0|            0|  0.00%|                           else msg[header_prefix + 'From'])
   956|         0|            0|            0|  0.00%|            from_addr = email.utils.getaddresses([from_addr])[0][1]
   957|         0|            0|            0|  0.00%|        if to_addrs is None:
   958|         0|            0|            0|  0.00%|            addr_fields = [f for f in (msg[header_prefix + 'To'],
   959|         0|            0|            0|  0.00%|                                       msg[header_prefix + 'Bcc'],
   960|         0|            0|            0|  0.00%|                                       msg[header_prefix + 'Cc'])
   961|         0|            0|            0|  0.00%|                           if f is not None]
   962|         0|            0|            0|  0.00%|            to_addrs = [a[1] for a in email.utils.getaddresses(addr_fields)]
   963|         0|            0|            0|  0.00%|        # Make a local copy so we can delete the bcc headers.
   964|         0|            0|            0|  0.00%|        msg_copy = copy.copy(msg)
   965|         0|            0|            0|  0.00%|        del msg_copy['Bcc']
   966|         0|            0|            0|  0.00%|        del msg_copy['Resent-Bcc']
   967|         0|            0|            0|  0.00%|        international = False
   968|         0|            0|            0|  0.00%|        try:
   969|         0|            0|            0|  0.00%|            ''.join([from_addr, *to_addrs]).encode('ascii')
   970|         0|            0|            0|  0.00%|        except UnicodeEncodeError:
   971|         0|            0|            0|  0.00%|            if not self.has_extn('smtputf8'):
   972|         0|            0|            0|  0.00%|                raise SMTPNotSupportedError(
   973|         0|            0|            0|  0.00%|                    "One or more source or delivery addresses require"
   974|         0|            0|            0|  0.00%|                    " internationalized email support, but the server"
   975|         0|            0|            0|  0.00%|                    " does not advertise the required SMTPUTF8 capability")
   976|         0|            0|            0|  0.00%|            international = True
   977|         0|            0|            0|  0.00%|        with io.BytesIO() as bytesmsg:
   978|         0|            0|            0|  0.00%|            if international:
   979|         0|            0|            0|  0.00%|                g = email.generator.BytesGenerator(
   980|         0|            0|            0|  0.00%|                    bytesmsg, policy=msg.policy.clone(utf8=True))
   981|         0|            0|            0|  0.00%|                mail_options = (*mail_options, 'SMTPUTF8', 'BODY=8BITMIME')
   982|         0|            0|            0|  0.00%|            else:
   983|         0|            0|            0|  0.00%|                g = email.generator.BytesGenerator(bytesmsg)
   984|         0|            0|            0|  0.00%|            g.flatten(msg_copy, linesep='\r\n')
   985|         0|            0|            0|  0.00%|            flatmsg = bytesmsg.getvalue()
   986|         0|            0|            0|  0.00%|        return self.sendmail(from_addr, to_addrs, flatmsg, mail_options,
   987|         0|            0|            0|  0.00%|                             rcpt_options)
   988|         0|            0|            0|  0.00%|
   989|         1|   6.4373e-06|   6.4373e-06|  0.00%|    def close(self):
   990|         0|            0|            0|  0.00%|        """Close the connection to the SMTP server."""
   991|         0|            0|            0|  0.00%|        try:
   992|         0|            0|            0|  0.00%|            file = self.file
   993|         0|            0|            0|  0.00%|            self.file = None
   994|         0|            0|            0|  0.00%|            if file:
   995|         0|            0|            0|  0.00%|                file.close()
   996|         0|            0|            0|  0.00%|        finally:
   997|         0|            0|            0|  0.00%|            sock = self.sock
   998|         0|            0|            0|  0.00%|            self.sock = None
   999|         0|            0|            0|  0.00%|            if sock:
  1000|         0|            0|            0|  0.00%|                sock.close()
  1001|         0|            0|            0|  0.00%|
  1002|         1|   1.0252e-05|   1.0252e-05|  0.00%|    def quit(self):
  1003|         0|            0|            0|  0.00%|        """Terminate the SMTP session."""
  1004|         0|            0|            0|  0.00%|        res = self.docmd("quit")
  1005|         0|            0|            0|  0.00%|        # A new EHLO is required after reconnecting with connect()
  1006|         0|            0|            0|  0.00%|        self.ehlo_resp = self.helo_resp = None
  1007|         0|            0|            0|  0.00%|        self.esmtp_features = {}
  1008|         0|            0|            0|  0.00%|        self.does_esmtp = False
  1009|         0|            0|            0|  0.00%|        self.close()
  1010|         0|            0|            0|  0.00%|        return res
  1011|         0|            0|            0|  0.00%|
  1012|         1|  1.45435e-05|  1.45435e-05|  0.01%|if _have_ssl:
  1013|         0|            0|            0|  0.00%|
  1014|         3|   7.1764e-05|  2.39213e-05|  0.03%|    class SMTP_SSL(SMTP):
(call)|         1|  5.17368e-05|  5.17368e-05|  0.02%|# /usr/lib/python3.10/smtplib.py:1014 SMTP_SSL
  1015|         1|   3.8147e-06|   3.8147e-06|  0.00%|        """ This is a subclass derived from SMTP that connects over an SSL
  1016|         0|            0|            0|  0.00%|        encrypted socket (to use this class you need a socket module that was
  1017|         0|            0|            0|  0.00%|        compiled with SSL support). If host is not specified, '' (the local
  1018|         0|            0|            0|  0.00%|        host) is used. If port is omitted, the standard SMTP-over-SSL port
  1019|         0|            0|            0|  0.00%|        (465) is used.  local_hostname and source_address have the same meaning
  1020|         0|            0|            0|  0.00%|        as they do in the SMTP class.  keyfile and certfile are also optional -
  1021|         0|            0|            0|  0.00%|        they can contain a PEM formatted private key and certificate chain file
  1022|         0|            0|            0|  0.00%|        for the SSL connection. context also optional, can contain a
  1023|         0|            0|            0|  0.00%|        SSLContext, and is an alternative to keyfile and certfile; If it is
  1024|         0|            0|            0|  0.00%|        specified both keyfile and certfile must be None.
  1025|         0|            0|            0|  0.00%|
  1026|         0|            0|            0|  0.00%|        """
  1027|         0|            0|            0|  0.00%|
  1028|         1|  4.52995e-06|  4.52995e-06|  0.00%|        default_port = SMTP_SSL_PORT
  1029|         0|            0|            0|  0.00%|
  1030|         2|  8.58307e-06|  4.29153e-06|  0.00%|        def __init__(self, host='', port=0, local_hostname=None,
  1031|         1|  3.57628e-06|  3.57628e-06|  0.00%|                     keyfile=None, certfile=None,
  1032|         1|  4.29153e-06|  4.29153e-06|  0.00%|                     timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
  1033|         1|  4.05312e-06|  4.05312e-06|  0.00%|                     source_address=None, context=None):
  1034|         0|            0|            0|  0.00%|            if context is not None and keyfile is not None:
  1035|         0|            0|            0|  0.00%|                raise ValueError("context and keyfile arguments are mutually "
  1036|         0|            0|            0|  0.00%|                                 "exclusive")
  1037|         0|            0|            0|  0.00%|            if context is not None and certfile is not None:
  1038|         0|            0|            0|  0.00%|                raise ValueError("context and certfile arguments are mutually "
  1039|         0|            0|            0|  0.00%|                                 "exclusive")
  1040|         0|            0|            0|  0.00%|            if keyfile is not None or certfile is not None:
  1041|         0|            0|            0|  0.00%|                import warnings
  1042|         0|            0|            0|  0.00%|                warnings.warn("keyfile and certfile are deprecated, use a "
  1043|         0|            0|            0|  0.00%|                              "custom context instead", DeprecationWarning, 2)
  1044|         0|            0|            0|  0.00%|            self.keyfile = keyfile
  1045|         0|            0|            0|  0.00%|            self.certfile = certfile
  1046|         0|            0|            0|  0.00%|            if context is None:
  1047|         0|            0|            0|  0.00%|                context = ssl._create_stdlib_context(certfile=certfile,
  1048|         0|            0|            0|  0.00%|                                                     keyfile=keyfile)
  1049|         0|            0|            0|  0.00%|            self.context = context
  1050|         0|            0|            0|  0.00%|            SMTP.__init__(self, host, port, local_hostname, timeout,
  1051|         0|            0|            0|  0.00%|                          source_address)
  1052|         0|            0|            0|  0.00%|
  1053|         1|  3.57628e-06|  3.57628e-06|  0.00%|        def _get_socket(self, host, port, timeout):
  1054|         0|            0|            0|  0.00%|            if self.debuglevel > 0:
  1055|         0|            0|            0|  0.00%|                self._print_debug('connect:', (host, port))
  1056|         0|            0|            0|  0.00%|            new_socket = super()._get_socket(host, port, timeout)
  1057|         0|            0|            0|  0.00%|            new_socket = self.context.wrap_socket(new_socket,
  1058|         0|            0|            0|  0.00%|                                                  server_hostname=self._host)
  1059|         0|            0|            0|  0.00%|            return new_socket
  1060|         0|            0|            0|  0.00%|
  1061|         1|  2.67029e-05|  2.67029e-05|  0.01%|    __all__.append("SMTP_SSL")
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|#
  1064|         0|            0|            0|  0.00%|# LMTP extension
  1065|         0|            0|            0|  0.00%|#
  1066|         1|  1.62125e-05|  1.62125e-05|  0.01%|LMTP_PORT = 2003
  1067|         0|            0|            0|  0.00%|
  1068|         3|  7.12872e-05|  2.37624e-05|  0.03%|class LMTP(SMTP):
(call)|         1|    5.126e-05|    5.126e-05|  0.02%|# /usr/lib/python3.10/smtplib.py:1068 LMTP
  1069|         1|   3.8147e-06|   3.8147e-06|  0.00%|    """LMTP - Local Mail Transfer Protocol
  1070|         0|            0|            0|  0.00%|
  1071|         0|            0|            0|  0.00%|    The LMTP protocol, which is very similar to ESMTP, is heavily based
  1072|         0|            0|            0|  0.00%|    on the standard SMTP client. It's common to use Unix sockets for
  1073|         0|            0|            0|  0.00%|    LMTP, so our connect() method must support that as well as a regular
  1074|         0|            0|            0|  0.00%|    host:port server.  local_hostname and source_address have the same
  1075|         0|            0|            0|  0.00%|    meaning as they do in the SMTP class.  To specify a Unix socket,
  1076|         0|            0|            0|  0.00%|    you must use an absolute path as the host, starting with a '/'.
  1077|         0|            0|            0|  0.00%|
  1078|         0|            0|            0|  0.00%|    Authentication is supported, using the regular SMTP mechanism. When
  1079|         0|            0|            0|  0.00%|    using a Unix socket, LMTP generally don't support or require any
  1080|         0|            0|            0|  0.00%|    authentication, but your mileage might vary."""
  1081|         0|            0|            0|  0.00%|
  1082|         1|  4.05312e-06|  4.05312e-06|  0.00%|    ehlo_msg = "lhlo"
  1083|         0|            0|            0|  0.00%|
  1084|         2|   1.0252e-05|    5.126e-06|  0.00%|    def __init__(self, host='', port=LMTP_PORT, local_hostname=None,
  1085|         1|  9.05991e-06|  9.05991e-06|  0.00%|                 source_address=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT):
  1086|         0|            0|            0|  0.00%|        """Initialize a new instance."""
  1087|         0|            0|            0|  0.00%|        super().__init__(host, port, local_hostname=local_hostname,
  1088|         0|            0|            0|  0.00%|                         source_address=source_address, timeout=timeout)
  1089|         0|            0|            0|  0.00%|
  1090|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def connect(self, host='localhost', port=0, source_address=None):
  1091|         0|            0|            0|  0.00%|        """Connect to the LMTP daemon, on either a Unix or a TCP socket."""
  1092|         0|            0|            0|  0.00%|        if host[0] != '/':
  1093|         0|            0|            0|  0.00%|            return super().connect(host, port, source_address=source_address)
  1094|         0|            0|            0|  0.00%|
  1095|         0|            0|            0|  0.00%|        if self.timeout is not None and not self.timeout:
  1096|         0|            0|            0|  0.00%|            raise ValueError('Non-blocking socket (timeout=0) is not supported')
  1097|         0|            0|            0|  0.00%|
  1098|         0|            0|            0|  0.00%|        # Handle Unix-domain sockets.
  1099|         0|            0|            0|  0.00%|        try:
  1100|         0|            0|            0|  0.00%|            self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
  1101|         0|            0|            0|  0.00%|            if self.timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
  1102|         0|            0|            0|  0.00%|                self.sock.settimeout(self.timeout)
  1103|         0|            0|            0|  0.00%|            self.file = None
  1104|         0|            0|            0|  0.00%|            self.sock.connect(host)
  1105|         0|            0|            0|  0.00%|        except OSError:
  1106|         0|            0|            0|  0.00%|            if self.debuglevel > 0:
  1107|         0|            0|            0|  0.00%|                self._print_debug('connect fail:', host)
  1108|         0|            0|            0|  0.00%|            if self.sock:
  1109|         0|            0|            0|  0.00%|                self.sock.close()
  1110|         0|            0|            0|  0.00%|            self.sock = None
  1111|         0|            0|            0|  0.00%|            raise
  1112|         0|            0|            0|  0.00%|        (code, msg) = self.getreply()
  1113|         0|            0|            0|  0.00%|        if self.debuglevel > 0:
  1114|         0|            0|            0|  0.00%|            self._print_debug('connect:', msg)
  1115|         0|            0|            0|  0.00%|        return (code, msg)
  1116|         0|            0|            0|  0.00%|
  1117|         0|            0|            0|  0.00%|
  1118|         0|            0|            0|  0.00%|# Test the sendmail method, which tests most of the others.
  1119|         0|            0|            0|  0.00%|# Note: This always sends to localhost.
  1120|         1|  1.52588e-05|  1.52588e-05|  0.01%|if __name__ == '__main__':
  1121|         0|            0|            0|  0.00%|    def prompt(prompt):
  1122|         0|            0|            0|  0.00%|        sys.stdout.write(prompt + ": ")
  1123|         0|            0|            0|  0.00%|        sys.stdout.flush()
  1124|         0|            0|            0|  0.00%|        return sys.stdin.readline().strip()
  1125|         0|            0|            0|  0.00%|
  1126|         0|            0|            0|  0.00%|    fromaddr = prompt("From")
  1127|         0|            0|            0|  0.00%|    toaddrs = prompt("To").split(',')
  1128|         0|            0|            0|  0.00%|    print("Enter message, end with ^D:")
  1129|         0|            0|            0|  0.00%|    msg = ''
  1130|         0|            0|            0|  0.00%|    while 1:
  1131|         0|            0|            0|  0.00%|        line = sys.stdin.readline()
  1132|         0|            0|            0|  0.00%|        if not line:
  1133|         0|            0|            0|  0.00%|            break
  1134|         0|            0|            0|  0.00%|        msg = msg + line
  1135|         0|            0|            0|  0.00%|    print("Message length is %d" % len(msg))
  1136|         0|            0|            0|  0.00%|
  1137|         0|            0|            0|  0.00%|    server = SMTP('localhost')
  1138|         0|            0|            0|  0.00%|    server.set_debuglevel(1)
  1139|         0|            0|            0|  0.00%|    server.sendmail(fromaddr, toaddrs, msg)
  1140|         0|            0|            0|  0.00%|    server.quit()
File: /usr/lib/python3.10/collections/__init__.py
File duration: 0.00180531s (0.74%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|'''This module implements specialized container datatypes providing
     2|         0|            0|            0|  0.00%|alternatives to Python's general purpose built-in containers, dict,
     3|         0|            0|            0|  0.00%|list, set, and tuple.
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|* namedtuple   factory function for creating tuple subclasses with named fields
     6|         0|            0|            0|  0.00%|* deque        list-like container with fast appends and pops on either end
     7|         0|            0|            0|  0.00%|* ChainMap     dict-like class for creating a single view of multiple mappings
     8|         0|            0|            0|  0.00%|* Counter      dict subclass for counting hashable objects
     9|         0|            0|            0|  0.00%|* OrderedDict  dict subclass that remembers the order entries were added
    10|         0|            0|            0|  0.00%|* defaultdict  dict subclass that calls a factory function to supply missing values
    11|         0|            0|            0|  0.00%|* UserDict     wrapper around dictionary objects for easier dict subclassing
    12|         0|            0|            0|  0.00%|* UserList     wrapper around list objects for easier list subclassing
    13|         0|            0|            0|  0.00%|* UserString   wrapper around string objects for easier string subclassing
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|'''
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|__all__ = [
    18|         0|            0|            0|  0.00%|    'ChainMap',
    19|         0|            0|            0|  0.00%|    'Counter',
    20|         0|            0|            0|  0.00%|    'OrderedDict',
    21|         0|            0|            0|  0.00%|    'UserDict',
    22|         0|            0|            0|  0.00%|    'UserList',
    23|         0|            0|            0|  0.00%|    'UserString',
    24|         0|            0|            0|  0.00%|    'defaultdict',
    25|         0|            0|            0|  0.00%|    'deque',
    26|         0|            0|            0|  0.00%|    'namedtuple',
    27|         0|            0|            0|  0.00%|]
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|import _collections_abc
    30|         0|            0|            0|  0.00%|import sys as _sys
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|from itertools import chain as _chain
    33|         0|            0|            0|  0.00%|from itertools import repeat as _repeat
    34|         0|            0|            0|  0.00%|from itertools import starmap as _starmap
    35|         0|            0|            0|  0.00%|from keyword import iskeyword as _iskeyword
    36|         0|            0|            0|  0.00%|from operator import eq as _eq
    37|         0|            0|            0|  0.00%|from operator import itemgetter as _itemgetter
    38|         0|            0|            0|  0.00%|from reprlib import recursive_repr as _recursive_repr
    39|         0|            0|            0|  0.00%|from _weakref import proxy as _proxy
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|try:
    42|         0|            0|            0|  0.00%|    from _collections import deque
    43|         0|            0|            0|  0.00%|except ImportError:
    44|         0|            0|            0|  0.00%|    pass
    45|         0|            0|            0|  0.00%|else:
    46|         0|            0|            0|  0.00%|    _collections_abc.MutableSequence.register(deque)
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|try:
    49|         0|            0|            0|  0.00%|    from _collections import defaultdict
    50|         0|            0|            0|  0.00%|except ImportError:
    51|         0|            0|            0|  0.00%|    pass
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|################################################################################
    55|         0|            0|            0|  0.00%|### OrderedDict
    56|         0|            0|            0|  0.00%|################################################################################
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|class _OrderedDictKeysView(_collections_abc.KeysView):
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|    def __reversed__(self):
    61|         0|            0|            0|  0.00%|        yield from reversed(self._mapping)
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|class _OrderedDictItemsView(_collections_abc.ItemsView):
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|    def __reversed__(self):
    66|         0|            0|            0|  0.00%|        for key in reversed(self._mapping):
    67|         0|            0|            0|  0.00%|            yield (key, self._mapping[key])
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|class _OrderedDictValuesView(_collections_abc.ValuesView):
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|    def __reversed__(self):
    72|         0|            0|            0|  0.00%|        for key in reversed(self._mapping):
    73|         0|            0|            0|  0.00%|            yield self._mapping[key]
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|class _Link(object):
    76|         0|            0|            0|  0.00%|    __slots__ = 'prev', 'next', 'key', '__weakref__'
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|class OrderedDict(dict):
    79|         0|            0|            0|  0.00%|    'Dictionary that remembers insertion order'
    80|         0|            0|            0|  0.00%|    # An inherited dict maps keys to values.
    81|         0|            0|            0|  0.00%|    # The inherited dict provides __getitem__, __len__, __contains__, and get.
    82|         0|            0|            0|  0.00%|    # The remaining methods are order-aware.
    83|         0|            0|            0|  0.00%|    # Big-O running times for all methods are the same as regular dictionaries.
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|    # The internal self.__map dict maps keys to links in a doubly linked list.
    86|         0|            0|            0|  0.00%|    # The circular doubly linked list starts and ends with a sentinel element.
    87|         0|            0|            0|  0.00%|    # The sentinel element never gets deleted (this simplifies the algorithm).
    88|         0|            0|            0|  0.00%|    # The sentinel is in self.__hardroot with a weakref proxy in self.__root.
    89|         0|            0|            0|  0.00%|    # The prev links are weakref proxies (to prevent circular references).
    90|         0|            0|            0|  0.00%|    # Individual links are kept alive by the hard reference in self.__map.
    91|         0|            0|            0|  0.00%|    # Those hard references disappear when a key is deleted from an OrderedDict.
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|    def __init__(self, other=(), /, **kwds):
    94|         0|            0|            0|  0.00%|        '''Initialize an ordered dictionary.  The signature is the same as
    95|         0|            0|            0|  0.00%|        regular dictionaries.  Keyword argument order is preserved.
    96|         0|            0|            0|  0.00%|        '''
    97|         0|            0|            0|  0.00%|        try:
    98|         0|            0|            0|  0.00%|            self.__root
    99|         0|            0|            0|  0.00%|        except AttributeError:
   100|         0|            0|            0|  0.00%|            self.__hardroot = _Link()
   101|         0|            0|            0|  0.00%|            self.__root = root = _proxy(self.__hardroot)
   102|         0|            0|            0|  0.00%|            root.prev = root.next = root
   103|         0|            0|            0|  0.00%|            self.__map = {}
   104|         0|            0|            0|  0.00%|        self.__update(other, **kwds)
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|    def __setitem__(self, key, value,
   107|         0|            0|            0|  0.00%|                    dict_setitem=dict.__setitem__, proxy=_proxy, Link=_Link):
   108|         0|            0|            0|  0.00%|        'od.__setitem__(i, y) <==> od[i]=y'
   109|         0|            0|            0|  0.00%|        # Setting a new item creates a new link at the end of the linked list,
   110|         0|            0|            0|  0.00%|        # and the inherited dictionary is updated with the new key/value pair.
   111|         0|            0|            0|  0.00%|        if key not in self:
   112|         0|            0|            0|  0.00%|            self.__map[key] = link = Link()
   113|         0|            0|            0|  0.00%|            root = self.__root
   114|         0|            0|            0|  0.00%|            last = root.prev
   115|         0|            0|            0|  0.00%|            link.prev, link.next, link.key = last, root, key
   116|         0|            0|            0|  0.00%|            last.next = link
   117|         0|            0|            0|  0.00%|            root.prev = proxy(link)
   118|         0|            0|            0|  0.00%|        dict_setitem(self, key, value)
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|    def __delitem__(self, key, dict_delitem=dict.__delitem__):
   121|         0|            0|            0|  0.00%|        'od.__delitem__(y) <==> del od[y]'
   122|         0|            0|            0|  0.00%|        # Deleting an existing item uses self.__map to find the link which gets
   123|         0|            0|            0|  0.00%|        # removed by updating the links in the predecessor and successor nodes.
   124|         0|            0|            0|  0.00%|        dict_delitem(self, key)
   125|         0|            0|            0|  0.00%|        link = self.__map.pop(key)
   126|         0|            0|            0|  0.00%|        link_prev = link.prev
   127|         0|            0|            0|  0.00%|        link_next = link.next
   128|         0|            0|            0|  0.00%|        link_prev.next = link_next
   129|         0|            0|            0|  0.00%|        link_next.prev = link_prev
   130|         0|            0|            0|  0.00%|        link.prev = None
   131|         0|            0|            0|  0.00%|        link.next = None
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|    def __iter__(self):
   134|         0|            0|            0|  0.00%|        'od.__iter__() <==> iter(od)'
   135|         0|            0|            0|  0.00%|        # Traverse the linked list in order.
   136|         0|            0|            0|  0.00%|        root = self.__root
   137|         0|            0|            0|  0.00%|        curr = root.next
   138|         0|            0|            0|  0.00%|        while curr is not root:
   139|         0|            0|            0|  0.00%|            yield curr.key
   140|         0|            0|            0|  0.00%|            curr = curr.next
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|    def __reversed__(self):
   143|         0|            0|            0|  0.00%|        'od.__reversed__() <==> reversed(od)'
   144|         0|            0|            0|  0.00%|        # Traverse the linked list in reverse order.
   145|         0|            0|            0|  0.00%|        root = self.__root
   146|         0|            0|            0|  0.00%|        curr = root.prev
   147|         0|            0|            0|  0.00%|        while curr is not root:
   148|         0|            0|            0|  0.00%|            yield curr.key
   149|         0|            0|            0|  0.00%|            curr = curr.prev
   150|         0|            0|            0|  0.00%|
   151|         0|            0|            0|  0.00%|    def clear(self):
   152|         0|            0|            0|  0.00%|        'od.clear() -> None.  Remove all items from od.'
   153|         0|            0|            0|  0.00%|        root = self.__root
   154|         0|            0|            0|  0.00%|        root.prev = root.next = root
   155|         0|            0|            0|  0.00%|        self.__map.clear()
   156|         0|            0|            0|  0.00%|        dict.clear(self)
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|    def popitem(self, last=True):
   159|         0|            0|            0|  0.00%|        '''Remove and return a (key, value) pair from the dictionary.
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|        Pairs are returned in LIFO order if last is true or FIFO order if false.
   162|         0|            0|            0|  0.00%|        '''
   163|         0|            0|            0|  0.00%|        if not self:
   164|         0|            0|            0|  0.00%|            raise KeyError('dictionary is empty')
   165|         0|            0|            0|  0.00%|        root = self.__root
   166|         0|            0|            0|  0.00%|        if last:
   167|         0|            0|            0|  0.00%|            link = root.prev
   168|         0|            0|            0|  0.00%|            link_prev = link.prev
   169|         0|            0|            0|  0.00%|            link_prev.next = root
   170|         0|            0|            0|  0.00%|            root.prev = link_prev
   171|         0|            0|            0|  0.00%|        else:
   172|         0|            0|            0|  0.00%|            link = root.next
   173|         0|            0|            0|  0.00%|            link_next = link.next
   174|         0|            0|            0|  0.00%|            root.next = link_next
   175|         0|            0|            0|  0.00%|            link_next.prev = root
   176|         0|            0|            0|  0.00%|        key = link.key
   177|         0|            0|            0|  0.00%|        del self.__map[key]
   178|         0|            0|            0|  0.00%|        value = dict.pop(self, key)
   179|         0|            0|            0|  0.00%|        return key, value
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|    def move_to_end(self, key, last=True):
   182|         0|            0|            0|  0.00%|        '''Move an existing element to the end (or beginning if last is false).
   183|         0|            0|            0|  0.00%|
   184|         0|            0|            0|  0.00%|        Raise KeyError if the element does not exist.
   185|         0|            0|            0|  0.00%|        '''
   186|         0|            0|            0|  0.00%|        link = self.__map[key]
   187|         0|            0|            0|  0.00%|        link_prev = link.prev
   188|         0|            0|            0|  0.00%|        link_next = link.next
   189|         0|            0|            0|  0.00%|        soft_link = link_next.prev
   190|         0|            0|            0|  0.00%|        link_prev.next = link_next
   191|         0|            0|            0|  0.00%|        link_next.prev = link_prev
   192|         0|            0|            0|  0.00%|        root = self.__root
   193|         0|            0|            0|  0.00%|        if last:
   194|         0|            0|            0|  0.00%|            last = root.prev
   195|         0|            0|            0|  0.00%|            link.prev = last
   196|         0|            0|            0|  0.00%|            link.next = root
   197|         0|            0|            0|  0.00%|            root.prev = soft_link
   198|         0|            0|            0|  0.00%|            last.next = link
   199|         0|            0|            0|  0.00%|        else:
   200|         0|            0|            0|  0.00%|            first = root.next
   201|         0|            0|            0|  0.00%|            link.prev = root
   202|         0|            0|            0|  0.00%|            link.next = first
   203|         0|            0|            0|  0.00%|            first.prev = soft_link
   204|         0|            0|            0|  0.00%|            root.next = link
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|    def __sizeof__(self):
   207|         0|            0|            0|  0.00%|        sizeof = _sys.getsizeof
   208|         0|            0|            0|  0.00%|        n = len(self) + 1                       # number of links including root
   209|         0|            0|            0|  0.00%|        size = sizeof(self.__dict__)            # instance dictionary
   210|         0|            0|            0|  0.00%|        size += sizeof(self.__map) * 2          # internal dict and inherited dict
   211|         0|            0|            0|  0.00%|        size += sizeof(self.__hardroot) * n     # link objects
   212|         0|            0|            0|  0.00%|        size += sizeof(self.__root) * n         # proxy objects
   213|         0|            0|            0|  0.00%|        return size
   214|         0|            0|            0|  0.00%|
   215|         0|            0|            0|  0.00%|    update = __update = _collections_abc.MutableMapping.update
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|    def keys(self):
   218|         0|            0|            0|  0.00%|        "D.keys() -> a set-like object providing a view on D's keys"
   219|         0|            0|            0|  0.00%|        return _OrderedDictKeysView(self)
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|    def items(self):
   222|         0|            0|            0|  0.00%|        "D.items() -> a set-like object providing a view on D's items"
   223|         0|            0|            0|  0.00%|        return _OrderedDictItemsView(self)
   224|         0|            0|            0|  0.00%|
   225|         0|            0|            0|  0.00%|    def values(self):
   226|         0|            0|            0|  0.00%|        "D.values() -> an object providing a view on D's values"
   227|         0|            0|            0|  0.00%|        return _OrderedDictValuesView(self)
   228|         0|            0|            0|  0.00%|
   229|         0|            0|            0|  0.00%|    __ne__ = _collections_abc.MutableMapping.__ne__
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|    __marker = object()
   232|         0|            0|            0|  0.00%|
   233|         0|            0|            0|  0.00%|    def pop(self, key, default=__marker):
   234|         0|            0|            0|  0.00%|        '''od.pop(k[,d]) -> v, remove specified key and return the corresponding
   235|         0|            0|            0|  0.00%|        value.  If key is not found, d is returned if given, otherwise KeyError
   236|         0|            0|            0|  0.00%|        is raised.
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|        '''
   239|         0|            0|            0|  0.00%|        if key in self:
   240|         0|            0|            0|  0.00%|            result = self[key]
   241|         0|            0|            0|  0.00%|            del self[key]
   242|         0|            0|            0|  0.00%|            return result
   243|         0|            0|            0|  0.00%|        if default is self.__marker:
   244|         0|            0|            0|  0.00%|            raise KeyError(key)
   245|         0|            0|            0|  0.00%|        return default
   246|         0|            0|            0|  0.00%|
   247|         0|            0|            0|  0.00%|    def setdefault(self, key, default=None):
   248|         0|            0|            0|  0.00%|        '''Insert key with a value of default if key is not in the dictionary.
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|        Return the value for key if key is in the dictionary, else default.
   251|         0|            0|            0|  0.00%|        '''
   252|         0|            0|            0|  0.00%|        if key in self:
   253|         0|            0|            0|  0.00%|            return self[key]
   254|         0|            0|            0|  0.00%|        self[key] = default
   255|         0|            0|            0|  0.00%|        return default
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|    @_recursive_repr()
   258|         0|            0|            0|  0.00%|    def __repr__(self):
   259|         0|            0|            0|  0.00%|        'od.__repr__() <==> repr(od)'
   260|         0|            0|            0|  0.00%|        if not self:
   261|         0|            0|            0|  0.00%|            return '%s()' % (self.__class__.__name__,)
   262|         0|            0|            0|  0.00%|        return '%s(%r)' % (self.__class__.__name__, list(self.items()))
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|    def __reduce__(self):
   265|         0|            0|            0|  0.00%|        'Return state information for pickling'
   266|         0|            0|            0|  0.00%|        inst_dict = vars(self).copy()
   267|         0|            0|            0|  0.00%|        for k in vars(OrderedDict()):
   268|         0|            0|            0|  0.00%|            inst_dict.pop(k, None)
   269|         0|            0|            0|  0.00%|        return self.__class__, (), inst_dict or None, None, iter(self.items())
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|    def copy(self):
   272|         0|            0|            0|  0.00%|        'od.copy() -> a shallow copy of od'
   273|         0|            0|            0|  0.00%|        return self.__class__(self)
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    @classmethod
   276|         0|            0|            0|  0.00%|    def fromkeys(cls, iterable, value=None):
   277|         0|            0|            0|  0.00%|        '''Create a new ordered dictionary with keys from iterable and values set to value.
   278|         0|            0|            0|  0.00%|        '''
   279|         0|            0|            0|  0.00%|        self = cls()
   280|         0|            0|            0|  0.00%|        for key in iterable:
   281|         0|            0|            0|  0.00%|            self[key] = value
   282|         0|            0|            0|  0.00%|        return self
   283|         0|            0|            0|  0.00%|
   284|         0|            0|            0|  0.00%|    def __eq__(self, other):
   285|         0|            0|            0|  0.00%|        '''od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive
   286|         0|            0|            0|  0.00%|        while comparison to a regular mapping is order-insensitive.
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|        '''
   289|         0|            0|            0|  0.00%|        if isinstance(other, OrderedDict):
   290|         0|            0|            0|  0.00%|            return dict.__eq__(self, other) and all(map(_eq, self, other))
   291|         0|            0|            0|  0.00%|        return dict.__eq__(self, other)
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|    def __ior__(self, other):
   294|         0|            0|            0|  0.00%|        self.update(other)
   295|         0|            0|            0|  0.00%|        return self
   296|         0|            0|            0|  0.00%|
   297|         0|            0|            0|  0.00%|    def __or__(self, other):
   298|         0|            0|            0|  0.00%|        if not isinstance(other, dict):
   299|         0|            0|            0|  0.00%|            return NotImplemented
   300|         0|            0|            0|  0.00%|        new = self.__class__(self)
   301|         0|            0|            0|  0.00%|        new.update(other)
   302|         0|            0|            0|  0.00%|        return new
   303|         0|            0|            0|  0.00%|
   304|         0|            0|            0|  0.00%|    def __ror__(self, other):
   305|         0|            0|            0|  0.00%|        if not isinstance(other, dict):
   306|         0|            0|            0|  0.00%|            return NotImplemented
   307|         0|            0|            0|  0.00%|        new = self.__class__(other)
   308|         0|            0|            0|  0.00%|        new.update(self)
   309|         0|            0|            0|  0.00%|        return new
   310|         0|            0|            0|  0.00%|
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|try:
   313|         0|            0|            0|  0.00%|    from _collections import OrderedDict
   314|         0|            0|            0|  0.00%|except ImportError:
   315|         0|            0|            0|  0.00%|    # Leave the pure Python version in place.
   316|         0|            0|            0|  0.00%|    pass
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|################################################################################
   320|         0|            0|            0|  0.00%|### namedtuple
   321|         0|            0|            0|  0.00%|################################################################################
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|try:
   324|         0|            0|            0|  0.00%|    from _collections import _tuplegetter
   325|         0|            0|            0|  0.00%|except ImportError:
   326|         0|            0|            0|  0.00%|    _tuplegetter = lambda index, doc: property(_itemgetter(index), doc=doc)
   327|         0|            0|            0|  0.00%|
   328|         2|  4.60148e-05|  2.30074e-05|  0.02%|def namedtuple(typename, field_names, *, rename=False, defaults=None, module=None):
   329|         0|            0|            0|  0.00%|    """Returns a new subclass of tuple with named fields.
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|    >>> Point = namedtuple('Point', ['x', 'y'])
   332|         0|            0|            0|  0.00%|    >>> Point.__doc__                   # docstring for the new class
   333|         0|            0|            0|  0.00%|    'Point(x, y)'
   334|         0|            0|            0|  0.00%|    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
   335|         0|            0|            0|  0.00%|    >>> p[0] + p[1]                     # indexable like a plain tuple
   336|         0|            0|            0|  0.00%|    33
   337|         0|            0|            0|  0.00%|    >>> x, y = p                        # unpack like a regular tuple
   338|         0|            0|            0|  0.00%|    >>> x, y
   339|         0|            0|            0|  0.00%|    (11, 22)
   340|         0|            0|            0|  0.00%|    >>> p.x + p.y                       # fields also accessible by name
   341|         0|            0|            0|  0.00%|    33
   342|         0|            0|            0|  0.00%|    >>> d = p._asdict()                 # convert to a dictionary
   343|         0|            0|            0|  0.00%|    >>> d['x']
   344|         0|            0|            0|  0.00%|    11
   345|         0|            0|            0|  0.00%|    >>> Point(**d)                      # convert from a dictionary
   346|         0|            0|            0|  0.00%|    Point(x=11, y=22)
   347|         0|            0|            0|  0.00%|    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
   348|         0|            0|            0|  0.00%|    Point(x=100, y=22)
   349|         0|            0|            0|  0.00%|
   350|         0|            0|            0|  0.00%|    """
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|    # Validate the field names.  At the user's option, either generate an error
   353|         0|            0|            0|  0.00%|    # message or automatically replace the field name with a valid name.
   354|         2|  2.12193e-05|  1.06096e-05|  0.01%|    if isinstance(field_names, str):
   355|         2|   1.7643e-05|  8.82149e-06|  0.01%|        field_names = field_names.replace(',', ' ').split()
   356|         2|  1.66893e-05|  8.34465e-06|  0.01%|    field_names = list(map(str, field_names))
   357|         2|  1.43051e-05|  7.15256e-06|  0.01%|    typename = _sys.intern(str(typename))
   358|         0|            0|            0|  0.00%|
   359|         2|  1.21593e-05|  6.07967e-06|  0.01%|    if rename:
   360|         0|            0|            0|  0.00%|        seen = set()
   361|         0|            0|            0|  0.00%|        for index, name in enumerate(field_names):
   362|         0|            0|            0|  0.00%|            if (not name.isidentifier()
   363|         0|            0|            0|  0.00%|                or _iskeyword(name)
   364|         0|            0|            0|  0.00%|                or name.startswith('_')
   365|         0|            0|            0|  0.00%|                or name in seen):
   366|         0|            0|            0|  0.00%|                field_names[index] = f'_{index}'
   367|         0|            0|            0|  0.00%|            seen.add(name)
   368|         0|            0|            0|  0.00%|
   369|        14|  8.01086e-05|  5.72205e-06|  0.03%|    for name in [typename] + field_names:
   370|        12|  7.00951e-05|  5.84126e-06|  0.03%|        if type(name) is not str:
   371|         0|            0|            0|  0.00%|            raise TypeError('Type names and field names must be strings')
   372|        12|  6.93798e-05|  5.78165e-06|  0.03%|        if not name.isidentifier():
   373|         0|            0|            0|  0.00%|            raise ValueError('Type names and field names must be valid '
   374|         0|            0|            0|  0.00%|                             f'identifiers: {name!r}')
   375|        12|  7.10487e-05|  5.92073e-06|  0.03%|        if _iskeyword(name):
   376|         0|            0|            0|  0.00%|            raise ValueError('Type names and field names cannot be a '
   377|         0|            0|            0|  0.00%|                             f'keyword: {name!r}')
   378|         0|            0|            0|  0.00%|
   379|         2|  1.16825e-05|  5.84126e-06|  0.00%|    seen = set()
   380|        12|  6.91414e-05|  5.76178e-06|  0.03%|    for name in field_names:
   381|        10|   5.6982e-05|   5.6982e-06|  0.02%|        if name.startswith('_') and not rename:
   382|         0|            0|            0|  0.00%|            raise ValueError('Field names cannot start with an underscore: '
   383|         0|            0|            0|  0.00%|                             f'{name!r}')
   384|        10|  5.57899e-05|  5.57899e-06|  0.02%|        if name in seen:
   385|         0|            0|            0|  0.00%|            raise ValueError(f'Encountered duplicate field name: {name!r}')
   386|        10|  5.60284e-05|  5.60284e-06|  0.02%|        seen.add(name)
   387|         0|            0|            0|  0.00%|
   388|         2|  1.07288e-05|  5.36442e-06|  0.00%|    field_defaults = {}
   389|         2|  1.71661e-05|  8.58307e-06|  0.01%|    if defaults is not None:
   390|         0|            0|            0|  0.00%|        defaults = tuple(defaults)
   391|         0|            0|            0|  0.00%|        if len(defaults) > len(field_names):
   392|         0|            0|            0|  0.00%|            raise TypeError('Got more default values than field names')
   393|         0|            0|            0|  0.00%|        field_defaults = dict(reversed(list(zip(reversed(field_names),
   394|         0|            0|            0|  0.00%|                                                reversed(defaults)))))
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|    # Variables used in the methods and docstrings
   397|         2|  1.50204e-05|  7.51019e-06|  0.01%|    field_names = tuple(map(_sys.intern, field_names))
   398|         2|  1.23978e-05|  6.19888e-06|  0.01%|    num_fields = len(field_names)
   399|         2|  1.33514e-05|  6.67572e-06|  0.01%|    arg_list = ', '.join(field_names)
   400|         2|  1.21593e-05|  6.07967e-06|  0.01%|    if num_fields == 1:
   401|         0|            0|            0|  0.00%|        arg_list += ','
   402|        26|  0.000169992|  6.53817e-06|  0.07%|    repr_fmt = '(' + ', '.join(f'{name}=%r' for name in field_names) + ')'
(call)|        12|  8.13007e-05|  6.77506e-06|  0.03%|# /usr/lib/python3.10/collections/__init__.py:402 <genexpr>
   403|         2|  1.26362e-05|  6.31809e-06|  0.01%|    tuple_new = tuple.__new__
   404|         2|   1.3113e-05|  6.55651e-06|  0.01%|    _dict, _tuple, _len, _map, _zip = dict, tuple, len, map, zip
   405|         0|            0|            0|  0.00%|
   406|         0|            0|            0|  0.00%|    # Create all the named tuple methods to be added to the class namespace
   407|         0|            0|            0|  0.00%|
   408|         2|  1.21593e-05|  6.07967e-06|  0.01%|    namespace = {
   409|         2|  1.16825e-05|  5.84126e-06|  0.00%|        '_tuple_new': tuple_new,
   410|         2|  1.21593e-05|  6.07967e-06|  0.01%|        '__builtins__': {},
   411|         2|  1.09673e-05|  5.48363e-06|  0.00%|        '__name__': f'namedtuple_{typename}',
   412|         0|            0|            0|  0.00%|    }
   413|         2|  1.16825e-05|  5.84126e-06|  0.00%|    code = f'lambda _cls, {arg_list}: _tuple_new(_cls, ({arg_list}))'
   414|         2|  0.000124931|  6.24657e-05|  0.05%|    __new__ = eval(code, namespace)
(call)|         1|   1.3113e-05|   1.3113e-05|  0.01%|# <string>:1 <module>
(call)|         1|  2.21729e-05|  2.21729e-05|  0.01%|# <string>_0:1 <module>
   415|         2|  1.26362e-05|  6.31809e-06|  0.01%|    __new__.__name__ = '__new__'
   416|         2|  1.23978e-05|  6.19888e-06|  0.01%|    __new__.__doc__ = f'Create new instance of {typename}({arg_list})'
   417|         2|  1.14441e-05|  5.72205e-06|  0.00%|    if defaults is not None:
   418|         0|            0|            0|  0.00%|        __new__.__defaults__ = defaults
   419|         0|            0|            0|  0.00%|
   420|         2|  1.07288e-05|  5.36442e-06|  0.00%|    @classmethod
   421|         2|  1.33514e-05|  6.67572e-06|  0.01%|    def _make(cls, iterable):
   422|         0|            0|            0|  0.00%|        result = tuple_new(cls, iterable)
   423|         0|            0|            0|  0.00%|        if _len(result) != num_fields:
   424|         0|            0|            0|  0.00%|            raise TypeError(f'Expected {num_fields} arguments, got {len(result)}')
   425|         0|            0|            0|  0.00%|        return result
   426|         0|            0|            0|  0.00%|
   427|         2|  1.14441e-05|  5.72205e-06|  0.00%|    _make.__func__.__doc__ = (f'Make a new {typename} object from a sequence '
   428|         0|            0|            0|  0.00%|                              'or iterable')
   429|         0|            0|            0|  0.00%|
   430|         2|  1.16825e-05|  5.84126e-06|  0.00%|    def _replace(self, /, **kwds):
   431|         0|            0|            0|  0.00%|        result = self._make(_map(kwds.pop, field_names, self))
   432|         0|            0|            0|  0.00%|        if kwds:
   433|         0|            0|            0|  0.00%|            raise ValueError(f'Got unexpected field names: {list(kwds)!r}')
   434|         0|            0|            0|  0.00%|        return result
   435|         0|            0|            0|  0.00%|
   436|         2|  1.28746e-05|   6.4373e-06|  0.01%|    _replace.__doc__ = (f'Return a new {typename} object replacing specified '
   437|         0|            0|            0|  0.00%|                        'fields with new values')
   438|         0|            0|            0|  0.00%|
   439|         2|  1.04904e-05|  5.24521e-06|  0.00%|    def __repr__(self):
   440|         0|            0|            0|  0.00%|        'Return a nicely formatted representation string'
   441|         0|            0|            0|  0.00%|        return self.__class__.__name__ + repr_fmt % self
   442|         0|            0|            0|  0.00%|
   443|         2|  1.09673e-05|  5.48363e-06|  0.00%|    def _asdict(self):
   444|         0|            0|            0|  0.00%|        'Return a new dict which maps field names to their values.'
   445|         0|            0|            0|  0.00%|        return _dict(_zip(self._fields, self))
   446|         0|            0|            0|  0.00%|
   447|         2|  1.04904e-05|  5.24521e-06|  0.00%|    def __getnewargs__(self):
   448|         0|            0|            0|  0.00%|        'Return self as a plain tuple.  Used by copy and pickle.'
   449|         0|            0|            0|  0.00%|        return _tuple(self)
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|    # Modify function metadata to help with introspection and debugging
   452|        14|  6.50883e-05|  4.64916e-06|  0.03%|    for method in (
   453|         2|  1.00136e-05|  5.00679e-06|  0.00%|        __new__,
   454|         2|   1.0252e-05|    5.126e-06|  0.00%|        _make.__func__,
   455|         2|  1.00136e-05|  5.00679e-06|  0.00%|        _replace,
   456|         2|  1.09673e-05|  5.48363e-06|  0.00%|        __repr__,
   457|         2|  1.00136e-05|  5.00679e-06|  0.00%|        _asdict,
   458|         2|  9.53674e-06|  4.76837e-06|  0.00%|        __getnewargs__,
   459|         0|            0|            0|  0.00%|    ):
   460|        12|  5.76973e-05|  4.80811e-06|  0.02%|        method.__qualname__ = f'{typename}.{method.__name__}'
   461|         0|            0|            0|  0.00%|
   462|         0|            0|            0|  0.00%|    # Build-up the class namespace dictionary
   463|         0|            0|            0|  0.00%|    # and use type() to build the result class
   464|         2|  1.04904e-05|  5.24521e-06|  0.00%|    class_namespace = {
   465|         2|  8.82149e-06|  4.41074e-06|  0.00%|        '__doc__': f'{typename}({arg_list})',
   466|         2|  1.04904e-05|  5.24521e-06|  0.00%|        '__slots__': (),
   467|         2|  1.00136e-05|  5.00679e-06|  0.00%|        '_fields': field_names,
   468|         2|  9.53674e-06|  4.76837e-06|  0.00%|        '_field_defaults': field_defaults,
   469|         2|  1.00136e-05|  5.00679e-06|  0.00%|        '__new__': __new__,
   470|         2|  9.77516e-06|  4.88758e-06|  0.00%|        '_make': _make,
   471|         2|  9.53674e-06|  4.76837e-06|  0.00%|        '_replace': _replace,
   472|         2|  9.77516e-06|  4.88758e-06|  0.00%|        '__repr__': __repr__,
   473|         2|  9.53674e-06|  4.76837e-06|  0.00%|        '_asdict': _asdict,
   474|         2|  9.29832e-06|  4.64916e-06|  0.00%|        '__getnewargs__': __getnewargs__,
   475|         2|  1.07288e-05|  5.36442e-06|  0.00%|        '__match_args__': field_names,
   476|         0|            0|            0|  0.00%|    }
   477|        12|  5.76973e-05|  4.80811e-06|  0.02%|    for index, name in enumerate(field_names):
   478|        10|  4.88758e-05|  4.88758e-06|  0.02%|        doc = _sys.intern(f'Alias for field number {index}')
   479|        10|  4.72069e-05|  4.72069e-06|  0.02%|        class_namespace[name] = _tuplegetter(index, doc)
   480|         0|            0|            0|  0.00%|
   481|         2|  2.98023e-05|  1.49012e-05|  0.01%|    result = type(typename, (tuple,), class_namespace)
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|    # For pickling to work, the __module__ variable needs to be set to the frame
   484|         0|            0|            0|  0.00%|    # where the named tuple is created.  Bypass this step in environments where
   485|         0|            0|            0|  0.00%|    # sys._getframe is not defined (Jython for example) or sys._getframe is not
   486|         0|            0|            0|  0.00%|    # defined for arguments greater than 0 (IronPython), or where the user has
   487|         0|            0|            0|  0.00%|    # specified a particular module.
   488|         2|   1.0252e-05|    5.126e-06|  0.00%|    if module is None:
   489|         2|   1.0252e-05|    5.126e-06|  0.00%|        try:
   490|         2|   1.3113e-05|  6.55651e-06|  0.01%|            module = _sys._getframe(1).f_globals.get('__name__', '__main__')
   491|         0|            0|            0|  0.00%|        except (AttributeError, ValueError):
   492|         0|            0|            0|  0.00%|            pass
   493|         2|  9.77516e-06|  4.88758e-06|  0.00%|    if module is not None:
   494|         2|  9.77516e-06|  4.88758e-06|  0.00%|        result.__module__ = module
   495|         0|            0|            0|  0.00%|
   496|         2|  1.00136e-05|  5.00679e-06|  0.00%|    return result
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|
   499|         0|            0|            0|  0.00%|########################################################################
   500|         0|            0|            0|  0.00%|###  Counter
   501|         0|            0|            0|  0.00%|########################################################################
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|def _count_elements(mapping, iterable):
   504|         0|            0|            0|  0.00%|    'Tally elements from the iterable.'
   505|         0|            0|            0|  0.00%|    mapping_get = mapping.get
   506|         0|            0|            0|  0.00%|    for elem in iterable:
   507|         0|            0|            0|  0.00%|        mapping[elem] = mapping_get(elem, 0) + 1
   508|         0|            0|            0|  0.00%|
   509|         0|            0|            0|  0.00%|try:                                    # Load C helper function if available
   510|         0|            0|            0|  0.00%|    from _collections import _count_elements
   511|         0|            0|            0|  0.00%|except ImportError:
   512|         0|            0|            0|  0.00%|    pass
   513|         0|            0|            0|  0.00%|
   514|         0|            0|            0|  0.00%|class Counter(dict):
   515|         0|            0|            0|  0.00%|    '''Dict subclass for counting hashable items.  Sometimes called a bag
   516|         0|            0|            0|  0.00%|    or multiset.  Elements are stored as dictionary keys and their counts
   517|         0|            0|            0|  0.00%|    are stored as dictionary values.
   518|         0|            0|            0|  0.00%|
   519|         0|            0|            0|  0.00%|    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string
   520|         0|            0|            0|  0.00%|
   521|         0|            0|            0|  0.00%|    >>> c.most_common(3)                # three most common elements
   522|         0|            0|            0|  0.00%|    [('a', 5), ('b', 4), ('c', 3)]
   523|         0|            0|            0|  0.00%|    >>> sorted(c)                       # list all unique elements
   524|         0|            0|            0|  0.00%|    ['a', 'b', 'c', 'd', 'e']
   525|         0|            0|            0|  0.00%|    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
   526|         0|            0|            0|  0.00%|    'aaaaabbbbcccdde'
   527|         0|            0|            0|  0.00%|    >>> sum(c.values())                 # total of all counts
   528|         0|            0|            0|  0.00%|    15
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|    >>> c['a']                          # count of letter 'a'
   531|         0|            0|            0|  0.00%|    5
   532|         0|            0|            0|  0.00%|    >>> for elem in 'shazam':           # update counts from an iterable
   533|         0|            0|            0|  0.00%|    ...     c[elem] += 1                # by adding 1 to each element's count
   534|         0|            0|            0|  0.00%|    >>> c['a']                          # now there are seven 'a'
   535|         0|            0|            0|  0.00%|    7
   536|         0|            0|            0|  0.00%|    >>> del c['b']                      # remove all 'b'
   537|         0|            0|            0|  0.00%|    >>> c['b']                          # now there are zero 'b'
   538|         0|            0|            0|  0.00%|    0
   539|         0|            0|            0|  0.00%|
   540|         0|            0|            0|  0.00%|    >>> d = Counter('simsalabim')       # make another counter
   541|         0|            0|            0|  0.00%|    >>> c.update(d)                     # add in the second counter
   542|         0|            0|            0|  0.00%|    >>> c['a']                          # now there are nine 'a'
   543|         0|            0|            0|  0.00%|    9
   544|         0|            0|            0|  0.00%|
   545|         0|            0|            0|  0.00%|    >>> c.clear()                       # empty the counter
   546|         0|            0|            0|  0.00%|    >>> c
   547|         0|            0|            0|  0.00%|    Counter()
   548|         0|            0|            0|  0.00%|
   549|         0|            0|            0|  0.00%|    Note:  If a count is set to zero or reduced to zero, it will remain
   550|         0|            0|            0|  0.00%|    in the counter until the entry is deleted or the counter is cleared:
   551|         0|            0|            0|  0.00%|
   552|         0|            0|            0|  0.00%|    >>> c = Counter('aaabbc')
   553|         0|            0|            0|  0.00%|    >>> c['b'] -= 2                     # reduce the count of 'b' by two
   554|         0|            0|            0|  0.00%|    >>> c.most_common()                 # 'b' is still in, but its count is zero
   555|         0|            0|            0|  0.00%|    [('a', 3), ('c', 1), ('b', 0)]
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|    '''
   558|         0|            0|            0|  0.00%|    # References:
   559|         0|            0|            0|  0.00%|    #   http://en.wikipedia.org/wiki/Multiset
   560|         0|            0|            0|  0.00%|    #   http://www.gnu.org/software/smalltalk/manual-base/html_node/Bag.html
   561|         0|            0|            0|  0.00%|    #   http://www.demo2s.com/Tutorial/Cpp/0380__set-multiset/Catalog0380__set-multiset.htm
   562|         0|            0|            0|  0.00%|    #   http://code.activestate.com/recipes/259174/
   563|         0|            0|            0|  0.00%|    #   Knuth, TAOCP Vol. II section 4.6.3
   564|         0|            0|            0|  0.00%|
   565|         0|            0|            0|  0.00%|    def __init__(self, iterable=None, /, **kwds):
   566|         0|            0|            0|  0.00%|        '''Create a new, empty Counter object.  And if given, count elements
   567|         0|            0|            0|  0.00%|        from an input iterable.  Or, initialize the count from another mapping
   568|         0|            0|            0|  0.00%|        of elements to their counts.
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|        >>> c = Counter()                           # a new, empty counter
   571|         0|            0|            0|  0.00%|        >>> c = Counter('gallahad')                 # a new counter from an iterable
   572|         0|            0|            0|  0.00%|        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
   573|         0|            0|            0|  0.00%|        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args
   574|         0|            0|            0|  0.00%|
   575|         0|            0|            0|  0.00%|        '''
   576|         0|            0|            0|  0.00%|        super().__init__()
   577|         0|            0|            0|  0.00%|        self.update(iterable, **kwds)
   578|         0|            0|            0|  0.00%|
   579|         0|            0|            0|  0.00%|    def __missing__(self, key):
   580|         0|            0|            0|  0.00%|        'The count of elements not in the Counter is zero.'
   581|         0|            0|            0|  0.00%|        # Needed so that self[missing_item] does not raise KeyError
   582|         0|            0|            0|  0.00%|        return 0
   583|         0|            0|            0|  0.00%|
   584|         0|            0|            0|  0.00%|    def total(self):
   585|         0|            0|            0|  0.00%|        'Sum of the counts'
   586|         0|            0|            0|  0.00%|        return sum(self.values())
   587|         0|            0|            0|  0.00%|
   588|         0|            0|            0|  0.00%|    def most_common(self, n=None):
   589|         0|            0|            0|  0.00%|        '''List the n most common elements and their counts from the most
   590|         0|            0|            0|  0.00%|        common to the least.  If n is None, then list all element counts.
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|        >>> Counter('abracadabra').most_common(3)
   593|         0|            0|            0|  0.00%|        [('a', 5), ('b', 2), ('r', 2)]
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|        '''
   596|         0|            0|            0|  0.00%|        # Emulate Bag.sortedByCount from Smalltalk
   597|         0|            0|            0|  0.00%|        if n is None:
   598|         0|            0|            0|  0.00%|            return sorted(self.items(), key=_itemgetter(1), reverse=True)
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|        # Lazy import to speedup Python startup time
   601|         0|            0|            0|  0.00%|        import heapq
   602|         0|            0|            0|  0.00%|        return heapq.nlargest(n, self.items(), key=_itemgetter(1))
   603|         0|            0|            0|  0.00%|
   604|         0|            0|            0|  0.00%|    def elements(self):
   605|         0|            0|            0|  0.00%|        '''Iterator over elements repeating each as many times as its count.
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|        >>> c = Counter('ABCABC')
   608|         0|            0|            0|  0.00%|        >>> sorted(c.elements())
   609|         0|            0|            0|  0.00%|        ['A', 'A', 'B', 'B', 'C', 'C']
   610|         0|            0|            0|  0.00%|
   611|         0|            0|            0|  0.00%|        # Knuth's example for prime factors of 1836:  2**2 * 3**3 * 17**1
   612|         0|            0|            0|  0.00%|        >>> prime_factors = Counter({2: 2, 3: 3, 17: 1})
   613|         0|            0|            0|  0.00%|        >>> product = 1
   614|         0|            0|            0|  0.00%|        >>> for factor in prime_factors.elements():     # loop over factors
   615|         0|            0|            0|  0.00%|        ...     product *= factor                       # and multiply them
   616|         0|            0|            0|  0.00%|        >>> product
   617|         0|            0|            0|  0.00%|        1836
   618|         0|            0|            0|  0.00%|
   619|         0|            0|            0|  0.00%|        Note, if an element's count has been set to zero or is a negative
   620|         0|            0|            0|  0.00%|        number, elements() will ignore it.
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|        '''
   623|         0|            0|            0|  0.00%|        # Emulate Bag.do from Smalltalk and Multiset.begin from C++.
   624|         0|            0|            0|  0.00%|        return _chain.from_iterable(_starmap(_repeat, self.items()))
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|    # Override dict methods where necessary
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|    @classmethod
   629|         0|            0|            0|  0.00%|    def fromkeys(cls, iterable, v=None):
   630|         0|            0|            0|  0.00%|        # There is no equivalent method for counters because the semantics
   631|         0|            0|            0|  0.00%|        # would be ambiguous in cases such as Counter.fromkeys('aaabbc', v=2).
   632|         0|            0|            0|  0.00%|        # Initializing counters to zero values isn't necessary because zero
   633|         0|            0|            0|  0.00%|        # is already the default value for counter lookups.  Initializing
   634|         0|            0|            0|  0.00%|        # to one is easily accomplished with Counter(set(iterable)).  For
   635|         0|            0|            0|  0.00%|        # more exotic cases, create a dictionary first using a dictionary
   636|         0|            0|            0|  0.00%|        # comprehension or dict.fromkeys().
   637|         0|            0|            0|  0.00%|        raise NotImplementedError(
   638|         0|            0|            0|  0.00%|            'Counter.fromkeys() is undefined.  Use Counter(iterable) instead.')
   639|         0|            0|            0|  0.00%|
   640|         0|            0|            0|  0.00%|    def update(self, iterable=None, /, **kwds):
   641|         0|            0|            0|  0.00%|        '''Like dict.update() but add counts instead of replacing them.
   642|         0|            0|            0|  0.00%|
   643|         0|            0|            0|  0.00%|        Source can be an iterable, a dictionary, or another Counter instance.
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|        >>> c = Counter('which')
   646|         0|            0|            0|  0.00%|        >>> c.update('witch')           # add elements from another iterable
   647|         0|            0|            0|  0.00%|        >>> d = Counter('watch')
   648|         0|            0|            0|  0.00%|        >>> c.update(d)                 # add elements from another counter
   649|         0|            0|            0|  0.00%|        >>> c['h']                      # four 'h' in which, witch, and watch
   650|         0|            0|            0|  0.00%|        4
   651|         0|            0|            0|  0.00%|
   652|         0|            0|            0|  0.00%|        '''
   653|         0|            0|            0|  0.00%|        # The regular dict.update() operation makes no sense here because the
   654|         0|            0|            0|  0.00%|        # replace behavior results in the some of original untouched counts
   655|         0|            0|            0|  0.00%|        # being mixed-in with all of the other counts for a mismash that
   656|         0|            0|            0|  0.00%|        # doesn't have a straight-forward interpretation in most counting
   657|         0|            0|            0|  0.00%|        # contexts.  Instead, we implement straight-addition.  Both the inputs
   658|         0|            0|            0|  0.00%|        # and outputs are allowed to contain zero and negative counts.
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|        if iterable is not None:
   661|         0|            0|            0|  0.00%|            if isinstance(iterable, _collections_abc.Mapping):
   662|         0|            0|            0|  0.00%|                if self:
   663|         0|            0|            0|  0.00%|                    self_get = self.get
   664|         0|            0|            0|  0.00%|                    for elem, count in iterable.items():
   665|         0|            0|            0|  0.00%|                        self[elem] = count + self_get(elem, 0)
   666|         0|            0|            0|  0.00%|                else:
   667|         0|            0|            0|  0.00%|                    # fast path when counter is empty
   668|         0|            0|            0|  0.00%|                    super().update(iterable)
   669|         0|            0|            0|  0.00%|            else:
   670|         0|            0|            0|  0.00%|                _count_elements(self, iterable)
   671|         0|            0|            0|  0.00%|        if kwds:
   672|         0|            0|            0|  0.00%|            self.update(kwds)
   673|         0|            0|            0|  0.00%|
   674|         0|            0|            0|  0.00%|    def subtract(self, iterable=None, /, **kwds):
   675|         0|            0|            0|  0.00%|        '''Like dict.update() but subtracts counts instead of replacing them.
   676|         0|            0|            0|  0.00%|        Counts can be reduced below zero.  Both the inputs and outputs are
   677|         0|            0|            0|  0.00%|        allowed to contain zero and negative counts.
   678|         0|            0|            0|  0.00%|
   679|         0|            0|            0|  0.00%|        Source can be an iterable, a dictionary, or another Counter instance.
   680|         0|            0|            0|  0.00%|
   681|         0|            0|            0|  0.00%|        >>> c = Counter('which')
   682|         0|            0|            0|  0.00%|        >>> c.subtract('witch')             # subtract elements from another iterable
   683|         0|            0|            0|  0.00%|        >>> c.subtract(Counter('watch'))    # subtract elements from another counter
   684|         0|            0|            0|  0.00%|        >>> c['h']                          # 2 in which, minus 1 in witch, minus 1 in watch
   685|         0|            0|            0|  0.00%|        0
   686|         0|            0|            0|  0.00%|        >>> c['w']                          # 1 in which, minus 1 in witch, minus 1 in watch
   687|         0|            0|            0|  0.00%|        -1
   688|         0|            0|            0|  0.00%|
   689|         0|            0|            0|  0.00%|        '''
   690|         0|            0|            0|  0.00%|        if iterable is not None:
   691|         0|            0|            0|  0.00%|            self_get = self.get
   692|         0|            0|            0|  0.00%|            if isinstance(iterable, _collections_abc.Mapping):
   693|         0|            0|            0|  0.00%|                for elem, count in iterable.items():
   694|         0|            0|            0|  0.00%|                    self[elem] = self_get(elem, 0) - count
   695|         0|            0|            0|  0.00%|            else:
   696|         0|            0|            0|  0.00%|                for elem in iterable:
   697|         0|            0|            0|  0.00%|                    self[elem] = self_get(elem, 0) - 1
   698|         0|            0|            0|  0.00%|        if kwds:
   699|         0|            0|            0|  0.00%|            self.subtract(kwds)
   700|         0|            0|            0|  0.00%|
   701|         0|            0|            0|  0.00%|    def copy(self):
   702|         0|            0|            0|  0.00%|        'Return a shallow copy.'
   703|         0|            0|            0|  0.00%|        return self.__class__(self)
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|    def __reduce__(self):
   706|         0|            0|            0|  0.00%|        return self.__class__, (dict(self),)
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|    def __delitem__(self, elem):
   709|         0|            0|            0|  0.00%|        'Like dict.__delitem__() but does not raise KeyError for missing values.'
   710|         0|            0|            0|  0.00%|        if elem in self:
   711|         0|            0|            0|  0.00%|            super().__delitem__(elem)
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|    def __eq__(self, other):
   714|         0|            0|            0|  0.00%|        'True if all counts agree. Missing counts are treated as zero.'
   715|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   716|         0|            0|            0|  0.00%|            return NotImplemented
   717|         0|            0|            0|  0.00%|        return all(self[e] == other[e] for c in (self, other) for e in c)
   718|         0|            0|            0|  0.00%|
   719|         0|            0|            0|  0.00%|    def __ne__(self, other):
   720|         0|            0|            0|  0.00%|        'True if any counts disagree. Missing counts are treated as zero.'
   721|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   722|         0|            0|            0|  0.00%|            return NotImplemented
   723|         0|            0|            0|  0.00%|        return not self == other
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|    def __le__(self, other):
   726|         0|            0|            0|  0.00%|        'True if all counts in self are a subset of those in other.'
   727|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   728|         0|            0|            0|  0.00%|            return NotImplemented
   729|         0|            0|            0|  0.00%|        return all(self[e] <= other[e] for c in (self, other) for e in c)
   730|         0|            0|            0|  0.00%|
   731|         0|            0|            0|  0.00%|    def __lt__(self, other):
   732|         0|            0|            0|  0.00%|        'True if all counts in self are a proper subset of those in other.'
   733|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   734|         0|            0|            0|  0.00%|            return NotImplemented
   735|         0|            0|            0|  0.00%|        return self <= other and self != other
   736|         0|            0|            0|  0.00%|
   737|         0|            0|            0|  0.00%|    def __ge__(self, other):
   738|         0|            0|            0|  0.00%|        'True if all counts in self are a superset of those in other.'
   739|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   740|         0|            0|            0|  0.00%|            return NotImplemented
   741|         0|            0|            0|  0.00%|        return all(self[e] >= other[e] for c in (self, other) for e in c)
   742|         0|            0|            0|  0.00%|
   743|         0|            0|            0|  0.00%|    def __gt__(self, other):
   744|         0|            0|            0|  0.00%|        'True if all counts in self are a proper superset of those in other.'
   745|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   746|         0|            0|            0|  0.00%|            return NotImplemented
   747|         0|            0|            0|  0.00%|        return self >= other and self != other
   748|         0|            0|            0|  0.00%|
   749|         0|            0|            0|  0.00%|    def __repr__(self):
   750|         0|            0|            0|  0.00%|        if not self:
   751|         0|            0|            0|  0.00%|            return f'{self.__class__.__name__}()'
   752|         0|            0|            0|  0.00%|        try:
   753|         0|            0|            0|  0.00%|            # dict() preserves the ordering returned by most_common()
   754|         0|            0|            0|  0.00%|            d = dict(self.most_common())
   755|         0|            0|            0|  0.00%|        except TypeError:
   756|         0|            0|            0|  0.00%|            # handle case where values are not orderable
   757|         0|            0|            0|  0.00%|            d = dict(self)
   758|         0|            0|            0|  0.00%|        return f'{self.__class__.__name__}({d!r})'
   759|         0|            0|            0|  0.00%|
   760|         0|            0|            0|  0.00%|    # Multiset-style mathematical operations discussed in:
   761|         0|            0|            0|  0.00%|    #       Knuth TAOCP Volume II section 4.6.3 exercise 19
   762|         0|            0|            0|  0.00%|    #       and at http://en.wikipedia.org/wiki/Multiset
   763|         0|            0|            0|  0.00%|    #
   764|         0|            0|            0|  0.00%|    # Outputs guaranteed to only include positive counts.
   765|         0|            0|            0|  0.00%|    #
   766|         0|            0|            0|  0.00%|    # To strip negative and zero counts, add-in an empty counter:
   767|         0|            0|            0|  0.00%|    #       c += Counter()
   768|         0|            0|            0|  0.00%|    #
   769|         0|            0|            0|  0.00%|    # When the multiplicities are all zero or one, multiset operations
   770|         0|            0|            0|  0.00%|    # are guaranteed to be equivalent to the corresponding operations
   771|         0|            0|            0|  0.00%|    # for regular sets.
   772|         0|            0|            0|  0.00%|    #     Given counter multisets such as:
   773|         0|            0|            0|  0.00%|    #         cp = Counter(a=1, b=0, c=1)
   774|         0|            0|            0|  0.00%|    #         cq = Counter(c=1, d=0, e=1)
   775|         0|            0|            0|  0.00%|    #     The corresponding regular sets would be:
   776|         0|            0|            0|  0.00%|    #         sp = {'a', 'c'}
   777|         0|            0|            0|  0.00%|    #         sq = {'c', 'e'}
   778|         0|            0|            0|  0.00%|    #     All of the following relations would hold:
   779|         0|            0|            0|  0.00%|    #         set(cp + cq) == sp | sq
   780|         0|            0|            0|  0.00%|    #         set(cp - cq) == sp - sq
   781|         0|            0|            0|  0.00%|    #         set(cp | cq) == sp | sq
   782|         0|            0|            0|  0.00%|    #         set(cp & cq) == sp & sq
   783|         0|            0|            0|  0.00%|    #         (cp == cq) == (sp == sq)
   784|         0|            0|            0|  0.00%|    #         (cp != cq) == (sp != sq)
   785|         0|            0|            0|  0.00%|    #         (cp <= cq) == (sp <= sq)
   786|         0|            0|            0|  0.00%|    #         (cp < cq) == (sp < sq)
   787|         0|            0|            0|  0.00%|    #         (cp >= cq) == (sp >= sq)
   788|         0|            0|            0|  0.00%|    #         (cp > cq) == (sp > sq)
   789|         0|            0|            0|  0.00%|
   790|         0|            0|            0|  0.00%|    def __add__(self, other):
   791|         0|            0|            0|  0.00%|        '''Add counts from two counters.
   792|         0|            0|            0|  0.00%|
   793|         0|            0|            0|  0.00%|        >>> Counter('abbb') + Counter('bcc')
   794|         0|            0|            0|  0.00%|        Counter({'b': 4, 'c': 2, 'a': 1})
   795|         0|            0|            0|  0.00%|
   796|         0|            0|            0|  0.00%|        '''
   797|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   798|         0|            0|            0|  0.00%|            return NotImplemented
   799|         0|            0|            0|  0.00%|        result = Counter()
   800|         0|            0|            0|  0.00%|        for elem, count in self.items():
   801|         0|            0|            0|  0.00%|            newcount = count + other[elem]
   802|         0|            0|            0|  0.00%|            if newcount > 0:
   803|         0|            0|            0|  0.00%|                result[elem] = newcount
   804|         0|            0|            0|  0.00%|        for elem, count in other.items():
   805|         0|            0|            0|  0.00%|            if elem not in self and count > 0:
   806|         0|            0|            0|  0.00%|                result[elem] = count
   807|         0|            0|            0|  0.00%|        return result
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|    def __sub__(self, other):
   810|         0|            0|            0|  0.00%|        ''' Subtract count, but keep only results with positive counts.
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|        >>> Counter('abbbc') - Counter('bccd')
   813|         0|            0|            0|  0.00%|        Counter({'b': 2, 'a': 1})
   814|         0|            0|            0|  0.00%|
   815|         0|            0|            0|  0.00%|        '''
   816|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   817|         0|            0|            0|  0.00%|            return NotImplemented
   818|         0|            0|            0|  0.00%|        result = Counter()
   819|         0|            0|            0|  0.00%|        for elem, count in self.items():
   820|         0|            0|            0|  0.00%|            newcount = count - other[elem]
   821|         0|            0|            0|  0.00%|            if newcount > 0:
   822|         0|            0|            0|  0.00%|                result[elem] = newcount
   823|         0|            0|            0|  0.00%|        for elem, count in other.items():
   824|         0|            0|            0|  0.00%|            if elem not in self and count < 0:
   825|         0|            0|            0|  0.00%|                result[elem] = 0 - count
   826|         0|            0|            0|  0.00%|        return result
   827|         0|            0|            0|  0.00%|
   828|         0|            0|            0|  0.00%|    def __or__(self, other):
   829|         0|            0|            0|  0.00%|        '''Union is the maximum of value in either of the input counters.
   830|         0|            0|            0|  0.00%|
   831|         0|            0|            0|  0.00%|        >>> Counter('abbb') | Counter('bcc')
   832|         0|            0|            0|  0.00%|        Counter({'b': 3, 'c': 2, 'a': 1})
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|        '''
   835|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   836|         0|            0|            0|  0.00%|            return NotImplemented
   837|         0|            0|            0|  0.00%|        result = Counter()
   838|         0|            0|            0|  0.00%|        for elem, count in self.items():
   839|         0|            0|            0|  0.00%|            other_count = other[elem]
   840|         0|            0|            0|  0.00%|            newcount = other_count if count < other_count else count
   841|         0|            0|            0|  0.00%|            if newcount > 0:
   842|         0|            0|            0|  0.00%|                result[elem] = newcount
   843|         0|            0|            0|  0.00%|        for elem, count in other.items():
   844|         0|            0|            0|  0.00%|            if elem not in self and count > 0:
   845|         0|            0|            0|  0.00%|                result[elem] = count
   846|         0|            0|            0|  0.00%|        return result
   847|         0|            0|            0|  0.00%|
   848|         0|            0|            0|  0.00%|    def __and__(self, other):
   849|         0|            0|            0|  0.00%|        ''' Intersection is the minimum of corresponding counts.
   850|         0|            0|            0|  0.00%|
   851|         0|            0|            0|  0.00%|        >>> Counter('abbb') & Counter('bcc')
   852|         0|            0|            0|  0.00%|        Counter({'b': 1})
   853|         0|            0|            0|  0.00%|
   854|         0|            0|            0|  0.00%|        '''
   855|         0|            0|            0|  0.00%|        if not isinstance(other, Counter):
   856|         0|            0|            0|  0.00%|            return NotImplemented
   857|         0|            0|            0|  0.00%|        result = Counter()
   858|         0|            0|            0|  0.00%|        for elem, count in self.items():
   859|         0|            0|            0|  0.00%|            other_count = other[elem]
   860|         0|            0|            0|  0.00%|            newcount = count if count < other_count else other_count
   861|         0|            0|            0|  0.00%|            if newcount > 0:
   862|         0|            0|            0|  0.00%|                result[elem] = newcount
   863|         0|            0|            0|  0.00%|        return result
   864|         0|            0|            0|  0.00%|
   865|         0|            0|            0|  0.00%|    def __pos__(self):
   866|         0|            0|            0|  0.00%|        'Adds an empty counter, effectively stripping negative and zero counts'
   867|         0|            0|            0|  0.00%|        result = Counter()
   868|         0|            0|            0|  0.00%|        for elem, count in self.items():
   869|         0|            0|            0|  0.00%|            if count > 0:
   870|         0|            0|            0|  0.00%|                result[elem] = count
   871|         0|            0|            0|  0.00%|        return result
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|    def __neg__(self):
   874|         0|            0|            0|  0.00%|        '''Subtracts from an empty counter.  Strips positive and zero counts,
   875|         0|            0|            0|  0.00%|        and flips the sign on negative counts.
   876|         0|            0|            0|  0.00%|
   877|         0|            0|            0|  0.00%|        '''
   878|         0|            0|            0|  0.00%|        result = Counter()
   879|         0|            0|            0|  0.00%|        for elem, count in self.items():
   880|         0|            0|            0|  0.00%|            if count < 0:
   881|         0|            0|            0|  0.00%|                result[elem] = 0 - count
   882|         0|            0|            0|  0.00%|        return result
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|    def _keep_positive(self):
   885|         0|            0|            0|  0.00%|        '''Internal method to strip elements with a negative or zero count'''
   886|         0|            0|            0|  0.00%|        nonpositive = [elem for elem, count in self.items() if not count > 0]
   887|         0|            0|            0|  0.00%|        for elem in nonpositive:
   888|         0|            0|            0|  0.00%|            del self[elem]
   889|         0|            0|            0|  0.00%|        return self
   890|         0|            0|            0|  0.00%|
   891|         0|            0|            0|  0.00%|    def __iadd__(self, other):
   892|         0|            0|            0|  0.00%|        '''Inplace add from another counter, keeping only positive counts.
   893|         0|            0|            0|  0.00%|
   894|         0|            0|            0|  0.00%|        >>> c = Counter('abbb')
   895|         0|            0|            0|  0.00%|        >>> c += Counter('bcc')
   896|         0|            0|            0|  0.00%|        >>> c
   897|         0|            0|            0|  0.00%|        Counter({'b': 4, 'c': 2, 'a': 1})
   898|         0|            0|            0|  0.00%|
   899|         0|            0|            0|  0.00%|        '''
   900|         0|            0|            0|  0.00%|        for elem, count in other.items():
   901|         0|            0|            0|  0.00%|            self[elem] += count
   902|         0|            0|            0|  0.00%|        return self._keep_positive()
   903|         0|            0|            0|  0.00%|
   904|         0|            0|            0|  0.00%|    def __isub__(self, other):
   905|         0|            0|            0|  0.00%|        '''Inplace subtract counter, but keep only results with positive counts.
   906|         0|            0|            0|  0.00%|
   907|         0|            0|            0|  0.00%|        >>> c = Counter('abbbc')
   908|         0|            0|            0|  0.00%|        >>> c -= Counter('bccd')
   909|         0|            0|            0|  0.00%|        >>> c
   910|         0|            0|            0|  0.00%|        Counter({'b': 2, 'a': 1})
   911|         0|            0|            0|  0.00%|
   912|         0|            0|            0|  0.00%|        '''
   913|         0|            0|            0|  0.00%|        for elem, count in other.items():
   914|         0|            0|            0|  0.00%|            self[elem] -= count
   915|         0|            0|            0|  0.00%|        return self._keep_positive()
   916|         0|            0|            0|  0.00%|
   917|         0|            0|            0|  0.00%|    def __ior__(self, other):
   918|         0|            0|            0|  0.00%|        '''Inplace union is the maximum of value from either counter.
   919|         0|            0|            0|  0.00%|
   920|         0|            0|            0|  0.00%|        >>> c = Counter('abbb')
   921|         0|            0|            0|  0.00%|        >>> c |= Counter('bcc')
   922|         0|            0|            0|  0.00%|        >>> c
   923|         0|            0|            0|  0.00%|        Counter({'b': 3, 'c': 2, 'a': 1})
   924|         0|            0|            0|  0.00%|
   925|         0|            0|            0|  0.00%|        '''
   926|         0|            0|            0|  0.00%|        for elem, other_count in other.items():
   927|         0|            0|            0|  0.00%|            count = self[elem]
   928|         0|            0|            0|  0.00%|            if other_count > count:
   929|         0|            0|            0|  0.00%|                self[elem] = other_count
   930|         0|            0|            0|  0.00%|        return self._keep_positive()
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|    def __iand__(self, other):
   933|         0|            0|            0|  0.00%|        '''Inplace intersection is the minimum of corresponding counts.
   934|         0|            0|            0|  0.00%|
   935|         0|            0|            0|  0.00%|        >>> c = Counter('abbb')
   936|         0|            0|            0|  0.00%|        >>> c &= Counter('bcc')
   937|         0|            0|            0|  0.00%|        >>> c
   938|         0|            0|            0|  0.00%|        Counter({'b': 1})
   939|         0|            0|            0|  0.00%|
   940|         0|            0|            0|  0.00%|        '''
   941|         0|            0|            0|  0.00%|        for elem, count in self.items():
   942|         0|            0|            0|  0.00%|            other_count = other[elem]
   943|         0|            0|            0|  0.00%|            if other_count < count:
   944|         0|            0|            0|  0.00%|                self[elem] = other_count
   945|         0|            0|            0|  0.00%|        return self._keep_positive()
   946|         0|            0|            0|  0.00%|
   947|         0|            0|            0|  0.00%|
   948|         0|            0|            0|  0.00%|########################################################################
   949|         0|            0|            0|  0.00%|###  ChainMap
   950|         0|            0|            0|  0.00%|########################################################################
   951|         0|            0|            0|  0.00%|
   952|         0|            0|            0|  0.00%|class ChainMap(_collections_abc.MutableMapping):
   953|         0|            0|            0|  0.00%|    ''' A ChainMap groups multiple dicts (or other mappings) together
   954|         0|            0|            0|  0.00%|    to create a single, updateable view.
   955|         0|            0|            0|  0.00%|
   956|         0|            0|            0|  0.00%|    The underlying mappings are stored in a list.  That list is public and can
   957|         0|            0|            0|  0.00%|    be accessed or updated using the *maps* attribute.  There is no other
   958|         0|            0|            0|  0.00%|    state.
   959|         0|            0|            0|  0.00%|
   960|         0|            0|            0|  0.00%|    Lookups search the underlying mappings successively until a key is found.
   961|         0|            0|            0|  0.00%|    In contrast, writes, updates, and deletions only operate on the first
   962|         0|            0|            0|  0.00%|    mapping.
   963|         0|            0|            0|  0.00%|
   964|         0|            0|            0|  0.00%|    '''
   965|         0|            0|            0|  0.00%|
   966|         0|            0|            0|  0.00%|    def __init__(self, *maps):
   967|         0|            0|            0|  0.00%|        '''Initialize a ChainMap by setting *maps* to the given mappings.
   968|         0|            0|            0|  0.00%|        If no mappings are provided, a single empty dictionary is used.
   969|         0|            0|            0|  0.00%|
   970|         0|            0|            0|  0.00%|        '''
   971|         0|            0|            0|  0.00%|        self.maps = list(maps) or [{}]          # always at least one map
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def __missing__(self, key):
   974|         0|            0|            0|  0.00%|        raise KeyError(key)
   975|         0|            0|            0|  0.00%|
   976|         0|            0|            0|  0.00%|    def __getitem__(self, key):
   977|         0|            0|            0|  0.00%|        for mapping in self.maps:
   978|         0|            0|            0|  0.00%|            try:
   979|         0|            0|            0|  0.00%|                return mapping[key]             # can't use 'key in mapping' with defaultdict
   980|         0|            0|            0|  0.00%|            except KeyError:
   981|         0|            0|            0|  0.00%|                pass
   982|         0|            0|            0|  0.00%|        return self.__missing__(key)            # support subclasses that define __missing__
   983|         0|            0|            0|  0.00%|
   984|         0|            0|            0|  0.00%|    def get(self, key, default=None):
   985|         0|            0|            0|  0.00%|        return self[key] if key in self else default
   986|         0|            0|            0|  0.00%|
   987|         0|            0|            0|  0.00%|    def __len__(self):
   988|         0|            0|            0|  0.00%|        return len(set().union(*self.maps))     # reuses stored hash values if possible
   989|         0|            0|            0|  0.00%|
   990|         0|            0|            0|  0.00%|    def __iter__(self):
   991|         0|            0|            0|  0.00%|        d = {}
   992|         0|            0|            0|  0.00%|        for mapping in reversed(self.maps):
   993|         0|            0|            0|  0.00%|            d.update(dict.fromkeys(mapping))    # reuses stored hash values if possible
   994|         0|            0|            0|  0.00%|        return iter(d)
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|    def __contains__(self, key):
   997|         0|            0|            0|  0.00%|        return any(key in m for m in self.maps)
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|    def __bool__(self):
  1000|         0|            0|            0|  0.00%|        return any(self.maps)
  1001|         0|            0|            0|  0.00%|
  1002|         0|            0|            0|  0.00%|    @_recursive_repr()
  1003|         0|            0|            0|  0.00%|    def __repr__(self):
  1004|         0|            0|            0|  0.00%|        return f'{self.__class__.__name__}({", ".join(map(repr, self.maps))})'
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|    @classmethod
  1007|         0|            0|            0|  0.00%|    def fromkeys(cls, iterable, *args):
  1008|         0|            0|            0|  0.00%|        'Create a ChainMap with a single dict created from the iterable.'
  1009|         0|            0|            0|  0.00%|        return cls(dict.fromkeys(iterable, *args))
  1010|         0|            0|            0|  0.00%|
  1011|         0|            0|            0|  0.00%|    def copy(self):
  1012|         0|            0|            0|  0.00%|        'New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]'
  1013|         0|            0|            0|  0.00%|        return self.__class__(self.maps[0].copy(), *self.maps[1:])
  1014|         0|            0|            0|  0.00%|
  1015|         0|            0|            0|  0.00%|    __copy__ = copy
  1016|         0|            0|            0|  0.00%|
  1017|         0|            0|            0|  0.00%|    def new_child(self, m=None, **kwargs):      # like Django's Context.push()
  1018|         0|            0|            0|  0.00%|        '''New ChainMap with a new map followed by all previous maps.
  1019|         0|            0|            0|  0.00%|        If no map is provided, an empty dict is used.
  1020|         0|            0|            0|  0.00%|        Keyword arguments update the map or new empty dict.
  1021|         0|            0|            0|  0.00%|        '''
  1022|         0|            0|            0|  0.00%|        if m is None:
  1023|         0|            0|            0|  0.00%|            m = kwargs
  1024|         0|            0|            0|  0.00%|        elif kwargs:
  1025|         0|            0|            0|  0.00%|            m.update(kwargs)
  1026|         0|            0|            0|  0.00%|        return self.__class__(m, *self.maps)
  1027|         0|            0|            0|  0.00%|
  1028|         0|            0|            0|  0.00%|    @property
  1029|         0|            0|            0|  0.00%|    def parents(self):                          # like Django's Context.pop()
  1030|         0|            0|            0|  0.00%|        'New ChainMap from maps[1:].'
  1031|         0|            0|            0|  0.00%|        return self.__class__(*self.maps[1:])
  1032|         0|            0|            0|  0.00%|
  1033|         0|            0|            0|  0.00%|    def __setitem__(self, key, value):
  1034|         0|            0|            0|  0.00%|        self.maps[0][key] = value
  1035|         0|            0|            0|  0.00%|
  1036|         0|            0|            0|  0.00%|    def __delitem__(self, key):
  1037|         0|            0|            0|  0.00%|        try:
  1038|         0|            0|            0|  0.00%|            del self.maps[0][key]
  1039|         0|            0|            0|  0.00%|        except KeyError:
  1040|         0|            0|            0|  0.00%|            raise KeyError(f'Key not found in the first mapping: {key!r}')
  1041|         0|            0|            0|  0.00%|
  1042|         0|            0|            0|  0.00%|    def popitem(self):
  1043|         0|            0|            0|  0.00%|        'Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.'
  1044|         0|            0|            0|  0.00%|        try:
  1045|         0|            0|            0|  0.00%|            return self.maps[0].popitem()
  1046|         0|            0|            0|  0.00%|        except KeyError:
  1047|         0|            0|            0|  0.00%|            raise KeyError('No keys found in the first mapping.')
  1048|         0|            0|            0|  0.00%|
  1049|         0|            0|            0|  0.00%|    def pop(self, key, *args):
  1050|         0|            0|            0|  0.00%|        'Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].'
  1051|         0|            0|            0|  0.00%|        try:
  1052|         0|            0|            0|  0.00%|            return self.maps[0].pop(key, *args)
  1053|         0|            0|            0|  0.00%|        except KeyError:
  1054|         0|            0|            0|  0.00%|            raise KeyError(f'Key not found in the first mapping: {key!r}')
  1055|         0|            0|            0|  0.00%|
  1056|         0|            0|            0|  0.00%|    def clear(self):
  1057|         0|            0|            0|  0.00%|        'Clear maps[0], leaving maps[1:] intact.'
  1058|         0|            0|            0|  0.00%|        self.maps[0].clear()
  1059|         0|            0|            0|  0.00%|
  1060|         0|            0|            0|  0.00%|    def __ior__(self, other):
  1061|         0|            0|            0|  0.00%|        self.maps[0].update(other)
  1062|         0|            0|            0|  0.00%|        return self
  1063|         0|            0|            0|  0.00%|
  1064|         0|            0|            0|  0.00%|    def __or__(self, other):
  1065|         0|            0|            0|  0.00%|        if not isinstance(other, _collections_abc.Mapping):
  1066|         0|            0|            0|  0.00%|            return NotImplemented
  1067|         0|            0|            0|  0.00%|        m = self.copy()
  1068|         0|            0|            0|  0.00%|        m.maps[0].update(other)
  1069|         0|            0|            0|  0.00%|        return m
  1070|         0|            0|            0|  0.00%|
  1071|         0|            0|            0|  0.00%|    def __ror__(self, other):
  1072|         0|            0|            0|  0.00%|        if not isinstance(other, _collections_abc.Mapping):
  1073|         0|            0|            0|  0.00%|            return NotImplemented
  1074|         0|            0|            0|  0.00%|        m = dict(other)
  1075|         0|            0|            0|  0.00%|        for child in reversed(self.maps):
  1076|         0|            0|            0|  0.00%|            m.update(child)
  1077|         0|            0|            0|  0.00%|        return self.__class__(m)
  1078|         0|            0|            0|  0.00%|
  1079|         0|            0|            0|  0.00%|
  1080|         0|            0|            0|  0.00%|################################################################################
  1081|         0|            0|            0|  0.00%|### UserDict
  1082|         0|            0|            0|  0.00%|################################################################################
  1083|         0|            0|            0|  0.00%|
  1084|         0|            0|            0|  0.00%|class UserDict(_collections_abc.MutableMapping):
  1085|         0|            0|            0|  0.00%|
  1086|         0|            0|            0|  0.00%|    # Start by filling-out the abstract methods
  1087|         0|            0|            0|  0.00%|    def __init__(self, dict=None, /, **kwargs):
  1088|         0|            0|            0|  0.00%|        self.data = {}
  1089|         0|            0|            0|  0.00%|        if dict is not None:
  1090|         0|            0|            0|  0.00%|            self.update(dict)
  1091|         0|            0|            0|  0.00%|        if kwargs:
  1092|         0|            0|            0|  0.00%|            self.update(kwargs)
  1093|         0|            0|            0|  0.00%|
  1094|         0|            0|            0|  0.00%|    def __len__(self):
  1095|         0|            0|            0|  0.00%|        return len(self.data)
  1096|         0|            0|            0|  0.00%|
  1097|         0|            0|            0|  0.00%|    def __getitem__(self, key):
  1098|         0|            0|            0|  0.00%|        if key in self.data:
  1099|         0|            0|            0|  0.00%|            return self.data[key]
  1100|         0|            0|            0|  0.00%|        if hasattr(self.__class__, "__missing__"):
  1101|         0|            0|            0|  0.00%|            return self.__class__.__missing__(self, key)
  1102|         0|            0|            0|  0.00%|        raise KeyError(key)
  1103|         0|            0|            0|  0.00%|
  1104|         0|            0|            0|  0.00%|    def __setitem__(self, key, item):
  1105|         0|            0|            0|  0.00%|        self.data[key] = item
  1106|         0|            0|            0|  0.00%|
  1107|         0|            0|            0|  0.00%|    def __delitem__(self, key):
  1108|         0|            0|            0|  0.00%|        del self.data[key]
  1109|         0|            0|            0|  0.00%|
  1110|         0|            0|            0|  0.00%|    def __iter__(self):
  1111|         0|            0|            0|  0.00%|        return iter(self.data)
  1112|         0|            0|            0|  0.00%|
  1113|         0|            0|            0|  0.00%|    # Modify __contains__ to work correctly when __missing__ is present
  1114|         0|            0|            0|  0.00%|    def __contains__(self, key):
  1115|         0|            0|            0|  0.00%|        return key in self.data
  1116|         0|            0|            0|  0.00%|
  1117|         0|            0|            0|  0.00%|    # Now, add the methods in dicts but not in MutableMapping
  1118|         0|            0|            0|  0.00%|    def __repr__(self):
  1119|         0|            0|            0|  0.00%|        return repr(self.data)
  1120|         0|            0|            0|  0.00%|
  1121|         0|            0|            0|  0.00%|    def __or__(self, other):
  1122|         0|            0|            0|  0.00%|        if isinstance(other, UserDict):
  1123|         0|            0|            0|  0.00%|            return self.__class__(self.data | other.data)
  1124|         0|            0|            0|  0.00%|        if isinstance(other, dict):
  1125|         0|            0|            0|  0.00%|            return self.__class__(self.data | other)
  1126|         0|            0|            0|  0.00%|        return NotImplemented
  1127|         0|            0|            0|  0.00%|
  1128|         0|            0|            0|  0.00%|    def __ror__(self, other):
  1129|         0|            0|            0|  0.00%|        if isinstance(other, UserDict):
  1130|         0|            0|            0|  0.00%|            return self.__class__(other.data | self.data)
  1131|         0|            0|            0|  0.00%|        if isinstance(other, dict):
  1132|         0|            0|            0|  0.00%|            return self.__class__(other | self.data)
  1133|         0|            0|            0|  0.00%|        return NotImplemented
  1134|         0|            0|            0|  0.00%|
  1135|         0|            0|            0|  0.00%|    def __ior__(self, other):
  1136|         0|            0|            0|  0.00%|        if isinstance(other, UserDict):
  1137|         0|            0|            0|  0.00%|            self.data |= other.data
  1138|         0|            0|            0|  0.00%|        else:
  1139|         0|            0|            0|  0.00%|            self.data |= other
  1140|         0|            0|            0|  0.00%|        return self
  1141|         0|            0|            0|  0.00%|
  1142|         0|            0|            0|  0.00%|    def __copy__(self):
  1143|         0|            0|            0|  0.00%|        inst = self.__class__.__new__(self.__class__)
  1144|         0|            0|            0|  0.00%|        inst.__dict__.update(self.__dict__)
  1145|         0|            0|            0|  0.00%|        # Create a copy and avoid triggering descriptors
  1146|         0|            0|            0|  0.00%|        inst.__dict__["data"] = self.__dict__["data"].copy()
  1147|         0|            0|            0|  0.00%|        return inst
  1148|         0|            0|            0|  0.00%|
  1149|         0|            0|            0|  0.00%|    def copy(self):
  1150|         0|            0|            0|  0.00%|        if self.__class__ is UserDict:
  1151|         0|            0|            0|  0.00%|            return UserDict(self.data.copy())
  1152|         0|            0|            0|  0.00%|        import copy
  1153|         0|            0|            0|  0.00%|        data = self.data
  1154|         0|            0|            0|  0.00%|        try:
  1155|         0|            0|            0|  0.00%|            self.data = {}
  1156|         0|            0|            0|  0.00%|            c = copy.copy(self)
  1157|         0|            0|            0|  0.00%|        finally:
  1158|         0|            0|            0|  0.00%|            self.data = data
  1159|         0|            0|            0|  0.00%|        c.update(self)
  1160|         0|            0|            0|  0.00%|        return c
  1161|         0|            0|            0|  0.00%|
  1162|         0|            0|            0|  0.00%|    @classmethod
  1163|         0|            0|            0|  0.00%|    def fromkeys(cls, iterable, value=None):
  1164|         0|            0|            0|  0.00%|        d = cls()
  1165|         0|            0|            0|  0.00%|        for key in iterable:
  1166|         0|            0|            0|  0.00%|            d[key] = value
  1167|         0|            0|            0|  0.00%|        return d
  1168|         0|            0|            0|  0.00%|
  1169|         0|            0|            0|  0.00%|
  1170|         0|            0|            0|  0.00%|################################################################################
  1171|         0|            0|            0|  0.00%|### UserList
  1172|         0|            0|            0|  0.00%|################################################################################
  1173|         0|            0|            0|  0.00%|
  1174|         0|            0|            0|  0.00%|class UserList(_collections_abc.MutableSequence):
  1175|         0|            0|            0|  0.00%|    """A more or less complete user-defined wrapper around list objects."""
  1176|         0|            0|            0|  0.00%|
  1177|         0|            0|            0|  0.00%|    def __init__(self, initlist=None):
  1178|         0|            0|            0|  0.00%|        self.data = []
  1179|         0|            0|            0|  0.00%|        if initlist is not None:
  1180|         0|            0|            0|  0.00%|            # XXX should this accept an arbitrary sequence?
  1181|         0|            0|            0|  0.00%|            if type(initlist) == type(self.data):
  1182|         0|            0|            0|  0.00%|                self.data[:] = initlist
  1183|         0|            0|            0|  0.00%|            elif isinstance(initlist, UserList):
  1184|         0|            0|            0|  0.00%|                self.data[:] = initlist.data[:]
  1185|         0|            0|            0|  0.00%|            else:
  1186|         0|            0|            0|  0.00%|                self.data = list(initlist)
  1187|         0|            0|            0|  0.00%|
  1188|         0|            0|            0|  0.00%|    def __repr__(self):
  1189|         0|            0|            0|  0.00%|        return repr(self.data)
  1190|         0|            0|            0|  0.00%|
  1191|         0|            0|            0|  0.00%|    def __lt__(self, other):
  1192|         0|            0|            0|  0.00%|        return self.data < self.__cast(other)
  1193|         0|            0|            0|  0.00%|
  1194|         0|            0|            0|  0.00%|    def __le__(self, other):
  1195|         0|            0|            0|  0.00%|        return self.data <= self.__cast(other)
  1196|         0|            0|            0|  0.00%|
  1197|         0|            0|            0|  0.00%|    def __eq__(self, other):
  1198|         0|            0|            0|  0.00%|        return self.data == self.__cast(other)
  1199|         0|            0|            0|  0.00%|
  1200|         0|            0|            0|  0.00%|    def __gt__(self, other):
  1201|         0|            0|            0|  0.00%|        return self.data > self.__cast(other)
  1202|         0|            0|            0|  0.00%|
  1203|         0|            0|            0|  0.00%|    def __ge__(self, other):
  1204|         0|            0|            0|  0.00%|        return self.data >= self.__cast(other)
  1205|         0|            0|            0|  0.00%|
  1206|         0|            0|            0|  0.00%|    def __cast(self, other):
  1207|         0|            0|            0|  0.00%|        return other.data if isinstance(other, UserList) else other
  1208|         0|            0|            0|  0.00%|
  1209|         0|            0|            0|  0.00%|    def __contains__(self, item):
  1210|         0|            0|            0|  0.00%|        return item in self.data
  1211|         0|            0|            0|  0.00%|
  1212|         0|            0|            0|  0.00%|    def __len__(self):
  1213|         0|            0|            0|  0.00%|        return len(self.data)
  1214|         0|            0|            0|  0.00%|
  1215|         0|            0|            0|  0.00%|    def __getitem__(self, i):
  1216|         0|            0|            0|  0.00%|        if isinstance(i, slice):
  1217|         0|            0|            0|  0.00%|            return self.__class__(self.data[i])
  1218|         0|            0|            0|  0.00%|        else:
  1219|         0|            0|            0|  0.00%|            return self.data[i]
  1220|         0|            0|            0|  0.00%|
  1221|         0|            0|            0|  0.00%|    def __setitem__(self, i, item):
  1222|         0|            0|            0|  0.00%|        self.data[i] = item
  1223|         0|            0|            0|  0.00%|
  1224|         0|            0|            0|  0.00%|    def __delitem__(self, i):
  1225|         0|            0|            0|  0.00%|        del self.data[i]
  1226|         0|            0|            0|  0.00%|
  1227|         0|            0|            0|  0.00%|    def __add__(self, other):
  1228|         0|            0|            0|  0.00%|        if isinstance(other, UserList):
  1229|         0|            0|            0|  0.00%|            return self.__class__(self.data + other.data)
  1230|         0|            0|            0|  0.00%|        elif isinstance(other, type(self.data)):
  1231|         0|            0|            0|  0.00%|            return self.__class__(self.data + other)
  1232|         0|            0|            0|  0.00%|        return self.__class__(self.data + list(other))
  1233|         0|            0|            0|  0.00%|
  1234|         0|            0|            0|  0.00%|    def __radd__(self, other):
  1235|         0|            0|            0|  0.00%|        if isinstance(other, UserList):
  1236|         0|            0|            0|  0.00%|            return self.__class__(other.data + self.data)
  1237|         0|            0|            0|  0.00%|        elif isinstance(other, type(self.data)):
  1238|         0|            0|            0|  0.00%|            return self.__class__(other + self.data)
  1239|         0|            0|            0|  0.00%|        return self.__class__(list(other) + self.data)
  1240|         0|            0|            0|  0.00%|
  1241|         0|            0|            0|  0.00%|    def __iadd__(self, other):
  1242|         0|            0|            0|  0.00%|        if isinstance(other, UserList):
  1243|         0|            0|            0|  0.00%|            self.data += other.data
  1244|         0|            0|            0|  0.00%|        elif isinstance(other, type(self.data)):
  1245|         0|            0|            0|  0.00%|            self.data += other
  1246|         0|            0|            0|  0.00%|        else:
  1247|         0|            0|            0|  0.00%|            self.data += list(other)
  1248|         0|            0|            0|  0.00%|        return self
  1249|         0|            0|            0|  0.00%|
  1250|         0|            0|            0|  0.00%|    def __mul__(self, n):
  1251|         0|            0|            0|  0.00%|        return self.__class__(self.data * n)
  1252|         0|            0|            0|  0.00%|
  1253|         0|            0|            0|  0.00%|    __rmul__ = __mul__
  1254|         0|            0|            0|  0.00%|
  1255|         0|            0|            0|  0.00%|    def __imul__(self, n):
  1256|         0|            0|            0|  0.00%|        self.data *= n
  1257|         0|            0|            0|  0.00%|        return self
  1258|         0|            0|            0|  0.00%|
  1259|         0|            0|            0|  0.00%|    def __copy__(self):
  1260|         0|            0|            0|  0.00%|        inst = self.__class__.__new__(self.__class__)
  1261|         0|            0|            0|  0.00%|        inst.__dict__.update(self.__dict__)
  1262|         0|            0|            0|  0.00%|        # Create a copy and avoid triggering descriptors
  1263|         0|            0|            0|  0.00%|        inst.__dict__["data"] = self.__dict__["data"][:]
  1264|         0|            0|            0|  0.00%|        return inst
  1265|         0|            0|            0|  0.00%|
  1266|         0|            0|            0|  0.00%|    def append(self, item):
  1267|         0|            0|            0|  0.00%|        self.data.append(item)
  1268|         0|            0|            0|  0.00%|
  1269|         0|            0|            0|  0.00%|    def insert(self, i, item):
  1270|         0|            0|            0|  0.00%|        self.data.insert(i, item)
  1271|         0|            0|            0|  0.00%|
  1272|         0|            0|            0|  0.00%|    def pop(self, i=-1):
  1273|         0|            0|            0|  0.00%|        return self.data.pop(i)
  1274|         0|            0|            0|  0.00%|
  1275|         0|            0|            0|  0.00%|    def remove(self, item):
  1276|         0|            0|            0|  0.00%|        self.data.remove(item)
  1277|         0|            0|            0|  0.00%|
  1278|         0|            0|            0|  0.00%|    def clear(self):
  1279|         0|            0|            0|  0.00%|        self.data.clear()
  1280|         0|            0|            0|  0.00%|
  1281|         0|            0|            0|  0.00%|    def copy(self):
  1282|         0|            0|            0|  0.00%|        return self.__class__(self)
  1283|         0|            0|            0|  0.00%|
  1284|         0|            0|            0|  0.00%|    def count(self, item):
  1285|         0|            0|            0|  0.00%|        return self.data.count(item)
  1286|         0|            0|            0|  0.00%|
  1287|         0|            0|            0|  0.00%|    def index(self, item, *args):
  1288|         0|            0|            0|  0.00%|        return self.data.index(item, *args)
  1289|         0|            0|            0|  0.00%|
  1290|         0|            0|            0|  0.00%|    def reverse(self):
  1291|         0|            0|            0|  0.00%|        self.data.reverse()
  1292|         0|            0|            0|  0.00%|
  1293|         0|            0|            0|  0.00%|    def sort(self, /, *args, **kwds):
  1294|         0|            0|            0|  0.00%|        self.data.sort(*args, **kwds)
  1295|         0|            0|            0|  0.00%|
  1296|         0|            0|            0|  0.00%|    def extend(self, other):
  1297|         0|            0|            0|  0.00%|        if isinstance(other, UserList):
  1298|         0|            0|            0|  0.00%|            self.data.extend(other.data)
  1299|         0|            0|            0|  0.00%|        else:
  1300|         0|            0|            0|  0.00%|            self.data.extend(other)
  1301|         0|            0|            0|  0.00%|
  1302|         0|            0|            0|  0.00%|
  1303|         0|            0|            0|  0.00%|################################################################################
  1304|         0|            0|            0|  0.00%|### UserString
  1305|         0|            0|            0|  0.00%|################################################################################
  1306|         0|            0|            0|  0.00%|
  1307|         0|            0|            0|  0.00%|class UserString(_collections_abc.Sequence):
  1308|         0|            0|            0|  0.00%|
  1309|         0|            0|            0|  0.00%|    def __init__(self, seq):
  1310|         0|            0|            0|  0.00%|        if isinstance(seq, str):
  1311|         0|            0|            0|  0.00%|            self.data = seq
  1312|         0|            0|            0|  0.00%|        elif isinstance(seq, UserString):
  1313|         0|            0|            0|  0.00%|            self.data = seq.data[:]
  1314|         0|            0|            0|  0.00%|        else:
  1315|         0|            0|            0|  0.00%|            self.data = str(seq)
  1316|         0|            0|            0|  0.00%|
  1317|         0|            0|            0|  0.00%|    def __str__(self):
  1318|         0|            0|            0|  0.00%|        return str(self.data)
  1319|         0|            0|            0|  0.00%|
  1320|         0|            0|            0|  0.00%|    def __repr__(self):
  1321|         0|            0|            0|  0.00%|        return repr(self.data)
  1322|         0|            0|            0|  0.00%|
  1323|         0|            0|            0|  0.00%|    def __int__(self):
  1324|         0|            0|            0|  0.00%|        return int(self.data)
  1325|         0|            0|            0|  0.00%|
  1326|         0|            0|            0|  0.00%|    def __float__(self):
  1327|         0|            0|            0|  0.00%|        return float(self.data)
  1328|         0|            0|            0|  0.00%|
  1329|         0|            0|            0|  0.00%|    def __complex__(self):
  1330|         0|            0|            0|  0.00%|        return complex(self.data)
  1331|         0|            0|            0|  0.00%|
  1332|         0|            0|            0|  0.00%|    def __hash__(self):
  1333|         0|            0|            0|  0.00%|        return hash(self.data)
  1334|         0|            0|            0|  0.00%|
  1335|         0|            0|            0|  0.00%|    def __getnewargs__(self):
  1336|         0|            0|            0|  0.00%|        return (self.data[:],)
  1337|         0|            0|            0|  0.00%|
  1338|         0|            0|            0|  0.00%|    def __eq__(self, string):
  1339|         0|            0|            0|  0.00%|        if isinstance(string, UserString):
  1340|         0|            0|            0|  0.00%|            return self.data == string.data
  1341|         0|            0|            0|  0.00%|        return self.data == string
  1342|         0|            0|            0|  0.00%|
  1343|         0|            0|            0|  0.00%|    def __lt__(self, string):
  1344|         0|            0|            0|  0.00%|        if isinstance(string, UserString):
  1345|         0|            0|            0|  0.00%|            return self.data < string.data
  1346|         0|            0|            0|  0.00%|        return self.data < string
  1347|         0|            0|            0|  0.00%|
  1348|         0|            0|            0|  0.00%|    def __le__(self, string):
  1349|         0|            0|            0|  0.00%|        if isinstance(string, UserString):
  1350|         0|            0|            0|  0.00%|            return self.data <= string.data
  1351|         0|            0|            0|  0.00%|        return self.data <= string
  1352|         0|            0|            0|  0.00%|
  1353|         0|            0|            0|  0.00%|    def __gt__(self, string):
  1354|         0|            0|            0|  0.00%|        if isinstance(string, UserString):
  1355|         0|            0|            0|  0.00%|            return self.data > string.data
  1356|         0|            0|            0|  0.00%|        return self.data > string
  1357|         0|            0|            0|  0.00%|
  1358|         0|            0|            0|  0.00%|    def __ge__(self, string):
  1359|         0|            0|            0|  0.00%|        if isinstance(string, UserString):
  1360|         0|            0|            0|  0.00%|            return self.data >= string.data
  1361|         0|            0|            0|  0.00%|        return self.data >= string
  1362|         0|            0|            0|  0.00%|
  1363|         0|            0|            0|  0.00%|    def __contains__(self, char):
  1364|         0|            0|            0|  0.00%|        if isinstance(char, UserString):
  1365|         0|            0|            0|  0.00%|            char = char.data
  1366|         0|            0|            0|  0.00%|        return char in self.data
  1367|         0|            0|            0|  0.00%|
  1368|         0|            0|            0|  0.00%|    def __len__(self):
  1369|         0|            0|            0|  0.00%|        return len(self.data)
  1370|         0|            0|            0|  0.00%|
  1371|         0|            0|            0|  0.00%|    def __getitem__(self, index):
  1372|         0|            0|            0|  0.00%|        return self.__class__(self.data[index])
  1373|         0|            0|            0|  0.00%|
  1374|         0|            0|            0|  0.00%|    def __add__(self, other):
  1375|         0|            0|            0|  0.00%|        if isinstance(other, UserString):
  1376|         0|            0|            0|  0.00%|            return self.__class__(self.data + other.data)
  1377|         0|            0|            0|  0.00%|        elif isinstance(other, str):
  1378|         0|            0|            0|  0.00%|            return self.__class__(self.data + other)
  1379|         0|            0|            0|  0.00%|        return self.__class__(self.data + str(other))
  1380|         0|            0|            0|  0.00%|
  1381|         0|            0|            0|  0.00%|    def __radd__(self, other):
  1382|         0|            0|            0|  0.00%|        if isinstance(other, str):
  1383|         0|            0|            0|  0.00%|            return self.__class__(other + self.data)
  1384|         0|            0|            0|  0.00%|        return self.__class__(str(other) + self.data)
  1385|         0|            0|            0|  0.00%|
  1386|         0|            0|            0|  0.00%|    def __mul__(self, n):
  1387|         0|            0|            0|  0.00%|        return self.__class__(self.data * n)
  1388|         0|            0|            0|  0.00%|
  1389|         0|            0|            0|  0.00%|    __rmul__ = __mul__
  1390|         0|            0|            0|  0.00%|
  1391|         0|            0|            0|  0.00%|    def __mod__(self, args):
  1392|         0|            0|            0|  0.00%|        return self.__class__(self.data % args)
  1393|         0|            0|            0|  0.00%|
  1394|         0|            0|            0|  0.00%|    def __rmod__(self, template):
  1395|         0|            0|            0|  0.00%|        return self.__class__(str(template) % self)
  1396|         0|            0|            0|  0.00%|
  1397|         0|            0|            0|  0.00%|    # the following methods are defined in alphabetical order:
  1398|         0|            0|            0|  0.00%|    def capitalize(self):
  1399|         0|            0|            0|  0.00%|        return self.__class__(self.data.capitalize())
  1400|         0|            0|            0|  0.00%|
  1401|         0|            0|            0|  0.00%|    def casefold(self):
  1402|         0|            0|            0|  0.00%|        return self.__class__(self.data.casefold())
  1403|         0|            0|            0|  0.00%|
  1404|         0|            0|            0|  0.00%|    def center(self, width, *args):
  1405|         0|            0|            0|  0.00%|        return self.__class__(self.data.center(width, *args))
  1406|         0|            0|            0|  0.00%|
  1407|         0|            0|            0|  0.00%|    def count(self, sub, start=0, end=_sys.maxsize):
  1408|         0|            0|            0|  0.00%|        if isinstance(sub, UserString):
  1409|         0|            0|            0|  0.00%|            sub = sub.data
  1410|         0|            0|            0|  0.00%|        return self.data.count(sub, start, end)
  1411|         0|            0|            0|  0.00%|
  1412|         0|            0|            0|  0.00%|    def removeprefix(self, prefix, /):
  1413|         0|            0|            0|  0.00%|        if isinstance(prefix, UserString):
  1414|         0|            0|            0|  0.00%|            prefix = prefix.data
  1415|         0|            0|            0|  0.00%|        return self.__class__(self.data.removeprefix(prefix))
  1416|         0|            0|            0|  0.00%|
  1417|         0|            0|            0|  0.00%|    def removesuffix(self, suffix, /):
  1418|         0|            0|            0|  0.00%|        if isinstance(suffix, UserString):
  1419|         0|            0|            0|  0.00%|            suffix = suffix.data
  1420|         0|            0|            0|  0.00%|        return self.__class__(self.data.removesuffix(suffix))
  1421|         0|            0|            0|  0.00%|
  1422|         0|            0|            0|  0.00%|    def encode(self, encoding='utf-8', errors='strict'):
  1423|         0|            0|            0|  0.00%|        encoding = 'utf-8' if encoding is None else encoding
  1424|         0|            0|            0|  0.00%|        errors = 'strict' if errors is None else errors
  1425|         0|            0|            0|  0.00%|        return self.data.encode(encoding, errors)
  1426|         0|            0|            0|  0.00%|
  1427|         0|            0|            0|  0.00%|    def endswith(self, suffix, start=0, end=_sys.maxsize):
  1428|         0|            0|            0|  0.00%|        return self.data.endswith(suffix, start, end)
  1429|         0|            0|            0|  0.00%|
  1430|         0|            0|            0|  0.00%|    def expandtabs(self, tabsize=8):
  1431|         0|            0|            0|  0.00%|        return self.__class__(self.data.expandtabs(tabsize))
  1432|         0|            0|            0|  0.00%|
  1433|         0|            0|            0|  0.00%|    def find(self, sub, start=0, end=_sys.maxsize):
  1434|         0|            0|            0|  0.00%|        if isinstance(sub, UserString):
  1435|         0|            0|            0|  0.00%|            sub = sub.data
  1436|         0|            0|            0|  0.00%|        return self.data.find(sub, start, end)
  1437|         0|            0|            0|  0.00%|
  1438|         0|            0|            0|  0.00%|    def format(self, /, *args, **kwds):
  1439|         0|            0|            0|  0.00%|        return self.data.format(*args, **kwds)
  1440|         0|            0|            0|  0.00%|
  1441|         0|            0|            0|  0.00%|    def format_map(self, mapping):
  1442|         0|            0|            0|  0.00%|        return self.data.format_map(mapping)
  1443|         0|            0|            0|  0.00%|
  1444|         0|            0|            0|  0.00%|    def index(self, sub, start=0, end=_sys.maxsize):
  1445|         0|            0|            0|  0.00%|        return self.data.index(sub, start, end)
  1446|         0|            0|            0|  0.00%|
  1447|         0|            0|            0|  0.00%|    def isalpha(self):
  1448|         0|            0|            0|  0.00%|        return self.data.isalpha()
  1449|         0|            0|            0|  0.00%|
  1450|         0|            0|            0|  0.00%|    def isalnum(self):
  1451|         0|            0|            0|  0.00%|        return self.data.isalnum()
  1452|         0|            0|            0|  0.00%|
  1453|         0|            0|            0|  0.00%|    def isascii(self):
  1454|         0|            0|            0|  0.00%|        return self.data.isascii()
  1455|         0|            0|            0|  0.00%|
  1456|         0|            0|            0|  0.00%|    def isdecimal(self):
  1457|         0|            0|            0|  0.00%|        return self.data.isdecimal()
  1458|         0|            0|            0|  0.00%|
  1459|         0|            0|            0|  0.00%|    def isdigit(self):
  1460|         0|            0|            0|  0.00%|        return self.data.isdigit()
  1461|         0|            0|            0|  0.00%|
  1462|         0|            0|            0|  0.00%|    def isidentifier(self):
  1463|         0|            0|            0|  0.00%|        return self.data.isidentifier()
  1464|         0|            0|            0|  0.00%|
  1465|         0|            0|            0|  0.00%|    def islower(self):
  1466|         0|            0|            0|  0.00%|        return self.data.islower()
  1467|         0|            0|            0|  0.00%|
  1468|         0|            0|            0|  0.00%|    def isnumeric(self):
  1469|         0|            0|            0|  0.00%|        return self.data.isnumeric()
  1470|         0|            0|            0|  0.00%|
  1471|         0|            0|            0|  0.00%|    def isprintable(self):
  1472|         0|            0|            0|  0.00%|        return self.data.isprintable()
  1473|         0|            0|            0|  0.00%|
  1474|         0|            0|            0|  0.00%|    def isspace(self):
  1475|         0|            0|            0|  0.00%|        return self.data.isspace()
  1476|         0|            0|            0|  0.00%|
  1477|         0|            0|            0|  0.00%|    def istitle(self):
  1478|         0|            0|            0|  0.00%|        return self.data.istitle()
  1479|         0|            0|            0|  0.00%|
  1480|         0|            0|            0|  0.00%|    def isupper(self):
  1481|         0|            0|            0|  0.00%|        return self.data.isupper()
  1482|         0|            0|            0|  0.00%|
  1483|         0|            0|            0|  0.00%|    def join(self, seq):
  1484|         0|            0|            0|  0.00%|        return self.data.join(seq)
  1485|         0|            0|            0|  0.00%|
  1486|         0|            0|            0|  0.00%|    def ljust(self, width, *args):
  1487|         0|            0|            0|  0.00%|        return self.__class__(self.data.ljust(width, *args))
  1488|         0|            0|            0|  0.00%|
  1489|         0|            0|            0|  0.00%|    def lower(self):
  1490|         0|            0|            0|  0.00%|        return self.__class__(self.data.lower())
  1491|         0|            0|            0|  0.00%|
  1492|         0|            0|            0|  0.00%|    def lstrip(self, chars=None):
  1493|         0|            0|            0|  0.00%|        return self.__class__(self.data.lstrip(chars))
  1494|         0|            0|            0|  0.00%|
  1495|         0|            0|            0|  0.00%|    maketrans = str.maketrans
  1496|         0|            0|            0|  0.00%|
  1497|         0|            0|            0|  0.00%|    def partition(self, sep):
  1498|         0|            0|            0|  0.00%|        return self.data.partition(sep)
  1499|         0|            0|            0|  0.00%|
  1500|         0|            0|            0|  0.00%|    def replace(self, old, new, maxsplit=-1):
  1501|         0|            0|            0|  0.00%|        if isinstance(old, UserString):
  1502|         0|            0|            0|  0.00%|            old = old.data
  1503|         0|            0|            0|  0.00%|        if isinstance(new, UserString):
  1504|         0|            0|            0|  0.00%|            new = new.data
  1505|         0|            0|            0|  0.00%|        return self.__class__(self.data.replace(old, new, maxsplit))
  1506|         0|            0|            0|  0.00%|
  1507|         0|            0|            0|  0.00%|    def rfind(self, sub, start=0, end=_sys.maxsize):
  1508|         0|            0|            0|  0.00%|        if isinstance(sub, UserString):
  1509|         0|            0|            0|  0.00%|            sub = sub.data
  1510|         0|            0|            0|  0.00%|        return self.data.rfind(sub, start, end)
  1511|         0|            0|            0|  0.00%|
  1512|         0|            0|            0|  0.00%|    def rindex(self, sub, start=0, end=_sys.maxsize):
  1513|         0|            0|            0|  0.00%|        return self.data.rindex(sub, start, end)
  1514|         0|            0|            0|  0.00%|
  1515|         0|            0|            0|  0.00%|    def rjust(self, width, *args):
  1516|         0|            0|            0|  0.00%|        return self.__class__(self.data.rjust(width, *args))
  1517|         0|            0|            0|  0.00%|
  1518|         0|            0|            0|  0.00%|    def rpartition(self, sep):
  1519|         0|            0|            0|  0.00%|        return self.data.rpartition(sep)
  1520|         0|            0|            0|  0.00%|
  1521|         0|            0|            0|  0.00%|    def rstrip(self, chars=None):
  1522|         0|            0|            0|  0.00%|        return self.__class__(self.data.rstrip(chars))
  1523|         0|            0|            0|  0.00%|
  1524|         0|            0|            0|  0.00%|    def split(self, sep=None, maxsplit=-1):
  1525|         0|            0|            0|  0.00%|        return self.data.split(sep, maxsplit)
  1526|         0|            0|            0|  0.00%|
  1527|         0|            0|            0|  0.00%|    def rsplit(self, sep=None, maxsplit=-1):
  1528|         0|            0|            0|  0.00%|        return self.data.rsplit(sep, maxsplit)
  1529|         0|            0|            0|  0.00%|
  1530|         0|            0|            0|  0.00%|    def splitlines(self, keepends=False):
  1531|         0|            0|            0|  0.00%|        return self.data.splitlines(keepends)
  1532|         0|            0|            0|  0.00%|
  1533|         0|            0|            0|  0.00%|    def startswith(self, prefix, start=0, end=_sys.maxsize):
  1534|         0|            0|            0|  0.00%|        return self.data.startswith(prefix, start, end)
  1535|         0|            0|            0|  0.00%|
  1536|         0|            0|            0|  0.00%|    def strip(self, chars=None):
  1537|         0|            0|            0|  0.00%|        return self.__class__(self.data.strip(chars))
  1538|         0|            0|            0|  0.00%|
  1539|         0|            0|            0|  0.00%|    def swapcase(self):
  1540|         0|            0|            0|  0.00%|        return self.__class__(self.data.swapcase())
  1541|         0|            0|            0|  0.00%|
  1542|         0|            0|            0|  0.00%|    def title(self):
  1543|         0|            0|            0|  0.00%|        return self.__class__(self.data.title())
  1544|         0|            0|            0|  0.00%|
  1545|         0|            0|            0|  0.00%|    def translate(self, *args):
  1546|         0|            0|            0|  0.00%|        return self.__class__(self.data.translate(*args))
  1547|         0|            0|            0|  0.00%|
  1548|         0|            0|            0|  0.00%|    def upper(self):
  1549|         0|            0|            0|  0.00%|        return self.__class__(self.data.upper())
  1550|         0|            0|            0|  0.00%|
  1551|         0|            0|            0|  0.00%|    def zfill(self, width):
  1552|         0|            0|            0|  0.00%|        return self.__class__(self.data.zfill(width))
File: /usr/lib/python3.10/re.py
File duration: 0.00130749s (0.54%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|#
     2|         0|            0|            0|  0.00%|# Secret Labs' Regular Expression Engine
     3|         0|            0|            0|  0.00%|#
     4|         0|            0|            0|  0.00%|# re-compatible interface for the sre matching engine
     5|         0|            0|            0|  0.00%|#
     6|         0|            0|            0|  0.00%|# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.
     7|         0|            0|            0|  0.00%|#
     8|         0|            0|            0|  0.00%|# This version of the SRE library can be redistributed under CNRI's
     9|         0|            0|            0|  0.00%|# Python 1.6 license.  For any other use, please contact Secret Labs
    10|         0|            0|            0|  0.00%|# AB (info@pythonware.com).
    11|         0|            0|            0|  0.00%|#
    12|         0|            0|            0|  0.00%|# Portions of this engine have been developed in cooperation with
    13|         0|            0|            0|  0.00%|# CNRI.  Hewlett-Packard provided funding for 1.6 integration and
    14|         0|            0|            0|  0.00%|# other compatibility work.
    15|         0|            0|            0|  0.00%|#
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|r"""Support for regular expressions (RE).
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|This module provides regular expression matching operations similar to
    20|         0|            0|            0|  0.00%|those found in Perl.  It supports both 8-bit and Unicode strings; both
    21|         0|            0|            0|  0.00%|the pattern and the strings being processed can contain null bytes and
    22|         0|            0|            0|  0.00%|characters outside the US ASCII range.
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|Regular expressions can contain both special and ordinary characters.
    25|         0|            0|            0|  0.00%|Most ordinary characters, like "A", "a", or "0", are the simplest
    26|         0|            0|            0|  0.00%|regular expressions; they simply match themselves.  You can
    27|         0|            0|            0|  0.00%|concatenate ordinary characters, so last matches the string 'last'.
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|The special characters are:
    30|         0|            0|            0|  0.00%|    "."      Matches any character except a newline.
    31|         0|            0|            0|  0.00%|    "^"      Matches the start of the string.
    32|         0|            0|            0|  0.00%|    "$"      Matches the end of the string or just before the newline at
    33|         0|            0|            0|  0.00%|             the end of the string.
    34|         0|            0|            0|  0.00%|    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
    35|         0|            0|            0|  0.00%|             Greedy means that it will match as many repetitions as possible.
    36|         0|            0|            0|  0.00%|    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
    37|         0|            0|            0|  0.00%|    "?"      Matches 0 or 1 (greedy) of the preceding RE.
    38|         0|            0|            0|  0.00%|    *?,+?,?? Non-greedy versions of the previous three special characters.
    39|         0|            0|            0|  0.00%|    {m,n}    Matches from m to n repetitions of the preceding RE.
    40|         0|            0|            0|  0.00%|    {m,n}?   Non-greedy version of the above.
    41|         0|            0|            0|  0.00%|    "\\"     Either escapes special characters or signals a special sequence.
    42|         0|            0|            0|  0.00%|    []       Indicates a set of characters.
    43|         0|            0|            0|  0.00%|             A "^" as the first character indicates a complementing set.
    44|         0|            0|            0|  0.00%|    "|"      A|B, creates an RE that will match either A or B.
    45|         0|            0|            0|  0.00%|    (...)    Matches the RE inside the parentheses.
    46|         0|            0|            0|  0.00%|             The contents can be retrieved or matched later in the string.
    47|         0|            0|            0|  0.00%|    (?aiLmsux) The letters set the corresponding flags defined below.
    48|         0|            0|            0|  0.00%|    (?:...)  Non-grouping version of regular parentheses.
    49|         0|            0|            0|  0.00%|    (?P<name>...) The substring matched by the group is accessible by name.
    50|         0|            0|            0|  0.00%|    (?P=name)     Matches the text matched earlier by the group named name.
    51|         0|            0|            0|  0.00%|    (?#...)  A comment; ignored.
    52|         0|            0|            0|  0.00%|    (?=...)  Matches if ... matches next, but doesn't consume the string.
    53|         0|            0|            0|  0.00%|    (?!...)  Matches if ... doesn't match next.
    54|         0|            0|            0|  0.00%|    (?<=...) Matches if preceded by ... (must be fixed length).
    55|         0|            0|            0|  0.00%|    (?<!...) Matches if not preceded by ... (must be fixed length).
    56|         0|            0|            0|  0.00%|    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
    57|         0|            0|            0|  0.00%|                       the (optional) no pattern otherwise.
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|The special sequences consist of "\\" and a character from the list
    60|         0|            0|            0|  0.00%|below.  If the ordinary character is not on the list, then the
    61|         0|            0|            0|  0.00%|resulting RE will match the second character.
    62|         0|            0|            0|  0.00%|    \number  Matches the contents of the group of the same number.
    63|         0|            0|            0|  0.00%|    \A       Matches only at the start of the string.
    64|         0|            0|            0|  0.00%|    \Z       Matches only at the end of the string.
    65|         0|            0|            0|  0.00%|    \b       Matches the empty string, but only at the start or end of a word.
    66|         0|            0|            0|  0.00%|    \B       Matches the empty string, but not at the start or end of a word.
    67|         0|            0|            0|  0.00%|    \d       Matches any decimal digit; equivalent to the set [0-9] in
    68|         0|            0|            0|  0.00%|             bytes patterns or string patterns with the ASCII flag.
    69|         0|            0|            0|  0.00%|             In string patterns without the ASCII flag, it will match the whole
    70|         0|            0|            0|  0.00%|             range of Unicode digits.
    71|         0|            0|            0|  0.00%|    \D       Matches any non-digit character; equivalent to [^\d].
    72|         0|            0|            0|  0.00%|    \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in
    73|         0|            0|            0|  0.00%|             bytes patterns or string patterns with the ASCII flag.
    74|         0|            0|            0|  0.00%|             In string patterns without the ASCII flag, it will match the whole
    75|         0|            0|            0|  0.00%|             range of Unicode whitespace characters.
    76|         0|            0|            0|  0.00%|    \S       Matches any non-whitespace character; equivalent to [^\s].
    77|         0|            0|            0|  0.00%|    \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
    78|         0|            0|            0|  0.00%|             in bytes patterns or string patterns with the ASCII flag.
    79|         0|            0|            0|  0.00%|             In string patterns without the ASCII flag, it will match the
    80|         0|            0|            0|  0.00%|             range of Unicode alphanumeric characters (letters plus digits
    81|         0|            0|            0|  0.00%|             plus underscore).
    82|         0|            0|            0|  0.00%|             With LOCALE, it will match the set [0-9_] plus characters defined
    83|         0|            0|            0|  0.00%|             as letters for the current locale.
    84|         0|            0|            0|  0.00%|    \W       Matches the complement of \w.
    85|         0|            0|            0|  0.00%|    \\       Matches a literal backslash.
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|This module exports the following functions:
    88|         0|            0|            0|  0.00%|    match     Match a regular expression pattern to the beginning of a string.
    89|         0|            0|            0|  0.00%|    fullmatch Match a regular expression pattern to all of a string.
    90|         0|            0|            0|  0.00%|    search    Search a string for the presence of a pattern.
    91|         0|            0|            0|  0.00%|    sub       Substitute occurrences of a pattern found in a string.
    92|         0|            0|            0|  0.00%|    subn      Same as sub, but also return the number of substitutions made.
    93|         0|            0|            0|  0.00%|    split     Split a string by the occurrences of a pattern.
    94|         0|            0|            0|  0.00%|    findall   Find all occurrences of a pattern in a string.
    95|         0|            0|            0|  0.00%|    finditer  Return an iterator yielding a Match object for each match.
    96|         0|            0|            0|  0.00%|    compile   Compile a pattern into a Pattern object.
    97|         0|            0|            0|  0.00%|    purge     Clear the regular expression cache.
    98|         0|            0|            0|  0.00%|    escape    Backslash all non-alphanumerics in a string.
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|Each function other than purge and escape can take an optional 'flags' argument
   101|         0|            0|            0|  0.00%|consisting of one or more of the following module constants, joined by "|".
   102|         0|            0|            0|  0.00%|A, L, and U are mutually exclusive.
   103|         0|            0|            0|  0.00%|    A  ASCII       For string patterns, make \w, \W, \b, \B, \d, \D
   104|         0|            0|            0|  0.00%|                   match the corresponding ASCII character categories
   105|         0|            0|            0|  0.00%|                   (rather than the whole Unicode categories, which is the
   106|         0|            0|            0|  0.00%|                   default).
   107|         0|            0|            0|  0.00%|                   For bytes patterns, this flag is the only available
   108|         0|            0|            0|  0.00%|                   behaviour and needn't be specified.
   109|         0|            0|            0|  0.00%|    I  IGNORECASE  Perform case-insensitive matching.
   110|         0|            0|            0|  0.00%|    L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
   111|         0|            0|            0|  0.00%|    M  MULTILINE   "^" matches the beginning of lines (after a newline)
   112|         0|            0|            0|  0.00%|                   as well as the string.
   113|         0|            0|            0|  0.00%|                   "$" matches the end of lines (before a newline) as well
   114|         0|            0|            0|  0.00%|                   as the end of the string.
   115|         0|            0|            0|  0.00%|    S  DOTALL      "." matches any character at all, including the newline.
   116|         0|            0|            0|  0.00%|    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
   117|         0|            0|            0|  0.00%|    U  UNICODE     For compatibility only. Ignored for string patterns (it
   118|         0|            0|            0|  0.00%|                   is the default), and forbidden for bytes patterns.
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|This module also defines an exception 'error'.
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|"""
   123|         0|            0|            0|  0.00%|
   124|         0|            0|            0|  0.00%|import enum
   125|         0|            0|            0|  0.00%|import sre_compile
   126|         0|            0|            0|  0.00%|import sre_parse
   127|         0|            0|            0|  0.00%|import functools
   128|         0|            0|            0|  0.00%|try:
   129|         0|            0|            0|  0.00%|    import _locale
   130|         0|            0|            0|  0.00%|except ImportError:
   131|         0|            0|            0|  0.00%|    _locale = None
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|# public symbols
   135|         0|            0|            0|  0.00%|__all__ = [
   136|         0|            0|            0|  0.00%|    "match", "fullmatch", "search", "sub", "subn", "split",
   137|         0|            0|            0|  0.00%|    "findall", "finditer", "compile", "purge", "template", "escape",
   138|         0|            0|            0|  0.00%|    "error", "Pattern", "Match", "A", "I", "L", "M", "S", "X", "U",
   139|         0|            0|            0|  0.00%|    "ASCII", "IGNORECASE", "LOCALE", "MULTILINE", "DOTALL", "VERBOSE",
   140|         0|            0|            0|  0.00%|    "UNICODE",
   141|         0|            0|            0|  0.00%|]
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|__version__ = "2.2.1"
   144|         0|            0|            0|  0.00%|
   145|         0|            0|            0|  0.00%|class RegexFlag(enum.IntFlag):
   146|         0|            0|            0|  0.00%|    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii "locale"
   147|         0|            0|            0|  0.00%|    IGNORECASE = I = sre_compile.SRE_FLAG_IGNORECASE # ignore case
   148|         0|            0|            0|  0.00%|    LOCALE = L = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale
   149|         0|            0|            0|  0.00%|    UNICODE = U = sre_compile.SRE_FLAG_UNICODE # assume unicode "locale"
   150|         0|            0|            0|  0.00%|    MULTILINE = M = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline
   151|         0|            0|            0|  0.00%|    DOTALL = S = sre_compile.SRE_FLAG_DOTALL # make dot match newline
   152|         0|            0|            0|  0.00%|    VERBOSE = X = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments
   153|         0|            0|            0|  0.00%|    # sre extensions (experimental, don't rely on these)
   154|         0|            0|            0|  0.00%|    TEMPLATE = T = sre_compile.SRE_FLAG_TEMPLATE # disable backtracking
   155|         0|            0|            0|  0.00%|    DEBUG = sre_compile.SRE_FLAG_DEBUG # dump pattern after compilation
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|    def __repr__(self):
   158|         0|            0|            0|  0.00%|        if self._name_ is not None:
   159|         0|            0|            0|  0.00%|            return f're.{self._name_}'
   160|         0|            0|            0|  0.00%|        value = self._value_
   161|         0|            0|            0|  0.00%|        members = []
   162|         0|            0|            0|  0.00%|        negative = value < 0
   163|         0|            0|            0|  0.00%|        if negative:
   164|         0|            0|            0|  0.00%|            value = ~value
   165|         0|            0|            0|  0.00%|        for m in self.__class__:
   166|         0|            0|            0|  0.00%|            if value & m._value_:
   167|         0|            0|            0|  0.00%|                value &= ~m._value_
   168|         0|            0|            0|  0.00%|                members.append(f're.{m._name_}')
   169|         0|            0|            0|  0.00%|        if value:
   170|         0|            0|            0|  0.00%|            members.append(hex(value))
   171|         0|            0|            0|  0.00%|        res = '|'.join(members)
   172|         0|            0|            0|  0.00%|        if negative:
   173|         0|            0|            0|  0.00%|            if len(members) > 1:
   174|         0|            0|            0|  0.00%|                res = f'~({res})'
   175|         0|            0|            0|  0.00%|            else:
   176|         0|            0|            0|  0.00%|                res = f'~{res}'
   177|         0|            0|            0|  0.00%|        return res
   178|         0|            0|            0|  0.00%|    __str__ = object.__str__
   179|         0|            0|            0|  0.00%|globals().update(RegexFlag.__members__)
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|# sre exception
   182|         0|            0|            0|  0.00%|error = sre_compile.error
   183|         0|            0|            0|  0.00%|
   184|         0|            0|            0|  0.00%|# --------------------------------------------------------------------
   185|         0|            0|            0|  0.00%|# public interface
   186|         0|            0|            0|  0.00%|
   187|         0|            0|            0|  0.00%|def match(pattern, string, flags=0):
   188|         0|            0|            0|  0.00%|    """Try to apply the pattern at the start of the string, returning
   189|         0|            0|            0|  0.00%|    a Match object, or None if no match was found."""
   190|         0|            0|            0|  0.00%|    return _compile(pattern, flags).match(string)
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|def fullmatch(pattern, string, flags=0):
   193|         0|            0|            0|  0.00%|    """Try to apply the pattern to all of the string, returning
   194|         0|            0|            0|  0.00%|    a Match object, or None if no match was found."""
   195|         0|            0|            0|  0.00%|    return _compile(pattern, flags).fullmatch(string)
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|def search(pattern, string, flags=0):
   198|         0|            0|            0|  0.00%|    """Scan through string looking for a match to the pattern, returning
   199|         0|            0|            0|  0.00%|    a Match object, or None if no match was found."""
   200|         0|            0|            0|  0.00%|    return _compile(pattern, flags).search(string)
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|def sub(pattern, repl, string, count=0, flags=0):
   203|         0|            0|            0|  0.00%|    """Return the string obtained by replacing the leftmost
   204|         0|            0|            0|  0.00%|    non-overlapping occurrences of the pattern in string by the
   205|         0|            0|            0|  0.00%|    replacement repl.  repl can be either a string or a callable;
   206|         0|            0|            0|  0.00%|    if a string, backslash escapes in it are processed.  If it is
   207|         0|            0|            0|  0.00%|    a callable, it's passed the Match object and must return
   208|         0|            0|            0|  0.00%|    a replacement string to be used."""
   209|         0|            0|            0|  0.00%|    return _compile(pattern, flags).sub(repl, string, count)
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|def subn(pattern, repl, string, count=0, flags=0):
   212|         0|            0|            0|  0.00%|    """Return a 2-tuple containing (new_string, number).
   213|         0|            0|            0|  0.00%|    new_string is the string obtained by replacing the leftmost
   214|         0|            0|            0|  0.00%|    non-overlapping occurrences of the pattern in the source
   215|         0|            0|            0|  0.00%|    string by the replacement repl.  number is the number of
   216|         0|            0|            0|  0.00%|    substitutions that were made. repl can be either a string or a
   217|         0|            0|            0|  0.00%|    callable; if a string, backslash escapes in it are processed.
   218|         0|            0|            0|  0.00%|    If it is a callable, it's passed the Match object and must
   219|         0|            0|            0|  0.00%|    return a replacement string to be used."""
   220|         0|            0|            0|  0.00%|    return _compile(pattern, flags).subn(repl, string, count)
   221|         0|            0|            0|  0.00%|
   222|         0|            0|            0|  0.00%|def split(pattern, string, maxsplit=0, flags=0):
   223|         0|            0|            0|  0.00%|    """Split the source string by the occurrences of the pattern,
   224|         0|            0|            0|  0.00%|    returning a list containing the resulting substrings.  If
   225|         0|            0|            0|  0.00%|    capturing parentheses are used in pattern, then the text of all
   226|         0|            0|            0|  0.00%|    groups in the pattern are also returned as part of the resulting
   227|         0|            0|            0|  0.00%|    list.  If maxsplit is nonzero, at most maxsplit splits occur,
   228|         0|            0|            0|  0.00%|    and the remainder of the string is returned as the final element
   229|         0|            0|            0|  0.00%|    of the list."""
   230|         0|            0|            0|  0.00%|    return _compile(pattern, flags).split(string, maxsplit)
   231|         0|            0|            0|  0.00%|
   232|         0|            0|            0|  0.00%|def findall(pattern, string, flags=0):
   233|         0|            0|            0|  0.00%|    """Return a list of all non-overlapping matches in the string.
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|    If one or more capturing groups are present in the pattern, return
   236|         0|            0|            0|  0.00%|    a list of groups; this will be a list of tuples if the pattern
   237|         0|            0|            0|  0.00%|    has more than one group.
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    Empty matches are included in the result."""
   240|         0|            0|            0|  0.00%|    return _compile(pattern, flags).findall(string)
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|def finditer(pattern, string, flags=0):
   243|         0|            0|            0|  0.00%|    """Return an iterator over all non-overlapping matches in the
   244|         0|            0|            0|  0.00%|    string.  For each match, the iterator returns a Match object.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    Empty matches are included in the result."""
   247|         0|            0|            0|  0.00%|    return _compile(pattern, flags).finditer(string)
   248|         0|            0|            0|  0.00%|
   249|        13|   5.8651e-05|  4.51161e-06|  0.02%|def compile(pattern, flags=0):
   250|         0|            0|            0|  0.00%|    "Compile a regular expression pattern, returning a Pattern object."
   251|        13|   0.00013113|  1.00869e-05|  0.05%|    return _compile(pattern, flags)
(call)|        13|    0.0490141|   0.00377031| 20.18%|# /usr/lib/python3.10/re.py:288 _compile
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|def purge():
   254|         0|            0|            0|  0.00%|    "Clear the regular expression caches"
   255|         0|            0|            0|  0.00%|    _cache.clear()
   256|         0|            0|            0|  0.00%|    _compile_repl.cache_clear()
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|def template(pattern, flags=0):
   259|         0|            0|            0|  0.00%|    "Compile a template pattern, returning a Pattern object"
   260|         0|            0|            0|  0.00%|    return _compile(pattern, flags|T)
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|# SPECIAL_CHARS
   263|         0|            0|            0|  0.00%|# closing ')', '}' and ']'
   264|         0|            0|            0|  0.00%|# '-' (a range in character set)
   265|         0|            0|            0|  0.00%|# '&', '~', (extended character set operations)
   266|         0|            0|            0|  0.00%|# '#' (comment) and WHITESPACE (ignored) in verbose mode
   267|         0|            0|            0|  0.00%|_special_chars_map = {i: '\\' + chr(i) for i in b'()[]{}?*+-|^$\\.&~# \t\n\r\v\f'}
   268|         0|            0|            0|  0.00%|
   269|        43|  0.000106096|  2.46736e-06|  0.04%|def escape(pattern):
   270|         0|            0|            0|  0.00%|    """
   271|         0|            0|            0|  0.00%|    Escape special characters in a string.
   272|         0|            0|            0|  0.00%|    """
   273|        43|  0.000124216|  2.88875e-06|  0.05%|    if isinstance(pattern, str):
   274|        43|   0.00014329|  3.33232e-06|  0.06%|        return pattern.translate(_special_chars_map)
   275|         0|            0|            0|  0.00%|    else:
   276|         0|            0|            0|  0.00%|        pattern = str(pattern, 'latin1')
   277|         0|            0|            0|  0.00%|        return pattern.translate(_special_chars_map).encode('latin1')
   278|         0|            0|            0|  0.00%|
   279|         0|            0|            0|  0.00%|Pattern = type(sre_compile.compile('', 0))
   280|         0|            0|            0|  0.00%|Match = type(sre_compile.compile('', 0).match(''))
   281|         0|            0|            0|  0.00%|
   282|         0|            0|            0|  0.00%|# --------------------------------------------------------------------
   283|         0|            0|            0|  0.00%|# internals
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|_cache = {}  # ordered!
   286|         0|            0|            0|  0.00%|
   287|         0|            0|            0|  0.00%|_MAXCACHE = 512
   288|        13|  3.93391e-05|  3.02608e-06|  0.02%|def _compile(pattern, flags):
   289|         0|            0|            0|  0.00%|    # internal: compile pattern
   290|        13|  5.26905e-05|  4.05312e-06|  0.02%|    if isinstance(flags, RegexFlag):
   291|         3|  2.90871e-05|  9.69569e-06|  0.01%|        flags = flags.value
(call)|         3|  8.13007e-05|  2.71002e-05|  0.03%|# /usr/lib/python3.10/types.py:176 __get__
   292|        13|  4.57764e-05|  3.52126e-06|  0.02%|    try:
   293|        13|  5.38826e-05|  4.14482e-06|  0.02%|        return _cache[type(pattern), pattern, flags]
   294|         7|  2.59876e-05|  3.71252e-06|  0.01%|    except KeyError:
   295|         7|  2.38419e-05|  3.40598e-06|  0.01%|        pass
   296|         7|  2.47955e-05|  3.54222e-06|  0.01%|    if isinstance(pattern, Pattern):
   297|         0|            0|            0|  0.00%|        if flags:
   298|         0|            0|            0|  0.00%|            raise ValueError(
   299|         0|            0|            0|  0.00%|                "cannot process flags argument with a compiled pattern")
   300|         0|            0|            0|  0.00%|        return pattern
   301|         7|  6.29425e-05|  8.99179e-06|  0.03%|    if not sre_compile.isstring(pattern):
(call)|         7|  5.03063e-05|  7.18662e-06|  0.02%|# /usr/lib/python3.10/sre_compile.py:595 isstring
   302|         0|            0|            0|  0.00%|        raise TypeError("first argument must be string or compiled pattern")
   303|         7|  8.13007e-05|  1.16144e-05|  0.03%|    p = sre_compile.compile(pattern, flags)
(call)|         7|    0.0476847|    0.0068121| 19.63%|# /usr/lib/python3.10/sre_compile.py:759 compile
   304|         7|  6.67572e-05|  9.53674e-06|  0.03%|    if not (flags & DEBUG):
(call)|         7|   0.00061512|  8.78743e-05|  0.25%|# /usr/lib/python3.10/enum.py:986 __and__
   305|         7|  2.74181e-05|  3.91688e-06|  0.01%|        if len(_cache) >= _MAXCACHE:
   306|         0|            0|            0|  0.00%|            # Drop the oldest item
   307|         0|            0|            0|  0.00%|            try:
   308|         0|            0|            0|  0.00%|                del _cache[next(iter(_cache))]
   309|         0|            0|            0|  0.00%|            except (StopIteration, RuntimeError, KeyError):
   310|         0|            0|            0|  0.00%|                pass
   311|         7|   2.5034e-05|  3.57628e-06|  0.01%|        _cache[type(pattern), pattern, flags] = p
   312|         7|  2.38419e-05|  3.40598e-06|  0.01%|    return p
   313|         0|            0|            0|  0.00%|
   314|         2|  6.67572e-06|  3.33786e-06|  0.00%|@functools.lru_cache(_MAXCACHE)
   315|         0|            0|            0|  0.00%|def _compile_repl(repl, pattern):
   316|         0|            0|            0|  0.00%|    # internal: compile replacement pattern
   317|         2|  2.55108e-05|  1.27554e-05|  0.01%|    return sre_parse.parse_template(repl, pattern)
(call)|         2|   0.00082469|  0.000412345|  0.34%|# /usr/lib/python3.10/sre_parse.py:969 parse_template
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|def _expand(pattern, match, template):
   320|         0|            0|            0|  0.00%|    # internal: Match.expand implementation hook
   321|         0|            0|            0|  0.00%|    template = sre_parse.parse_template(template, pattern)
   322|         0|            0|            0|  0.00%|    return sre_parse.expand_template(template, match)
   323|         0|            0|            0|  0.00%|
   324|         8|  2.40803e-05|  3.01003e-06|  0.01%|def _subx(pattern, template):
   325|         0|            0|            0|  0.00%|    # internal: Pattern.sub/subn implementation helper
   326|         8|  4.07696e-05|   5.0962e-06|  0.02%|    template = _compile_repl(template, pattern)
(call)|         2|  0.000856876|  0.000428438|  0.35%|# /usr/lib/python3.10/re.py:314 _compile_repl
   327|         8|  2.67029e-05|  3.33786e-06|  0.01%|    if not template[0] and len(template[1]) == 1:
   328|         0|            0|            0|  0.00%|        # literal replacement
   329|         4|  1.21593e-05|  3.03984e-06|  0.01%|        return template[1][0]
   330|         4|  1.35899e-05|  3.39746e-06|  0.01%|    def filter(match, template=template):
   331|         0|            0|            0|  0.00%|        return sre_parse.expand_template(template, match)
   332|         4|  1.19209e-05|  2.98023e-06|  0.00%|    return filter
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|# register myself for pickling
   335|         0|            0|            0|  0.00%|
   336|         0|            0|            0|  0.00%|import copyreg
   337|         0|            0|            0|  0.00%|
   338|         0|            0|            0|  0.00%|def _pickle(p):
   339|         0|            0|            0|  0.00%|    return _compile, (p.pattern, p.flags)
   340|         0|            0|            0|  0.00%|
   341|         0|            0|            0|  0.00%|copyreg.pickle(Pattern, _pickle, _compile)
   342|         0|            0|            0|  0.00%|
   343|         0|            0|            0|  0.00%|# --------------------------------------------------------------------
   344|         0|            0|            0|  0.00%|# experimental stuff (see python-dev discussions for details)
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|class Scanner:
   347|         0|            0|            0|  0.00%|    def __init__(self, lexicon, flags=0):
   348|         0|            0|            0|  0.00%|        from sre_constants import BRANCH, SUBPATTERN
   349|         0|            0|            0|  0.00%|        if isinstance(flags, RegexFlag):
   350|         0|            0|            0|  0.00%|            flags = flags.value
   351|         0|            0|            0|  0.00%|        self.lexicon = lexicon
   352|         0|            0|            0|  0.00%|        # combine phrases into a compound pattern
   353|         0|            0|            0|  0.00%|        p = []
   354|         0|            0|            0|  0.00%|        s = sre_parse.State()
   355|         0|            0|            0|  0.00%|        s.flags = flags
   356|         0|            0|            0|  0.00%|        for phrase, action in lexicon:
   357|         0|            0|            0|  0.00%|            gid = s.opengroup()
   358|         0|            0|            0|  0.00%|            p.append(sre_parse.SubPattern(s, [
   359|         0|            0|            0|  0.00%|                (SUBPATTERN, (gid, 0, 0, sre_parse.parse(phrase, flags))),
   360|         0|            0|            0|  0.00%|                ]))
   361|         0|            0|            0|  0.00%|            s.closegroup(gid, p[-1])
   362|         0|            0|            0|  0.00%|        p = sre_parse.SubPattern(s, [(BRANCH, (None, p))])
   363|         0|            0|            0|  0.00%|        self.scanner = sre_compile.compile(p)
   364|         0|            0|            0|  0.00%|    def scan(self, string):
   365|         0|            0|            0|  0.00%|        result = []
   366|         0|            0|            0|  0.00%|        append = result.append
   367|         0|            0|            0|  0.00%|        match = self.scanner.scanner(string).match
   368|         0|            0|            0|  0.00%|        i = 0
   369|         0|            0|            0|  0.00%|        while True:
   370|         0|            0|            0|  0.00%|            m = match()
   371|         0|            0|            0|  0.00%|            if not m:
   372|         0|            0|            0|  0.00%|                break
   373|         0|            0|            0|  0.00%|            j = m.end()
   374|         0|            0|            0|  0.00%|            if i == j:
   375|         0|            0|            0|  0.00%|                break
   376|         0|            0|            0|  0.00%|            action = self.lexicon[m.lastindex-1][1]
   377|         0|            0|            0|  0.00%|            if callable(action):
   378|         0|            0|            0|  0.00%|                self.match = m
   379|         0|            0|            0|  0.00%|                action = action(self, m.group())
   380|         0|            0|            0|  0.00%|            if action is not None:
   381|         0|            0|            0|  0.00%|                append(action)
   382|         0|            0|            0|  0.00%|            i = j
   383|         0|            0|            0|  0.00%|        return result, string[i:]
File: /usr/lib/python3.10/hashlib.py
File duration: 0.00127673s (0.53%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         1|  8.34465e-06|  8.34465e-06|  0.00%|#.  Copyright (C) 2005-2010   Gregory P. Smith (greg@krypto.org)
     2|         0|            0|            0|  0.00%|#  Licensed to PSF under a Contributor Agreement.
     3|         0|            0|            0|  0.00%|#
     4|         0|            0|            0|  0.00%|
     5|         1|  1.00136e-05|  1.00136e-05|  0.00%|__doc__ = """hashlib module - A common interface to many hash functions.
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|new(name, data=b'', **kwargs) - returns a new hash object implementing the
     8|         0|            0|            0|  0.00%|                                given hash function; initializing the hash
     9|         0|            0|            0|  0.00%|                                using the given binary data.
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|Named constructor functions are also available, these are faster
    12|         0|            0|            0|  0.00%|than using new(name):
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|md5(), sha1(), sha224(), sha256(), sha384(), sha512(), blake2b(), blake2s(),
    15|         0|            0|            0|  0.00%|sha3_224, sha3_256, sha3_384, sha3_512, shake_128, and shake_256.
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|More algorithms may be available on your platform but the above are guaranteed
    18|         0|            0|            0|  0.00%|to exist.  See the algorithms_guaranteed and algorithms_available attributes
    19|         0|            0|            0|  0.00%|to find out what algorithm names can be passed to new().
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|NOTE: If you want the adler32 or crc32 hash functions they are available in
    22|         0|            0|            0|  0.00%|the zlib module.
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|Choose your hash function wisely.  Some have known collision weaknesses.
    25|         0|            0|            0|  0.00%|sha384 and sha512 will be slow on 32 bit platforms.
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|Hash objects have these methods:
    28|         0|            0|            0|  0.00%| - update(data): Update the hash object with the bytes in data. Repeated calls
    29|         0|            0|            0|  0.00%|                 are equivalent to a single call with the concatenation of all
    30|         0|            0|            0|  0.00%|                 the arguments.
    31|         0|            0|            0|  0.00%| - digest():     Return the digest of the bytes passed to the update() method
    32|         0|            0|            0|  0.00%|                 so far as a bytes object.
    33|         0|            0|            0|  0.00%| - hexdigest():  Like digest() except the digest is returned as a string
    34|         0|            0|            0|  0.00%|                 of double length, containing only hexadecimal digits.
    35|         0|            0|            0|  0.00%| - copy():       Return a copy (clone) of the hash object. This can be used to
    36|         0|            0|            0|  0.00%|                 efficiently compute the digests of datas that share a common
    37|         0|            0|            0|  0.00%|                 initial substring.
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|For example, to obtain the digest of the byte string 'Nobody inspects the
    40|         0|            0|            0|  0.00%|spammish repetition':
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|    >>> import hashlib
    43|         0|            0|            0|  0.00%|    >>> m = hashlib.md5()
    44|         0|            0|            0|  0.00%|    >>> m.update(b"Nobody inspects")
    45|         0|            0|            0|  0.00%|    >>> m.update(b" the spammish repetition")
    46|         0|            0|            0|  0.00%|    >>> m.digest()
    47|         0|            0|            0|  0.00%|    b'\\xbbd\\x9c\\x83\\xdd\\x1e\\xa5\\xc9\\xd9\\xde\\xc9\\xa1\\x8d\\xf0\\xff\\xe9'
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|More condensed:
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|    >>> hashlib.sha224(b"Nobody inspects the spammish repetition").hexdigest()
    52|         0|            0|            0|  0.00%|    'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|"""
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|# This tuple and __get_builtin_constructor() must be modified if a new
    57|         0|            0|            0|  0.00%|# always available algorithm is added.
    58|         1|  5.24521e-06|  5.24521e-06|  0.00%|__always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512',
    59|         0|            0|            0|  0.00%|                      'blake2b', 'blake2s',
    60|         0|            0|            0|  0.00%|                      'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512',
    61|         0|            0|            0|  0.00%|                      'shake_128', 'shake_256')
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|
    64|         1|  6.19888e-06|  6.19888e-06|  0.00%|algorithms_guaranteed = set(__always_supported)
    65|         1|  5.72205e-06|  5.72205e-06|  0.00%|algorithms_available = set(__always_supported)
    66|         0|            0|            0|  0.00%|
    67|         1|  5.48363e-06|  5.48363e-06|  0.00%|__all__ = __always_supported + ('new', 'algorithms_guaranteed',
    68|         0|            0|            0|  0.00%|                                'algorithms_available', 'pbkdf2_hmac')
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|
    71|         1|  5.48363e-06|  5.48363e-06|  0.00%|__builtin_constructor_cache = {}
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|# Prefer our blake2 implementation
    74|         0|            0|            0|  0.00%|# OpenSSL 1.1.0 comes with a limited implementation of blake2b/s. The OpenSSL
    75|         0|            0|            0|  0.00%|# implementations neither support keyed blake2 (blake2 MAC) nor advanced
    76|         0|            0|            0|  0.00%|# features like salt, personalization, or tree hashing. OpenSSL hash-only
    77|         0|            0|            0|  0.00%|# variants are available as 'blake2b512' and 'blake2s256', though.
    78|         1|  5.96046e-06|  5.96046e-06|  0.00%|__block_openssl_constructor = {
    79|         1|  4.52995e-06|  4.52995e-06|  0.00%|    'blake2b', 'blake2s',
    80|         0|            0|            0|  0.00%|}
    81|         0|            0|            0|  0.00%|
    82|         3|  1.23978e-05|  4.13259e-06|  0.01%|def __get_builtin_constructor(name):
    83|         2|  7.86781e-06|  3.93391e-06|  0.00%|    cache = __builtin_constructor_cache
    84|         2|  8.58307e-06|  4.29153e-06|  0.00%|    constructor = cache.get(name)
    85|         2|  7.86781e-06|  3.93391e-06|  0.00%|    if constructor is not None:
    86|         1|   3.8147e-06|   3.8147e-06|  0.00%|        return constructor
    87|         1|  4.05312e-06|  4.05312e-06|  0.00%|    try:
    88|         1|  4.29153e-06|  4.29153e-06|  0.00%|        if name in {'SHA1', 'sha1'}:
    89|         0|            0|            0|  0.00%|            import _sha1
    90|         0|            0|            0|  0.00%|            cache['SHA1'] = cache['sha1'] = _sha1.sha1
    91|         1|   3.8147e-06|   3.8147e-06|  0.00%|        elif name in {'MD5', 'md5'}:
    92|         0|            0|            0|  0.00%|            import _md5
    93|         0|            0|            0|  0.00%|            cache['MD5'] = cache['md5'] = _md5.md5
    94|         1|  4.29153e-06|  4.29153e-06|  0.00%|        elif name in {'SHA256', 'sha256', 'SHA224', 'sha224'}:
    95|         0|            0|            0|  0.00%|            import _sha256
    96|         0|            0|            0|  0.00%|            cache['SHA224'] = cache['sha224'] = _sha256.sha224
    97|         0|            0|            0|  0.00%|            cache['SHA256'] = cache['sha256'] = _sha256.sha256
    98|         1|  4.52995e-06|  4.52995e-06|  0.00%|        elif name in {'SHA512', 'sha512', 'SHA384', 'sha384'}:
    99|         0|            0|            0|  0.00%|            import _sha512
   100|         0|            0|            0|  0.00%|            cache['SHA384'] = cache['sha384'] = _sha512.sha384
   101|         0|            0|            0|  0.00%|            cache['SHA512'] = cache['sha512'] = _sha512.sha512
   102|         1|  4.05312e-06|  4.05312e-06|  0.00%|        elif name in {'blake2b', 'blake2s'}:
   103|         1|  1.40667e-05|  1.40667e-05|  0.01%|            import _blake2
(call)|         1|   0.00280905|   0.00280905|  1.16%|# <frozen importlib._bootstrap>:1022 _find_and_load
   104|         1|  6.19888e-06|  6.19888e-06|  0.00%|            cache['blake2b'] = _blake2.blake2b
   105|         1|  4.76837e-06|  4.76837e-06|  0.00%|            cache['blake2s'] = _blake2.blake2s
   106|         0|            0|            0|  0.00%|        elif name in {'sha3_224', 'sha3_256', 'sha3_384', 'sha3_512'}:
   107|         0|            0|            0|  0.00%|            import _sha3
   108|         0|            0|            0|  0.00%|            cache['sha3_224'] = _sha3.sha3_224
   109|         0|            0|            0|  0.00%|            cache['sha3_256'] = _sha3.sha3_256
   110|         0|            0|            0|  0.00%|            cache['sha3_384'] = _sha3.sha3_384
   111|         0|            0|            0|  0.00%|            cache['sha3_512'] = _sha3.sha3_512
   112|         0|            0|            0|  0.00%|        elif name in {'shake_128', 'shake_256'}:
   113|         0|            0|            0|  0.00%|            import _sha3
   114|         0|            0|            0|  0.00%|            cache['shake_128'] = _sha3.shake_128
   115|         0|            0|            0|  0.00%|            cache['shake_256'] = _sha3.shake_256
   116|         0|            0|            0|  0.00%|    except ImportError:
   117|         0|            0|            0|  0.00%|        pass  # no extension module, this hash is unsupported.
   118|         0|            0|            0|  0.00%|
   119|         1|   6.4373e-06|   6.4373e-06|  0.00%|    constructor = cache.get(name)
   120|         1|  4.52995e-06|  4.52995e-06|  0.00%|    if constructor is not None:
   121|         1|   3.8147e-06|   3.8147e-06|  0.00%|        return constructor
   122|         0|            0|            0|  0.00%|
   123|         0|            0|            0|  0.00%|    raise ValueError('unsupported hash type ' + name)
   124|         0|            0|            0|  0.00%|
   125|         0|            0|            0|  0.00%|
   126|        15|  5.57899e-05|  3.71933e-06|  0.02%|def __get_openssl_constructor(name):
   127|        14|  4.45843e-05|  3.18459e-06|  0.02%|    if name in __block_openssl_constructor:
   128|         0|            0|            0|  0.00%|        # Prefer our builtin blake2 implementation.
   129|         2|  2.00272e-05|  1.00136e-05|  0.01%|        return __get_builtin_constructor(name)
(call)|         2|   0.00290942|   0.00145471|  1.20%|# /usr/lib/python3.10/hashlib.py:82 __get_builtin_constructor
   130|        12|  3.83854e-05|  3.19878e-06|  0.02%|    try:
   131|         0|            0|            0|  0.00%|        # MD5, SHA1, and SHA2 are in all supported OpenSSL versions
   132|         0|            0|            0|  0.00%|        # SHA3/shake are available in OpenSSL 1.1.1+
   133|        12|  3.93391e-05|  3.27826e-06|  0.02%|        f = getattr(_hashlib, 'openssl_' + name)
   134|         0|            0|            0|  0.00%|        # Allow the C module to raise ValueError.  The function will be
   135|         0|            0|            0|  0.00%|        # defined but the hash not actually available.  Don't fall back to
   136|         0|            0|            0|  0.00%|        # builtin if the current security policy blocks a digest, bpo#40695.
   137|        12|  6.24657e-05|  5.20547e-06|  0.03%|        f(usedforsecurity=False)
   138|         0|            0|            0|  0.00%|        # Use the C function directly (very fast)
   139|        12|  3.71933e-05|  3.09944e-06|  0.02%|        return f
   140|         0|            0|            0|  0.00%|    except (AttributeError, ValueError):
   141|         0|            0|            0|  0.00%|        return __get_builtin_constructor(name)
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|
   144|         1|  5.00679e-06|  5.00679e-06|  0.00%|def __py_new(name, data=b'', **kwargs):
   145|         0|            0|            0|  0.00%|    """new(name, data=b'', **kwargs) - Return a new hashing object using the
   146|         0|            0|            0|  0.00%|    named algorithm; optionally initialized with data (which must be
   147|         0|            0|            0|  0.00%|    a bytes-like object).
   148|         0|            0|            0|  0.00%|    """
   149|         0|            0|            0|  0.00%|    return __get_builtin_constructor(name)(data, **kwargs)
   150|         0|            0|            0|  0.00%|
   151|         0|            0|            0|  0.00%|
   152|         1|  5.48363e-06|  5.48363e-06|  0.00%|def __hash_new(name, data=b'', **kwargs):
   153|         0|            0|            0|  0.00%|    """new(name, data=b'') - Return a new hashing object using the named algorithm;
   154|         0|            0|            0|  0.00%|    optionally initialized with data (which must be a bytes-like object).
   155|         0|            0|            0|  0.00%|    """
   156|         0|            0|            0|  0.00%|    if name in __block_openssl_constructor:
   157|         0|            0|            0|  0.00%|        # Prefer our builtin blake2 implementation.
   158|         0|            0|            0|  0.00%|        return __get_builtin_constructor(name)(data, **kwargs)
   159|         0|            0|            0|  0.00%|    try:
   160|         0|            0|            0|  0.00%|        return _hashlib.new(name, data, **kwargs)
   161|         0|            0|            0|  0.00%|    except ValueError:
   162|         0|            0|            0|  0.00%|        # If the _hashlib module (OpenSSL) doesn't support the named
   163|         0|            0|            0|  0.00%|        # hash, try using our builtin implementations.
   164|         0|            0|            0|  0.00%|        # This allows for SHA224/256 and SHA384/512 support even though
   165|         0|            0|            0|  0.00%|        # the OpenSSL library prior to 0.9.8 doesn't provide them.
   166|         0|            0|            0|  0.00%|        return __get_builtin_constructor(name)(data)
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|
   169|         1|  4.52995e-06|  4.52995e-06|  0.00%|try:
   170|         1|  5.48363e-06|  5.48363e-06|  0.00%|    import _hashlib
   171|         1|  6.67572e-06|  6.67572e-06|  0.00%|    new = __hash_new
   172|         1|  5.00679e-06|  5.00679e-06|  0.00%|    __get_hash = __get_openssl_constructor
   173|         2|  0.000473022|  0.000236511|  0.19%|    algorithms_available = algorithms_available.union(
   174|         1|  5.00679e-06|  5.00679e-06|  0.00%|            _hashlib.openssl_md_meth_names)
   175|         0|            0|            0|  0.00%|except ImportError:
   176|         0|            0|            0|  0.00%|    _hashlib = None
   177|         0|            0|            0|  0.00%|    new = __py_new
   178|         0|            0|            0|  0.00%|    __get_hash = __get_builtin_constructor
   179|         0|            0|            0|  0.00%|
   180|         1|  7.15256e-06|  7.15256e-06|  0.00%|try:
   181|         0|            0|            0|  0.00%|    # OpenSSL's PKCS5_PBKDF2_HMAC requires OpenSSL 1.0+ with HMAC and SHA
   182|         1|  8.34465e-06|  8.34465e-06|  0.00%|    from _hashlib import pbkdf2_hmac
   183|         0|            0|            0|  0.00%|except ImportError:
   184|         0|            0|            0|  0.00%|    from warnings import warn as _warn
   185|         0|            0|            0|  0.00%|    _trans_5C = bytes((x ^ 0x5C) for x in range(256))
   186|         0|            0|            0|  0.00%|    _trans_36 = bytes((x ^ 0x36) for x in range(256))
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|    def pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None):
   189|         0|            0|            0|  0.00%|        """Password based key derivation function 2 (PKCS #5 v2.0)
   190|         0|            0|            0|  0.00%|
   191|         0|            0|            0|  0.00%|        This Python implementations based on the hmac module about as fast
   192|         0|            0|            0|  0.00%|        as OpenSSL's PKCS5_PBKDF2_HMAC for short passwords and much faster
   193|         0|            0|            0|  0.00%|        for long passwords.
   194|         0|            0|            0|  0.00%|        """
   195|         0|            0|            0|  0.00%|        _warn(
   196|         0|            0|            0|  0.00%|            "Python implementation of pbkdf2_hmac() is deprecated.",
   197|         0|            0|            0|  0.00%|            category=DeprecationWarning,
   198|         0|            0|            0|  0.00%|            stacklevel=2
   199|         0|            0|            0|  0.00%|        )
   200|         0|            0|            0|  0.00%|        if not isinstance(hash_name, str):
   201|         0|            0|            0|  0.00%|            raise TypeError(hash_name)
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|        if not isinstance(password, (bytes, bytearray)):
   204|         0|            0|            0|  0.00%|            password = bytes(memoryview(password))
   205|         0|            0|            0|  0.00%|        if not isinstance(salt, (bytes, bytearray)):
   206|         0|            0|            0|  0.00%|            salt = bytes(memoryview(salt))
   207|         0|            0|            0|  0.00%|
   208|         0|            0|            0|  0.00%|        # Fast inline HMAC implementation
   209|         0|            0|            0|  0.00%|        inner = new(hash_name)
   210|         0|            0|            0|  0.00%|        outer = new(hash_name)
   211|         0|            0|            0|  0.00%|        blocksize = getattr(inner, 'block_size', 64)
   212|         0|            0|            0|  0.00%|        if len(password) > blocksize:
   213|         0|            0|            0|  0.00%|            password = new(hash_name, password).digest()
   214|         0|            0|            0|  0.00%|        password = password + b'\x00' * (blocksize - len(password))
   215|         0|            0|            0|  0.00%|        inner.update(password.translate(_trans_36))
   216|         0|            0|            0|  0.00%|        outer.update(password.translate(_trans_5C))
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|        def prf(msg, inner=inner, outer=outer):
   219|         0|            0|            0|  0.00%|            # PBKDF2_HMAC uses the password as key. We can re-use the same
   220|         0|            0|            0|  0.00%|            # digest objects and just update copies to skip initialization.
   221|         0|            0|            0|  0.00%|            icpy = inner.copy()
   222|         0|            0|            0|  0.00%|            ocpy = outer.copy()
   223|         0|            0|            0|  0.00%|            icpy.update(msg)
   224|         0|            0|            0|  0.00%|            ocpy.update(icpy.digest())
   225|         0|            0|            0|  0.00%|            return ocpy.digest()
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|        if iterations < 1:
   228|         0|            0|            0|  0.00%|            raise ValueError(iterations)
   229|         0|            0|            0|  0.00%|        if dklen is None:
   230|         0|            0|            0|  0.00%|            dklen = outer.digest_size
   231|         0|            0|            0|  0.00%|        if dklen < 1:
   232|         0|            0|            0|  0.00%|            raise ValueError(dklen)
   233|         0|            0|            0|  0.00%|
   234|         0|            0|            0|  0.00%|        dkey = b''
   235|         0|            0|            0|  0.00%|        loop = 1
   236|         0|            0|            0|  0.00%|        from_bytes = int.from_bytes
   237|         0|            0|            0|  0.00%|        while len(dkey) < dklen:
   238|         0|            0|            0|  0.00%|            prev = prf(salt + loop.to_bytes(4, 'big'))
   239|         0|            0|            0|  0.00%|            # endianness doesn't matter here as long to / from use the same
   240|         0|            0|            0|  0.00%|            rkey = int.from_bytes(prev, 'big')
   241|         0|            0|            0|  0.00%|            for i in range(iterations - 1):
   242|         0|            0|            0|  0.00%|                prev = prf(prev)
   243|         0|            0|            0|  0.00%|                # rkey = rkey ^ prev
   244|         0|            0|            0|  0.00%|                rkey ^= from_bytes(prev, 'big')
   245|         0|            0|            0|  0.00%|            loop += 1
   246|         0|            0|            0|  0.00%|            dkey += rkey.to_bytes(inner.digest_size, 'big')
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|        return dkey[:dklen]
   249|         0|            0|            0|  0.00%|
   250|         1|  5.96046e-06|  5.96046e-06|  0.00%|try:
   251|         0|            0|            0|  0.00%|    # OpenSSL's scrypt requires OpenSSL 1.1+
   252|         1|  6.19888e-06|  6.19888e-06|  0.00%|    from _hashlib import scrypt
   253|         0|            0|            0|  0.00%|except ImportError:
   254|         0|            0|            0|  0.00%|    pass
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|        15|  6.00815e-05|  4.00543e-06|  0.02%|for __func_name in __always_supported:
   258|         0|            0|            0|  0.00%|    # try them all, some may not work due to the OpenSSL
   259|         0|            0|            0|  0.00%|    # version not supporting that algorithm.
   260|        14|  5.45979e-05|  3.89985e-06|  0.02%|    try:
   261|        14|  0.000154495|  1.10354e-05|  0.06%|        globals()[__func_name] = __get_hash(__func_name)
(call)|        14|   0.00320172|  0.000228695|  1.32%|# /usr/lib/python3.10/hashlib.py:126 __get_openssl_constructor
   262|         0|            0|            0|  0.00%|    except ValueError:
   263|         0|            0|            0|  0.00%|        import logging
   264|         0|            0|            0|  0.00%|        logging.exception('code for hash %s was not found.', __func_name)
   265|         0|            0|            0|  0.00%|
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|# Cleanup locals()
   268|         1|   3.8147e-06|   3.8147e-06|  0.00%|del __always_supported, __func_name, __get_hash
   269|         1|  5.72205e-06|  5.72205e-06|  0.00%|del __py_new, __hash_new, __get_openssl_constructor
File: /usr/lib/python3.10/socket.py
File duration: 0.0012157s (0.50%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# Wrapper module for _socket, providing some additional facilities
     2|         0|            0|            0|  0.00%|# implemented in Python.
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|"""\
     5|         0|            0|            0|  0.00%|This module provides socket operations and some related functions.
     6|         0|            0|            0|  0.00%|On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
     7|         0|            0|            0|  0.00%|On other systems, it only supports IP. Functions specific for a
     8|         0|            0|            0|  0.00%|socket are available as methods of the socket object.
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|Functions:
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|socket() -- create a new socket object
    13|         0|            0|            0|  0.00%|socketpair() -- create a pair of new socket objects [*]
    14|         0|            0|            0|  0.00%|fromfd() -- create a socket object from an open file descriptor [*]
    15|         0|            0|            0|  0.00%|send_fds() -- Send file descriptor to the socket.
    16|         0|            0|            0|  0.00%|recv_fds() -- Recieve file descriptors from the socket.
    17|         0|            0|            0|  0.00%|fromshare() -- create a socket object from data received from socket.share() [*]
    18|         0|            0|            0|  0.00%|gethostname() -- return the current hostname
    19|         0|            0|            0|  0.00%|gethostbyname() -- map a hostname to its IP number
    20|         0|            0|            0|  0.00%|gethostbyaddr() -- map an IP number or hostname to DNS info
    21|         0|            0|            0|  0.00%|getservbyname() -- map a service name and a protocol name to a port number
    22|         0|            0|            0|  0.00%|getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
    23|         0|            0|            0|  0.00%|ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
    24|         0|            0|            0|  0.00%|htons(), htonl() -- convert 16, 32 bit int from host to network byte order
    25|         0|            0|            0|  0.00%|inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
    26|         0|            0|            0|  0.00%|inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
    27|         0|            0|            0|  0.00%|socket.getdefaulttimeout() -- get the default timeout value
    28|         0|            0|            0|  0.00%|socket.setdefaulttimeout() -- set the default timeout value
    29|         0|            0|            0|  0.00%|create_connection() -- connects to an address, with an optional timeout and
    30|         0|            0|            0|  0.00%|                       optional source address.
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%| [*] not available on all platforms!
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|Special objects:
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|SocketType -- type object for socket objects
    37|         0|            0|            0|  0.00%|error -- exception raised for I/O errors
    38|         0|            0|            0|  0.00%|has_ipv6 -- boolean value indicating if IPv6 is supported
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|IntEnum constants:
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
    43|         0|            0|            0|  0.00%|SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|Integer constants:
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|Many other constants may be defined; these may be used in calls to
    48|         0|            0|            0|  0.00%|the setsockopt() and getsockopt() methods.
    49|         0|            0|            0|  0.00%|"""
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|import _socket
    52|         0|            0|            0|  0.00%|from _socket import *
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|import os, sys, io, selectors
    55|         0|            0|            0|  0.00%|from enum import IntEnum, IntFlag
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|try:
    58|         0|            0|            0|  0.00%|    import errno
    59|         0|            0|            0|  0.00%|except ImportError:
    60|         0|            0|            0|  0.00%|    errno = None
    61|         0|            0|            0|  0.00%|EBADF = getattr(errno, 'EBADF', 9)
    62|         0|            0|            0|  0.00%|EAGAIN = getattr(errno, 'EAGAIN', 11)
    63|         0|            0|            0|  0.00%|EWOULDBLOCK = getattr(errno, 'EWOULDBLOCK', 11)
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|__all__ = ["fromfd", "getfqdn", "create_connection", "create_server",
    66|         0|            0|            0|  0.00%|           "has_dualstack_ipv6", "AddressFamily", "SocketKind"]
    67|         0|            0|            0|  0.00%|__all__.extend(os._get_exports_list(_socket))
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|# Set up the socket.AF_* socket.SOCK_* constants as members of IntEnums for
    70|         0|            0|            0|  0.00%|# nicer string representations.
    71|         0|            0|            0|  0.00%|# Note that _socket only knows about the integer values. The public interface
    72|         0|            0|            0|  0.00%|# in this module understands the enums and translates them back from integers
    73|         0|            0|            0|  0.00%|# where needed (e.g. .family property of a socket object).
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|IntEnum._convert_(
    76|         0|            0|            0|  0.00%|        'AddressFamily',
    77|         0|            0|            0|  0.00%|        __name__,
    78|         0|            0|            0|  0.00%|        lambda C: C.isupper() and C.startswith('AF_'))
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|IntEnum._convert_(
    81|         0|            0|            0|  0.00%|        'SocketKind',
    82|         0|            0|            0|  0.00%|        __name__,
    83|         0|            0|            0|  0.00%|        lambda C: C.isupper() and C.startswith('SOCK_'))
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|IntFlag._convert_(
    86|         0|            0|            0|  0.00%|        'MsgFlag',
    87|         0|            0|            0|  0.00%|        __name__,
    88|         0|            0|            0|  0.00%|        lambda C: C.isupper() and C.startswith('MSG_'))
    89|         0|            0|            0|  0.00%|
    90|         0|            0|            0|  0.00%|IntFlag._convert_(
    91|         0|            0|            0|  0.00%|        'AddressInfo',
    92|         0|            0|            0|  0.00%|        __name__,
    93|         0|            0|            0|  0.00%|        lambda C: C.isupper() and C.startswith('AI_'))
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|_LOCALHOST    = '127.0.0.1'
    96|         0|            0|            0|  0.00%|_LOCALHOST_V6 = '::1'
    97|         0|            0|            0|  0.00%|
    98|         0|            0|            0|  0.00%|
    99|         4|   1.3113e-05|  3.27826e-06|  0.01%|def _intenum_converter(value, enum_klass):
   100|         0|            0|            0|  0.00%|    """Convert a numeric family value to an IntEnum member.
   101|         0|            0|            0|  0.00%|
   102|         0|            0|            0|  0.00%|    If it's not a known member, return the numeric value itself.
   103|         0|            0|            0|  0.00%|    """
   104|         4|  1.23978e-05|  3.09944e-06|  0.01%|    try:
   105|         4|  3.31402e-05|  8.28505e-06|  0.01%|        return enum_klass(value)
(call)|         4|  0.000117064|  2.92659e-05|  0.05%|# /usr/lib/python3.10/enum.py:359 __call__
   106|         0|            0|            0|  0.00%|    except ValueError:
   107|         0|            0|            0|  0.00%|        return value
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|# WSA error codes
   111|         0|            0|            0|  0.00%|if sys.platform.lower().startswith("win"):
   112|         0|            0|            0|  0.00%|    errorTab = {}
   113|         0|            0|            0|  0.00%|    errorTab[6] = "Specified event object handle is invalid."
   114|         0|            0|            0|  0.00%|    errorTab[8] = "Insufficient memory available."
   115|         0|            0|            0|  0.00%|    errorTab[87] = "One or more parameters are invalid."
   116|         0|            0|            0|  0.00%|    errorTab[995] = "Overlapped operation aborted."
   117|         0|            0|            0|  0.00%|    errorTab[996] = "Overlapped I/O event object not in signaled state."
   118|         0|            0|            0|  0.00%|    errorTab[997] = "Overlapped operation will complete later."
   119|         0|            0|            0|  0.00%|    errorTab[10004] = "The operation was interrupted."
   120|         0|            0|            0|  0.00%|    errorTab[10009] = "A bad file handle was passed."
   121|         0|            0|            0|  0.00%|    errorTab[10013] = "Permission denied."
   122|         0|            0|            0|  0.00%|    errorTab[10014] = "A fault occurred on the network??"  # WSAEFAULT
   123|         0|            0|            0|  0.00%|    errorTab[10022] = "An invalid operation was attempted."
   124|         0|            0|            0|  0.00%|    errorTab[10024] = "Too many open files."
   125|         0|            0|            0|  0.00%|    errorTab[10035] = "The socket operation would block"
   126|         0|            0|            0|  0.00%|    errorTab[10036] = "A blocking operation is already in progress."
   127|         0|            0|            0|  0.00%|    errorTab[10037] = "Operation already in progress."
   128|         0|            0|            0|  0.00%|    errorTab[10038] = "Socket operation on nonsocket."
   129|         0|            0|            0|  0.00%|    errorTab[10039] = "Destination address required."
   130|         0|            0|            0|  0.00%|    errorTab[10040] = "Message too long."
   131|         0|            0|            0|  0.00%|    errorTab[10041] = "Protocol wrong type for socket."
   132|         0|            0|            0|  0.00%|    errorTab[10042] = "Bad protocol option."
   133|         0|            0|            0|  0.00%|    errorTab[10043] = "Protocol not supported."
   134|         0|            0|            0|  0.00%|    errorTab[10044] = "Socket type not supported."
   135|         0|            0|            0|  0.00%|    errorTab[10045] = "Operation not supported."
   136|         0|            0|            0|  0.00%|    errorTab[10046] = "Protocol family not supported."
   137|         0|            0|            0|  0.00%|    errorTab[10047] = "Address family not supported by protocol family."
   138|         0|            0|            0|  0.00%|    errorTab[10048] = "The network address is in use."
   139|         0|            0|            0|  0.00%|    errorTab[10049] = "Cannot assign requested address."
   140|         0|            0|            0|  0.00%|    errorTab[10050] = "Network is down."
   141|         0|            0|            0|  0.00%|    errorTab[10051] = "Network is unreachable."
   142|         0|            0|            0|  0.00%|    errorTab[10052] = "Network dropped connection on reset."
   143|         0|            0|            0|  0.00%|    errorTab[10053] = "Software caused connection abort."
   144|         0|            0|            0|  0.00%|    errorTab[10054] = "The connection has been reset."
   145|         0|            0|            0|  0.00%|    errorTab[10055] = "No buffer space available."
   146|         0|            0|            0|  0.00%|    errorTab[10056] = "Socket is already connected."
   147|         0|            0|            0|  0.00%|    errorTab[10057] = "Socket is not connected."
   148|         0|            0|            0|  0.00%|    errorTab[10058] = "The network has been shut down."
   149|         0|            0|            0|  0.00%|    errorTab[10059] = "Too many references."
   150|         0|            0|            0|  0.00%|    errorTab[10060] = "The operation timed out."
   151|         0|            0|            0|  0.00%|    errorTab[10061] = "Connection refused."
   152|         0|            0|            0|  0.00%|    errorTab[10062] = "Cannot translate name."
   153|         0|            0|            0|  0.00%|    errorTab[10063] = "The name is too long."
   154|         0|            0|            0|  0.00%|    errorTab[10064] = "The host is down."
   155|         0|            0|            0|  0.00%|    errorTab[10065] = "The host is unreachable."
   156|         0|            0|            0|  0.00%|    errorTab[10066] = "Directory not empty."
   157|         0|            0|            0|  0.00%|    errorTab[10067] = "Too many processes."
   158|         0|            0|            0|  0.00%|    errorTab[10068] = "User quota exceeded."
   159|         0|            0|            0|  0.00%|    errorTab[10069] = "Disk quota exceeded."
   160|         0|            0|            0|  0.00%|    errorTab[10070] = "Stale file handle reference."
   161|         0|            0|            0|  0.00%|    errorTab[10071] = "Item is remote."
   162|         0|            0|            0|  0.00%|    errorTab[10091] = "Network subsystem is unavailable."
   163|         0|            0|            0|  0.00%|    errorTab[10092] = "Winsock.dll version out of range."
   164|         0|            0|            0|  0.00%|    errorTab[10093] = "Successful WSAStartup not yet performed."
   165|         0|            0|            0|  0.00%|    errorTab[10101] = "Graceful shutdown in progress."
   166|         0|            0|            0|  0.00%|    errorTab[10102] = "No more results from WSALookupServiceNext."
   167|         0|            0|            0|  0.00%|    errorTab[10103] = "Call has been canceled."
   168|         0|            0|            0|  0.00%|    errorTab[10104] = "Procedure call table is invalid."
   169|         0|            0|            0|  0.00%|    errorTab[10105] = "Service provider is invalid."
   170|         0|            0|            0|  0.00%|    errorTab[10106] = "Service provider failed to initialize."
   171|         0|            0|            0|  0.00%|    errorTab[10107] = "System call failure."
   172|         0|            0|            0|  0.00%|    errorTab[10108] = "Service not found."
   173|         0|            0|            0|  0.00%|    errorTab[10109] = "Class type not found."
   174|         0|            0|            0|  0.00%|    errorTab[10110] = "No more results from WSALookupServiceNext."
   175|         0|            0|            0|  0.00%|    errorTab[10111] = "Call was canceled."
   176|         0|            0|            0|  0.00%|    errorTab[10112] = "Database query was refused."
   177|         0|            0|            0|  0.00%|    errorTab[11001] = "Host not found."
   178|         0|            0|            0|  0.00%|    errorTab[11002] = "Nonauthoritative host not found."
   179|         0|            0|            0|  0.00%|    errorTab[11003] = "This is a nonrecoverable error."
   180|         0|            0|            0|  0.00%|    errorTab[11004] = "Valid name, no data record requested type."
   181|         0|            0|            0|  0.00%|    errorTab[11005] = "QoS receivers."
   182|         0|            0|            0|  0.00%|    errorTab[11006] = "QoS senders."
   183|         0|            0|            0|  0.00%|    errorTab[11007] = "No QoS senders."
   184|         0|            0|            0|  0.00%|    errorTab[11008] = "QoS no receivers."
   185|         0|            0|            0|  0.00%|    errorTab[11009] = "QoS request confirmed."
   186|         0|            0|            0|  0.00%|    errorTab[11010] = "QoS admission error."
   187|         0|            0|            0|  0.00%|    errorTab[11011] = "QoS policy failure."
   188|         0|            0|            0|  0.00%|    errorTab[11012] = "QoS bad style."
   189|         0|            0|            0|  0.00%|    errorTab[11013] = "QoS bad object."
   190|         0|            0|            0|  0.00%|    errorTab[11014] = "QoS traffic control error."
   191|         0|            0|            0|  0.00%|    errorTab[11015] = "QoS generic error."
   192|         0|            0|            0|  0.00%|    errorTab[11016] = "QoS service type error."
   193|         0|            0|            0|  0.00%|    errorTab[11017] = "QoS flowspec error."
   194|         0|            0|            0|  0.00%|    errorTab[11018] = "Invalid QoS provider buffer."
   195|         0|            0|            0|  0.00%|    errorTab[11019] = "Invalid QoS filter style."
   196|         0|            0|            0|  0.00%|    errorTab[11020] = "Invalid QoS filter style."
   197|         0|            0|            0|  0.00%|    errorTab[11021] = "Incorrect QoS filter count."
   198|         0|            0|            0|  0.00%|    errorTab[11022] = "Invalid QoS object length."
   199|         0|            0|            0|  0.00%|    errorTab[11023] = "Incorrect QoS flow count."
   200|         0|            0|            0|  0.00%|    errorTab[11024] = "Unrecognized QoS object."
   201|         0|            0|            0|  0.00%|    errorTab[11025] = "Invalid QoS policy object."
   202|         0|            0|            0|  0.00%|    errorTab[11026] = "Invalid QoS flow descriptor."
   203|         0|            0|            0|  0.00%|    errorTab[11027] = "Invalid QoS provider-specific flowspec."
   204|         0|            0|            0|  0.00%|    errorTab[11028] = "Invalid QoS provider-specific filterspec."
   205|         0|            0|            0|  0.00%|    errorTab[11029] = "Invalid QoS shape discard mode object."
   206|         0|            0|            0|  0.00%|    errorTab[11030] = "Invalid QoS shaping rate object."
   207|         0|            0|            0|  0.00%|    errorTab[11031] = "Reserved policy QoS element type."
   208|         0|            0|            0|  0.00%|    __all__.append("errorTab")
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|class _GiveupOnSendfile(Exception): pass
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|
   214|         0|            0|            0|  0.00%|class socket(_socket.socket):
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|    """A subclass of _socket.socket adding the makefile() method."""
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|    __slots__ = ["__weakref__", "_io_refs", "_closed"]
   219|         0|            0|            0|  0.00%|
   220|         2|  6.67572e-06|  3.33786e-06|  0.00%|    def __init__(self, family=-1, type=-1, proto=-1, fileno=None):
   221|         0|            0|            0|  0.00%|        # For user code address family and type values are IntEnum members, but
   222|         0|            0|            0|  0.00%|        # for the underlying _socket.socket they're just integers. The
   223|         0|            0|            0|  0.00%|        # constructor of _socket.socket converts the given argument to an
   224|         0|            0|            0|  0.00%|        # integer automatically.
   225|         2|  7.15256e-06|  3.57628e-06|  0.00%|        if fileno is None:
   226|         2|  7.39098e-06|  3.69549e-06|  0.00%|            if family == -1:
   227|         0|            0|            0|  0.00%|                family = AF_INET
   228|         2|  7.15256e-06|  3.57628e-06|  0.00%|            if type == -1:
   229|         0|            0|            0|  0.00%|                type = SOCK_STREAM
   230|         2|  6.91414e-06|  3.45707e-06|  0.00%|            if proto == -1:
   231|         0|            0|            0|  0.00%|                proto = 0
   232|         2|  1.95503e-05|  9.77516e-06|  0.01%|        _socket.socket.__init__(self, family, type, proto, fileno)
   233|         2|  7.62939e-06|   3.8147e-06|  0.00%|        self._io_refs = 0
   234|         2|  7.15256e-06|  3.57628e-06|  0.00%|        self._closed = False
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|    def __enter__(self):
   237|         0|            0|            0|  0.00%|        return self
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|    def __exit__(self, *args):
   240|         0|            0|            0|  0.00%|        if not self._closed:
   241|         0|            0|            0|  0.00%|            self.close()
   242|         0|            0|            0|  0.00%|
   243|         0|            0|            0|  0.00%|    def __repr__(self):
   244|         0|            0|            0|  0.00%|        """Wrap __repr__() to reveal the real class name and socket
   245|         0|            0|            0|  0.00%|        address(es).
   246|         0|            0|            0|  0.00%|        """
   247|         0|            0|            0|  0.00%|        closed = getattr(self, '_closed', False)
   248|         0|            0|            0|  0.00%|        s = "<%s.%s%s fd=%i, family=%s, type=%s, proto=%i" \
   249|         0|            0|            0|  0.00%|            % (self.__class__.__module__,
   250|         0|            0|            0|  0.00%|               self.__class__.__qualname__,
   251|         0|            0|            0|  0.00%|               " [closed]" if closed else "",
   252|         0|            0|            0|  0.00%|               self.fileno(),
   253|         0|            0|            0|  0.00%|               self.family,
   254|         0|            0|            0|  0.00%|               self.type,
   255|         0|            0|            0|  0.00%|               self.proto)
   256|         0|            0|            0|  0.00%|        if not closed:
   257|         0|            0|            0|  0.00%|            try:
   258|         0|            0|            0|  0.00%|                laddr = self.getsockname()
   259|         0|            0|            0|  0.00%|                if laddr:
   260|         0|            0|            0|  0.00%|                    s += ", laddr=%s" % str(laddr)
   261|         0|            0|            0|  0.00%|            except error:
   262|         0|            0|            0|  0.00%|                pass
   263|         0|            0|            0|  0.00%|            try:
   264|         0|            0|            0|  0.00%|                raddr = self.getpeername()
   265|         0|            0|            0|  0.00%|                if raddr:
   266|         0|            0|            0|  0.00%|                    s += ", raddr=%s" % str(raddr)
   267|         0|            0|            0|  0.00%|            except error:
   268|         0|            0|            0|  0.00%|                pass
   269|         0|            0|            0|  0.00%|        s += '>'
   270|         0|            0|            0|  0.00%|        return s
   271|         0|            0|            0|  0.00%|
   272|         0|            0|            0|  0.00%|    def __getstate__(self):
   273|         0|            0|            0|  0.00%|        raise TypeError(f"cannot pickle {self.__class__.__name__!r} object")
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|    def dup(self):
   276|         0|            0|            0|  0.00%|        """dup() -> socket object
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|        Duplicate the socket. Return a new socket object connected to the same
   279|         0|            0|            0|  0.00%|        system resource. The new socket is non-inheritable.
   280|         0|            0|            0|  0.00%|        """
   281|         0|            0|            0|  0.00%|        fd = dup(self.fileno())
   282|         0|            0|            0|  0.00%|        sock = self.__class__(self.family, self.type, self.proto, fileno=fd)
   283|         0|            0|            0|  0.00%|        sock.settimeout(self.gettimeout())
   284|         0|            0|            0|  0.00%|        return sock
   285|         0|            0|            0|  0.00%|
   286|         0|            0|            0|  0.00%|    def accept(self):
   287|         0|            0|            0|  0.00%|        """accept() -> (socket object, address info)
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|        Wait for an incoming connection.  Return a new socket
   290|         0|            0|            0|  0.00%|        representing the connection, and the address of the client.
   291|         0|            0|            0|  0.00%|        For IP sockets, the address info is a pair (hostaddr, port).
   292|         0|            0|            0|  0.00%|        """
   293|         0|            0|            0|  0.00%|        fd, addr = self._accept()
   294|         0|            0|            0|  0.00%|        sock = socket(self.family, self.type, self.proto, fileno=fd)
   295|         0|            0|            0|  0.00%|        # Issue #7995: if no default timeout is set and the listening
   296|         0|            0|            0|  0.00%|        # socket had a (non-zero) timeout, force the new socket in blocking
   297|         0|            0|            0|  0.00%|        # mode to override platform-specific socket flags inheritance.
   298|         0|            0|            0|  0.00%|        if getdefaulttimeout() is None and self.gettimeout():
   299|         0|            0|            0|  0.00%|            sock.setblocking(True)
   300|         0|            0|            0|  0.00%|        return sock, addr
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|    def makefile(self, mode="r", buffering=None, *,
   303|         0|            0|            0|  0.00%|                 encoding=None, errors=None, newline=None):
   304|         0|            0|            0|  0.00%|        """makefile(...) -> an I/O stream connected to the socket
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|        The arguments are as for io.open() after the filename, except the only
   307|         0|            0|            0|  0.00%|        supported mode values are 'r' (default), 'w' and 'b'.
   308|         0|            0|            0|  0.00%|        """
   309|         0|            0|            0|  0.00%|        # XXX refactor to share code?
   310|         0|            0|            0|  0.00%|        if not set(mode) <= {"r", "w", "b"}:
   311|         0|            0|            0|  0.00%|            raise ValueError("invalid mode %r (only r, w, b allowed)" % (mode,))
   312|         0|            0|            0|  0.00%|        writing = "w" in mode
   313|         0|            0|            0|  0.00%|        reading = "r" in mode or not writing
   314|         0|            0|            0|  0.00%|        assert reading or writing
   315|         0|            0|            0|  0.00%|        binary = "b" in mode
   316|         0|            0|            0|  0.00%|        rawmode = ""
   317|         0|            0|            0|  0.00%|        if reading:
   318|         0|            0|            0|  0.00%|            rawmode += "r"
   319|         0|            0|            0|  0.00%|        if writing:
   320|         0|            0|            0|  0.00%|            rawmode += "w"
   321|         0|            0|            0|  0.00%|        raw = SocketIO(self, rawmode)
   322|         0|            0|            0|  0.00%|        self._io_refs += 1
   323|         0|            0|            0|  0.00%|        if buffering is None:
   324|         0|            0|            0|  0.00%|            buffering = -1
   325|         0|            0|            0|  0.00%|        if buffering < 0:
   326|         0|            0|            0|  0.00%|            buffering = io.DEFAULT_BUFFER_SIZE
   327|         0|            0|            0|  0.00%|        if buffering == 0:
   328|         0|            0|            0|  0.00%|            if not binary:
   329|         0|            0|            0|  0.00%|                raise ValueError("unbuffered streams must be binary")
   330|         0|            0|            0|  0.00%|            return raw
   331|         0|            0|            0|  0.00%|        if reading and writing:
   332|         0|            0|            0|  0.00%|            buffer = io.BufferedRWPair(raw, raw, buffering)
   333|         0|            0|            0|  0.00%|        elif reading:
   334|         0|            0|            0|  0.00%|            buffer = io.BufferedReader(raw, buffering)
   335|         0|            0|            0|  0.00%|        else:
   336|         0|            0|            0|  0.00%|            assert writing
   337|         0|            0|            0|  0.00%|            buffer = io.BufferedWriter(raw, buffering)
   338|         0|            0|            0|  0.00%|        if binary:
   339|         0|            0|            0|  0.00%|            return buffer
   340|         0|            0|            0|  0.00%|        encoding = io.text_encoding(encoding)
   341|         0|            0|            0|  0.00%|        text = io.TextIOWrapper(buffer, encoding, errors, newline)
   342|         0|            0|            0|  0.00%|        text.mode = mode
   343|         0|            0|            0|  0.00%|        return text
   344|         0|            0|            0|  0.00%|
   345|         0|            0|            0|  0.00%|    if hasattr(os, 'sendfile'):
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|        def _sendfile_use_sendfile(self, file, offset=0, count=None):
   348|         0|            0|            0|  0.00%|            self._check_sendfile_params(file, offset, count)
   349|         0|            0|            0|  0.00%|            sockno = self.fileno()
   350|         0|            0|            0|  0.00%|            try:
   351|         0|            0|            0|  0.00%|                fileno = file.fileno()
   352|         0|            0|            0|  0.00%|            except (AttributeError, io.UnsupportedOperation) as err:
   353|         0|            0|            0|  0.00%|                raise _GiveupOnSendfile(err)  # not a regular file
   354|         0|            0|            0|  0.00%|            try:
   355|         0|            0|            0|  0.00%|                fsize = os.fstat(fileno).st_size
   356|         0|            0|            0|  0.00%|            except OSError as err:
   357|         0|            0|            0|  0.00%|                raise _GiveupOnSendfile(err)  # not a regular file
   358|         0|            0|            0|  0.00%|            if not fsize:
   359|         0|            0|            0|  0.00%|                return 0  # empty file
   360|         0|            0|            0|  0.00%|            # Truncate to 1GiB to avoid OverflowError, see bpo-38319.
   361|         0|            0|            0|  0.00%|            blocksize = min(count or fsize, 2 ** 30)
   362|         0|            0|            0|  0.00%|            timeout = self.gettimeout()
   363|         0|            0|            0|  0.00%|            if timeout == 0:
   364|         0|            0|            0|  0.00%|                raise ValueError("non-blocking sockets are not supported")
   365|         0|            0|            0|  0.00%|            # poll/select have the advantage of not requiring any
   366|         0|            0|            0|  0.00%|            # extra file descriptor, contrarily to epoll/kqueue
   367|         0|            0|            0|  0.00%|            # (also, they require a single syscall).
   368|         0|            0|            0|  0.00%|            if hasattr(selectors, 'PollSelector'):
   369|         0|            0|            0|  0.00%|                selector = selectors.PollSelector()
   370|         0|            0|            0|  0.00%|            else:
   371|         0|            0|            0|  0.00%|                selector = selectors.SelectSelector()
   372|         0|            0|            0|  0.00%|            selector.register(sockno, selectors.EVENT_WRITE)
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|            total_sent = 0
   375|         0|            0|            0|  0.00%|            # localize variable access to minimize overhead
   376|         0|            0|            0|  0.00%|            selector_select = selector.select
   377|         0|            0|            0|  0.00%|            os_sendfile = os.sendfile
   378|         0|            0|            0|  0.00%|            try:
   379|         0|            0|            0|  0.00%|                while True:
   380|         0|            0|            0|  0.00%|                    if timeout and not selector_select(timeout):
   381|         0|            0|            0|  0.00%|                        raise TimeoutError('timed out')
   382|         0|            0|            0|  0.00%|                    if count:
   383|         0|            0|            0|  0.00%|                        blocksize = count - total_sent
   384|         0|            0|            0|  0.00%|                        if blocksize <= 0:
   385|         0|            0|            0|  0.00%|                            break
   386|         0|            0|            0|  0.00%|                    try:
   387|         0|            0|            0|  0.00%|                        sent = os_sendfile(sockno, fileno, offset, blocksize)
   388|         0|            0|            0|  0.00%|                    except BlockingIOError:
   389|         0|            0|            0|  0.00%|                        if not timeout:
   390|         0|            0|            0|  0.00%|                            # Block until the socket is ready to send some
   391|         0|            0|            0|  0.00%|                            # data; avoids hogging CPU resources.
   392|         0|            0|            0|  0.00%|                            selector_select()
   393|         0|            0|            0|  0.00%|                        continue
   394|         0|            0|            0|  0.00%|                    except OSError as err:
   395|         0|            0|            0|  0.00%|                        if total_sent == 0:
   396|         0|            0|            0|  0.00%|                            # We can get here for different reasons, the main
   397|         0|            0|            0|  0.00%|                            # one being 'file' is not a regular mmap(2)-like
   398|         0|            0|            0|  0.00%|                            # file, in which case we'll fall back on using
   399|         0|            0|            0|  0.00%|                            # plain send().
   400|         0|            0|            0|  0.00%|                            raise _GiveupOnSendfile(err)
   401|         0|            0|            0|  0.00%|                        raise err from None
   402|         0|            0|            0|  0.00%|                    else:
   403|         0|            0|            0|  0.00%|                        if sent == 0:
   404|         0|            0|            0|  0.00%|                            break  # EOF
   405|         0|            0|            0|  0.00%|                        offset += sent
   406|         0|            0|            0|  0.00%|                        total_sent += sent
   407|         0|            0|            0|  0.00%|                return total_sent
   408|         0|            0|            0|  0.00%|            finally:
   409|         0|            0|            0|  0.00%|                if total_sent > 0 and hasattr(file, 'seek'):
   410|         0|            0|            0|  0.00%|                    file.seek(offset)
   411|         0|            0|            0|  0.00%|    else:
   412|         0|            0|            0|  0.00%|        def _sendfile_use_sendfile(self, file, offset=0, count=None):
   413|         0|            0|            0|  0.00%|            raise _GiveupOnSendfile(
   414|         0|            0|            0|  0.00%|                "os.sendfile() not available on this platform")
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|    def _sendfile_use_send(self, file, offset=0, count=None):
   417|         0|            0|            0|  0.00%|        self._check_sendfile_params(file, offset, count)
   418|         0|            0|            0|  0.00%|        if self.gettimeout() == 0:
   419|         0|            0|            0|  0.00%|            raise ValueError("non-blocking sockets are not supported")
   420|         0|            0|            0|  0.00%|        if offset:
   421|         0|            0|            0|  0.00%|            file.seek(offset)
   422|         0|            0|            0|  0.00%|        blocksize = min(count, 8192) if count else 8192
   423|         0|            0|            0|  0.00%|        total_sent = 0
   424|         0|            0|            0|  0.00%|        # localize variable access to minimize overhead
   425|         0|            0|            0|  0.00%|        file_read = file.read
   426|         0|            0|            0|  0.00%|        sock_send = self.send
   427|         0|            0|            0|  0.00%|        try:
   428|         0|            0|            0|  0.00%|            while True:
   429|         0|            0|            0|  0.00%|                if count:
   430|         0|            0|            0|  0.00%|                    blocksize = min(count - total_sent, blocksize)
   431|         0|            0|            0|  0.00%|                    if blocksize <= 0:
   432|         0|            0|            0|  0.00%|                        break
   433|         0|            0|            0|  0.00%|                data = memoryview(file_read(blocksize))
   434|         0|            0|            0|  0.00%|                if not data:
   435|         0|            0|            0|  0.00%|                    break  # EOF
   436|         0|            0|            0|  0.00%|                while True:
   437|         0|            0|            0|  0.00%|                    try:
   438|         0|            0|            0|  0.00%|                        sent = sock_send(data)
   439|         0|            0|            0|  0.00%|                    except BlockingIOError:
   440|         0|            0|            0|  0.00%|                        continue
   441|         0|            0|            0|  0.00%|                    else:
   442|         0|            0|            0|  0.00%|                        total_sent += sent
   443|         0|            0|            0|  0.00%|                        if sent < len(data):
   444|         0|            0|            0|  0.00%|                            data = data[sent:]
   445|         0|            0|            0|  0.00%|                        else:
   446|         0|            0|            0|  0.00%|                            break
   447|         0|            0|            0|  0.00%|            return total_sent
   448|         0|            0|            0|  0.00%|        finally:
   449|         0|            0|            0|  0.00%|            if total_sent > 0 and hasattr(file, 'seek'):
   450|         0|            0|            0|  0.00%|                file.seek(offset + total_sent)
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    def _check_sendfile_params(self, file, offset, count):
   453|         0|            0|            0|  0.00%|        if 'b' not in getattr(file, 'mode', 'b'):
   454|         0|            0|            0|  0.00%|            raise ValueError("file should be opened in binary mode")
   455|         0|            0|            0|  0.00%|        if not self.type & SOCK_STREAM:
   456|         0|            0|            0|  0.00%|            raise ValueError("only SOCK_STREAM type sockets are supported")
   457|         0|            0|            0|  0.00%|        if count is not None:
   458|         0|            0|            0|  0.00%|            if not isinstance(count, int):
   459|         0|            0|            0|  0.00%|                raise TypeError(
   460|         0|            0|            0|  0.00%|                    "count must be a positive integer (got {!r})".format(count))
   461|         0|            0|            0|  0.00%|            if count <= 0:
   462|         0|            0|            0|  0.00%|                raise ValueError(
   463|         0|            0|            0|  0.00%|                    "count must be a positive integer (got {!r})".format(count))
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|    def sendfile(self, file, offset=0, count=None):
   466|         0|            0|            0|  0.00%|        """sendfile(file[, offset[, count]]) -> sent
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        Send a file until EOF is reached by using high-performance
   469|         0|            0|            0|  0.00%|        os.sendfile() and return the total number of bytes which
   470|         0|            0|            0|  0.00%|        were sent.
   471|         0|            0|            0|  0.00%|        *file* must be a regular file object opened in binary mode.
   472|         0|            0|            0|  0.00%|        If os.sendfile() is not available (e.g. Windows) or file is
   473|         0|            0|            0|  0.00%|        not a regular file socket.send() will be used instead.
   474|         0|            0|            0|  0.00%|        *offset* tells from where to start reading the file.
   475|         0|            0|            0|  0.00%|        If specified, *count* is the total number of bytes to transmit
   476|         0|            0|            0|  0.00%|        as opposed to sending the file until EOF is reached.
   477|         0|            0|            0|  0.00%|        File position is updated on return or also in case of error in
   478|         0|            0|            0|  0.00%|        which case file.tell() can be used to figure out the number of
   479|         0|            0|            0|  0.00%|        bytes which were sent.
   480|         0|            0|            0|  0.00%|        The socket must be of SOCK_STREAM type.
   481|         0|            0|            0|  0.00%|        Non-blocking sockets are not supported.
   482|         0|            0|            0|  0.00%|        """
   483|         0|            0|            0|  0.00%|        try:
   484|         0|            0|            0|  0.00%|            return self._sendfile_use_sendfile(file, offset, count)
   485|         0|            0|            0|  0.00%|        except _GiveupOnSendfile:
   486|         0|            0|            0|  0.00%|            return self._sendfile_use_send(file, offset, count)
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|    def _decref_socketios(self):
   489|         0|            0|            0|  0.00%|        if self._io_refs > 0:
   490|         0|            0|            0|  0.00%|            self._io_refs -= 1
   491|         0|            0|            0|  0.00%|        if self._closed:
   492|         0|            0|            0|  0.00%|            self.close()
   493|         0|            0|            0|  0.00%|
   494|         2|  4.76837e-06|  2.38419e-06|  0.00%|    def _real_close(self, _ss=_socket.socket):
   495|         0|            0|            0|  0.00%|        # This function should not reference any globals. See issue #808164.
   496|         2|  1.33514e-05|  6.67572e-06|  0.01%|        _ss.close(self)
   497|         0|            0|            0|  0.00%|
   498|         2|  6.19888e-06|  3.09944e-06|  0.00%|    def close(self):
   499|         0|            0|            0|  0.00%|        # This function should not reference any globals. See issue #808164.
   500|         2|  7.15256e-06|  3.57628e-06|  0.00%|        self._closed = True
   501|         2|  8.58307e-06|  4.29153e-06|  0.00%|        if self._io_refs <= 0:
   502|         2|   1.7643e-05|  8.82149e-06|  0.01%|            self._real_close()
(call)|         2|  1.81198e-05|  9.05991e-06|  0.01%|# /usr/lib/python3.10/socket.py:494 _real_close
   503|         0|            0|            0|  0.00%|
   504|         0|            0|            0|  0.00%|    def detach(self):
   505|         0|            0|            0|  0.00%|        """detach() -> file descriptor
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|        Close the socket object without closing the underlying file descriptor.
   508|         0|            0|            0|  0.00%|        The object cannot be used after this call, but the file descriptor
   509|         0|            0|            0|  0.00%|        can be reused for other purposes.  The file descriptor is returned.
   510|         0|            0|            0|  0.00%|        """
   511|         0|            0|            0|  0.00%|        self._closed = True
   512|         0|            0|            0|  0.00%|        return super().detach()
   513|         0|            0|            0|  0.00%|
   514|         0|            0|            0|  0.00%|    @property
   515|         0|            0|            0|  0.00%|    def family(self):
   516|         0|            0|            0|  0.00%|        """Read-only access to the address family for this socket.
   517|         0|            0|            0|  0.00%|        """
   518|         0|            0|            0|  0.00%|        return _intenum_converter(super().family, AddressFamily)
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|    @property
   521|         0|            0|            0|  0.00%|    def type(self):
   522|         0|            0|            0|  0.00%|        """Read-only access to the socket type.
   523|         0|            0|            0|  0.00%|        """
   524|         0|            0|            0|  0.00%|        return _intenum_converter(super().type, SocketKind)
   525|         0|            0|            0|  0.00%|
   526|         0|            0|            0|  0.00%|    if os.name == 'nt':
   527|         0|            0|            0|  0.00%|        def get_inheritable(self):
   528|         0|            0|            0|  0.00%|            return os.get_handle_inheritable(self.fileno())
   529|         0|            0|            0|  0.00%|        def set_inheritable(self, inheritable):
   530|         0|            0|            0|  0.00%|            os.set_handle_inheritable(self.fileno(), inheritable)
   531|         0|            0|            0|  0.00%|    else:
   532|         0|            0|            0|  0.00%|        def get_inheritable(self):
   533|         0|            0|            0|  0.00%|            return os.get_inheritable(self.fileno())
   534|         0|            0|            0|  0.00%|        def set_inheritable(self, inheritable):
   535|         0|            0|            0|  0.00%|            os.set_inheritable(self.fileno(), inheritable)
   536|         0|            0|            0|  0.00%|    get_inheritable.__doc__ = "Get the inheritable flag of the socket"
   537|         0|            0|            0|  0.00%|    set_inheritable.__doc__ = "Set the inheritable flag of the socket"
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|def fromfd(fd, family, type, proto=0):
   540|         0|            0|            0|  0.00%|    """ fromfd(fd, family, type[, proto]) -> socket object
   541|         0|            0|            0|  0.00%|
   542|         0|            0|            0|  0.00%|    Create a socket object from a duplicate of the given file
   543|         0|            0|            0|  0.00%|    descriptor.  The remaining arguments are the same as for socket().
   544|         0|            0|            0|  0.00%|    """
   545|         0|            0|            0|  0.00%|    nfd = dup(fd)
   546|         0|            0|            0|  0.00%|    return socket(family, type, proto, nfd)
   547|         0|            0|            0|  0.00%|
   548|         0|            0|            0|  0.00%|if hasattr(_socket.socket, "sendmsg"):
   549|         0|            0|            0|  0.00%|    import array
   550|         0|            0|            0|  0.00%|
   551|         0|            0|            0|  0.00%|    def send_fds(sock, buffers, fds, flags=0, address=None):
   552|         0|            0|            0|  0.00%|        """ send_fds(sock, buffers, fds[, flags[, address]]) -> integer
   553|         0|            0|            0|  0.00%|
   554|         0|            0|            0|  0.00%|        Send the list of file descriptors fds over an AF_UNIX socket.
   555|         0|            0|            0|  0.00%|        """
   556|         0|            0|            0|  0.00%|        return sock.sendmsg(buffers, [(_socket.SOL_SOCKET,
   557|         0|            0|            0|  0.00%|            _socket.SCM_RIGHTS, array.array("i", fds))])
   558|         0|            0|            0|  0.00%|    __all__.append("send_fds")
   559|         0|            0|            0|  0.00%|
   560|         0|            0|            0|  0.00%|if hasattr(_socket.socket, "recvmsg"):
   561|         0|            0|            0|  0.00%|    import array
   562|         0|            0|            0|  0.00%|
   563|         0|            0|            0|  0.00%|    def recv_fds(sock, bufsize, maxfds, flags=0):
   564|         0|            0|            0|  0.00%|        """ recv_fds(sock, bufsize, maxfds[, flags]) -> (data, list of file
   565|         0|            0|            0|  0.00%|        descriptors, msg_flags, address)
   566|         0|            0|            0|  0.00%|
   567|         0|            0|            0|  0.00%|        Receive up to maxfds file descriptors returning the message
   568|         0|            0|            0|  0.00%|        data and a list containing the descriptors.
   569|         0|            0|            0|  0.00%|        """
   570|         0|            0|            0|  0.00%|        # Array of ints
   571|         0|            0|            0|  0.00%|        fds = array.array("i")
   572|         0|            0|            0|  0.00%|        msg, ancdata, flags, addr = sock.recvmsg(bufsize,
   573|         0|            0|            0|  0.00%|            _socket.CMSG_LEN(maxfds * fds.itemsize))
   574|         0|            0|            0|  0.00%|        for cmsg_level, cmsg_type, cmsg_data in ancdata:
   575|         0|            0|            0|  0.00%|            if (cmsg_level == _socket.SOL_SOCKET and cmsg_type == _socket.SCM_RIGHTS):
   576|         0|            0|            0|  0.00%|                fds.frombytes(cmsg_data[:
   577|         0|            0|            0|  0.00%|                        len(cmsg_data) - (len(cmsg_data) % fds.itemsize)])
   578|         0|            0|            0|  0.00%|
   579|         0|            0|            0|  0.00%|        return msg, list(fds), flags, addr
   580|         0|            0|            0|  0.00%|    __all__.append("recv_fds")
   581|         0|            0|            0|  0.00%|
   582|         0|            0|            0|  0.00%|if hasattr(_socket.socket, "share"):
   583|         0|            0|            0|  0.00%|    def fromshare(info):
   584|         0|            0|            0|  0.00%|        """ fromshare(info) -> socket object
   585|         0|            0|            0|  0.00%|
   586|         0|            0|            0|  0.00%|        Create a socket object from the bytes object returned by
   587|         0|            0|            0|  0.00%|        socket.share(pid).
   588|         0|            0|            0|  0.00%|        """
   589|         0|            0|            0|  0.00%|        return socket(0, 0, 0, info)
   590|         0|            0|            0|  0.00%|    __all__.append("fromshare")
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|if hasattr(_socket, "socketpair"):
   593|         0|            0|            0|  0.00%|
   594|         0|            0|            0|  0.00%|    def socketpair(family=None, type=SOCK_STREAM, proto=0):
   595|         0|            0|            0|  0.00%|        """socketpair([family[, type[, proto]]]) -> (socket object, socket object)
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|        Create a pair of socket objects from the sockets returned by the platform
   598|         0|            0|            0|  0.00%|        socketpair() function.
   599|         0|            0|            0|  0.00%|        The arguments are the same as for socket() except the default family is
   600|         0|            0|            0|  0.00%|        AF_UNIX if defined on the platform; otherwise, the default is AF_INET.
   601|         0|            0|            0|  0.00%|        """
   602|         0|            0|            0|  0.00%|        if family is None:
   603|         0|            0|            0|  0.00%|            try:
   604|         0|            0|            0|  0.00%|                family = AF_UNIX
   605|         0|            0|            0|  0.00%|            except NameError:
   606|         0|            0|            0|  0.00%|                family = AF_INET
   607|         0|            0|            0|  0.00%|        a, b = _socket.socketpair(family, type, proto)
   608|         0|            0|            0|  0.00%|        a = socket(family, type, proto, a.detach())
   609|         0|            0|            0|  0.00%|        b = socket(family, type, proto, b.detach())
   610|         0|            0|            0|  0.00%|        return a, b
   611|         0|            0|            0|  0.00%|
   612|         0|            0|            0|  0.00%|else:
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|    # Origin: https://gist.github.com/4325783, by Geert Jansen.  Public domain.
   615|         0|            0|            0|  0.00%|    def socketpair(family=AF_INET, type=SOCK_STREAM, proto=0):
   616|         0|            0|            0|  0.00%|        if family == AF_INET:
   617|         0|            0|            0|  0.00%|            host = _LOCALHOST
   618|         0|            0|            0|  0.00%|        elif family == AF_INET6:
   619|         0|            0|            0|  0.00%|            host = _LOCALHOST_V6
   620|         0|            0|            0|  0.00%|        else:
   621|         0|            0|            0|  0.00%|            raise ValueError("Only AF_INET and AF_INET6 socket address families "
   622|         0|            0|            0|  0.00%|                             "are supported")
   623|         0|            0|            0|  0.00%|        if type != SOCK_STREAM:
   624|         0|            0|            0|  0.00%|            raise ValueError("Only SOCK_STREAM socket type is supported")
   625|         0|            0|            0|  0.00%|        if proto != 0:
   626|         0|            0|            0|  0.00%|            raise ValueError("Only protocol zero is supported")
   627|         0|            0|            0|  0.00%|
   628|         0|            0|            0|  0.00%|        # We create a connected TCP socket. Note the trick with
   629|         0|            0|            0|  0.00%|        # setblocking(False) that prevents us from having to create a thread.
   630|         0|            0|            0|  0.00%|        lsock = socket(family, type, proto)
   631|         0|            0|            0|  0.00%|        try:
   632|         0|            0|            0|  0.00%|            lsock.bind((host, 0))
   633|         0|            0|            0|  0.00%|            lsock.listen()
   634|         0|            0|            0|  0.00%|            # On IPv6, ignore flow_info and scope_id
   635|         0|            0|            0|  0.00%|            addr, port = lsock.getsockname()[:2]
   636|         0|            0|            0|  0.00%|            csock = socket(family, type, proto)
   637|         0|            0|            0|  0.00%|            try:
   638|         0|            0|            0|  0.00%|                csock.setblocking(False)
   639|         0|            0|            0|  0.00%|                try:
   640|         0|            0|            0|  0.00%|                    csock.connect((addr, port))
   641|         0|            0|            0|  0.00%|                except (BlockingIOError, InterruptedError):
   642|         0|            0|            0|  0.00%|                    pass
   643|         0|            0|            0|  0.00%|                csock.setblocking(True)
   644|         0|            0|            0|  0.00%|                ssock, _ = lsock.accept()
   645|         0|            0|            0|  0.00%|            except:
   646|         0|            0|            0|  0.00%|                csock.close()
   647|         0|            0|            0|  0.00%|                raise
   648|         0|            0|            0|  0.00%|        finally:
   649|         0|            0|            0|  0.00%|            lsock.close()
   650|         0|            0|            0|  0.00%|        return (ssock, csock)
   651|         0|            0|            0|  0.00%|    __all__.append("socketpair")
   652|         0|            0|            0|  0.00%|
   653|         0|            0|            0|  0.00%|socketpair.__doc__ = """socketpair([family[, type[, proto]]]) -> (socket object, socket object)
   654|         0|            0|            0|  0.00%|Create a pair of socket objects from the sockets returned by the platform
   655|         0|            0|            0|  0.00%|socketpair() function.
   656|         0|            0|            0|  0.00%|The arguments are the same as for socket() except the default family is AF_UNIX
   657|         0|            0|            0|  0.00%|if defined on the platform; otherwise, the default is AF_INET.
   658|         0|            0|            0|  0.00%|"""
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|_blocking_errnos = { EAGAIN, EWOULDBLOCK }
   661|         0|            0|            0|  0.00%|
   662|         0|            0|            0|  0.00%|class SocketIO(io.RawIOBase):
   663|         0|            0|            0|  0.00%|
   664|         0|            0|            0|  0.00%|    """Raw I/O implementation for stream sockets.
   665|         0|            0|            0|  0.00%|
   666|         0|            0|            0|  0.00%|    This class supports the makefile() method on sockets.  It provides
   667|         0|            0|            0|  0.00%|    the raw I/O interface on top of a socket object.
   668|         0|            0|            0|  0.00%|    """
   669|         0|            0|            0|  0.00%|
   670|         0|            0|            0|  0.00%|    # One might wonder why not let FileIO do the job instead.  There are two
   671|         0|            0|            0|  0.00%|    # main reasons why FileIO is not adapted:
   672|         0|            0|            0|  0.00%|    # - it wouldn't work under Windows (where you can't used read() and
   673|         0|            0|            0|  0.00%|    #   write() on a socket handle)
   674|         0|            0|            0|  0.00%|    # - it wouldn't work with socket timeouts (FileIO would ignore the
   675|         0|            0|            0|  0.00%|    #   timeout and consider the socket non-blocking)
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    # XXX More docs
   678|         0|            0|            0|  0.00%|
   679|         0|            0|            0|  0.00%|    def __init__(self, sock, mode):
   680|         0|            0|            0|  0.00%|        if mode not in ("r", "w", "rw", "rb", "wb", "rwb"):
   681|         0|            0|            0|  0.00%|            raise ValueError("invalid mode: %r" % mode)
   682|         0|            0|            0|  0.00%|        io.RawIOBase.__init__(self)
   683|         0|            0|            0|  0.00%|        self._sock = sock
   684|         0|            0|            0|  0.00%|        if "b" not in mode:
   685|         0|            0|            0|  0.00%|            mode += "b"
   686|         0|            0|            0|  0.00%|        self._mode = mode
   687|         0|            0|            0|  0.00%|        self._reading = "r" in mode
   688|         0|            0|            0|  0.00%|        self._writing = "w" in mode
   689|         0|            0|            0|  0.00%|        self._timeout_occurred = False
   690|         0|            0|            0|  0.00%|
   691|         0|            0|            0|  0.00%|    def readinto(self, b):
   692|         0|            0|            0|  0.00%|        """Read up to len(b) bytes into the writable buffer *b* and return
   693|         0|            0|            0|  0.00%|        the number of bytes read.  If the socket is non-blocking and no bytes
   694|         0|            0|            0|  0.00%|        are available, None is returned.
   695|         0|            0|            0|  0.00%|
   696|         0|            0|            0|  0.00%|        If *b* is non-empty, a 0 return value indicates that the connection
   697|         0|            0|            0|  0.00%|        was shutdown at the other end.
   698|         0|            0|            0|  0.00%|        """
   699|         0|            0|            0|  0.00%|        self._checkClosed()
   700|         0|            0|            0|  0.00%|        self._checkReadable()
   701|         0|            0|            0|  0.00%|        if self._timeout_occurred:
   702|         0|            0|            0|  0.00%|            raise OSError("cannot read from timed out object")
   703|         0|            0|            0|  0.00%|        while True:
   704|         0|            0|            0|  0.00%|            try:
   705|         0|            0|            0|  0.00%|                return self._sock.recv_into(b)
   706|         0|            0|            0|  0.00%|            except timeout:
   707|         0|            0|            0|  0.00%|                self._timeout_occurred = True
   708|         0|            0|            0|  0.00%|                raise
   709|         0|            0|            0|  0.00%|            except error as e:
   710|         0|            0|            0|  0.00%|                if e.errno in _blocking_errnos:
   711|         0|            0|            0|  0.00%|                    return None
   712|         0|            0|            0|  0.00%|                raise
   713|         0|            0|            0|  0.00%|
   714|         0|            0|            0|  0.00%|    def write(self, b):
   715|         0|            0|            0|  0.00%|        """Write the given bytes or bytearray object *b* to the socket
   716|         0|            0|            0|  0.00%|        and return the number of bytes written.  This can be less than
   717|         0|            0|            0|  0.00%|        len(b) if not all data could be written.  If the socket is
   718|         0|            0|            0|  0.00%|        non-blocking and no bytes could be written None is returned.
   719|         0|            0|            0|  0.00%|        """
   720|         0|            0|            0|  0.00%|        self._checkClosed()
   721|         0|            0|            0|  0.00%|        self._checkWritable()
   722|         0|            0|            0|  0.00%|        try:
   723|         0|            0|            0|  0.00%|            return self._sock.send(b)
   724|         0|            0|            0|  0.00%|        except error as e:
   725|         0|            0|            0|  0.00%|            # XXX what about EINTR?
   726|         0|            0|            0|  0.00%|            if e.errno in _blocking_errnos:
   727|         0|            0|            0|  0.00%|                return None
   728|         0|            0|            0|  0.00%|            raise
   729|         0|            0|            0|  0.00%|
   730|         0|            0|            0|  0.00%|    def readable(self):
   731|         0|            0|            0|  0.00%|        """True if the SocketIO is open for reading.
   732|         0|            0|            0|  0.00%|        """
   733|         0|            0|            0|  0.00%|        if self.closed:
   734|         0|            0|            0|  0.00%|            raise ValueError("I/O operation on closed socket.")
   735|         0|            0|            0|  0.00%|        return self._reading
   736|         0|            0|            0|  0.00%|
   737|         0|            0|            0|  0.00%|    def writable(self):
   738|         0|            0|            0|  0.00%|        """True if the SocketIO is open for writing.
   739|         0|            0|            0|  0.00%|        """
   740|         0|            0|            0|  0.00%|        if self.closed:
   741|         0|            0|            0|  0.00%|            raise ValueError("I/O operation on closed socket.")
   742|         0|            0|            0|  0.00%|        return self._writing
   743|         0|            0|            0|  0.00%|
   744|         0|            0|            0|  0.00%|    def seekable(self):
   745|         0|            0|            0|  0.00%|        """True if the SocketIO is open for seeking.
   746|         0|            0|            0|  0.00%|        """
   747|         0|            0|            0|  0.00%|        if self.closed:
   748|         0|            0|            0|  0.00%|            raise ValueError("I/O operation on closed socket.")
   749|         0|            0|            0|  0.00%|        return super().seekable()
   750|         0|            0|            0|  0.00%|
   751|         0|            0|            0|  0.00%|    def fileno(self):
   752|         0|            0|            0|  0.00%|        """Return the file descriptor of the underlying socket.
   753|         0|            0|            0|  0.00%|        """
   754|         0|            0|            0|  0.00%|        self._checkClosed()
   755|         0|            0|            0|  0.00%|        return self._sock.fileno()
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    @property
   758|         0|            0|            0|  0.00%|    def name(self):
   759|         0|            0|            0|  0.00%|        if not self.closed:
   760|         0|            0|            0|  0.00%|            return self.fileno()
   761|         0|            0|            0|  0.00%|        else:
   762|         0|            0|            0|  0.00%|            return -1
   763|         0|            0|            0|  0.00%|
   764|         0|            0|            0|  0.00%|    @property
   765|         0|            0|            0|  0.00%|    def mode(self):
   766|         0|            0|            0|  0.00%|        return self._mode
   767|         0|            0|            0|  0.00%|
   768|         0|            0|            0|  0.00%|    def close(self):
   769|         0|            0|            0|  0.00%|        """Close the SocketIO object.  This doesn't close the underlying
   770|         0|            0|            0|  0.00%|        socket, except if all references to it have disappeared.
   771|         0|            0|            0|  0.00%|        """
   772|         0|            0|            0|  0.00%|        if self.closed:
   773|         0|            0|            0|  0.00%|            return
   774|         0|            0|            0|  0.00%|        io.RawIOBase.close(self)
   775|         0|            0|            0|  0.00%|        self._sock._decref_socketios()
   776|         0|            0|            0|  0.00%|        self._sock = None
   777|         0|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|
   779|         0|            0|            0|  0.00%|def getfqdn(name=''):
   780|         0|            0|            0|  0.00%|    """Get fully qualified domain name from name.
   781|         0|            0|            0|  0.00%|
   782|         0|            0|            0|  0.00%|    An empty argument is interpreted as meaning the local host.
   783|         0|            0|            0|  0.00%|
   784|         0|            0|            0|  0.00%|    First the hostname returned by gethostbyaddr() is checked, then
   785|         0|            0|            0|  0.00%|    possibly existing aliases. In case no FQDN is available and `name`
   786|         0|            0|            0|  0.00%|    was given, it is returned unchanged. If `name` was empty or '0.0.0.0',
   787|         0|            0|            0|  0.00%|    hostname from gethostname() is returned.
   788|         0|            0|            0|  0.00%|    """
   789|         0|            0|            0|  0.00%|    name = name.strip()
   790|         0|            0|            0|  0.00%|    if not name or name == '0.0.0.0':
   791|         0|            0|            0|  0.00%|        name = gethostname()
   792|         0|            0|            0|  0.00%|    try:
   793|         0|            0|            0|  0.00%|        hostname, aliases, ipaddrs = gethostbyaddr(name)
   794|         0|            0|            0|  0.00%|    except error:
   795|         0|            0|            0|  0.00%|        pass
   796|         0|            0|            0|  0.00%|    else:
   797|         0|            0|            0|  0.00%|        aliases.insert(0, hostname)
   798|         0|            0|            0|  0.00%|        for name in aliases:
   799|         0|            0|            0|  0.00%|            if '.' in name:
   800|         0|            0|            0|  0.00%|                break
   801|         0|            0|            0|  0.00%|        else:
   802|         0|            0|            0|  0.00%|            name = hostname
   803|         0|            0|            0|  0.00%|    return name
   804|         0|            0|            0|  0.00%|
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|_GLOBAL_DEFAULT_TIMEOUT = object()
   807|         0|            0|            0|  0.00%|
   808|         1|  4.76837e-06|  4.76837e-06|  0.00%|def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,
   809|         0|            0|            0|  0.00%|                      source_address=None):
   810|         0|            0|            0|  0.00%|    """Connect to *address* and return the socket object.
   811|         0|            0|            0|  0.00%|
   812|         0|            0|            0|  0.00%|    Convenience function.  Connect to *address* (a 2-tuple ``(host,
   813|         0|            0|            0|  0.00%|    port)``) and return the socket object.  Passing the optional
   814|         0|            0|            0|  0.00%|    *timeout* parameter will set the timeout on the socket instance
   815|         0|            0|            0|  0.00%|    before attempting to connect.  If no *timeout* is supplied, the
   816|         0|            0|            0|  0.00%|    global default timeout setting returned by :func:`getdefaulttimeout`
   817|         0|            0|            0|  0.00%|    is used.  If *source_address* is set it must be a tuple of (host, port)
   818|         0|            0|            0|  0.00%|    for the socket to bind as a source address before making the connection.
   819|         0|            0|            0|  0.00%|    A host of '' or port 0 tells the OS to use the default.
   820|         0|            0|            0|  0.00%|    """
   821|         0|            0|            0|  0.00%|
   822|         1|  9.53674e-06|  9.53674e-06|  0.00%|    host, port = address
   823|         1|  9.29832e-06|  9.29832e-06|  0.00%|    err = None
   824|         3|  2.14577e-05|  7.15256e-06|  0.01%|    for res in getaddrinfo(host, port, 0, SOCK_STREAM):
(call)|         1|    0.0313241|    0.0313241| 12.89%|# /usr/lib/python3.10/socket.py:938 getaddrinfo
   825|         2|  8.58307e-06|  4.29153e-06|  0.00%|        af, socktype, proto, canonname, sa = res
   826|         2|  8.10623e-06|  4.05312e-06|  0.00%|        sock = None
   827|         2|  7.15256e-06|  3.57628e-06|  0.00%|        try:
   828|         2|  2.09808e-05|  1.04904e-05|  0.01%|            sock = socket(af, socktype, proto)
(call)|         2|  6.96182e-05|  3.48091e-05|  0.03%|# /usr/lib/python3.10/socket.py:220 __init__
   829|         2|  7.86781e-06|  3.93391e-06|  0.00%|            if timeout is not _GLOBAL_DEFAULT_TIMEOUT:
   830|         0|            0|            0|  0.00%|                sock.settimeout(timeout)
   831|         2|  7.15256e-06|  3.57628e-06|  0.00%|            if source_address:
   832|         0|            0|            0|  0.00%|                sock.bind(source_address)
   833|         2|  8.29697e-05|  4.14848e-05|  0.03%|            sock.connect(sa)
   834|         0|            0|            0|  0.00%|            # Break explicitly a reference cycle
   835|         0|            0|            0|  0.00%|            err = None
   836|         0|            0|            0|  0.00%|            return sock
   837|         0|            0|            0|  0.00%|
   838|         2|  1.00136e-05|  5.00679e-06|  0.00%|        except error as _:
   839|         2|  7.86781e-06|  3.93391e-06|  0.00%|            err = _
   840|         2|  7.39098e-06|  3.69549e-06|  0.00%|            if sock is not None:
   841|         2|  1.95503e-05|  9.77516e-06|  0.01%|                sock.close()
(call)|         2|  5.76973e-05|  2.88486e-05|  0.02%|# /usr/lib/python3.10/socket.py:498 close
   842|         0|            0|            0|  0.00%|
   843|         1|  4.05312e-06|  4.05312e-06|  0.00%|    if err is not None:
   844|         1|  5.48363e-06|  5.48363e-06|  0.00%|        try:
   845|         1|  5.48363e-06|  5.48363e-06|  0.00%|            raise err
   846|         0|            0|            0|  0.00%|        finally:
   847|         0|            0|            0|  0.00%|            # Break explicitly a reference cycle
   848|         1|  5.96046e-06|  5.96046e-06|  0.00%|            err = None
   849|         0|            0|            0|  0.00%|    else:
   850|         0|            0|            0|  0.00%|        raise error("getaddrinfo returns an empty list")
   851|         0|            0|            0|  0.00%|
   852|         0|            0|            0|  0.00%|
   853|         0|            0|            0|  0.00%|def has_dualstack_ipv6():
   854|         0|            0|            0|  0.00%|    """Return True if the platform supports creating a SOCK_STREAM socket
   855|         0|            0|            0|  0.00%|    which can handle both AF_INET and AF_INET6 (IPv4 / IPv6) connections.
   856|         0|            0|            0|  0.00%|    """
   857|         0|            0|            0|  0.00%|    if not has_ipv6 \
   858|         0|            0|            0|  0.00%|            or not hasattr(_socket, 'IPPROTO_IPV6') \
   859|         0|            0|            0|  0.00%|            or not hasattr(_socket, 'IPV6_V6ONLY'):
   860|         0|            0|            0|  0.00%|        return False
   861|         0|            0|            0|  0.00%|    try:
   862|         0|            0|            0|  0.00%|        with socket(AF_INET6, SOCK_STREAM) as sock:
   863|         0|            0|            0|  0.00%|            sock.setsockopt(IPPROTO_IPV6, IPV6_V6ONLY, 0)
   864|         0|            0|            0|  0.00%|            return True
   865|         0|            0|            0|  0.00%|    except error:
   866|         0|            0|            0|  0.00%|        return False
   867|         0|            0|            0|  0.00%|
   868|         0|            0|            0|  0.00%|
   869|         0|            0|            0|  0.00%|def create_server(address, *, family=AF_INET, backlog=None, reuse_port=False,
   870|         0|            0|            0|  0.00%|                  dualstack_ipv6=False):
   871|         0|            0|            0|  0.00%|    """Convenience function which creates a SOCK_STREAM type socket
   872|         0|            0|            0|  0.00%|    bound to *address* (a 2-tuple (host, port)) and return the socket
   873|         0|            0|            0|  0.00%|    object.
   874|         0|            0|            0|  0.00%|
   875|         0|            0|            0|  0.00%|    *family* should be either AF_INET or AF_INET6.
   876|         0|            0|            0|  0.00%|    *backlog* is the queue size passed to socket.listen().
   877|         0|            0|            0|  0.00%|    *reuse_port* dictates whether to use the SO_REUSEPORT socket option.
   878|         0|            0|            0|  0.00%|    *dualstack_ipv6*: if true and the platform supports it, it will
   879|         0|            0|            0|  0.00%|    create an AF_INET6 socket able to accept both IPv4 or IPv6
   880|         0|            0|            0|  0.00%|    connections. When false it will explicitly disable this option on
   881|         0|            0|            0|  0.00%|    platforms that enable it by default (e.g. Linux).
   882|         0|            0|            0|  0.00%|
   883|         0|            0|            0|  0.00%|    >>> with create_server(('', 8000)) as server:
   884|         0|            0|            0|  0.00%|    ...     while True:
   885|         0|            0|            0|  0.00%|    ...         conn, addr = server.accept()
   886|         0|            0|            0|  0.00%|    ...         # handle new connection
   887|         0|            0|            0|  0.00%|    """
   888|         0|            0|            0|  0.00%|    if reuse_port and not hasattr(_socket, "SO_REUSEPORT"):
   889|         0|            0|            0|  0.00%|        raise ValueError("SO_REUSEPORT not supported on this platform")
   890|         0|            0|            0|  0.00%|    if dualstack_ipv6:
   891|         0|            0|            0|  0.00%|        if not has_dualstack_ipv6():
   892|         0|            0|            0|  0.00%|            raise ValueError("dualstack_ipv6 not supported on this platform")
   893|         0|            0|            0|  0.00%|        if family != AF_INET6:
   894|         0|            0|            0|  0.00%|            raise ValueError("dualstack_ipv6 requires AF_INET6 family")
   895|         0|            0|            0|  0.00%|    sock = socket(family, SOCK_STREAM)
   896|         0|            0|            0|  0.00%|    try:
   897|         0|            0|            0|  0.00%|        # Note about Windows. We don't set SO_REUSEADDR because:
   898|         0|            0|            0|  0.00%|        # 1) It's unnecessary: bind() will succeed even in case of a
   899|         0|            0|            0|  0.00%|        # previous closed socket on the same address and still in
   900|         0|            0|            0|  0.00%|        # TIME_WAIT state.
   901|         0|            0|            0|  0.00%|        # 2) If set, another socket is free to bind() on the same
   902|         0|            0|            0|  0.00%|        # address, effectively preventing this one from accepting
   903|         0|            0|            0|  0.00%|        # connections. Also, it may set the process in a state where
   904|         0|            0|            0|  0.00%|        # it'll no longer respond to any signals or graceful kills.
   905|         0|            0|            0|  0.00%|        # See: msdn2.microsoft.com/en-us/library/ms740621(VS.85).aspx
   906|         0|            0|            0|  0.00%|        if os.name not in ('nt', 'cygwin') and \
   907|         0|            0|            0|  0.00%|                hasattr(_socket, 'SO_REUSEADDR'):
   908|         0|            0|            0|  0.00%|            try:
   909|         0|            0|            0|  0.00%|                sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
   910|         0|            0|            0|  0.00%|            except error:
   911|         0|            0|            0|  0.00%|                # Fail later on bind(), for platforms which may not
   912|         0|            0|            0|  0.00%|                # support this option.
   913|         0|            0|            0|  0.00%|                pass
   914|         0|            0|            0|  0.00%|        if reuse_port:
   915|         0|            0|            0|  0.00%|            sock.setsockopt(SOL_SOCKET, SO_REUSEPORT, 1)
   916|         0|            0|            0|  0.00%|        if has_ipv6 and family == AF_INET6:
   917|         0|            0|            0|  0.00%|            if dualstack_ipv6:
   918|         0|            0|            0|  0.00%|                sock.setsockopt(IPPROTO_IPV6, IPV6_V6ONLY, 0)
   919|         0|            0|            0|  0.00%|            elif hasattr(_socket, "IPV6_V6ONLY") and \
   920|         0|            0|            0|  0.00%|                    hasattr(_socket, "IPPROTO_IPV6"):
   921|         0|            0|            0|  0.00%|                sock.setsockopt(IPPROTO_IPV6, IPV6_V6ONLY, 1)
   922|         0|            0|            0|  0.00%|        try:
   923|         0|            0|            0|  0.00%|            sock.bind(address)
   924|         0|            0|            0|  0.00%|        except error as err:
   925|         0|            0|            0|  0.00%|            msg = '%s (while attempting to bind on address %r)' % \
   926|         0|            0|            0|  0.00%|                (err.strerror, address)
   927|         0|            0|            0|  0.00%|            raise error(err.errno, msg) from None
   928|         0|            0|            0|  0.00%|        if backlog is None:
   929|         0|            0|            0|  0.00%|            sock.listen()
   930|         0|            0|            0|  0.00%|        else:
   931|         0|            0|            0|  0.00%|            sock.listen(backlog)
   932|         0|            0|            0|  0.00%|        return sock
   933|         0|            0|            0|  0.00%|    except error:
   934|         0|            0|            0|  0.00%|        sock.close()
   935|         0|            0|            0|  0.00%|        raise
   936|         0|            0|            0|  0.00%|
   937|         0|            0|            0|  0.00%|
   938|         1|  6.19888e-06|  6.19888e-06|  0.00%|def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
   939|         0|            0|            0|  0.00%|    """Resolve host and port into list of address info entries.
   940|         0|            0|            0|  0.00%|
   941|         0|            0|            0|  0.00%|    Translate the host/port argument into a sequence of 5-tuples that contain
   942|         0|            0|            0|  0.00%|    all the necessary arguments for creating a socket connected to that service.
   943|         0|            0|            0|  0.00%|    host is a domain name, a string representation of an IPv4/v6 address or
   944|         0|            0|            0|  0.00%|    None. port is a string service name such as 'http', a numeric port number or
   945|         0|            0|            0|  0.00%|    None. By passing None as the value of host and port, you can pass NULL to
   946|         0|            0|            0|  0.00%|    the underlying C API.
   947|         0|            0|            0|  0.00%|
   948|         0|            0|            0|  0.00%|    The family, type and proto arguments can be optionally specified in order to
   949|         0|            0|            0|  0.00%|    narrow the list of addresses returned. Passing zero as a value for each of
   950|         0|            0|            0|  0.00%|    these arguments selects the full range of results.
   951|         0|            0|            0|  0.00%|    """
   952|         0|            0|            0|  0.00%|    # We override this function since we want to translate the numeric family
   953|         0|            0|            0|  0.00%|    # and socket type values to enum constants.
   954|         1|  4.29153e-06|  4.29153e-06|  0.00%|    addrlist = []
   955|         3|   0.00069356|  0.000231187|  0.29%|    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
(call)|         1|    0.0303328|    0.0303328| 12.49%|# /usr/lib/python3.10/encodings/__init__.py:71 search_function
(call)|         1|  3.95775e-05|  3.95775e-05|  0.02%|# /usr/lib/python3.10/encodings/idna.py:147 encode
   956|         2|  1.54972e-05|   7.7486e-06|  0.01%|        af, socktype, proto, canonname, sa = res
   957|         4|  2.64645e-05|  6.61612e-06|  0.01%|        addrlist.append((_intenum_converter(af, AddressFamily),
(call)|         2|  9.46522e-05|  4.73261e-05|  0.04%|# /usr/lib/python3.10/socket.py:99 _intenum_converter
   958|         2|   1.7643e-05|  8.82149e-06|  0.01%|                         _intenum_converter(socktype, SocketKind),
(call)|         2|  8.10623e-05|  4.05312e-05|  0.03%|# /usr/lib/python3.10/socket.py:99 _intenum_converter
   959|         2|  9.29832e-06|  4.64916e-06|  0.00%|                         proto, canonname, sa))
   960|         1|  3.09944e-06|  3.09944e-06|  0.00%|    return addrlist
File: /usr/lib/python3.10/email/headerregistry.py
File duration: 0.00114584s (0.47%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""Representing and manipulating email headers via custom objects.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|This module provides an implementation of the HeaderRegistry API.
     4|         0|            0|            0|  0.00%|The implementation is designed to flexibly follow RFC5322 rules.
     5|         0|            0|            0|  0.00%|"""
     6|         0|            0|            0|  0.00%|from types import MappingProxyType
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|from email import utils
     9|         0|            0|            0|  0.00%|from email import errors
    10|         0|            0|            0|  0.00%|from email import _header_value_parser as parser
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|class Address:
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|    def __init__(self, display_name='', username='', domain='', addr_spec=None):
    15|         0|            0|            0|  0.00%|        """Create an object representing a full email address.
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|        An address can have a 'display_name', a 'username', and a 'domain'.  In
    18|         0|            0|            0|  0.00%|        addition to specifying the username and domain separately, they may be
    19|         0|            0|            0|  0.00%|        specified together by using the addr_spec keyword *instead of* the
    20|         0|            0|            0|  0.00%|        username and domain keywords.  If an addr_spec string is specified it
    21|         0|            0|            0|  0.00%|        must be properly quoted according to RFC 5322 rules; an error will be
    22|         0|            0|            0|  0.00%|        raised if it is not.
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|        An Address object has display_name, username, domain, and addr_spec
    25|         0|            0|            0|  0.00%|        attributes, all of which are read-only.  The addr_spec and the string
    26|         0|            0|            0|  0.00%|        value of the object are both quoted according to RFC5322 rules, but
    27|         0|            0|            0|  0.00%|        without any Content Transfer Encoding.
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|        """
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|        inputs = ''.join(filter(None, (display_name, username, domain, addr_spec)))
    32|         0|            0|            0|  0.00%|        if '\r' in inputs or '\n' in inputs:
    33|         0|            0|            0|  0.00%|            raise ValueError("invalid arguments; address parts cannot contain CR or LF")
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|        # This clause with its potential 'raise' may only happen when an
    36|         0|            0|            0|  0.00%|        # application program creates an Address object using an addr_spec
    37|         0|            0|            0|  0.00%|        # keyword.  The email library code itself must always supply username
    38|         0|            0|            0|  0.00%|        # and domain.
    39|         0|            0|            0|  0.00%|        if addr_spec is not None:
    40|         0|            0|            0|  0.00%|            if username or domain:
    41|         0|            0|            0|  0.00%|                raise TypeError("addrspec specified when username and/or "
    42|         0|            0|            0|  0.00%|                                "domain also specified")
    43|         0|            0|            0|  0.00%|            a_s, rest = parser.get_addr_spec(addr_spec)
    44|         0|            0|            0|  0.00%|            if rest:
    45|         0|            0|            0|  0.00%|                raise ValueError("Invalid addr_spec; only '{}' "
    46|         0|            0|            0|  0.00%|                                 "could be parsed from '{}'".format(
    47|         0|            0|            0|  0.00%|                                    a_s, addr_spec))
    48|         0|            0|            0|  0.00%|            if a_s.all_defects:
    49|         0|            0|            0|  0.00%|                raise a_s.all_defects[0]
    50|         0|            0|            0|  0.00%|            username = a_s.local_part
    51|         0|            0|            0|  0.00%|            domain = a_s.domain
    52|         0|            0|            0|  0.00%|        self._display_name = display_name
    53|         0|            0|            0|  0.00%|        self._username = username
    54|         0|            0|            0|  0.00%|        self._domain = domain
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|    @property
    57|         0|            0|            0|  0.00%|    def display_name(self):
    58|         0|            0|            0|  0.00%|        return self._display_name
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|    @property
    61|         0|            0|            0|  0.00%|    def username(self):
    62|         0|            0|            0|  0.00%|        return self._username
    63|         0|            0|            0|  0.00%|
    64|         0|            0|            0|  0.00%|    @property
    65|         0|            0|            0|  0.00%|    def domain(self):
    66|         0|            0|            0|  0.00%|        return self._domain
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|    @property
    69|         0|            0|            0|  0.00%|    def addr_spec(self):
    70|         0|            0|            0|  0.00%|        """The addr_spec (username@domain) portion of the address, quoted
    71|         0|            0|            0|  0.00%|        according to RFC 5322 rules, but with no Content Transfer Encoding.
    72|         0|            0|            0|  0.00%|        """
    73|         0|            0|            0|  0.00%|        lp = self.username
    74|         0|            0|            0|  0.00%|        if not parser.DOT_ATOM_ENDS.isdisjoint(lp):
    75|         0|            0|            0|  0.00%|            lp = parser.quote_string(lp)
    76|         0|            0|            0|  0.00%|        if self.domain:
    77|         0|            0|            0|  0.00%|            return lp + '@' + self.domain
    78|         0|            0|            0|  0.00%|        if not lp:
    79|         0|            0|            0|  0.00%|            return '<>'
    80|         0|            0|            0|  0.00%|        return lp
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|    def __repr__(self):
    83|         0|            0|            0|  0.00%|        return "{}(display_name={!r}, username={!r}, domain={!r})".format(
    84|         0|            0|            0|  0.00%|                        self.__class__.__name__,
    85|         0|            0|            0|  0.00%|                        self.display_name, self.username, self.domain)
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|    def __str__(self):
    88|         0|            0|            0|  0.00%|        disp = self.display_name
    89|         0|            0|            0|  0.00%|        if not parser.SPECIALS.isdisjoint(disp):
    90|         0|            0|            0|  0.00%|            disp = parser.quote_string(disp)
    91|         0|            0|            0|  0.00%|        if disp:
    92|         0|            0|            0|  0.00%|            addr_spec = '' if self.addr_spec=='<>' else self.addr_spec
    93|         0|            0|            0|  0.00%|            return "{} <{}>".format(disp, addr_spec)
    94|         0|            0|            0|  0.00%|        return self.addr_spec
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|    def __eq__(self, other):
    97|         0|            0|            0|  0.00%|        if not isinstance(other, Address):
    98|         0|            0|            0|  0.00%|            return NotImplemented
    99|         0|            0|            0|  0.00%|        return (self.display_name == other.display_name and
   100|         0|            0|            0|  0.00%|                self.username == other.username and
   101|         0|            0|            0|  0.00%|                self.domain == other.domain)
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|class Group:
   105|         0|            0|            0|  0.00%|
   106|         0|            0|            0|  0.00%|    def __init__(self, display_name=None, addresses=None):
   107|         0|            0|            0|  0.00%|        """Create an object representing an address group.
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|        An address group consists of a display_name followed by colon and a
   110|         0|            0|            0|  0.00%|        list of addresses (see Address) terminated by a semi-colon.  The Group
   111|         0|            0|            0|  0.00%|        is created by specifying a display_name and a possibly empty list of
   112|         0|            0|            0|  0.00%|        Address objects.  A Group can also be used to represent a single
   113|         0|            0|            0|  0.00%|        address that is not in a group, which is convenient when manipulating
   114|         0|            0|            0|  0.00%|        lists that are a combination of Groups and individual Addresses.  In
   115|         0|            0|            0|  0.00%|        this case the display_name should be set to None.  In particular, the
   116|         0|            0|            0|  0.00%|        string representation of a Group whose display_name is None is the same
   117|         0|            0|            0|  0.00%|        as the Address object, if there is one and only one Address object in
   118|         0|            0|            0|  0.00%|        the addresses list.
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|        """
   121|         0|            0|            0|  0.00%|        self._display_name = display_name
   122|         0|            0|            0|  0.00%|        self._addresses = tuple(addresses) if addresses else tuple()
   123|         0|            0|            0|  0.00%|
   124|         0|            0|            0|  0.00%|    @property
   125|         0|            0|            0|  0.00%|    def display_name(self):
   126|         0|            0|            0|  0.00%|        return self._display_name
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|    @property
   129|         0|            0|            0|  0.00%|    def addresses(self):
   130|         0|            0|            0|  0.00%|        return self._addresses
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|    def __repr__(self):
   133|         0|            0|            0|  0.00%|        return "{}(display_name={!r}, addresses={!r}".format(
   134|         0|            0|            0|  0.00%|                 self.__class__.__name__,
   135|         0|            0|            0|  0.00%|                 self.display_name, self.addresses)
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|    def __str__(self):
   138|         0|            0|            0|  0.00%|        if self.display_name is None and len(self.addresses)==1:
   139|         0|            0|            0|  0.00%|            return str(self.addresses[0])
   140|         0|            0|            0|  0.00%|        disp = self.display_name
   141|         0|            0|            0|  0.00%|        if disp is not None and not parser.SPECIALS.isdisjoint(disp):
   142|         0|            0|            0|  0.00%|            disp = parser.quote_string(disp)
   143|         0|            0|            0|  0.00%|        adrstr = ", ".join(str(x) for x in self.addresses)
   144|         0|            0|            0|  0.00%|        adrstr = ' ' + adrstr if adrstr else adrstr
   145|         0|            0|            0|  0.00%|        return "{}:{};".format(disp, adrstr)
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|    def __eq__(self, other):
   148|         0|            0|            0|  0.00%|        if not isinstance(other, Group):
   149|         0|            0|            0|  0.00%|            return NotImplemented
   150|         0|            0|            0|  0.00%|        return (self.display_name == other.display_name and
   151|         0|            0|            0|  0.00%|                self.addresses == other.addresses)
   152|         0|            0|            0|  0.00%|
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|# Header Classes #
   155|         0|            0|            0|  0.00%|
   156|         0|            0|            0|  0.00%|class BaseHeader(str):
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|    """Base class for message headers.
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|    Implements generic behavior and provides tools for subclasses.
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|    A subclass must define a classmethod named 'parse' that takes an unfolded
   163|         0|            0|            0|  0.00%|    value string and a dictionary as its arguments.  The dictionary will
   164|         0|            0|            0|  0.00%|    contain one key, 'defects', initialized to an empty list.  After the call
   165|         0|            0|            0|  0.00%|    the dictionary must contain two additional keys: parse_tree, set to the
   166|         0|            0|            0|  0.00%|    parse tree obtained from parsing the header, and 'decoded', set to the
   167|         0|            0|            0|  0.00%|    string value of the idealized representation of the data from the value.
   168|         0|            0|            0|  0.00%|    (That is, encoded words are decoded, and values that have canonical
   169|         0|            0|            0|  0.00%|    representations are so represented.)
   170|         0|            0|            0|  0.00%|
   171|         0|            0|            0|  0.00%|    The defects key is intended to collect parsing defects, which the message
   172|         0|            0|            0|  0.00%|    parser will subsequently dispose of as appropriate.  The parser should not,
   173|         0|            0|            0|  0.00%|    insofar as practical, raise any errors.  Defects should be added to the
   174|         0|            0|            0|  0.00%|    list instead.  The standard header parsers register defects for RFC
   175|         0|            0|            0|  0.00%|    compliance issues, for obsolete RFC syntax, and for unrecoverable parsing
   176|         0|            0|            0|  0.00%|    errors.
   177|         0|            0|            0|  0.00%|
   178|         0|            0|            0|  0.00%|    The parse method may add additional keys to the dictionary.  In this case
   179|         0|            0|            0|  0.00%|    the subclass must define an 'init' method, which will be passed the
   180|         0|            0|            0|  0.00%|    dictionary as its keyword arguments.  The method should use (usually by
   181|         0|            0|            0|  0.00%|    setting them as the value of similarly named attributes) and remove all the
   182|         0|            0|            0|  0.00%|    extra keys added by its parse method, and then use super to call its parent
   183|         0|            0|            0|  0.00%|    class with the remaining arguments and keywords.
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|    The subclass should also make sure that a 'max_count' attribute is defined
   186|         0|            0|            0|  0.00%|    that is either None or 1. XXX: need to better define this API.
   187|         0|            0|            0|  0.00%|
   188|         0|            0|            0|  0.00%|    """
   189|         0|            0|            0|  0.00%|
   190|         5|  1.64509e-05|  3.29018e-06|  0.01%|    def __new__(cls, name, value):
   191|         5|  1.97887e-05|  3.95775e-06|  0.01%|        kwds = {'defects': []}
   192|         5|  5.22137e-05|  1.04427e-05|  0.02%|        cls.parse(value, kwds)
(call)|         1|  0.000760078|  0.000760078|  0.31%|# /usr/lib/python3.10/email/headerregistry.py:265 parse
(call)|         2|   0.00417757|   0.00208879|  1.72%|# /usr/lib/python3.10/email/headerregistry.py:446 parse
(call)|         1|  0.000403404|  0.000403404|  0.17%|# /usr/lib/python3.10/email/headerregistry.py:510 parse
(call)|         1|  0.000383615|  0.000383615|  0.16%|# /usr/lib/python3.10/email/headerregistry.py:408 parse
   193|         5|  4.57764e-05|  9.15527e-06|  0.02%|        if utils._has_surrogates(kwds['decoded']):
(call)|         5|  6.12736e-05|  1.22547e-05|  0.03%|# /usr/lib/python3.10/email/utils.py:51 _has_surrogates
   194|         0|            0|            0|  0.00%|            kwds['decoded'] = utils._sanitize(kwds['decoded'])
   195|         5|  2.19345e-05|   4.3869e-06|  0.01%|        self = str.__new__(cls, kwds['decoded'])
   196|         5|  1.71661e-05|  3.43323e-06|  0.01%|        del kwds['decoded']
   197|         5|  5.43594e-05|  1.08719e-05|  0.02%|        self.init(name, **kwds)
(call)|         1|  1.85966e-05|  1.85966e-05|  0.01%|# /usr/lib/python3.10/email/headerregistry.py:200 init
(call)|         2|  0.000176907|  8.84533e-05|  0.07%|# /usr/lib/python3.10/email/headerregistry.py:472 init
(call)|         1|  4.93526e-05|  4.93526e-05|  0.02%|# /usr/lib/python3.10/email/headerregistry.py:516 init
(call)|         1|  4.19617e-05|  4.19617e-05|  0.02%|# /usr/lib/python3.10/email/headerregistry.py:420 init
   198|         5|  1.66893e-05|  3.33786e-06|  0.01%|        return self
   199|         0|            0|            0|  0.00%|
   200|         5|  1.81198e-05|  3.62396e-06|  0.01%|    def init(self, name, *, parse_tree, defects):
   201|         5|  1.95503e-05|  3.91006e-06|  0.01%|        self._name = name
   202|         5|  1.69277e-05|  3.38554e-06|  0.01%|        self._parse_tree = parse_tree
   203|         5|   1.7643e-05|  3.52859e-06|  0.01%|        self._defects = defects
   204|         0|            0|            0|  0.00%|
   205|         3|  7.86781e-06|   2.6226e-06|  0.00%|    @property
   206|         0|            0|            0|  0.00%|    def name(self):
   207|         3|  1.04904e-05|  3.49681e-06|  0.00%|        return self._name
   208|         0|            0|            0|  0.00%|
   209|         0|            0|            0|  0.00%|    @property
   210|         0|            0|            0|  0.00%|    def defects(self):
   211|         0|            0|            0|  0.00%|        return tuple(self._defects)
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|    def __reduce__(self):
   214|         0|            0|            0|  0.00%|        return (
   215|         0|            0|            0|  0.00%|            _reconstruct_header,
   216|         0|            0|            0|  0.00%|            (
   217|         0|            0|            0|  0.00%|                self.__class__.__name__,
   218|         0|            0|            0|  0.00%|                self.__class__.__bases__,
   219|         0|            0|            0|  0.00%|                str(self),
   220|         0|            0|            0|  0.00%|            ),
   221|         0|            0|            0|  0.00%|            self.__dict__)
   222|         0|            0|            0|  0.00%|
   223|         0|            0|            0|  0.00%|    @classmethod
   224|         0|            0|            0|  0.00%|    def _reconstruct(cls, value):
   225|         0|            0|            0|  0.00%|        return str.__new__(cls, value)
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|    def fold(self, *, policy):
   228|         0|            0|            0|  0.00%|        """Fold header according to policy.
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|        The parsed representation of the header is folded according to
   231|         0|            0|            0|  0.00%|        RFC5322 rules, as modified by the policy.  If the parse tree
   232|         0|            0|            0|  0.00%|        contains surrogateescaped bytes, the bytes are CTE encoded using
   233|         0|            0|            0|  0.00%|        the charset 'unknown-8bit".
   234|         0|            0|            0|  0.00%|
   235|         0|            0|            0|  0.00%|        Any non-ASCII characters in the parse tree are CTE encoded using
   236|         0|            0|            0|  0.00%|        charset utf-8. XXX: make this a policy setting.
   237|         0|            0|            0|  0.00%|
   238|         0|            0|            0|  0.00%|        The returned value is an ASCII-only string possibly containing linesep
   239|         0|            0|            0|  0.00%|        characters, and ending with a linesep character.  The string includes
   240|         0|            0|            0|  0.00%|        the header name and the ': ' separator.
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|        """
   243|         0|            0|            0|  0.00%|        # At some point we need to put fws here if it was in the source.
   244|         0|            0|            0|  0.00%|        header = parser.Header([
   245|         0|            0|            0|  0.00%|            parser.HeaderLabel([
   246|         0|            0|            0|  0.00%|                parser.ValueTerminal(self.name, 'header-name'),
   247|         0|            0|            0|  0.00%|                parser.ValueTerminal(':', 'header-sep')]),
   248|         0|            0|            0|  0.00%|            ])
   249|         0|            0|            0|  0.00%|        if self._parse_tree:
   250|         0|            0|            0|  0.00%|            header.append(
   251|         0|            0|            0|  0.00%|                parser.CFWSList([parser.WhiteSpaceTerminal(' ', 'fws')]))
   252|         0|            0|            0|  0.00%|        header.append(self._parse_tree)
   253|         0|            0|            0|  0.00%|        return header.fold(policy=policy)
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|def _reconstruct_header(cls_name, bases, value):
   257|         0|            0|            0|  0.00%|    return type(cls_name, bases, {})._reconstruct(value)
   258|         0|            0|            0|  0.00%|
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|class UnstructuredHeader:
   261|         0|            0|            0|  0.00%|
   262|         0|            0|            0|  0.00%|    max_count = None
   263|         0|            0|            0|  0.00%|    value_parser = staticmethod(parser.get_unstructured)
   264|         0|            0|            0|  0.00%|
   265|         1|  3.33786e-06|  3.33786e-06|  0.00%|    @classmethod
   266|         0|            0|            0|  0.00%|    def parse(cls, value, kwds):
   267|         1|   1.3113e-05|   1.3113e-05|  0.01%|        kwds['parse_tree'] = cls.value_parser(value)
(call)|         1|  0.000642061|  0.000642061|  0.26%|# /usr/lib/python3.10/email/_header_value_parser.py:1087 get_unstructured
   268|         1|  1.04904e-05|  1.04904e-05|  0.00%|        kwds['decoded'] = str(kwds['parse_tree'])
(call)|         1|  9.10759e-05|  9.10759e-05|  0.04%|# /usr/lib/python3.10/email/_header_value_parser.py:125 __str__
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|
   271|         0|            0|            0|  0.00%|class UniqueUnstructuredHeader(UnstructuredHeader):
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|    max_count = 1
   274|         0|            0|            0|  0.00%|
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|class DateHeader:
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|    """Header whose value consists of a single timestamp.
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|    Provides an additional attribute, datetime, which is either an aware
   281|         0|            0|            0|  0.00%|    datetime using a timezone, or a naive datetime if the timezone
   282|         0|            0|            0|  0.00%|    in the input string is -0000.  Also accepts a datetime as input.
   283|         0|            0|            0|  0.00%|    The 'value' attribute is the normalized form of the timestamp,
   284|         0|            0|            0|  0.00%|    which means it is the output of format_datetime on the datetime.
   285|         0|            0|            0|  0.00%|    """
   286|         0|            0|            0|  0.00%|
   287|         0|            0|            0|  0.00%|    max_count = None
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|    # This is used only for folding, not for creating 'decoded'.
   290|         0|            0|            0|  0.00%|    value_parser = staticmethod(parser.get_unstructured)
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|    @classmethod
   293|         0|            0|            0|  0.00%|    def parse(cls, value, kwds):
   294|         0|            0|            0|  0.00%|        if not value:
   295|         0|            0|            0|  0.00%|            kwds['defects'].append(errors.HeaderMissingRequiredValue())
   296|         0|            0|            0|  0.00%|            kwds['datetime'] = None
   297|         0|            0|            0|  0.00%|            kwds['decoded'] = ''
   298|         0|            0|            0|  0.00%|            kwds['parse_tree'] = parser.TokenList()
   299|         0|            0|            0|  0.00%|            return
   300|         0|            0|            0|  0.00%|        if isinstance(value, str):
   301|         0|            0|            0|  0.00%|            kwds['decoded'] = value
   302|         0|            0|            0|  0.00%|            try:
   303|         0|            0|            0|  0.00%|                value = utils.parsedate_to_datetime(value)
   304|         0|            0|            0|  0.00%|            except ValueError:
   305|         0|            0|            0|  0.00%|                kwds['defects'].append(errors.InvalidDateDefect('Invalid date value or format'))
   306|         0|            0|            0|  0.00%|                kwds['datetime'] = None
   307|         0|            0|            0|  0.00%|                kwds['parse_tree'] = parser.TokenList()
   308|         0|            0|            0|  0.00%|                return
   309|         0|            0|            0|  0.00%|        kwds['datetime'] = value
   310|         0|            0|            0|  0.00%|        kwds['decoded'] = utils.format_datetime(kwds['datetime'])
   311|         0|            0|            0|  0.00%|        kwds['parse_tree'] = cls.value_parser(kwds['decoded'])
   312|         0|            0|            0|  0.00%|
   313|         0|            0|            0|  0.00%|    def init(self, *args, **kw):
   314|         0|            0|            0|  0.00%|        self._datetime = kw.pop('datetime')
   315|         0|            0|            0|  0.00%|        super().init(*args, **kw)
   316|         0|            0|            0|  0.00%|
   317|         0|            0|            0|  0.00%|    @property
   318|         0|            0|            0|  0.00%|    def datetime(self):
   319|         0|            0|            0|  0.00%|        return self._datetime
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|
   322|         0|            0|            0|  0.00%|class UniqueDateHeader(DateHeader):
   323|         0|            0|            0|  0.00%|
   324|         0|            0|            0|  0.00%|    max_count = 1
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|class AddressHeader:
   328|         0|            0|            0|  0.00%|
   329|         0|            0|            0|  0.00%|    max_count = None
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|    @staticmethod
   332|         0|            0|            0|  0.00%|    def value_parser(value):
   333|         0|            0|            0|  0.00%|        address_list, value = parser.get_address_list(value)
   334|         0|            0|            0|  0.00%|        assert not value, 'this should not happen'
   335|         0|            0|            0|  0.00%|        return address_list
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|    @classmethod
   338|         0|            0|            0|  0.00%|    def parse(cls, value, kwds):
   339|         0|            0|            0|  0.00%|        if isinstance(value, str):
   340|         0|            0|            0|  0.00%|            # We are translating here from the RFC language (address/mailbox)
   341|         0|            0|            0|  0.00%|            # to our API language (group/address).
   342|         0|            0|            0|  0.00%|            kwds['parse_tree'] = address_list = cls.value_parser(value)
   343|         0|            0|            0|  0.00%|            groups = []
   344|         0|            0|            0|  0.00%|            for addr in address_list.addresses:
   345|         0|            0|            0|  0.00%|                groups.append(Group(addr.display_name,
   346|         0|            0|            0|  0.00%|                                    [Address(mb.display_name or '',
   347|         0|            0|            0|  0.00%|                                             mb.local_part or '',
   348|         0|            0|            0|  0.00%|                                             mb.domain or '')
   349|         0|            0|            0|  0.00%|                                     for mb in addr.all_mailboxes]))
   350|         0|            0|            0|  0.00%|            defects = list(address_list.all_defects)
   351|         0|            0|            0|  0.00%|        else:
   352|         0|            0|            0|  0.00%|            # Assume it is Address/Group stuff
   353|         0|            0|            0|  0.00%|            if not hasattr(value, '__iter__'):
   354|         0|            0|            0|  0.00%|                value = [value]
   355|         0|            0|            0|  0.00%|            groups = [Group(None, [item]) if not hasattr(item, 'addresses')
   356|         0|            0|            0|  0.00%|                                          else item
   357|         0|            0|            0|  0.00%|                                    for item in value]
   358|         0|            0|            0|  0.00%|            defects = []
   359|         0|            0|            0|  0.00%|        kwds['groups'] = groups
   360|         0|            0|            0|  0.00%|        kwds['defects'] = defects
   361|         0|            0|            0|  0.00%|        kwds['decoded'] = ', '.join([str(item) for item in groups])
   362|         0|            0|            0|  0.00%|        if 'parse_tree' not in kwds:
   363|         0|            0|            0|  0.00%|            kwds['parse_tree'] = cls.value_parser(kwds['decoded'])
   364|         0|            0|            0|  0.00%|
   365|         0|            0|            0|  0.00%|    def init(self, *args, **kw):
   366|         0|            0|            0|  0.00%|        self._groups = tuple(kw.pop('groups'))
   367|         0|            0|            0|  0.00%|        self._addresses = None
   368|         0|            0|            0|  0.00%|        super().init(*args, **kw)
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|    @property
   371|         0|            0|            0|  0.00%|    def groups(self):
   372|         0|            0|            0|  0.00%|        return self._groups
   373|         0|            0|            0|  0.00%|
   374|         0|            0|            0|  0.00%|    @property
   375|         0|            0|            0|  0.00%|    def addresses(self):
   376|         0|            0|            0|  0.00%|        if self._addresses is None:
   377|         0|            0|            0|  0.00%|            self._addresses = tuple(address for group in self._groups
   378|         0|            0|            0|  0.00%|                                            for address in group.addresses)
   379|         0|            0|            0|  0.00%|        return self._addresses
   380|         0|            0|            0|  0.00%|
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|class UniqueAddressHeader(AddressHeader):
   383|         0|            0|            0|  0.00%|
   384|         0|            0|            0|  0.00%|    max_count = 1
   385|         0|            0|            0|  0.00%|
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|class SingleAddressHeader(AddressHeader):
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|    @property
   390|         0|            0|            0|  0.00%|    def address(self):
   391|         0|            0|            0|  0.00%|        if len(self.addresses)!=1:
   392|         0|            0|            0|  0.00%|            raise ValueError(("value of single address header {} is not "
   393|         0|            0|            0|  0.00%|                "a single address").format(self.name))
   394|         0|            0|            0|  0.00%|        return self.addresses[0]
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|
   397|         0|            0|            0|  0.00%|class UniqueSingleAddressHeader(SingleAddressHeader):
   398|         0|            0|            0|  0.00%|
   399|         0|            0|            0|  0.00%|    max_count = 1
   400|         0|            0|            0|  0.00%|
   401|         0|            0|            0|  0.00%|
   402|         0|            0|            0|  0.00%|class MIMEVersionHeader:
   403|         0|            0|            0|  0.00%|
   404|         0|            0|            0|  0.00%|    max_count = 1
   405|         0|            0|            0|  0.00%|
   406|         0|            0|            0|  0.00%|    value_parser = staticmethod(parser.parse_mime_version)
   407|         0|            0|            0|  0.00%|
   408|         1|  5.24521e-06|  5.24521e-06|  0.00%|    @classmethod
   409|         0|            0|            0|  0.00%|    def parse(cls, value, kwds):
   410|         1|  1.23978e-05|  1.23978e-05|  0.01%|        kwds['parse_tree'] = parse_tree = cls.value_parser(value)
(call)|         1|  0.000205755|  0.000205755|  0.08%|# /usr/lib/python3.10/email/_header_value_parser.py:2149 parse_mime_version
   411|         1|  9.05991e-06|  9.05991e-06|  0.00%|        kwds['decoded'] = str(parse_tree)
(call)|         1|   4.8399e-05|   4.8399e-05|  0.02%|# /usr/lib/python3.10/email/_header_value_parser.py:125 __str__
   412|         1|  9.53674e-06|  9.53674e-06|  0.00%|        kwds['defects'].extend(parse_tree.all_defects)
(call)|         1|  7.67708e-05|  7.67708e-05|  0.03%|# /usr/lib/python3.10/email/_header_value_parser.py:136 all_defects
   413|         1|  4.52995e-06|  4.52995e-06|  0.00%|        kwds['major'] = None if parse_tree.minor is None else parse_tree.major
   414|         1|  3.57628e-06|  3.57628e-06|  0.00%|        kwds['minor'] = parse_tree.minor
   415|         1|  3.33786e-06|  3.33786e-06|  0.00%|        if parse_tree.minor is not None:
   416|         1|  5.00679e-06|  5.00679e-06|  0.00%|            kwds['version'] = '{}.{}'.format(kwds['major'], kwds['minor'])
   417|         0|            0|            0|  0.00%|        else:
   418|         0|            0|            0|  0.00%|            kwds['version'] = None
   419|         0|            0|            0|  0.00%|
   420|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def init(self, *args, **kw):
   421|         1|  4.76837e-06|  4.76837e-06|  0.00%|        self._version = kw.pop('version')
   422|         1|  4.29153e-06|  4.29153e-06|  0.00%|        self._major = kw.pop('major')
   423|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self._minor = kw.pop('minor')
   424|         1|  1.07288e-05|  1.07288e-05|  0.00%|        super().init(*args, **kw)
(call)|         1|  1.45435e-05|  1.45435e-05|  0.01%|# /usr/lib/python3.10/email/headerregistry.py:200 init
   425|         0|            0|            0|  0.00%|
   426|         0|            0|            0|  0.00%|    @property
   427|         0|            0|            0|  0.00%|    def major(self):
   428|         0|            0|            0|  0.00%|        return self._major
   429|         0|            0|            0|  0.00%|
   430|         0|            0|            0|  0.00%|    @property
   431|         0|            0|            0|  0.00%|    def minor(self):
   432|         0|            0|            0|  0.00%|        return self._minor
   433|         0|            0|            0|  0.00%|
   434|         0|            0|            0|  0.00%|    @property
   435|         0|            0|            0|  0.00%|    def version(self):
   436|         0|            0|            0|  0.00%|        return self._version
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|
   439|         0|            0|            0|  0.00%|class ParameterizedMIMEHeader:
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|    # Mixin that handles the params dict.  Must be subclassed and
   442|         0|            0|            0|  0.00%|    # a property value_parser for the specific header provided.
   443|         0|            0|            0|  0.00%|
   444|         0|            0|            0|  0.00%|    max_count = 1
   445|         0|            0|            0|  0.00%|
   446|         2|  9.29832e-06|  4.64916e-06|  0.00%|    @classmethod
   447|         0|            0|            0|  0.00%|    def parse(cls, value, kwds):
   448|         2|  2.71797e-05|  1.35899e-05|  0.01%|        kwds['parse_tree'] = parse_tree = cls.value_parser(value)
(call)|         2|   0.00205708|   0.00102854|  0.85%|# /usr/lib/python3.10/email/_header_value_parser.py:2621 parse_content_type_header
   449|         2|   3.0756e-05|   1.5378e-05|  0.01%|        kwds['decoded'] = str(parse_tree)
(call)|         2|  0.000762701|  0.000381351|  0.31%|# /usr/lib/python3.10/email/_header_value_parser.py:125 __str__
   450|         2|  2.36034e-05|  1.18017e-05|  0.01%|        kwds['defects'].extend(parse_tree.all_defects)
(call)|         2|  0.000700712|  0.000350356|  0.29%|# /usr/lib/python3.10/email/_header_value_parser.py:136 all_defects
   451|         2|  3.02792e-05|  1.51396e-05|  0.01%|        if parse_tree.params is None:
(call)|         2|  4.76837e-05|  2.38419e-05|  0.02%|# /usr/lib/python3.10/email/_header_value_parser.py:813 params
(call)|         1|  7.15256e-06|  7.15256e-06|  0.00%|# /usr/lib/python3.10/email/_header_value_parser.py:726 params
   452|         0|            0|            0|  0.00%|            kwds['params'] = {}
   453|         0|            0|            0|  0.00%|        else:
   454|         0|            0|            0|  0.00%|            # The MIME RFCs specify that parameter ordering is arbitrary.
   455|        11|   7.1764e-05|    6.524e-06|  0.03%|            kwds['params'] = {utils._sanitize(name).lower():
(call)|         2|  0.000394583|  0.000197291|  0.16%|# /usr/lib/python3.10/email/headerregistry.py:455 <dictcomp>
(call)|         2|  0.000320196|  0.000160098|  0.13%|# /usr/lib/python3.10/email/_header_value_parser.py:726 params
(call)|         1|  1.14441e-05|  1.14441e-05|  0.00%|# /usr/lib/python3.10/email/utils.py:64 _sanitize
   456|         1|  8.34465e-06|  8.34465e-06|  0.00%|                                    utils._sanitize(value)
(call)|         1|  8.82149e-06|  8.82149e-06|  0.00%|# /usr/lib/python3.10/email/utils.py:64 _sanitize
   457|         3|  2.07424e-05|  6.91414e-06|  0.01%|                               for name, value in parse_tree.params}
(call)|         2|  3.98159e-05|   1.9908e-05|  0.02%|# /usr/lib/python3.10/email/_header_value_parser.py:813 params
   458|         0|            0|            0|  0.00%|
   459|         2|  8.10623e-06|  4.05312e-06|  0.00%|    def init(self, *args, **kw):
   460|         2|  1.09673e-05|  5.48363e-06|  0.00%|        self._params = kw.pop('params')
   461|         2|  2.09808e-05|  1.04904e-05|  0.01%|        super().init(*args, **kw)
(call)|         2|   2.6226e-05|   1.3113e-05|  0.01%|# /usr/lib/python3.10/email/headerregistry.py:200 init
   462|         0|            0|            0|  0.00%|
   463|         0|            0|            0|  0.00%|    @property
   464|         0|            0|            0|  0.00%|    def params(self):
   465|         0|            0|            0|  0.00%|        return MappingProxyType(self._params)
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|class ContentTypeHeader(ParameterizedMIMEHeader):
   469|         0|            0|            0|  0.00%|
   470|         0|            0|            0|  0.00%|    value_parser = staticmethod(parser.parse_content_type_header)
   471|         0|            0|            0|  0.00%|
   472|         2|  7.62939e-06|   3.8147e-06|  0.00%|    def init(self, *args, **kw):
   473|         2|  2.21729e-05|  1.10865e-05|  0.01%|        super().init(*args, **kw)
(call)|         2|  6.62804e-05|  3.31402e-05|  0.03%|# /usr/lib/python3.10/email/headerregistry.py:459 init
   474|         2|  2.02656e-05|  1.01328e-05|  0.01%|        self._maintype = utils._sanitize(self._parse_tree.maintype)
(call)|         2|  2.21729e-05|  1.10865e-05|  0.01%|# /usr/lib/python3.10/email/utils.py:64 _sanitize
   475|         2|   2.0504e-05|   1.0252e-05|  0.01%|        self._subtype = utils._sanitize(self._parse_tree.subtype)
(call)|         2|  1.78814e-05|   8.9407e-06|  0.01%|# /usr/lib/python3.10/email/utils.py:64 _sanitize
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|    @property
   478|         0|            0|            0|  0.00%|    def maintype(self):
   479|         0|            0|            0|  0.00%|        return self._maintype
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|    @property
   482|         0|            0|            0|  0.00%|    def subtype(self):
   483|         0|            0|            0|  0.00%|        return self._subtype
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|    @property
   486|         0|            0|            0|  0.00%|    def content_type(self):
   487|         0|            0|            0|  0.00%|        return self.maintype + '/' + self.subtype
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|
   490|         0|            0|            0|  0.00%|class ContentDispositionHeader(ParameterizedMIMEHeader):
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|    value_parser = staticmethod(parser.parse_content_disposition_header)
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|    def init(self, *args, **kw):
   495|         0|            0|            0|  0.00%|        super().init(*args, **kw)
   496|         0|            0|            0|  0.00%|        cd = self._parse_tree.content_disposition
   497|         0|            0|            0|  0.00%|        self._content_disposition = cd if cd is None else utils._sanitize(cd)
   498|         0|            0|            0|  0.00%|
   499|         0|            0|            0|  0.00%|    @property
   500|         0|            0|            0|  0.00%|    def content_disposition(self):
   501|         0|            0|            0|  0.00%|        return self._content_disposition
   502|         0|            0|            0|  0.00%|
   503|         0|            0|            0|  0.00%|
   504|         0|            0|            0|  0.00%|class ContentTransferEncodingHeader:
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|    max_count = 1
   507|         0|            0|            0|  0.00%|
   508|         0|            0|            0|  0.00%|    value_parser = staticmethod(parser.parse_content_transfer_encoding_header)
   509|         0|            0|            0|  0.00%|
   510|         1|  3.33786e-06|  3.33786e-06|  0.00%|    @classmethod
   511|         0|            0|            0|  0.00%|    def parse(cls, value, kwds):
   512|         1|  1.09673e-05|  1.09673e-05|  0.00%|        kwds['parse_tree'] = parse_tree = cls.value_parser(value)
(call)|         1|  0.000243902|  0.000243902|  0.10%|# /usr/lib/python3.10/email/_header_value_parser.py:2708 parse_content_transfer_encoding_header
   513|         1|  9.29832e-06|  9.29832e-06|  0.00%|        kwds['decoded'] = str(parse_tree)
(call)|         1|   5.8651e-05|   5.8651e-05|  0.02%|# /usr/lib/python3.10/email/_header_value_parser.py:125 __str__
   514|         1|  1.00136e-05|  1.00136e-05|  0.00%|        kwds['defects'].extend(parse_tree.all_defects)
(call)|         1|   6.7234e-05|   6.7234e-05|  0.03%|# /usr/lib/python3.10/email/_header_value_parser.py:136 all_defects
   515|         0|            0|            0|  0.00%|
   516|         1|  3.33786e-06|  3.33786e-06|  0.00%|    def init(self, *args, **kw):
   517|         1|  1.21593e-05|  1.21593e-05|  0.01%|        super().init(*args, **kw)
(call)|         1|  1.28746e-05|  1.28746e-05|  0.01%|# /usr/lib/python3.10/email/headerregistry.py:200 init
   518|         1|  1.09673e-05|  1.09673e-05|  0.00%|        self._cte = utils._sanitize(self._parse_tree.cte)
(call)|         1|  1.00136e-05|  1.00136e-05|  0.00%|# /usr/lib/python3.10/email/utils.py:64 _sanitize
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|    @property
   521|         0|            0|            0|  0.00%|    def cte(self):
   522|         0|            0|            0|  0.00%|        return self._cte
   523|         0|            0|            0|  0.00%|
   524|         0|            0|            0|  0.00%|
   525|         0|            0|            0|  0.00%|class MessageIDHeader:
   526|         0|            0|            0|  0.00%|
   527|         0|            0|            0|  0.00%|    max_count = 1
   528|         0|            0|            0|  0.00%|    value_parser = staticmethod(parser.parse_message_id)
   529|         0|            0|            0|  0.00%|
   530|         0|            0|            0|  0.00%|    @classmethod
   531|         0|            0|            0|  0.00%|    def parse(cls, value, kwds):
   532|         0|            0|            0|  0.00%|        kwds['parse_tree'] = parse_tree = cls.value_parser(value)
   533|         0|            0|            0|  0.00%|        kwds['decoded'] = str(parse_tree)
   534|         0|            0|            0|  0.00%|        kwds['defects'].extend(parse_tree.all_defects)
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|
   537|         0|            0|            0|  0.00%|# The header factory #
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|_default_header_map = {
   540|         0|            0|            0|  0.00%|    'subject':                      UniqueUnstructuredHeader,
   541|         0|            0|            0|  0.00%|    'date':                         UniqueDateHeader,
   542|         0|            0|            0|  0.00%|    'resent-date':                  DateHeader,
   543|         0|            0|            0|  0.00%|    'orig-date':                    UniqueDateHeader,
   544|         0|            0|            0|  0.00%|    'sender':                       UniqueSingleAddressHeader,
   545|         0|            0|            0|  0.00%|    'resent-sender':                SingleAddressHeader,
   546|         0|            0|            0|  0.00%|    'to':                           UniqueAddressHeader,
   547|         0|            0|            0|  0.00%|    'resent-to':                    AddressHeader,
   548|         0|            0|            0|  0.00%|    'cc':                           UniqueAddressHeader,
   549|         0|            0|            0|  0.00%|    'resent-cc':                    AddressHeader,
   550|         0|            0|            0|  0.00%|    'bcc':                          UniqueAddressHeader,
   551|         0|            0|            0|  0.00%|    'resent-bcc':                   AddressHeader,
   552|         0|            0|            0|  0.00%|    'from':                         UniqueAddressHeader,
   553|         0|            0|            0|  0.00%|    'resent-from':                  AddressHeader,
   554|         0|            0|            0|  0.00%|    'reply-to':                     UniqueAddressHeader,
   555|         0|            0|            0|  0.00%|    'mime-version':                 MIMEVersionHeader,
   556|         0|            0|            0|  0.00%|    'content-type':                 ContentTypeHeader,
   557|         0|            0|            0|  0.00%|    'content-disposition':          ContentDispositionHeader,
   558|         0|            0|            0|  0.00%|    'content-transfer-encoding':    ContentTransferEncodingHeader,
   559|         0|            0|            0|  0.00%|    'message-id':                   MessageIDHeader,
   560|         0|            0|            0|  0.00%|    }
   561|         0|            0|            0|  0.00%|
   562|         0|            0|            0|  0.00%|class HeaderRegistry:
   563|         0|            0|            0|  0.00%|
   564|         0|            0|            0|  0.00%|    """A header_factory and header registry."""
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|    def __init__(self, base_class=BaseHeader, default_class=UnstructuredHeader,
   567|         0|            0|            0|  0.00%|                       use_default_map=True):
   568|         0|            0|            0|  0.00%|        """Create a header_factory that works with the Policy API.
   569|         0|            0|            0|  0.00%|
   570|         0|            0|            0|  0.00%|        base_class is the class that will be the last class in the created
   571|         0|            0|            0|  0.00%|        header class's __bases__ list.  default_class is the class that will be
   572|         0|            0|            0|  0.00%|        used if "name" (see __call__) does not appear in the registry.
   573|         0|            0|            0|  0.00%|        use_default_map controls whether or not the default mapping of names to
   574|         0|            0|            0|  0.00%|        specialized classes is copied in to the registry when the factory is
   575|         0|            0|            0|  0.00%|        created.  The default is True.
   576|         0|            0|            0|  0.00%|
   577|         0|            0|            0|  0.00%|        """
   578|         0|            0|            0|  0.00%|        self.registry = {}
   579|         0|            0|            0|  0.00%|        self.base_class = base_class
   580|         0|            0|            0|  0.00%|        self.default_class = default_class
   581|         0|            0|            0|  0.00%|        if use_default_map:
   582|         0|            0|            0|  0.00%|            self.registry.update(_default_header_map)
   583|         0|            0|            0|  0.00%|
   584|         0|            0|            0|  0.00%|    def map_to_type(self, name, cls):
   585|         0|            0|            0|  0.00%|        """Register cls as the specialized class for handling "name" headers.
   586|         0|            0|            0|  0.00%|
   587|         0|            0|            0|  0.00%|        """
   588|         0|            0|            0|  0.00%|        self.registry[name.lower()] = cls
   589|         0|            0|            0|  0.00%|
   590|         9|  2.59876e-05|  2.88751e-06|  0.01%|    def __getitem__(self, name):
   591|         9|  4.05312e-05|  4.50346e-06|  0.02%|        cls = self.registry.get(name.lower(), self.default_class)
   592|         9|  0.000155449|  1.72721e-05|  0.06%|        return type('_'+cls.__name__, (cls, self.base_class), {})
   593|         0|            0|            0|  0.00%|
   594|         5|  1.43051e-05|  2.86102e-06|  0.01%|    def __call__(self, name, value):
   595|         0|            0|            0|  0.00%|        """Create a header instance for header 'name' from 'value'.
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|        Creates a header instance by creating a specialized class for parsing
   598|         0|            0|            0|  0.00%|        and representing the specified header by combining the factory
   599|         0|            0|            0|  0.00%|        base_class with a specialized class from the registry or the
   600|         0|            0|            0|  0.00%|        default_class, and passing the name and value to the constructed
   601|         0|            0|            0|  0.00%|        class's constructor.
   602|         0|            0|            0|  0.00%|
   603|         0|            0|            0|  0.00%|        """
   604|         5|  7.48634e-05|  1.49727e-05|  0.03%|        return self[name](name, value)
(call)|         5|  0.000101328|  2.02656e-05|  0.04%|# /usr/lib/python3.10/email/headerregistry.py:590 __getitem__
(call)|         5|   0.00631714|   0.00126343|  2.60%|# /usr/lib/python3.10/email/headerregistry.py:190 __new__
File: /usr/lib/python3.10/email/message.py
File duration: 0.00109768s (0.45%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# Copyright (C) 2001-2007 Python Software Foundation
     2|         0|            0|            0|  0.00%|# Author: Barry Warsaw
     3|         0|            0|            0|  0.00%|# Contact: email-sig@python.org
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|"""Basic message object for the email package object model."""
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|__all__ = ['Message', 'EmailMessage']
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|import re
    10|         0|            0|            0|  0.00%|import uu
    11|         0|            0|            0|  0.00%|import quopri
    12|         0|            0|            0|  0.00%|from io import BytesIO, StringIO
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|# Intrapackage imports
    15|         0|            0|            0|  0.00%|from email import utils
    16|         0|            0|            0|  0.00%|from email import errors
    17|         0|            0|            0|  0.00%|from email._policybase import Policy, compat32
    18|         0|            0|            0|  0.00%|from email import charset as _charset
    19|         0|            0|            0|  0.00%|from email._encoded_words import decode_b
    20|         0|            0|            0|  0.00%|Charset = _charset.Charset
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|SEMISPACE = '; '
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|# Regular expression that matches `special' characters in parameters, the
    25|         0|            0|            0|  0.00%|# existence of which force quoting of the parameter value.
    26|         0|            0|            0|  0.00%|tspecials = re.compile(r'[ \(\)<>@,;:\\"/\[\]\?=]')
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|def _splitparam(param):
    30|         0|            0|            0|  0.00%|    # Split header parameters.  BAW: this may be too simple.  It isn't
    31|         0|            0|            0|  0.00%|    # strictly RFC 2045 (section 5.1) compliant, but it catches most headers
    32|         0|            0|            0|  0.00%|    # found in the wild.  We may eventually need a full fledged parser.
    33|         0|            0|            0|  0.00%|    # RDM: we might have a Header here; for now just stringify it.
    34|         0|            0|            0|  0.00%|    a, sep, b = str(param).partition(';')
    35|         0|            0|            0|  0.00%|    if not sep:
    36|         0|            0|            0|  0.00%|        return a.strip(), None
    37|         0|            0|            0|  0.00%|    return a.strip(), b.strip()
    38|         0|            0|            0|  0.00%|
    39|         1|  5.00679e-06|  5.00679e-06|  0.00%|def _formatparam(param, value=None, quote=True):
    40|         0|            0|            0|  0.00%|    """Convenience function to format and return a key=value pair.
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|    This will quote the value if needed or if quote is true.  If value is a
    43|         0|            0|            0|  0.00%|    three tuple (charset, language, value), it will be encoded according
    44|         0|            0|            0|  0.00%|    to RFC2231 rules.  If it contains non-ascii characters it will likewise
    45|         0|            0|            0|  0.00%|    be encoded according to RFC2231 rules, using the utf-8 charset and
    46|         0|            0|            0|  0.00%|    a null language.
    47|         0|            0|            0|  0.00%|    """
    48|         1|  9.53674e-06|  9.53674e-06|  0.00%|    if value is not None and len(value) > 0:
    49|         0|            0|            0|  0.00%|        # A tuple is used for RFC 2231 encoded parameter values where items
    50|         0|            0|            0|  0.00%|        # are (charset, language, value).  charset is a string, not a Charset
    51|         0|            0|            0|  0.00%|        # instance.  RFC 2231 encoded values are never quoted, per RFC.
    52|         1|  4.29153e-06|  4.29153e-06|  0.00%|        if isinstance(value, tuple):
    53|         0|            0|            0|  0.00%|            # Encode as per RFC 2231
    54|         0|            0|            0|  0.00%|            param += '*'
    55|         0|            0|            0|  0.00%|            value = utils.encode_rfc2231(value[2], value[0], value[1])
    56|         0|            0|            0|  0.00%|            return '%s=%s' % (param, value)
    57|         0|            0|            0|  0.00%|        else:
    58|         1|  5.00679e-06|  5.00679e-06|  0.00%|            try:
    59|         1|   3.8147e-06|   3.8147e-06|  0.00%|                value.encode('ascii')
    60|         0|            0|            0|  0.00%|            except UnicodeEncodeError:
    61|         0|            0|            0|  0.00%|                param += '*'
    62|         0|            0|            0|  0.00%|                value = utils.encode_rfc2231(value, 'utf-8', '')
    63|         0|            0|            0|  0.00%|                return '%s=%s' % (param, value)
    64|         0|            0|            0|  0.00%|        # BAW: Please check this.  I think that if quote is set it should
    65|         0|            0|            0|  0.00%|        # force quoting even if not necessary.
    66|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if quote or tspecials.search(value):
    67|         1|  2.43187e-05|  2.43187e-05|  0.01%|            return '%s="%s"' % (param, utils.quote(value))
(call)|         1|   1.4782e-05|   1.4782e-05|  0.01%|# /usr/lib/python3.10/email/_parseaddr.py:197 quote
    68|         0|            0|            0|  0.00%|        else:
    69|         0|            0|            0|  0.00%|            return '%s=%s' % (param, value)
    70|         0|            0|            0|  0.00%|    else:
    71|         0|            0|            0|  0.00%|        return param
    72|         0|            0|            0|  0.00%|
    73|         1|  4.76837e-06|  4.76837e-06|  0.00%|def _parseparam(s):
    74|         0|            0|            0|  0.00%|    # RDM This might be a Header, so for now stringify it.
    75|         1|  4.76837e-06|  4.76837e-06|  0.00%|    s = ';' + str(s)
    76|         1|  4.52995e-06|  4.52995e-06|  0.00%|    plist = []
    77|         2|  8.10623e-06|  4.05312e-06|  0.00%|    while s[:1] == ';':
    78|         1|  5.48363e-06|  5.48363e-06|  0.00%|        s = s[1:]
    79|         1|  5.00679e-06|  5.00679e-06|  0.00%|        end = s.find(';')
    80|         1|   3.8147e-06|   3.8147e-06|  0.00%|        while end > 0 and (s.count('"', 0, end) - s.count('\\"', 0, end)) % 2:
    81|         0|            0|            0|  0.00%|            end = s.find(';', end + 1)
    82|         1|  4.05312e-06|  4.05312e-06|  0.00%|        if end < 0:
    83|         1|  5.00679e-06|  5.00679e-06|  0.00%|            end = len(s)
    84|         1|  4.29153e-06|  4.29153e-06|  0.00%|        f = s[:end]
    85|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if '=' in f:
    86|         0|            0|            0|  0.00%|            i = f.index('=')
    87|         0|            0|            0|  0.00%|            f = f[:i].strip().lower() + '=' + f[i+1:].strip()
    88|         1|  4.76837e-06|  4.76837e-06|  0.00%|        plist.append(f.strip())
    89|         1|  4.05312e-06|  4.05312e-06|  0.00%|        s = s[end:]
    90|         1|  3.33786e-06|  3.33786e-06|  0.00%|    return plist
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|def _unquotevalue(value):
    94|         0|            0|            0|  0.00%|    # This is different than utils.collapse_rfc2231_value() because it doesn't
    95|         0|            0|            0|  0.00%|    # try to convert the value to a unicode.  Message.get_param() and
    96|         0|            0|            0|  0.00%|    # Message.get_params() are both currently defined to return the tuple in
    97|         0|            0|            0|  0.00%|    # the face of RFC 2231 parameters.
    98|         0|            0|            0|  0.00%|    if isinstance(value, tuple):
    99|         0|            0|            0|  0.00%|        return value[0], value[1], utils.unquote(value[2])
   100|         0|            0|            0|  0.00%|    else:
   101|         0|            0|            0|  0.00%|        return utils.unquote(value)
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|class Message:
   106|         0|            0|            0|  0.00%|    """Basic message object.
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|    A message object is defined as something that has a bunch of RFC 2822
   109|         0|            0|            0|  0.00%|    headers and a payload.  It may optionally have an envelope header
   110|         0|            0|            0|  0.00%|    (a.k.a. Unix-From or From_ header).  If the message is a container (i.e. a
   111|         0|            0|            0|  0.00%|    multipart or a message/rfc822), then the payload is a list of Message
   112|         0|            0|            0|  0.00%|    objects, otherwise it is a string.
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|    Message objects implement part of the `mapping' interface, which assumes
   115|         0|            0|            0|  0.00%|    there is exactly one occurrence of the header per message.  Some headers
   116|         0|            0|            0|  0.00%|    do in fact appear multiple times (e.g. Received) and for those headers,
   117|         0|            0|            0|  0.00%|    you must use the explicit API to set or get all the headers.  Not all of
   118|         0|            0|            0|  0.00%|    the mapping methods are implemented.
   119|         0|            0|            0|  0.00%|    """
   120|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def __init__(self, policy=compat32):
   121|         1|  4.29153e-06|  4.29153e-06|  0.00%|        self.policy = policy
   122|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self._headers = []
   123|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self._unixfrom = None
   124|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self._payload = None
   125|         1|  5.24521e-06|  5.24521e-06|  0.00%|        self._charset = None
   126|         0|            0|            0|  0.00%|        # Defaults for multipart messages
   127|         1|  4.05312e-06|  4.05312e-06|  0.00%|        self.preamble = self.epilogue = None
   128|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.defects = []
   129|         0|            0|            0|  0.00%|        # Default content type
   130|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self._default_type = 'text/plain'
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|    def __str__(self):
   133|         0|            0|            0|  0.00%|        """Return the entire formatted message as a string.
   134|         0|            0|            0|  0.00%|        """
   135|         0|            0|            0|  0.00%|        return self.as_string()
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|    def as_string(self, unixfrom=False, maxheaderlen=0, policy=None):
   138|         0|            0|            0|  0.00%|        """Return the entire formatted message as a string.
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|        Optional 'unixfrom', when true, means include the Unix From_ envelope
   141|         0|            0|            0|  0.00%|        header.  For backward compatibility reasons, if maxheaderlen is
   142|         0|            0|            0|  0.00%|        not specified it defaults to 0, so you must override it explicitly
   143|         0|            0|            0|  0.00%|        if you want a different maxheaderlen.  'policy' is passed to the
   144|         0|            0|            0|  0.00%|        Generator instance used to serialize the message; if it is not
   145|         0|            0|            0|  0.00%|        specified the policy associated with the message instance is used.
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|        If the message object contains binary data that is not encoded
   148|         0|            0|            0|  0.00%|        according to RFC standards, the non-compliant data will be replaced by
   149|         0|            0|            0|  0.00%|        unicode "unknown character" code points.
   150|         0|            0|            0|  0.00%|        """
   151|         0|            0|            0|  0.00%|        from email.generator import Generator
   152|         0|            0|            0|  0.00%|        policy = self.policy if policy is None else policy
   153|         0|            0|            0|  0.00%|        fp = StringIO()
   154|         0|            0|            0|  0.00%|        g = Generator(fp,
   155|         0|            0|            0|  0.00%|                      mangle_from_=False,
   156|         0|            0|            0|  0.00%|                      maxheaderlen=maxheaderlen,
   157|         0|            0|            0|  0.00%|                      policy=policy)
   158|         0|            0|            0|  0.00%|        g.flatten(self, unixfrom=unixfrom)
   159|         0|            0|            0|  0.00%|        return fp.getvalue()
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|    def __bytes__(self):
   162|         0|            0|            0|  0.00%|        """Return the entire formatted message as a bytes object.
   163|         0|            0|            0|  0.00%|        """
   164|         0|            0|            0|  0.00%|        return self.as_bytes()
   165|         0|            0|            0|  0.00%|
   166|         0|            0|            0|  0.00%|    def as_bytes(self, unixfrom=False, policy=None):
   167|         0|            0|            0|  0.00%|        """Return the entire formatted message as a bytes object.
   168|         0|            0|            0|  0.00%|
   169|         0|            0|            0|  0.00%|        Optional 'unixfrom', when true, means include the Unix From_ envelope
   170|         0|            0|            0|  0.00%|        header.  'policy' is passed to the BytesGenerator instance used to
   171|         0|            0|            0|  0.00%|        serialize the message; if not specified the policy associated with
   172|         0|            0|            0|  0.00%|        the message instance is used.
   173|         0|            0|            0|  0.00%|        """
   174|         0|            0|            0|  0.00%|        from email.generator import BytesGenerator
   175|         0|            0|            0|  0.00%|        policy = self.policy if policy is None else policy
   176|         0|            0|            0|  0.00%|        fp = BytesIO()
   177|         0|            0|            0|  0.00%|        g = BytesGenerator(fp, mangle_from_=False, policy=policy)
   178|         0|            0|            0|  0.00%|        g.flatten(self, unixfrom=unixfrom)
   179|         0|            0|            0|  0.00%|        return fp.getvalue()
   180|         0|            0|            0|  0.00%|
   181|         0|            0|            0|  0.00%|    def is_multipart(self):
   182|         0|            0|            0|  0.00%|        """Return True if the message consists of multiple parts."""
   183|         0|            0|            0|  0.00%|        return isinstance(self._payload, list)
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|    #
   186|         0|            0|            0|  0.00%|    # Unix From_ line
   187|         0|            0|            0|  0.00%|    #
   188|         0|            0|            0|  0.00%|    def set_unixfrom(self, unixfrom):
   189|         0|            0|            0|  0.00%|        self._unixfrom = unixfrom
   190|         0|            0|            0|  0.00%|
   191|         0|            0|            0|  0.00%|    def get_unixfrom(self):
   192|         0|            0|            0|  0.00%|        return self._unixfrom
   193|         0|            0|            0|  0.00%|
   194|         0|            0|            0|  0.00%|    #
   195|         0|            0|            0|  0.00%|    # Payload manipulation.
   196|         0|            0|            0|  0.00%|    #
   197|         0|            0|            0|  0.00%|    def attach(self, payload):
   198|         0|            0|            0|  0.00%|        """Add the given payload to the current payload.
   199|         0|            0|            0|  0.00%|
   200|         0|            0|            0|  0.00%|        The current payload will always be a list of objects after this method
   201|         0|            0|            0|  0.00%|        is called.  If you want to set the payload to a scalar object, use
   202|         0|            0|            0|  0.00%|        set_payload() instead.
   203|         0|            0|            0|  0.00%|        """
   204|         0|            0|            0|  0.00%|        if self._payload is None:
   205|         0|            0|            0|  0.00%|            self._payload = [payload]
   206|         0|            0|            0|  0.00%|        else:
   207|         0|            0|            0|  0.00%|            try:
   208|         0|            0|            0|  0.00%|                self._payload.append(payload)
   209|         0|            0|            0|  0.00%|            except AttributeError:
   210|         0|            0|            0|  0.00%|                raise TypeError("Attach is not valid on a message with a"
   211|         0|            0|            0|  0.00%|                                " non-multipart payload")
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|    def get_payload(self, i=None, decode=False):
   214|         0|            0|            0|  0.00%|        """Return a reference to the payload.
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|        The payload will either be a list object or a string.  If you mutate
   217|         0|            0|            0|  0.00%|        the list object, you modify the message's payload in place.  Optional
   218|         0|            0|            0|  0.00%|        i returns that index into the payload.
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|        Optional decode is a flag indicating whether the payload should be
   221|         0|            0|            0|  0.00%|        decoded or not, according to the Content-Transfer-Encoding header
   222|         0|            0|            0|  0.00%|        (default is False).
   223|         0|            0|            0|  0.00%|
   224|         0|            0|            0|  0.00%|        When True and the message is not a multipart, the payload will be
   225|         0|            0|            0|  0.00%|        decoded if this header's value is `quoted-printable' or `base64'.  If
   226|         0|            0|            0|  0.00%|        some other encoding is used, or the header is missing, or if the
   227|         0|            0|            0|  0.00%|        payload has bogus data (i.e. bogus base64 or uuencoded data), the
   228|         0|            0|            0|  0.00%|        payload is returned as-is.
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|        If the message is a multipart and the decode flag is True, then None
   231|         0|            0|            0|  0.00%|        is returned.
   232|         0|            0|            0|  0.00%|        """
   233|         0|            0|            0|  0.00%|        # Here is the logic table for this code, based on the email5.0.0 code:
   234|         0|            0|            0|  0.00%|        #   i     decode  is_multipart  result
   235|         0|            0|            0|  0.00%|        # ------  ------  ------------  ------------------------------
   236|         0|            0|            0|  0.00%|        #  None   True    True          None
   237|         0|            0|            0|  0.00%|        #   i     True    True          None
   238|         0|            0|            0|  0.00%|        #  None   False   True          _payload (a list)
   239|         0|            0|            0|  0.00%|        #   i     False   True          _payload element i (a Message)
   240|         0|            0|            0|  0.00%|        #   i     False   False         error (not a list)
   241|         0|            0|            0|  0.00%|        #   i     True    False         error (not a list)
   242|         0|            0|            0|  0.00%|        #  None   False   False         _payload
   243|         0|            0|            0|  0.00%|        #  None   True    False         _payload decoded (bytes)
   244|         0|            0|            0|  0.00%|        # Note that Barry planned to factor out the 'decode' case, but that
   245|         0|            0|            0|  0.00%|        # isn't so easy now that we handle the 8 bit data, which needs to be
   246|         0|            0|            0|  0.00%|        # converted in both the decode and non-decode path.
   247|         0|            0|            0|  0.00%|        if self.is_multipart():
   248|         0|            0|            0|  0.00%|            if decode:
   249|         0|            0|            0|  0.00%|                return None
   250|         0|            0|            0|  0.00%|            if i is None:
   251|         0|            0|            0|  0.00%|                return self._payload
   252|         0|            0|            0|  0.00%|            else:
   253|         0|            0|            0|  0.00%|                return self._payload[i]
   254|         0|            0|            0|  0.00%|        # For backward compatibility, Use isinstance and this error message
   255|         0|            0|            0|  0.00%|        # instead of the more logical is_multipart test.
   256|         0|            0|            0|  0.00%|        if i is not None and not isinstance(self._payload, list):
   257|         0|            0|            0|  0.00%|            raise TypeError('Expected list, got %s' % type(self._payload))
   258|         0|            0|            0|  0.00%|        payload = self._payload
   259|         0|            0|            0|  0.00%|        # cte might be a Header, so for now stringify it.
   260|         0|            0|            0|  0.00%|        cte = str(self.get('content-transfer-encoding', '')).lower()
   261|         0|            0|            0|  0.00%|        # payload may be bytes here.
   262|         0|            0|            0|  0.00%|        if isinstance(payload, str):
   263|         0|            0|            0|  0.00%|            if utils._has_surrogates(payload):
   264|         0|            0|            0|  0.00%|                bpayload = payload.encode('ascii', 'surrogateescape')
   265|         0|            0|            0|  0.00%|                if not decode:
   266|         0|            0|            0|  0.00%|                    try:
   267|         0|            0|            0|  0.00%|                        payload = bpayload.decode(self.get_param('charset', 'ascii'), 'replace')
   268|         0|            0|            0|  0.00%|                    except LookupError:
   269|         0|            0|            0|  0.00%|                        payload = bpayload.decode('ascii', 'replace')
   270|         0|            0|            0|  0.00%|            elif decode:
   271|         0|            0|            0|  0.00%|                try:
   272|         0|            0|            0|  0.00%|                    bpayload = payload.encode('ascii')
   273|         0|            0|            0|  0.00%|                except UnicodeError:
   274|         0|            0|            0|  0.00%|                    # This won't happen for RFC compliant messages (messages
   275|         0|            0|            0|  0.00%|                    # containing only ASCII code points in the unicode input).
   276|         0|            0|            0|  0.00%|                    # If it does happen, turn the string into bytes in a way
   277|         0|            0|            0|  0.00%|                    # guaranteed not to fail.
   278|         0|            0|            0|  0.00%|                    bpayload = payload.encode('raw-unicode-escape')
   279|         0|            0|            0|  0.00%|        if not decode:
   280|         0|            0|            0|  0.00%|            return payload
   281|         0|            0|            0|  0.00%|        if cte == 'quoted-printable':
   282|         0|            0|            0|  0.00%|            return quopri.decodestring(bpayload)
   283|         0|            0|            0|  0.00%|        elif cte == 'base64':
   284|         0|            0|            0|  0.00%|            # XXX: this is a bit of a hack; decode_b should probably be factored
   285|         0|            0|            0|  0.00%|            # out somewhere, but I haven't figured out where yet.
   286|         0|            0|            0|  0.00%|            value, defects = decode_b(b''.join(bpayload.splitlines()))
   287|         0|            0|            0|  0.00%|            for defect in defects:
   288|         0|            0|            0|  0.00%|                self.policy.handle_defect(self, defect)
   289|         0|            0|            0|  0.00%|            return value
   290|         0|            0|            0|  0.00%|        elif cte in ('x-uuencode', 'uuencode', 'uue', 'x-uue'):
   291|         0|            0|            0|  0.00%|            in_file = BytesIO(bpayload)
   292|         0|            0|            0|  0.00%|            out_file = BytesIO()
   293|         0|            0|            0|  0.00%|            try:
   294|         0|            0|            0|  0.00%|                uu.decode(in_file, out_file, quiet=True)
   295|         0|            0|            0|  0.00%|                return out_file.getvalue()
   296|         0|            0|            0|  0.00%|            except uu.Error:
   297|         0|            0|            0|  0.00%|                # Some decoding problem
   298|         0|            0|            0|  0.00%|                return bpayload
   299|         0|            0|            0|  0.00%|        if isinstance(payload, str):
   300|         0|            0|            0|  0.00%|            return bpayload
   301|         0|            0|            0|  0.00%|        return payload
   302|         0|            0|            0|  0.00%|
   303|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def set_payload(self, payload, charset=None):
   304|         0|            0|            0|  0.00%|        """Set the payload to the given value.
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|        Optional charset sets the message's default character set.  See
   307|         0|            0|            0|  0.00%|        set_charset() for details.
   308|         0|            0|            0|  0.00%|        """
   309|         1|  4.52995e-06|  4.52995e-06|  0.00%|        if hasattr(payload, 'encode'):
   310|         1|   3.8147e-06|   3.8147e-06|  0.00%|            if charset is None:
   311|         1|   3.8147e-06|   3.8147e-06|  0.00%|                self._payload = payload
   312|         1|  3.33786e-06|  3.33786e-06|  0.00%|                return
   313|         0|            0|            0|  0.00%|            if not isinstance(charset, Charset):
   314|         0|            0|            0|  0.00%|                charset = Charset(charset)
   315|         0|            0|            0|  0.00%|            payload = payload.encode(charset.output_charset)
   316|         0|            0|            0|  0.00%|        if hasattr(payload, 'decode'):
   317|         0|            0|            0|  0.00%|            self._payload = payload.decode('ascii', 'surrogateescape')
   318|         0|            0|            0|  0.00%|        else:
   319|         0|            0|            0|  0.00%|            self._payload = payload
   320|         0|            0|            0|  0.00%|        if charset is not None:
   321|         0|            0|            0|  0.00%|            self.set_charset(charset)
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|    def set_charset(self, charset):
   324|         0|            0|            0|  0.00%|        """Set the charset of the payload to a given character set.
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        charset can be a Charset instance, a string naming a character set, or
   327|         0|            0|            0|  0.00%|        None.  If it is a string it will be converted to a Charset instance.
   328|         0|            0|            0|  0.00%|        If charset is None, the charset parameter will be removed from the
   329|         0|            0|            0|  0.00%|        Content-Type field.  Anything else will generate a TypeError.
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        The message will be assumed to be of type text/* encoded with
   332|         0|            0|            0|  0.00%|        charset.input_charset.  It will be converted to charset.output_charset
   333|         0|            0|            0|  0.00%|        and encoded properly, if needed, when generating the plain text
   334|         0|            0|            0|  0.00%|        representation of the message.  MIME headers (MIME-Version,
   335|         0|            0|            0|  0.00%|        Content-Type, Content-Transfer-Encoding) will be added as needed.
   336|         0|            0|            0|  0.00%|        """
   337|         0|            0|            0|  0.00%|        if charset is None:
   338|         0|            0|            0|  0.00%|            self.del_param('charset')
   339|         0|            0|            0|  0.00%|            self._charset = None
   340|         0|            0|            0|  0.00%|            return
   341|         0|            0|            0|  0.00%|        if not isinstance(charset, Charset):
   342|         0|            0|            0|  0.00%|            charset = Charset(charset)
   343|         0|            0|            0|  0.00%|        self._charset = charset
   344|         0|            0|            0|  0.00%|        if 'MIME-Version' not in self:
   345|         0|            0|            0|  0.00%|            self.add_header('MIME-Version', '1.0')
   346|         0|            0|            0|  0.00%|        if 'Content-Type' not in self:
   347|         0|            0|            0|  0.00%|            self.add_header('Content-Type', 'text/plain',
   348|         0|            0|            0|  0.00%|                            charset=charset.get_output_charset())
   349|         0|            0|            0|  0.00%|        else:
   350|         0|            0|            0|  0.00%|            self.set_param('charset', charset.get_output_charset())
   351|         0|            0|            0|  0.00%|        if charset != charset.get_output_charset():
   352|         0|            0|            0|  0.00%|            self._payload = charset.body_encode(self._payload)
   353|         0|            0|            0|  0.00%|        if 'Content-Transfer-Encoding' not in self:
   354|         0|            0|            0|  0.00%|            cte = charset.get_body_encoding()
   355|         0|            0|            0|  0.00%|            try:
   356|         0|            0|            0|  0.00%|                cte(self)
   357|         0|            0|            0|  0.00%|            except TypeError:
   358|         0|            0|            0|  0.00%|                # This 'if' is for backward compatibility, it allows unicode
   359|         0|            0|            0|  0.00%|                # through even though that won't work correctly if the
   360|         0|            0|            0|  0.00%|                # message is serialized.
   361|         0|            0|            0|  0.00%|                payload = self._payload
   362|         0|            0|            0|  0.00%|                if payload:
   363|         0|            0|            0|  0.00%|                    try:
   364|         0|            0|            0|  0.00%|                        payload = payload.encode('ascii', 'surrogateescape')
   365|         0|            0|            0|  0.00%|                    except UnicodeError:
   366|         0|            0|            0|  0.00%|                        payload = payload.encode(charset.output_charset)
   367|         0|            0|            0|  0.00%|                self._payload = charset.body_encode(payload)
   368|         0|            0|            0|  0.00%|                self.add_header('Content-Transfer-Encoding', cte)
   369|         0|            0|            0|  0.00%|
   370|         0|            0|            0|  0.00%|    def get_charset(self):
   371|         0|            0|            0|  0.00%|        """Return the Charset instance associated with the message's payload.
   372|         0|            0|            0|  0.00%|        """
   373|         0|            0|            0|  0.00%|        return self._charset
   374|         0|            0|            0|  0.00%|
   375|         0|            0|            0|  0.00%|    #
   376|         0|            0|            0|  0.00%|    # MAPPING INTERFACE (partial)
   377|         0|            0|            0|  0.00%|    #
   378|         0|            0|            0|  0.00%|    def __len__(self):
   379|         0|            0|            0|  0.00%|        """Return the total number of headers, including duplicates."""
   380|         0|            0|            0|  0.00%|        return len(self._headers)
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|    def __getitem__(self, name):
   383|         0|            0|            0|  0.00%|        """Get a header value.
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|        Return None if the header is missing instead of raising an exception.
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|        Note that if the header appeared multiple times, exactly which
   388|         0|            0|            0|  0.00%|        occurrence gets returned is undefined.  Use get_all() to get all
   389|         0|            0|            0|  0.00%|        the values matching a header field name.
   390|         0|            0|            0|  0.00%|        """
   391|         0|            0|            0|  0.00%|        return self.get(name)
   392|         0|            0|            0|  0.00%|
   393|         4|  1.90735e-05|  4.76837e-06|  0.01%|    def __setitem__(self, name, val):
   394|         0|            0|            0|  0.00%|        """Set the value of a header.
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|        Note: this does not overwrite an existing header with the same field
   397|         0|            0|            0|  0.00%|        name.  Use __delitem__() first to delete any existing headers.
   398|         0|            0|            0|  0.00%|        """
   399|         4|  4.14848e-05|  1.03712e-05|  0.02%|        max_count = self.policy.header_max_count(name)
(call)|         4|   0.00018096|  4.52399e-05|  0.07%|# /usr/lib/python3.10/email/policy.py:100 header_max_count
   400|         4|  1.57356e-05|  3.93391e-06|  0.01%|        if max_count:
   401|         4|  1.69277e-05|  4.23193e-06|  0.01%|            lname = name.lower()
   402|         4|  1.40667e-05|  3.51667e-06|  0.01%|            found = 0
   403|        10|  3.57628e-05|  3.57628e-06|  0.01%|            for k, v in self._headers:
   404|         6|  1.93119e-05|  3.21865e-06|  0.01%|                if k.lower() == lname:
   405|         0|            0|            0|  0.00%|                    found += 1
   406|         0|            0|            0|  0.00%|                    if found >= max_count:
   407|         0|            0|            0|  0.00%|                        raise ValueError("There may be at most {} {} headers "
   408|         0|            0|            0|  0.00%|                                         "in a message".format(max_count, name))
   409|         4|  3.86238e-05|  9.65595e-06|  0.02%|        self._headers.append(self.policy.header_store_parse(name, val))
(call)|         4|   0.00341725|  0.000854313|  1.41%|# /usr/lib/python3.10/email/policy.py:131 header_store_parse
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|    def __delitem__(self, name):
   412|         0|            0|            0|  0.00%|        """Delete all occurrences of a header, if present.
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|        Does not raise an exception if the header is missing.
   415|         0|            0|            0|  0.00%|        """
   416|         0|            0|            0|  0.00%|        name = name.lower()
   417|         0|            0|            0|  0.00%|        newheaders = []
   418|         0|            0|            0|  0.00%|        for k, v in self._headers:
   419|         0|            0|            0|  0.00%|            if k.lower() != name:
   420|         0|            0|            0|  0.00%|                newheaders.append((k, v))
   421|         0|            0|            0|  0.00%|        self._headers = newheaders
   422|         0|            0|            0|  0.00%|
   423|         3|  1.07288e-05|  3.57628e-06|  0.00%|    def __contains__(self, name):
   424|        16|   7.7486e-05|  4.84288e-06|  0.03%|        return name.lower() in [k.lower() for k, v in self._headers]
(call)|         3|  4.74453e-05|  1.58151e-05|  0.02%|# /usr/lib/python3.10/email/message.py:424 <listcomp>
   425|         0|            0|            0|  0.00%|
   426|         0|            0|            0|  0.00%|    def __iter__(self):
   427|         0|            0|            0|  0.00%|        for field, value in self._headers:
   428|         0|            0|            0|  0.00%|            yield field
   429|         0|            0|            0|  0.00%|
   430|         0|            0|            0|  0.00%|    def keys(self):
   431|         0|            0|            0|  0.00%|        """Return a list of all the message's header field names.
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|        These will be sorted in the order they appeared in the original
   434|         0|            0|            0|  0.00%|        message, or were added to the message, and may contain duplicates.
   435|         0|            0|            0|  0.00%|        Any fields deleted and re-inserted are always appended to the header
   436|         0|            0|            0|  0.00%|        list.
   437|         0|            0|            0|  0.00%|        """
   438|         0|            0|            0|  0.00%|        return [k for k, v in self._headers]
   439|         0|            0|            0|  0.00%|
   440|         0|            0|            0|  0.00%|    def values(self):
   441|         0|            0|            0|  0.00%|        """Return a list of all the message's header values.
   442|         0|            0|            0|  0.00%|
   443|         0|            0|            0|  0.00%|        These will be sorted in the order they appeared in the original
   444|         0|            0|            0|  0.00%|        message, or were added to the message, and may contain duplicates.
   445|         0|            0|            0|  0.00%|        Any fields deleted and re-inserted are always appended to the header
   446|         0|            0|            0|  0.00%|        list.
   447|         0|            0|            0|  0.00%|        """
   448|         0|            0|            0|  0.00%|        return [self.policy.header_fetch_parse(k, v)
   449|         0|            0|            0|  0.00%|                for k, v in self._headers]
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|    def items(self):
   452|         0|            0|            0|  0.00%|        """Get all the message's header fields and values.
   453|         0|            0|            0|  0.00%|
   454|         0|            0|            0|  0.00%|        These will be sorted in the order they appeared in the original
   455|         0|            0|            0|  0.00%|        message, or were added to the message, and may contain duplicates.
   456|         0|            0|            0|  0.00%|        Any fields deleted and re-inserted are always appended to the header
   457|         0|            0|            0|  0.00%|        list.
   458|         0|            0|            0|  0.00%|        """
   459|         0|            0|            0|  0.00%|        return [(k, self.policy.header_fetch_parse(k, v))
   460|         0|            0|            0|  0.00%|                for k, v in self._headers]
   461|         0|            0|            0|  0.00%|
   462|         4|  1.40667e-05|  3.51667e-06|  0.01%|    def get(self, name, failobj=None):
   463|         0|            0|            0|  0.00%|        """Get a header value.
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|        Like __getitem__() but return failobj instead of None when the field
   466|         0|            0|            0|  0.00%|        is missing.
   467|         0|            0|            0|  0.00%|        """
   468|         4|   1.5974e-05|  3.99351e-06|  0.01%|        name = name.lower()
   469|         8|   2.7895e-05|  3.48687e-06|  0.01%|        for k, v in self._headers:
   470|         7|   2.3365e-05|  3.33786e-06|  0.01%|            if k.lower() == name:
   471|         3|   2.5034e-05|  8.34465e-06|  0.01%|                return self.policy.header_fetch_parse(k, v)
(call)|         3|  8.10623e-05|  2.70208e-05|  0.03%|# /usr/lib/python3.10/email/policy.py:150 header_fetch_parse
   472|         1|  3.33786e-06|  3.33786e-06|  0.00%|        return failobj
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|    #
   475|         0|            0|            0|  0.00%|    # "Internal" methods (public API, but only intended for use by a parser
   476|         0|            0|            0|  0.00%|    # or generator, not normal application code.
   477|         0|            0|            0|  0.00%|    #
   478|         0|            0|            0|  0.00%|
   479|         0|            0|            0|  0.00%|    def set_raw(self, name, value):
   480|         0|            0|            0|  0.00%|        """Store name and value in the model without modification.
   481|         0|            0|            0|  0.00%|
   482|         0|            0|            0|  0.00%|        This is an "internal" API, intended only for use by a parser.
   483|         0|            0|            0|  0.00%|        """
   484|         0|            0|            0|  0.00%|        self._headers.append((name, value))
   485|         0|            0|            0|  0.00%|
   486|         0|            0|            0|  0.00%|    def raw_items(self):
   487|         0|            0|            0|  0.00%|        """Return the (name, value) header pairs without modification.
   488|         0|            0|            0|  0.00%|
   489|         0|            0|            0|  0.00%|        This is an "internal" API, intended only for use by a generator.
   490|         0|            0|            0|  0.00%|        """
   491|         0|            0|            0|  0.00%|        return iter(self._headers.copy())
   492|         0|            0|            0|  0.00%|
   493|         0|            0|            0|  0.00%|    #
   494|         0|            0|            0|  0.00%|    # Additional useful stuff
   495|         0|            0|            0|  0.00%|    #
   496|         0|            0|            0|  0.00%|
   497|         0|            0|            0|  0.00%|    def get_all(self, name, failobj=None):
   498|         0|            0|            0|  0.00%|        """Return a list of all the values for the named field.
   499|         0|            0|            0|  0.00%|
   500|         0|            0|            0|  0.00%|        These will be sorted in the order they appeared in the original
   501|         0|            0|            0|  0.00%|        message, and may contain duplicates.  Any fields deleted and
   502|         0|            0|            0|  0.00%|        re-inserted are always appended to the header list.
   503|         0|            0|            0|  0.00%|
   504|         0|            0|            0|  0.00%|        If no such fields exist, failobj is returned (defaults to None).
   505|         0|            0|            0|  0.00%|        """
   506|         0|            0|            0|  0.00%|        values = []
   507|         0|            0|            0|  0.00%|        name = name.lower()
   508|         0|            0|            0|  0.00%|        for k, v in self._headers:
   509|         0|            0|            0|  0.00%|            if k.lower() == name:
   510|         0|            0|            0|  0.00%|                values.append(self.policy.header_fetch_parse(k, v))
   511|         0|            0|            0|  0.00%|        if not values:
   512|         0|            0|            0|  0.00%|            return failobj
   513|         0|            0|            0|  0.00%|        return values
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    def add_header(self, _name, _value, **_params):
   516|         0|            0|            0|  0.00%|        """Extended header setting.
   517|         0|            0|            0|  0.00%|
   518|         0|            0|            0|  0.00%|        name is the header field to add.  keyword arguments can be used to set
   519|         0|            0|            0|  0.00%|        additional parameters for the header field, with underscores converted
   520|         0|            0|            0|  0.00%|        to dashes.  Normally the parameter will be added as key="value" unless
   521|         0|            0|            0|  0.00%|        value is None, in which case only the key will be added.  If a
   522|         0|            0|            0|  0.00%|        parameter value contains non-ASCII characters it can be specified as a
   523|         0|            0|            0|  0.00%|        three-tuple of (charset, language, value), in which case it will be
   524|         0|            0|            0|  0.00%|        encoded according to RFC2231 rules.  Otherwise it will be encoded using
   525|         0|            0|            0|  0.00%|        the utf-8 charset and a language of ''.
   526|         0|            0|            0|  0.00%|
   527|         0|            0|            0|  0.00%|        Examples:
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|        msg.add_header('content-disposition', 'attachment', filename='bud.gif')
   530|         0|            0|            0|  0.00%|        msg.add_header('content-disposition', 'attachment',
   531|         0|            0|            0|  0.00%|                       filename=('utf-8', '', Fußballer.ppt'))
   532|         0|            0|            0|  0.00%|        msg.add_header('content-disposition', 'attachment',
   533|         0|            0|            0|  0.00%|                       filename='Fußballer.ppt'))
   534|         0|            0|            0|  0.00%|        """
   535|         0|            0|            0|  0.00%|        parts = []
   536|         0|            0|            0|  0.00%|        for k, v in _params.items():
   537|         0|            0|            0|  0.00%|            if v is None:
   538|         0|            0|            0|  0.00%|                parts.append(k.replace('_', '-'))
   539|         0|            0|            0|  0.00%|            else:
   540|         0|            0|            0|  0.00%|                parts.append(_formatparam(k.replace('_', '-'), v))
   541|         0|            0|            0|  0.00%|        if _value is not None:
   542|         0|            0|            0|  0.00%|            parts.insert(0, _value)
   543|         0|            0|            0|  0.00%|        self[_name] = SEMISPACE.join(parts)
   544|         0|            0|            0|  0.00%|
   545|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def replace_header(self, _name, _value):
   546|         0|            0|            0|  0.00%|        """Replace a header.
   547|         0|            0|            0|  0.00%|
   548|         0|            0|            0|  0.00%|        Replace the first matching header found in the message, retaining
   549|         0|            0|            0|  0.00%|        header order and case.  If no matching header was found, a KeyError is
   550|         0|            0|            0|  0.00%|        raised.
   551|         0|            0|            0|  0.00%|        """
   552|         1|  4.29153e-06|  4.29153e-06|  0.00%|        _name = _name.lower()
   553|         2|   1.0252e-05|    5.126e-06|  0.00%|        for i, (k, v) in zip(range(len(self._headers)), self._headers):
   554|         2|  7.15256e-06|  3.57628e-06|  0.00%|            if k.lower() == _name:
   555|         1|  1.14441e-05|  1.14441e-05|  0.00%|                self._headers[i] = self.policy.header_store_parse(k, _value)
(call)|         1|   0.00319672|   0.00319672|  1.32%|# /usr/lib/python3.10/email/policy.py:131 header_store_parse
   556|         1|  5.00679e-06|  5.00679e-06|  0.00%|                break
   557|         0|            0|            0|  0.00%|        else:
   558|         0|            0|            0|  0.00%|            raise KeyError(_name)
   559|         0|            0|            0|  0.00%|
   560|         0|            0|            0|  0.00%|    #
   561|         0|            0|            0|  0.00%|    # Use these three methods instead of the three above.
   562|         0|            0|            0|  0.00%|    #
   563|         0|            0|            0|  0.00%|
   564|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def get_content_type(self):
   565|         0|            0|            0|  0.00%|        """Return the message's content type.
   566|         0|            0|            0|  0.00%|
   567|         0|            0|            0|  0.00%|        The returned string is coerced to lower case of the form
   568|         0|            0|            0|  0.00%|        `maintype/subtype'.  If there was no Content-Type header in the
   569|         0|            0|            0|  0.00%|        message, the default type as given by get_default_type() will be
   570|         0|            0|            0|  0.00%|        returned.  Since according to RFC 2045, messages always have a default
   571|         0|            0|            0|  0.00%|        type this will always return a value.
   572|         0|            0|            0|  0.00%|
   573|         0|            0|            0|  0.00%|        RFC 2045 defines a message's default type to be text/plain unless it
   574|         0|            0|            0|  0.00%|        appears inside a multipart/digest container, in which case it would be
   575|         0|            0|            0|  0.00%|        message/rfc822.
   576|         0|            0|            0|  0.00%|        """
   577|         1|  4.29153e-06|  4.29153e-06|  0.00%|        missing = object()
   578|         1|  1.12057e-05|  1.12057e-05|  0.00%|        value = self.get('content-type', missing)
(call)|         1|  2.31266e-05|  2.31266e-05|  0.01%|# /usr/lib/python3.10/email/message.py:462 get
   579|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if value is missing:
   580|         0|            0|            0|  0.00%|            # This should have no parameters
   581|         1|  1.00136e-05|  1.00136e-05|  0.00%|            return self.get_default_type()
(call)|         1|  7.15256e-06|  7.15256e-06|  0.00%|# /usr/lib/python3.10/email/message.py:606 get_default_type
   582|         0|            0|            0|  0.00%|        ctype = _splitparam(value)[0].lower()
   583|         0|            0|            0|  0.00%|        # RFC 2045, section 5.2 says if its invalid, use text/plain
   584|         0|            0|            0|  0.00%|        if ctype.count('/') != 1:
   585|         0|            0|            0|  0.00%|            return 'text/plain'
   586|         0|            0|            0|  0.00%|        return ctype
   587|         0|            0|            0|  0.00%|
   588|         1|  5.48363e-06|  5.48363e-06|  0.00%|    def get_content_maintype(self):
   589|         0|            0|            0|  0.00%|        """Return the message's main content type.
   590|         0|            0|            0|  0.00%|
   591|         0|            0|            0|  0.00%|        This is the `maintype' part of the string returned by
   592|         0|            0|            0|  0.00%|        get_content_type().
   593|         0|            0|            0|  0.00%|        """
   594|         1|  1.14441e-05|  1.14441e-05|  0.00%|        ctype = self.get_content_type()
(call)|         1|  6.34193e-05|  6.34193e-05|  0.03%|# /usr/lib/python3.10/email/message.py:564 get_content_type
   595|         1|  4.29153e-06|  4.29153e-06|  0.00%|        return ctype.split('/')[0]
   596|         0|            0|            0|  0.00%|
   597|         0|            0|            0|  0.00%|    def get_content_subtype(self):
   598|         0|            0|            0|  0.00%|        """Returns the message's sub-content type.
   599|         0|            0|            0|  0.00%|
   600|         0|            0|            0|  0.00%|        This is the `subtype' part of the string returned by
   601|         0|            0|            0|  0.00%|        get_content_type().
   602|         0|            0|            0|  0.00%|        """
   603|         0|            0|            0|  0.00%|        ctype = self.get_content_type()
   604|         0|            0|            0|  0.00%|        return ctype.split('/')[1]
   605|         0|            0|            0|  0.00%|
   606|         1|  3.33786e-06|  3.33786e-06|  0.00%|    def get_default_type(self):
   607|         0|            0|            0|  0.00%|        """Return the `default' content type.
   608|         0|            0|            0|  0.00%|
   609|         0|            0|            0|  0.00%|        Most messages have a default content type of text/plain, except for
   610|         0|            0|            0|  0.00%|        messages that are subparts of multipart/digest containers.  Such
   611|         0|            0|            0|  0.00%|        subparts have a default content type of message/rfc822.
   612|         0|            0|            0|  0.00%|        """
   613|         1|   3.8147e-06|   3.8147e-06|  0.00%|        return self._default_type
   614|         0|            0|            0|  0.00%|
   615|         0|            0|            0|  0.00%|    def set_default_type(self, ctype):
   616|         0|            0|            0|  0.00%|        """Set the `default' content type.
   617|         0|            0|            0|  0.00%|
   618|         0|            0|            0|  0.00%|        ctype should be either "text/plain" or "message/rfc822", although this
   619|         0|            0|            0|  0.00%|        is not enforced.  The default content type is not stored in the
   620|         0|            0|            0|  0.00%|        Content-Type header.
   621|         0|            0|            0|  0.00%|        """
   622|         0|            0|            0|  0.00%|        self._default_type = ctype
   623|         0|            0|            0|  0.00%|
   624|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def _get_params_preserve(self, failobj, header):
   625|         0|            0|            0|  0.00%|        # Like get_params() but preserves the quoting of values.  BAW:
   626|         0|            0|            0|  0.00%|        # should this be part of the public interface?
   627|         1|  5.24521e-06|  5.24521e-06|  0.00%|        missing = object()
   628|         1|  9.53674e-06|  9.53674e-06|  0.00%|        value = self.get(header, missing)
(call)|         1|  6.29425e-05|  6.29425e-05|  0.03%|# /usr/lib/python3.10/email/message.py:462 get
   629|         1|  4.29153e-06|  4.29153e-06|  0.00%|        if value is missing:
   630|         0|            0|            0|  0.00%|            return failobj
   631|         1|  4.29153e-06|  4.29153e-06|  0.00%|        params = []
   632|         2|  1.69277e-05|  8.46386e-06|  0.01%|        for p in _parseparam(value):
(call)|         1|  6.58035e-05|  6.58035e-05|  0.03%|# /usr/lib/python3.10/email/message.py:73 _parseparam
   633|         1|  4.05312e-06|  4.05312e-06|  0.00%|            try:
   634|         1|  1.00136e-05|  1.00136e-05|  0.00%|                name, val = p.split('=', 1)
   635|         0|            0|            0|  0.00%|                name = name.strip()
   636|         0|            0|            0|  0.00%|                val = val.strip()
   637|         1|  5.96046e-06|  5.96046e-06|  0.00%|            except ValueError:
   638|         0|            0|            0|  0.00%|                # Must have been a bare attribute
   639|         1|   3.8147e-06|   3.8147e-06|  0.00%|                name = p.strip()
   640|         1|  4.76837e-06|  4.76837e-06|  0.00%|                val = ''
   641|         1|   3.8147e-06|   3.8147e-06|  0.00%|            params.append((name, val))
   642|         1|  1.21593e-05|  1.21593e-05|  0.01%|        params = utils.decode_params(params)
(call)|         1|  3.19481e-05|  3.19481e-05|  0.01%|# /usr/lib/python3.10/email/utils.py:260 decode_params
   643|         1|  6.67572e-06|  6.67572e-06|  0.00%|        return params
   644|         0|            0|            0|  0.00%|
   645|         0|            0|            0|  0.00%|    def get_params(self, failobj=None, header='content-type', unquote=True):
   646|         0|            0|            0|  0.00%|        """Return the message's Content-Type parameters, as a list.
   647|         0|            0|            0|  0.00%|
   648|         0|            0|            0|  0.00%|        The elements of the returned list are 2-tuples of key/value pairs, as
   649|         0|            0|            0|  0.00%|        split on the `=' sign.  The left hand side of the `=' is the key,
   650|         0|            0|            0|  0.00%|        while the right hand side is the value.  If there is no `=' sign in
   651|         0|            0|            0|  0.00%|        the parameter the value is the empty string.  The value is as
   652|         0|            0|            0|  0.00%|        described in the get_param() method.
   653|         0|            0|            0|  0.00%|
   654|         0|            0|            0|  0.00%|        Optional failobj is the object to return if there is no Content-Type
   655|         0|            0|            0|  0.00%|        header.  Optional header is the header to search instead of
   656|         0|            0|            0|  0.00%|        Content-Type.  If unquote is True, the value is unquoted.
   657|         0|            0|            0|  0.00%|        """
   658|         0|            0|            0|  0.00%|        missing = object()
   659|         0|            0|            0|  0.00%|        params = self._get_params_preserve(missing, header)
   660|         0|            0|            0|  0.00%|        if params is missing:
   661|         0|            0|            0|  0.00%|            return failobj
   662|         0|            0|            0|  0.00%|        if unquote:
   663|         0|            0|            0|  0.00%|            return [(k, _unquotevalue(v)) for k, v in params]
   664|         0|            0|            0|  0.00%|        else:
   665|         0|            0|            0|  0.00%|            return params
   666|         0|            0|            0|  0.00%|
   667|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def get_param(self, param, failobj=None, header='content-type',
   668|         0|            0|            0|  0.00%|                  unquote=True):
   669|         0|            0|            0|  0.00%|        """Return the parameter value if found in the Content-Type header.
   670|         0|            0|            0|  0.00%|
   671|         0|            0|            0|  0.00%|        Optional failobj is the object to return if there is no Content-Type
   672|         0|            0|            0|  0.00%|        header, or the Content-Type header has no such parameter.  Optional
   673|         0|            0|            0|  0.00%|        header is the header to search instead of Content-Type.
   674|         0|            0|            0|  0.00%|
   675|         0|            0|            0|  0.00%|        Parameter keys are always compared case insensitively.  The return
   676|         0|            0|            0|  0.00%|        value can either be a string, or a 3-tuple if the parameter was RFC
   677|         0|            0|            0|  0.00%|        2231 encoded.  When it's a 3-tuple, the elements of the value are of
   678|         0|            0|            0|  0.00%|        the form (CHARSET, LANGUAGE, VALUE).  Note that both CHARSET and
   679|         0|            0|            0|  0.00%|        LANGUAGE can be None, in which case you should consider VALUE to be
   680|         0|            0|            0|  0.00%|        encoded in the us-ascii charset.  You can usually ignore LANGUAGE.
   681|         0|            0|            0|  0.00%|        The parameter value (either the returned string, or the VALUE item in
   682|         0|            0|            0|  0.00%|        the 3-tuple) is always unquoted, unless unquote is set to False.
   683|         0|            0|            0|  0.00%|
   684|         0|            0|            0|  0.00%|        If your application doesn't care whether the parameter was RFC 2231
   685|         0|            0|            0|  0.00%|        encoded, it can turn the return value into a string as follows:
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|            rawparam = msg.get_param('foo')
   688|         0|            0|            0|  0.00%|            param = email.utils.collapse_rfc2231_value(rawparam)
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|        """
   691|         1|  1.09673e-05|  1.09673e-05|  0.00%|        if header not in self:
(call)|         1|  2.52724e-05|  2.52724e-05|  0.01%|# /usr/lib/python3.10/email/message.py:423 __contains__
   692|         0|            0|            0|  0.00%|            return failobj
   693|         2|   1.4782e-05|  7.39098e-06|  0.01%|        for k, v in self._get_params_preserve(failobj, header):
(call)|         1|  0.000256538|  0.000256538|  0.11%|# /usr/lib/python3.10/email/message.py:624 _get_params_preserve
   694|         1|  4.52995e-06|  4.52995e-06|  0.00%|            if k.lower() == param.lower():
   695|         0|            0|            0|  0.00%|                if unquote:
   696|         0|            0|            0|  0.00%|                    return _unquotevalue(v)
   697|         0|            0|            0|  0.00%|                else:
   698|         0|            0|            0|  0.00%|                    return v
   699|         1|  3.33786e-06|  3.33786e-06|  0.00%|        return failobj
   700|         0|            0|            0|  0.00%|
   701|         1|  5.00679e-06|  5.00679e-06|  0.00%|    def set_param(self, param, value, header='Content-Type', requote=True,
   702|         0|            0|            0|  0.00%|                  charset=None, language='', replace=False):
   703|         0|            0|            0|  0.00%|        """Set a parameter in the Content-Type header.
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|        If the parameter already exists in the header, its value will be
   706|         0|            0|            0|  0.00%|        replaced with the new value.
   707|         0|            0|            0|  0.00%|
   708|         0|            0|            0|  0.00%|        If header is Content-Type and has not yet been defined for this
   709|         0|            0|            0|  0.00%|        message, it will be set to "text/plain" and the new parameter and
   710|         0|            0|            0|  0.00%|        value will be appended as per RFC 2045.
   711|         0|            0|            0|  0.00%|
   712|         0|            0|            0|  0.00%|        An alternate header can be specified in the header argument, and all
   713|         0|            0|            0|  0.00%|        parameters will be quoted as necessary unless requote is False.
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|        If charset is specified, the parameter will be encoded according to RFC
   716|         0|            0|            0|  0.00%|        2231.  Optional language specifies the RFC 2231 language, defaulting
   717|         0|            0|            0|  0.00%|        to the empty string.  Both charset and language should be strings.
   718|         0|            0|            0|  0.00%|        """
   719|         1|  5.48363e-06|  5.48363e-06|  0.00%|        if not isinstance(value, tuple) and charset:
   720|         0|            0|            0|  0.00%|            value = (charset, language, value)
   721|         0|            0|            0|  0.00%|
   722|         1|   1.4782e-05|   1.4782e-05|  0.01%|        if header not in self and header.lower() == 'content-type':
(call)|         1|  3.29018e-05|  3.29018e-05|  0.01%|# /usr/lib/python3.10/email/message.py:423 __contains__
   723|         0|            0|            0|  0.00%|            ctype = 'text/plain'
   724|         0|            0|            0|  0.00%|        else:
   725|         1|  1.14441e-05|  1.14441e-05|  0.00%|            ctype = self.get(header)
(call)|         1|  5.72205e-05|  5.72205e-05|  0.02%|# /usr/lib/python3.10/email/message.py:462 get
   726|         1|  1.21593e-05|  1.21593e-05|  0.01%|        if not self.get_param(param, header=header):
(call)|         1|  0.000319719|  0.000319719|  0.13%|# /usr/lib/python3.10/email/message.py:667 get_param
   727|         1|  4.29153e-06|  4.29153e-06|  0.00%|            if not ctype:
   728|         0|            0|            0|  0.00%|                ctype = _formatparam(param, value, requote)
   729|         0|            0|            0|  0.00%|            else:
   730|         2|  4.05312e-05|  2.02656e-05|  0.02%|                ctype = SEMISPACE.join(
   731|         1|  1.21593e-05|  1.21593e-05|  0.01%|                    [ctype, _formatparam(param, value, requote)])
(call)|         1|  7.05719e-05|  7.05719e-05|  0.03%|# /usr/lib/python3.10/email/message.py:39 _formatparam
   732|         0|            0|            0|  0.00%|        else:
   733|         0|            0|            0|  0.00%|            ctype = ''
   734|         0|            0|            0|  0.00%|            for old_param, old_value in self.get_params(header=header,
   735|         0|            0|            0|  0.00%|                                                        unquote=requote):
   736|         0|            0|            0|  0.00%|                append_param = ''
   737|         0|            0|            0|  0.00%|                if old_param.lower() == param.lower():
   738|         0|            0|            0|  0.00%|                    append_param = _formatparam(param, value, requote)
   739|         0|            0|            0|  0.00%|                else:
   740|         0|            0|            0|  0.00%|                    append_param = _formatparam(old_param, old_value, requote)
   741|         0|            0|            0|  0.00%|                if not ctype:
   742|         0|            0|            0|  0.00%|                    ctype = append_param
   743|         0|            0|            0|  0.00%|                else:
   744|         0|            0|            0|  0.00%|                    ctype = SEMISPACE.join([ctype, append_param])
   745|         1|  9.29832e-06|  9.29832e-06|  0.00%|        if ctype != self.get(header):
(call)|         1|  4.74453e-05|  4.74453e-05|  0.02%|# /usr/lib/python3.10/email/message.py:462 get
   746|         1|  4.05312e-06|  4.05312e-06|  0.00%|            if replace:
   747|         1|  1.54972e-05|  1.54972e-05|  0.01%|                self.replace_header(header, ctype)
(call)|         1|   0.00323915|   0.00323915|  1.33%|# /usr/lib/python3.10/email/message.py:545 replace_header
   748|         0|            0|            0|  0.00%|            else:
   749|         0|            0|            0|  0.00%|                del self[header]
   750|         0|            0|            0|  0.00%|                self[header] = ctype
   751|         0|            0|            0|  0.00%|
   752|         0|            0|            0|  0.00%|    def del_param(self, param, header='content-type', requote=True):
   753|         0|            0|            0|  0.00%|        """Remove the given parameter completely from the Content-Type header.
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|        The header will be re-written in place without the parameter or its
   756|         0|            0|            0|  0.00%|        value. All values will be quoted as necessary unless requote is
   757|         0|            0|            0|  0.00%|        False.  Optional header specifies an alternative to the Content-Type
   758|         0|            0|            0|  0.00%|        header.
   759|         0|            0|            0|  0.00%|        """
   760|         0|            0|            0|  0.00%|        if header not in self:
   761|         0|            0|            0|  0.00%|            return
   762|         0|            0|            0|  0.00%|        new_ctype = ''
   763|         0|            0|            0|  0.00%|        for p, v in self.get_params(header=header, unquote=requote):
   764|         0|            0|            0|  0.00%|            if p.lower() != param.lower():
   765|         0|            0|            0|  0.00%|                if not new_ctype:
   766|         0|            0|            0|  0.00%|                    new_ctype = _formatparam(p, v, requote)
   767|         0|            0|            0|  0.00%|                else:
   768|         0|            0|            0|  0.00%|                    new_ctype = SEMISPACE.join([new_ctype,
   769|         0|            0|            0|  0.00%|                                                _formatparam(p, v, requote)])
   770|         0|            0|            0|  0.00%|        if new_ctype != self.get(header):
   771|         0|            0|            0|  0.00%|            del self[header]
   772|         0|            0|            0|  0.00%|            self[header] = new_ctype
   773|         0|            0|            0|  0.00%|
   774|         0|            0|            0|  0.00%|    def set_type(self, type, header='Content-Type', requote=True):
   775|         0|            0|            0|  0.00%|        """Set the main type and subtype for the Content-Type header.
   776|         0|            0|            0|  0.00%|
   777|         0|            0|            0|  0.00%|        type must be a string in the form "maintype/subtype", otherwise a
   778|         0|            0|            0|  0.00%|        ValueError is raised.
   779|         0|            0|            0|  0.00%|
   780|         0|            0|            0|  0.00%|        This method replaces the Content-Type header, keeping all the
   781|         0|            0|            0|  0.00%|        parameters in place.  If requote is False, this leaves the existing
   782|         0|            0|            0|  0.00%|        header's quoting as is.  Otherwise, the parameters will be quoted (the
   783|         0|            0|            0|  0.00%|        default).
   784|         0|            0|            0|  0.00%|
   785|         0|            0|            0|  0.00%|        An alternative header can be specified in the header argument.  When
   786|         0|            0|            0|  0.00%|        the Content-Type header is set, we'll always also add a MIME-Version
   787|         0|            0|            0|  0.00%|        header.
   788|         0|            0|            0|  0.00%|        """
   789|         0|            0|            0|  0.00%|        # BAW: should we be strict?
   790|         0|            0|            0|  0.00%|        if not type.count('/') == 1:
   791|         0|            0|            0|  0.00%|            raise ValueError
   792|         0|            0|            0|  0.00%|        # Set the Content-Type, you get a MIME-Version
   793|         0|            0|            0|  0.00%|        if header.lower() == 'content-type':
   794|         0|            0|            0|  0.00%|            del self['mime-version']
   795|         0|            0|            0|  0.00%|            self['MIME-Version'] = '1.0'
   796|         0|            0|            0|  0.00%|        if header not in self:
   797|         0|            0|            0|  0.00%|            self[header] = type
   798|         0|            0|            0|  0.00%|            return
   799|         0|            0|            0|  0.00%|        params = self.get_params(header=header, unquote=requote)
   800|         0|            0|            0|  0.00%|        del self[header]
   801|         0|            0|            0|  0.00%|        self[header] = type
   802|         0|            0|            0|  0.00%|        # Skip the first param; it's the old type.
   803|         0|            0|            0|  0.00%|        for p, v in params[1:]:
   804|         0|            0|            0|  0.00%|            self.set_param(p, v, header, requote)
   805|         0|            0|            0|  0.00%|
   806|         0|            0|            0|  0.00%|    def get_filename(self, failobj=None):
   807|         0|            0|            0|  0.00%|        """Return the filename associated with the payload if present.
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|        The filename is extracted from the Content-Disposition header's
   810|         0|            0|            0|  0.00%|        `filename' parameter, and it is unquoted.  If that header is missing
   811|         0|            0|            0|  0.00%|        the `filename' parameter, this method falls back to looking for the
   812|         0|            0|            0|  0.00%|        `name' parameter.
   813|         0|            0|            0|  0.00%|        """
   814|         0|            0|            0|  0.00%|        missing = object()
   815|         0|            0|            0|  0.00%|        filename = self.get_param('filename', missing, 'content-disposition')
   816|         0|            0|            0|  0.00%|        if filename is missing:
   817|         0|            0|            0|  0.00%|            filename = self.get_param('name', missing, 'content-type')
   818|         0|            0|            0|  0.00%|        if filename is missing:
   819|         0|            0|            0|  0.00%|            return failobj
   820|         0|            0|            0|  0.00%|        return utils.collapse_rfc2231_value(filename).strip()
   821|         0|            0|            0|  0.00%|
   822|         0|            0|            0|  0.00%|    def get_boundary(self, failobj=None):
   823|         0|            0|            0|  0.00%|        """Return the boundary associated with the payload if present.
   824|         0|            0|            0|  0.00%|
   825|         0|            0|            0|  0.00%|        The boundary is extracted from the Content-Type header's `boundary'
   826|         0|            0|            0|  0.00%|        parameter, and it is unquoted.
   827|         0|            0|            0|  0.00%|        """
   828|         0|            0|            0|  0.00%|        missing = object()
   829|         0|            0|            0|  0.00%|        boundary = self.get_param('boundary', missing)
   830|         0|            0|            0|  0.00%|        if boundary is missing:
   831|         0|            0|            0|  0.00%|            return failobj
   832|         0|            0|            0|  0.00%|        # RFC 2046 says that boundaries may begin but not end in w/s
   833|         0|            0|            0|  0.00%|        return utils.collapse_rfc2231_value(boundary).rstrip()
   834|         0|            0|            0|  0.00%|
   835|         0|            0|            0|  0.00%|    def set_boundary(self, boundary):
   836|         0|            0|            0|  0.00%|        """Set the boundary parameter in Content-Type to 'boundary'.
   837|         0|            0|            0|  0.00%|
   838|         0|            0|            0|  0.00%|        This is subtly different than deleting the Content-Type header and
   839|         0|            0|            0|  0.00%|        adding a new one with a new boundary parameter via add_header().  The
   840|         0|            0|            0|  0.00%|        main difference is that using the set_boundary() method preserves the
   841|         0|            0|            0|  0.00%|        order of the Content-Type header in the original message.
   842|         0|            0|            0|  0.00%|
   843|         0|            0|            0|  0.00%|        HeaderParseError is raised if the message has no Content-Type header.
   844|         0|            0|            0|  0.00%|        """
   845|         0|            0|            0|  0.00%|        missing = object()
   846|         0|            0|            0|  0.00%|        params = self._get_params_preserve(missing, 'content-type')
   847|         0|            0|            0|  0.00%|        if params is missing:
   848|         0|            0|            0|  0.00%|            # There was no Content-Type header, and we don't know what type
   849|         0|            0|            0|  0.00%|            # to set it to, so raise an exception.
   850|         0|            0|            0|  0.00%|            raise errors.HeaderParseError('No Content-Type header found')
   851|         0|            0|            0|  0.00%|        newparams = []
   852|         0|            0|            0|  0.00%|        foundp = False
   853|         0|            0|            0|  0.00%|        for pk, pv in params:
   854|         0|            0|            0|  0.00%|            if pk.lower() == 'boundary':
   855|         0|            0|            0|  0.00%|                newparams.append(('boundary', '"%s"' % boundary))
   856|         0|            0|            0|  0.00%|                foundp = True
   857|         0|            0|            0|  0.00%|            else:
   858|         0|            0|            0|  0.00%|                newparams.append((pk, pv))
   859|         0|            0|            0|  0.00%|        if not foundp:
   860|         0|            0|            0|  0.00%|            # The original Content-Type header had no boundary attribute.
   861|         0|            0|            0|  0.00%|            # Tack one on the end.  BAW: should we raise an exception
   862|         0|            0|            0|  0.00%|            # instead???
   863|         0|            0|            0|  0.00%|            newparams.append(('boundary', '"%s"' % boundary))
   864|         0|            0|            0|  0.00%|        # Replace the existing Content-Type header with the new value
   865|         0|            0|            0|  0.00%|        newheaders = []
   866|         0|            0|            0|  0.00%|        for h, v in self._headers:
   867|         0|            0|            0|  0.00%|            if h.lower() == 'content-type':
   868|         0|            0|            0|  0.00%|                parts = []
   869|         0|            0|            0|  0.00%|                for k, v in newparams:
   870|         0|            0|            0|  0.00%|                    if v == '':
   871|         0|            0|            0|  0.00%|                        parts.append(k)
   872|         0|            0|            0|  0.00%|                    else:
   873|         0|            0|            0|  0.00%|                        parts.append('%s=%s' % (k, v))
   874|         0|            0|            0|  0.00%|                val = SEMISPACE.join(parts)
   875|         0|            0|            0|  0.00%|                newheaders.append(self.policy.header_store_parse(h, val))
   876|         0|            0|            0|  0.00%|
   877|         0|            0|            0|  0.00%|            else:
   878|         0|            0|            0|  0.00%|                newheaders.append((h, v))
   879|         0|            0|            0|  0.00%|        self._headers = newheaders
   880|         0|            0|            0|  0.00%|
   881|         0|            0|            0|  0.00%|    def get_content_charset(self, failobj=None):
   882|         0|            0|            0|  0.00%|        """Return the charset parameter of the Content-Type header.
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|        The returned string is always coerced to lower case.  If there is no
   885|         0|            0|            0|  0.00%|        Content-Type header, or if that header has no charset parameter,
   886|         0|            0|            0|  0.00%|        failobj is returned.
   887|         0|            0|            0|  0.00%|        """
   888|         0|            0|            0|  0.00%|        missing = object()
   889|         0|            0|            0|  0.00%|        charset = self.get_param('charset', missing)
   890|         0|            0|            0|  0.00%|        if charset is missing:
   891|         0|            0|            0|  0.00%|            return failobj
   892|         0|            0|            0|  0.00%|        if isinstance(charset, tuple):
   893|         0|            0|            0|  0.00%|            # RFC 2231 encoded, so decode it, and it better end up as ascii.
   894|         0|            0|            0|  0.00%|            pcharset = charset[0] or 'us-ascii'
   895|         0|            0|            0|  0.00%|            try:
   896|         0|            0|            0|  0.00%|                # LookupError will be raised if the charset isn't known to
   897|         0|            0|            0|  0.00%|                # Python.  UnicodeError will be raised if the encoded text
   898|         0|            0|            0|  0.00%|                # contains a character not in the charset.
   899|         0|            0|            0|  0.00%|                as_bytes = charset[2].encode('raw-unicode-escape')
   900|         0|            0|            0|  0.00%|                charset = str(as_bytes, pcharset)
   901|         0|            0|            0|  0.00%|            except (LookupError, UnicodeError):
   902|         0|            0|            0|  0.00%|                charset = charset[2]
   903|         0|            0|            0|  0.00%|        # charset characters must be in us-ascii range
   904|         0|            0|            0|  0.00%|        try:
   905|         0|            0|            0|  0.00%|            charset.encode('us-ascii')
   906|         0|            0|            0|  0.00%|        except UnicodeError:
   907|         0|            0|            0|  0.00%|            return failobj
   908|         0|            0|            0|  0.00%|        # RFC 2046, $4.1.2 says charsets are not case sensitive
   909|         0|            0|            0|  0.00%|        return charset.lower()
   910|         0|            0|            0|  0.00%|
   911|         0|            0|            0|  0.00%|    def get_charsets(self, failobj=None):
   912|         0|            0|            0|  0.00%|        """Return a list containing the charset(s) used in this message.
   913|         0|            0|            0|  0.00%|
   914|         0|            0|            0|  0.00%|        The returned list of items describes the Content-Type headers'
   915|         0|            0|            0|  0.00%|        charset parameter for this message and all the subparts in its
   916|         0|            0|            0|  0.00%|        payload.
   917|         0|            0|            0|  0.00%|
   918|         0|            0|            0|  0.00%|        Each item will either be a string (the value of the charset parameter
   919|         0|            0|            0|  0.00%|        in the Content-Type header of that part) or the value of the
   920|         0|            0|            0|  0.00%|        'failobj' parameter (defaults to None), if the part does not have a
   921|         0|            0|            0|  0.00%|        main MIME type of "text", or the charset is not defined.
   922|         0|            0|            0|  0.00%|
   923|         0|            0|            0|  0.00%|        The list will contain one string for each part of the message, plus
   924|         0|            0|            0|  0.00%|        one for the container message (i.e. self), so that a non-multipart
   925|         0|            0|            0|  0.00%|        message will still return a list of length 1.
   926|         0|            0|            0|  0.00%|        """
   927|         0|            0|            0|  0.00%|        return [part.get_content_charset(failobj) for part in self.walk()]
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|    def get_content_disposition(self):
   930|         0|            0|            0|  0.00%|        """Return the message's content-disposition if it exists, or None.
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|        The return values can be either 'inline', 'attachment' or None
   933|         0|            0|            0|  0.00%|        according to the rfc2183.
   934|         0|            0|            0|  0.00%|        """
   935|         0|            0|            0|  0.00%|        value = self.get('content-disposition')
   936|         0|            0|            0|  0.00%|        if value is None:
   937|         0|            0|            0|  0.00%|            return None
   938|         0|            0|            0|  0.00%|        c_d = _splitparam(value)[0].lower()
   939|         0|            0|            0|  0.00%|        return c_d
   940|         0|            0|            0|  0.00%|
   941|         0|            0|            0|  0.00%|    # I.e. def walk(self): ...
   942|         0|            0|            0|  0.00%|    from email.iterators import walk
   943|         0|            0|            0|  0.00%|
   944|         0|            0|            0|  0.00%|
   945|         0|            0|            0|  0.00%|class MIMEPart(Message):
   946|         0|            0|            0|  0.00%|
   947|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def __init__(self, policy=None):
   948|         1|  1.07288e-05|  1.07288e-05|  0.00%|        if policy is None:
   949|         1|   6.4373e-06|   6.4373e-06|  0.00%|            from email.policy import default
   950|         1|   3.8147e-06|   3.8147e-06|  0.00%|            policy = default
   951|         1|  1.19209e-05|  1.19209e-05|  0.00%|        super().__init__(policy)
(call)|         1|   3.6478e-05|   3.6478e-05|  0.02%|# /usr/lib/python3.10/email/message.py:120 __init__
   952|         0|            0|            0|  0.00%|
   953|         0|            0|            0|  0.00%|
   954|         0|            0|            0|  0.00%|    def as_string(self, unixfrom=False, maxheaderlen=None, policy=None):
   955|         0|            0|            0|  0.00%|        """Return the entire formatted message as a string.
   956|         0|            0|            0|  0.00%|
   957|         0|            0|            0|  0.00%|        Optional 'unixfrom', when true, means include the Unix From_ envelope
   958|         0|            0|            0|  0.00%|        header.  maxheaderlen is retained for backward compatibility with the
   959|         0|            0|            0|  0.00%|        base Message class, but defaults to None, meaning that the policy value
   960|         0|            0|            0|  0.00%|        for max_line_length controls the header maximum length.  'policy' is
   961|         0|            0|            0|  0.00%|        passed to the Generator instance used to serialize the message; if it
   962|         0|            0|            0|  0.00%|        is not specified the policy associated with the message instance is
   963|         0|            0|            0|  0.00%|        used.
   964|         0|            0|            0|  0.00%|        """
   965|         0|            0|            0|  0.00%|        policy = self.policy if policy is None else policy
   966|         0|            0|            0|  0.00%|        if maxheaderlen is None:
   967|         0|            0|            0|  0.00%|            maxheaderlen = policy.max_line_length
   968|         0|            0|            0|  0.00%|        return super().as_string(unixfrom, maxheaderlen, policy)
   969|         0|            0|            0|  0.00%|
   970|         0|            0|            0|  0.00%|    def __str__(self):
   971|         0|            0|            0|  0.00%|        return self.as_string(policy=self.policy.clone(utf8=True))
   972|         0|            0|            0|  0.00%|
   973|         0|            0|            0|  0.00%|    def is_attachment(self):
   974|         0|            0|            0|  0.00%|        c_d = self.get('content-disposition')
   975|         0|            0|            0|  0.00%|        return False if c_d is None else c_d.content_disposition == 'attachment'
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|    def _find_body(self, part, preferencelist):
   978|         0|            0|            0|  0.00%|        if part.is_attachment():
   979|         0|            0|            0|  0.00%|            return
   980|         0|            0|            0|  0.00%|        maintype, subtype = part.get_content_type().split('/')
   981|         0|            0|            0|  0.00%|        if maintype == 'text':
   982|         0|            0|            0|  0.00%|            if subtype in preferencelist:
   983|         0|            0|            0|  0.00%|                yield (preferencelist.index(subtype), part)
   984|         0|            0|            0|  0.00%|            return
   985|         0|            0|            0|  0.00%|        if maintype != 'multipart' or not self.is_multipart():
   986|         0|            0|            0|  0.00%|            return
   987|         0|            0|            0|  0.00%|        if subtype != 'related':
   988|         0|            0|            0|  0.00%|            for subpart in part.iter_parts():
   989|         0|            0|            0|  0.00%|                yield from self._find_body(subpart, preferencelist)
   990|         0|            0|            0|  0.00%|            return
   991|         0|            0|            0|  0.00%|        if 'related' in preferencelist:
   992|         0|            0|            0|  0.00%|            yield (preferencelist.index('related'), part)
   993|         0|            0|            0|  0.00%|        candidate = None
   994|         0|            0|            0|  0.00%|        start = part.get_param('start')
   995|         0|            0|            0|  0.00%|        if start:
   996|         0|            0|            0|  0.00%|            for subpart in part.iter_parts():
   997|         0|            0|            0|  0.00%|                if subpart['content-id'] == start:
   998|         0|            0|            0|  0.00%|                    candidate = subpart
   999|         0|            0|            0|  0.00%|                    break
  1000|         0|            0|            0|  0.00%|        if candidate is None:
  1001|         0|            0|            0|  0.00%|            subparts = part.get_payload()
  1002|         0|            0|            0|  0.00%|            candidate = subparts[0] if subparts else None
  1003|         0|            0|            0|  0.00%|        if candidate is not None:
  1004|         0|            0|            0|  0.00%|            yield from self._find_body(candidate, preferencelist)
  1005|         0|            0|            0|  0.00%|
  1006|         0|            0|            0|  0.00%|    def get_body(self, preferencelist=('related', 'html', 'plain')):
  1007|         0|            0|            0|  0.00%|        """Return best candidate mime part for display as 'body' of message.
  1008|         0|            0|            0|  0.00%|
  1009|         0|            0|            0|  0.00%|        Do a depth first search, starting with self, looking for the first part
  1010|         0|            0|            0|  0.00%|        matching each of the items in preferencelist, and return the part
  1011|         0|            0|            0|  0.00%|        corresponding to the first item that has a match, or None if no items
  1012|         0|            0|            0|  0.00%|        have a match.  If 'related' is not included in preferencelist, consider
  1013|         0|            0|            0|  0.00%|        the root part of any multipart/related encountered as a candidate
  1014|         0|            0|            0|  0.00%|        match.  Ignore parts with 'Content-Disposition: attachment'.
  1015|         0|            0|            0|  0.00%|        """
  1016|         0|            0|            0|  0.00%|        best_prio = len(preferencelist)
  1017|         0|            0|            0|  0.00%|        body = None
  1018|         0|            0|            0|  0.00%|        for prio, part in self._find_body(self, preferencelist):
  1019|         0|            0|            0|  0.00%|            if prio < best_prio:
  1020|         0|            0|            0|  0.00%|                best_prio = prio
  1021|         0|            0|            0|  0.00%|                body = part
  1022|         0|            0|            0|  0.00%|                if prio == 0:
  1023|         0|            0|            0|  0.00%|                    break
  1024|         0|            0|            0|  0.00%|        return body
  1025|         0|            0|            0|  0.00%|
  1026|         0|            0|            0|  0.00%|    _body_types = {('text', 'plain'),
  1027|         0|            0|            0|  0.00%|                   ('text', 'html'),
  1028|         0|            0|            0|  0.00%|                   ('multipart', 'related'),
  1029|         0|            0|            0|  0.00%|                   ('multipart', 'alternative')}
  1030|         0|            0|            0|  0.00%|    def iter_attachments(self):
  1031|         0|            0|            0|  0.00%|        """Return an iterator over the non-main parts of a multipart.
  1032|         0|            0|            0|  0.00%|
  1033|         0|            0|            0|  0.00%|        Skip the first of each occurrence of text/plain, text/html,
  1034|         0|            0|            0|  0.00%|        multipart/related, or multipart/alternative in the multipart (unless
  1035|         0|            0|            0|  0.00%|        they have a 'Content-Disposition: attachment' header) and include all
  1036|         0|            0|            0|  0.00%|        remaining subparts in the returned iterator.  When applied to a
  1037|         0|            0|            0|  0.00%|        multipart/related, return all parts except the root part.  Return an
  1038|         0|            0|            0|  0.00%|        empty iterator when applied to a multipart/alternative or a
  1039|         0|            0|            0|  0.00%|        non-multipart.
  1040|         0|            0|            0|  0.00%|        """
  1041|         0|            0|            0|  0.00%|        maintype, subtype = self.get_content_type().split('/')
  1042|         0|            0|            0|  0.00%|        if maintype != 'multipart' or subtype == 'alternative':
  1043|         0|            0|            0|  0.00%|            return
  1044|         0|            0|            0|  0.00%|        payload = self.get_payload()
  1045|         0|            0|            0|  0.00%|        # Certain malformed messages can have content type set to `multipart/*`
  1046|         0|            0|            0|  0.00%|        # but still have single part body, in which case payload.copy() can
  1047|         0|            0|            0|  0.00%|        # fail with AttributeError.
  1048|         0|            0|            0|  0.00%|        try:
  1049|         0|            0|            0|  0.00%|            parts = payload.copy()
  1050|         0|            0|            0|  0.00%|        except AttributeError:
  1051|         0|            0|            0|  0.00%|            # payload is not a list, it is most probably a string.
  1052|         0|            0|            0|  0.00%|            return
  1053|         0|            0|            0|  0.00%|
  1054|         0|            0|            0|  0.00%|        if maintype == 'multipart' and subtype == 'related':
  1055|         0|            0|            0|  0.00%|            # For related, we treat everything but the root as an attachment.
  1056|         0|            0|            0|  0.00%|            # The root may be indicated by 'start'; if there's no start or we
  1057|         0|            0|            0|  0.00%|            # can't find the named start, treat the first subpart as the root.
  1058|         0|            0|            0|  0.00%|            start = self.get_param('start')
  1059|         0|            0|            0|  0.00%|            if start:
  1060|         0|            0|            0|  0.00%|                found = False
  1061|         0|            0|            0|  0.00%|                attachments = []
  1062|         0|            0|            0|  0.00%|                for part in parts:
  1063|         0|            0|            0|  0.00%|                    if part.get('content-id') == start:
  1064|         0|            0|            0|  0.00%|                        found = True
  1065|         0|            0|            0|  0.00%|                    else:
  1066|         0|            0|            0|  0.00%|                        attachments.append(part)
  1067|         0|            0|            0|  0.00%|                if found:
  1068|         0|            0|            0|  0.00%|                    yield from attachments
  1069|         0|            0|            0|  0.00%|                    return
  1070|         0|            0|            0|  0.00%|            parts.pop(0)
  1071|         0|            0|            0|  0.00%|            yield from parts
  1072|         0|            0|            0|  0.00%|            return
  1073|         0|            0|            0|  0.00%|        # Otherwise we more or less invert the remaining logic in get_body.
  1074|         0|            0|            0|  0.00%|        # This only really works in edge cases (ex: non-text related or
  1075|         0|            0|            0|  0.00%|        # alternatives) if the sending agent sets content-disposition.
  1076|         0|            0|            0|  0.00%|        seen = []   # Only skip the first example of each candidate type.
  1077|         0|            0|            0|  0.00%|        for part in parts:
  1078|         0|            0|            0|  0.00%|            maintype, subtype = part.get_content_type().split('/')
  1079|         0|            0|            0|  0.00%|            if ((maintype, subtype) in self._body_types and
  1080|         0|            0|            0|  0.00%|                    not part.is_attachment() and subtype not in seen):
  1081|         0|            0|            0|  0.00%|                seen.append(subtype)
  1082|         0|            0|            0|  0.00%|                continue
  1083|         0|            0|            0|  0.00%|            yield part
  1084|         0|            0|            0|  0.00%|
  1085|         0|            0|            0|  0.00%|    def iter_parts(self):
  1086|         0|            0|            0|  0.00%|        """Return an iterator over all immediate subparts of a multipart.
  1087|         0|            0|            0|  0.00%|
  1088|         0|            0|            0|  0.00%|        Return an empty iterator for a non-multipart.
  1089|         0|            0|            0|  0.00%|        """
  1090|         0|            0|            0|  0.00%|        if self.is_multipart():
  1091|         0|            0|            0|  0.00%|            yield from self.get_payload()
  1092|         0|            0|            0|  0.00%|
  1093|         0|            0|            0|  0.00%|    def get_content(self, *args, content_manager=None, **kw):
  1094|         0|            0|            0|  0.00%|        if content_manager is None:
  1095|         0|            0|            0|  0.00%|            content_manager = self.policy.content_manager
  1096|         0|            0|            0|  0.00%|        return content_manager.get_content(self, *args, **kw)
  1097|         0|            0|            0|  0.00%|
  1098|         1|  3.57628e-06|  3.57628e-06|  0.00%|    def set_content(self, *args, content_manager=None, **kw):
  1099|         1|  3.33786e-06|  3.33786e-06|  0.00%|        if content_manager is None:
  1100|         1|  4.52995e-06|  4.52995e-06|  0.00%|            content_manager = self.policy.content_manager
  1101|         1|  1.14441e-05|  1.14441e-05|  0.00%|        content_manager.set_content(self, *args, **kw)
(call)|         1|   0.00720716|   0.00720716|  2.97%|# /usr/lib/python3.10/email/contentmanager.py:30 set_content
  1102|         0|            0|            0|  0.00%|
  1103|         0|            0|            0|  0.00%|    def _make_multipart(self, subtype, disallowed_subtypes, boundary):
  1104|         0|            0|            0|  0.00%|        if self.get_content_maintype() == 'multipart':
  1105|         0|            0|            0|  0.00%|            existing_subtype = self.get_content_subtype()
  1106|         0|            0|            0|  0.00%|            disallowed_subtypes = disallowed_subtypes + (subtype,)
  1107|         0|            0|            0|  0.00%|            if existing_subtype in disallowed_subtypes:
  1108|         0|            0|            0|  0.00%|                raise ValueError("Cannot convert {} to {}".format(
  1109|         0|            0|            0|  0.00%|                    existing_subtype, subtype))
  1110|         0|            0|            0|  0.00%|        keep_headers = []
  1111|         0|            0|            0|  0.00%|        part_headers = []
  1112|         0|            0|            0|  0.00%|        for name, value in self._headers:
  1113|         0|            0|            0|  0.00%|            if name.lower().startswith('content-'):
  1114|         0|            0|            0|  0.00%|                part_headers.append((name, value))
  1115|         0|            0|            0|  0.00%|            else:
  1116|         0|            0|            0|  0.00%|                keep_headers.append((name, value))
  1117|         0|            0|            0|  0.00%|        if part_headers:
  1118|         0|            0|            0|  0.00%|            # There is existing content, move it to the first subpart.
  1119|         0|            0|            0|  0.00%|            part = type(self)(policy=self.policy)
  1120|         0|            0|            0|  0.00%|            part._headers = part_headers
  1121|         0|            0|            0|  0.00%|            part._payload = self._payload
  1122|         0|            0|            0|  0.00%|            self._payload = [part]
  1123|         0|            0|            0|  0.00%|        else:
  1124|         0|            0|            0|  0.00%|            self._payload = []
  1125|         0|            0|            0|  0.00%|        self._headers = keep_headers
  1126|         0|            0|            0|  0.00%|        self['Content-Type'] = 'multipart/' + subtype
  1127|         0|            0|            0|  0.00%|        if boundary is not None:
  1128|         0|            0|            0|  0.00%|            self.set_param('boundary', boundary)
  1129|         0|            0|            0|  0.00%|
  1130|         0|            0|            0|  0.00%|    def make_related(self, boundary=None):
  1131|         0|            0|            0|  0.00%|        self._make_multipart('related', ('alternative', 'mixed'), boundary)
  1132|         0|            0|            0|  0.00%|
  1133|         0|            0|            0|  0.00%|    def make_alternative(self, boundary=None):
  1134|         0|            0|            0|  0.00%|        self._make_multipart('alternative', ('mixed',), boundary)
  1135|         0|            0|            0|  0.00%|
  1136|         0|            0|            0|  0.00%|    def make_mixed(self, boundary=None):
  1137|         0|            0|            0|  0.00%|        self._make_multipart('mixed', (), boundary)
  1138|         0|            0|            0|  0.00%|
  1139|         0|            0|            0|  0.00%|    def _add_multipart(self, _subtype, *args, _disp=None, **kw):
  1140|         0|            0|            0|  0.00%|        if (self.get_content_maintype() != 'multipart' or
  1141|         0|            0|            0|  0.00%|                self.get_content_subtype() != _subtype):
  1142|         0|            0|            0|  0.00%|            getattr(self, 'make_' + _subtype)()
  1143|         0|            0|            0|  0.00%|        part = type(self)(policy=self.policy)
  1144|         0|            0|            0|  0.00%|        part.set_content(*args, **kw)
  1145|         0|            0|            0|  0.00%|        if _disp and 'content-disposition' not in part:
  1146|         0|            0|            0|  0.00%|            part['Content-Disposition'] = _disp
  1147|         0|            0|            0|  0.00%|        self.attach(part)
  1148|         0|            0|            0|  0.00%|
  1149|         0|            0|            0|  0.00%|    def add_related(self, *args, **kw):
  1150|         0|            0|            0|  0.00%|        self._add_multipart('related', *args, _disp='inline', **kw)
  1151|         0|            0|            0|  0.00%|
  1152|         0|            0|            0|  0.00%|    def add_alternative(self, *args, **kw):
  1153|         0|            0|            0|  0.00%|        self._add_multipart('alternative', *args, **kw)
  1154|         0|            0|            0|  0.00%|
  1155|         0|            0|            0|  0.00%|    def add_attachment(self, *args, **kw):
  1156|         0|            0|            0|  0.00%|        self._add_multipart('mixed', *args, _disp='attachment', **kw)
  1157|         0|            0|            0|  0.00%|
  1158|         0|            0|            0|  0.00%|    def clear(self):
  1159|         0|            0|            0|  0.00%|        self._headers = []
  1160|         0|            0|            0|  0.00%|        self._payload = None
  1161|         0|            0|            0|  0.00%|
  1162|         1|  4.52995e-06|  4.52995e-06|  0.00%|    def clear_content(self):
  1163|         5|  3.79086e-05|  7.58171e-06|  0.02%|        self._headers = [(n, v) for n, v in self._headers
(call)|         1|  3.33786e-05|  3.33786e-05|  0.01%|# /usr/lib/python3.10/email/message.py:1163 <listcomp>
  1164|         1|  6.19888e-06|  6.19888e-06|  0.00%|                         if not n.lower().startswith('content-')]
  1165|         1|  4.05312e-06|  4.05312e-06|  0.00%|        self._payload = None
  1166|         0|            0|            0|  0.00%|
  1167|         0|            0|            0|  0.00%|
  1168|         0|            0|            0|  0.00%|class EmailMessage(MIMEPart):
  1169|         0|            0|            0|  0.00%|
  1170|         1|  3.57628e-06|  3.57628e-06|  0.00%|    def set_content(self, *args, **kw):
  1171|         1|  1.38283e-05|  1.38283e-05|  0.01%|        super().set_content(*args, **kw)
(call)|         1|   0.00723004|   0.00723004|  2.98%|# /usr/lib/python3.10/email/message.py:1098 set_content
  1172|         1|  1.00136e-05|  1.00136e-05|  0.00%|        if 'MIME-Version' not in self:
(call)|         1|  3.00407e-05|  3.00407e-05|  0.01%|# /usr/lib/python3.10/email/message.py:423 __contains__
  1173|         1|  9.29832e-06|  9.29832e-06|  0.00%|            self['MIME-Version'] = '1.0'
(call)|         1|  0.000619173|  0.000619173|  0.25%|# /usr/lib/python3.10/email/message.py:393 __setitem__
File: /usr/lib/python3.10/email/contentmanager.py
File duration: 0.000983953s (0.41%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|import binascii
     2|         0|            0|            0|  0.00%|import email.charset
     3|         0|            0|            0|  0.00%|import email.message
     4|         0|            0|            0|  0.00%|import email.errors
     5|         0|            0|            0|  0.00%|from email import quoprimime
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|class ContentManager:
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|    def __init__(self):
    10|         0|            0|            0|  0.00%|        self.get_handlers = {}
    11|         0|            0|            0|  0.00%|        self.set_handlers = {}
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|    def add_get_handler(self, key, handler):
    14|         0|            0|            0|  0.00%|        self.get_handlers[key] = handler
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|    def get_content(self, msg, *args, **kw):
    17|         0|            0|            0|  0.00%|        content_type = msg.get_content_type()
    18|         0|            0|            0|  0.00%|        if content_type in self.get_handlers:
    19|         0|            0|            0|  0.00%|            return self.get_handlers[content_type](msg, *args, **kw)
    20|         0|            0|            0|  0.00%|        maintype = msg.get_content_maintype()
    21|         0|            0|            0|  0.00%|        if maintype in self.get_handlers:
    22|         0|            0|            0|  0.00%|            return self.get_handlers[maintype](msg, *args, **kw)
    23|         0|            0|            0|  0.00%|        if '' in self.get_handlers:
    24|         0|            0|            0|  0.00%|            return self.get_handlers[''](msg, *args, **kw)
    25|         0|            0|            0|  0.00%|        raise KeyError(content_type)
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|    def add_set_handler(self, typekey, handler):
    28|         0|            0|            0|  0.00%|        self.set_handlers[typekey] = handler
    29|         0|            0|            0|  0.00%|
    30|         1|  4.76837e-06|  4.76837e-06|  0.00%|    def set_content(self, msg, obj, *args, **kw):
    31|         1|  1.43051e-05|  1.43051e-05|  0.01%|        if msg.get_content_maintype() == 'multipart':
(call)|         1|  8.46386e-05|  8.46386e-05|  0.03%|# /usr/lib/python3.10/email/message.py:588 get_content_maintype
    32|         0|            0|            0|  0.00%|            # XXX: is this error a good idea or not?  We can remove it later,
    33|         0|            0|            0|  0.00%|            # but we can't add it later, so do it for now.
    34|         0|            0|            0|  0.00%|            raise TypeError("set_content not valid on multipart")
    35|         1|  1.54972e-05|  1.54972e-05|  0.01%|        handler = self._find_set_handler(msg, obj)
(call)|         1|   0.00059557|   0.00059557|  0.25%|# /usr/lib/python3.10/email/contentmanager.py:39 _find_set_handler
    36|         1|  1.14441e-05|  1.14441e-05|  0.00%|        msg.clear_content()
(call)|         1|  5.26905e-05|  5.26905e-05|  0.02%|# /usr/lib/python3.10/email/message.py:1162 clear_content
    37|         1|   1.3113e-05|   1.3113e-05|  0.01%|        handler(msg, obj, *args, **kw)
(call)|         1|   0.00641513|   0.00641513|  2.64%|# /usr/lib/python3.10/email/contentmanager.py:181 set_text_content
    38|         0|            0|            0|  0.00%|
    39|         1|  0.000566959|  0.000566959|  0.23%|    def _find_set_handler(self, msg, obj):
    40|         1|  1.19209e-05|  1.19209e-05|  0.00%|        full_path_for_error = None
    41|         1|  6.19888e-06|  6.19888e-06|  0.00%|        for typ in type(obj).__mro__:
    42|         1|  5.00679e-06|  5.00679e-06|  0.00%|            if typ in self.set_handlers:
    43|         1|  5.48363e-06|  5.48363e-06|  0.00%|                return self.set_handlers[typ]
    44|         0|            0|            0|  0.00%|            qname = typ.__qualname__
    45|         0|            0|            0|  0.00%|            modname = getattr(typ, '__module__', '')
    46|         0|            0|            0|  0.00%|            full_path = '.'.join((modname, qname)) if modname else qname
    47|         0|            0|            0|  0.00%|            if full_path_for_error is None:
    48|         0|            0|            0|  0.00%|                full_path_for_error = full_path
    49|         0|            0|            0|  0.00%|            if full_path in self.set_handlers:
    50|         0|            0|            0|  0.00%|                return self.set_handlers[full_path]
    51|         0|            0|            0|  0.00%|            if qname in self.set_handlers:
    52|         0|            0|            0|  0.00%|                return self.set_handlers[qname]
    53|         0|            0|            0|  0.00%|            name = typ.__name__
    54|         0|            0|            0|  0.00%|            if name in self.set_handlers:
    55|         0|            0|            0|  0.00%|                return self.set_handlers[name]
    56|         0|            0|            0|  0.00%|        if None in self.set_handlers:
    57|         0|            0|            0|  0.00%|            return self.set_handlers[None]
    58|         0|            0|            0|  0.00%|        raise KeyError(full_path_for_error)
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|raw_data_manager = ContentManager()
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|
    64|         0|            0|            0|  0.00%|def get_text_content(msg, errors='replace'):
    65|         0|            0|            0|  0.00%|    content = msg.get_payload(decode=True)
    66|         0|            0|            0|  0.00%|    charset = msg.get_param('charset', 'ASCII')
    67|         0|            0|            0|  0.00%|    return content.decode(charset, errors=errors)
    68|         0|            0|            0|  0.00%|raw_data_manager.add_get_handler('text', get_text_content)
    69|         0|            0|            0|  0.00%|
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|def get_non_text_content(msg):
    72|         0|            0|            0|  0.00%|    return msg.get_payload(decode=True)
    73|         0|            0|            0|  0.00%|for maintype in 'audio image video application'.split():
    74|         0|            0|            0|  0.00%|    raw_data_manager.add_get_handler(maintype, get_non_text_content)
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|
    77|         0|            0|            0|  0.00%|def get_message_content(msg):
    78|         0|            0|            0|  0.00%|    return msg.get_payload(0)
    79|         0|            0|            0|  0.00%|for subtype in 'rfc822 external-body'.split():
    80|         0|            0|            0|  0.00%|    raw_data_manager.add_get_handler('message/'+subtype, get_message_content)
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|def get_and_fixup_unknown_message_content(msg):
    84|         0|            0|            0|  0.00%|    # If we don't understand a message subtype, we are supposed to treat it as
    85|         0|            0|            0|  0.00%|    # if it were application/octet-stream, per
    86|         0|            0|            0|  0.00%|    # tools.ietf.org/html/rfc2046#section-5.2.4.  Feedparser doesn't do that,
    87|         0|            0|            0|  0.00%|    # so do our best to fix things up.  Note that it is *not* appropriate to
    88|         0|            0|            0|  0.00%|    # model message/partial content as Message objects, so they are handled
    89|         0|            0|            0|  0.00%|    # here as well.  (How to reassemble them is out of scope for this comment :)
    90|         0|            0|            0|  0.00%|    return bytes(msg.get_payload(0))
    91|         0|            0|            0|  0.00%|raw_data_manager.add_get_handler('message',
    92|         0|            0|            0|  0.00%|                                 get_and_fixup_unknown_message_content)
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|
    95|         1|  5.48363e-06|  5.48363e-06|  0.00%|def _prepare_set(msg, maintype, subtype, headers):
    96|         1|  1.57356e-05|  1.57356e-05|  0.01%|    msg['Content-Type'] = '/'.join((maintype, subtype))
(call)|         1|   0.00150681|   0.00150681|  0.62%|# /usr/lib/python3.10/email/message.py:393 __setitem__
    97|         1|  5.00679e-06|  5.00679e-06|  0.00%|    if headers:
    98|         0|            0|            0|  0.00%|        if not hasattr(headers[0], 'name'):
    99|         0|            0|            0|  0.00%|            mp = msg.policy
   100|         0|            0|            0|  0.00%|            headers = [mp.header_factory(*mp.header_source_parse([header]))
   101|         0|            0|            0|  0.00%|                       for header in headers]
   102|         0|            0|            0|  0.00%|        try:
   103|         0|            0|            0|  0.00%|            for header in headers:
   104|         0|            0|            0|  0.00%|                if header.defects:
   105|         0|            0|            0|  0.00%|                    raise header.defects[0]
   106|         0|            0|            0|  0.00%|                msg[header.name] = header
   107|         0|            0|            0|  0.00%|        except email.errors.HeaderDefect as exc:
   108|         0|            0|            0|  0.00%|            raise ValueError("Invalid header: {}".format(
   109|         0|            0|            0|  0.00%|                                header.fold(policy=msg.policy))) from exc
   110|         0|            0|            0|  0.00%|
   111|         0|            0|            0|  0.00%|
   112|         1|  4.76837e-06|  4.76837e-06|  0.00%|def _finalize_set(msg, disposition, filename, cid, params):
   113|         1|  4.29153e-06|  4.29153e-06|  0.00%|    if disposition is None and filename is not None:
   114|         0|            0|            0|  0.00%|        disposition = 'attachment'
   115|         1|  4.05312e-06|  4.05312e-06|  0.00%|    if disposition is not None:
   116|         0|            0|            0|  0.00%|        msg['Content-Disposition'] = disposition
   117|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if filename is not None:
   118|         0|            0|            0|  0.00%|        msg.set_param('filename',
   119|         0|            0|            0|  0.00%|                      filename,
   120|         0|            0|            0|  0.00%|                      header='Content-Disposition',
   121|         0|            0|            0|  0.00%|                      replace=True)
   122|         1|  3.57628e-06|  3.57628e-06|  0.00%|    if cid is not None:
   123|         0|            0|            0|  0.00%|        msg['Content-ID'] = cid
   124|         1|  4.29153e-06|  4.29153e-06|  0.00%|    if params is not None:
   125|         0|            0|            0|  0.00%|        for key, value in params.items():
   126|         0|            0|            0|  0.00%|            msg.set_param(key, value)
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|
   129|         0|            0|            0|  0.00%|# XXX: This is a cleaned-up version of base64mime.body_encode (including a bug
   130|         0|            0|            0|  0.00%|# fix in the calculation of unencoded_bytes_per_line).  It would be nice to
   131|         0|            0|            0|  0.00%|# drop both this and quoprimime.body_encode in favor of enhanced binascii
   132|         0|            0|            0|  0.00%|# routines that accepted a max_line_length parameter.
   133|         0|            0|            0|  0.00%|def _encode_base64(data, max_line_length):
   134|         0|            0|            0|  0.00%|    encoded_lines = []
   135|         0|            0|            0|  0.00%|    unencoded_bytes_per_line = max_line_length // 4 * 3
   136|         0|            0|            0|  0.00%|    for i in range(0, len(data), unencoded_bytes_per_line):
   137|         0|            0|            0|  0.00%|        thisline = data[i:i+unencoded_bytes_per_line]
   138|         0|            0|            0|  0.00%|        encoded_lines.append(binascii.b2a_base64(thisline).decode('ascii'))
   139|         0|            0|            0|  0.00%|    return ''.join(encoded_lines)
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|
   142|         1|  6.67572e-06|  6.67572e-06|  0.00%|def _encode_text(string, charset, cte, policy):
   143|         1|  7.39098e-06|  7.39098e-06|  0.00%|    lines = string.encode(charset).splitlines()
   144|         1|  7.62939e-06|  7.62939e-06|  0.00%|    linesep = policy.linesep.encode('ascii')
   145|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def embedded_body(lines): return linesep.join(lines) + linesep
   146|         3|  1.40667e-05|   4.6889e-06|  0.01%|    def normal_body(lines): return b'\n'.join(lines) + b'\n'
   147|         1|  4.52995e-06|  4.52995e-06|  0.00%|    if cte is None:
   148|         0|            0|            0|  0.00%|        # Use heuristics to decide on the "best" encoding.
   149|        21|   0.00011611|  5.52904e-06|  0.05%|        if max((len(x) for x in lines), default=0) <= policy.max_line_length:
(call)|        10|  5.98431e-05|  5.98431e-06|  0.02%|# /usr/lib/python3.10/email/contentmanager.py:149 <genexpr>
   150|         1|  4.29153e-06|  4.29153e-06|  0.00%|            try:
   151|         1|  1.23978e-05|  1.23978e-05|  0.01%|                return '7bit', normal_body(lines).decode('ascii')
(call)|         1|  9.77516e-06|  9.77516e-06|  0.00%|# /usr/lib/python3.10/email/contentmanager.py:146 normal_body
   152|         0|            0|            0|  0.00%|            except UnicodeDecodeError:
   153|         0|            0|            0|  0.00%|                pass
   154|         0|            0|            0|  0.00%|            if policy.cte_type == '8bit':
   155|         0|            0|            0|  0.00%|                return '8bit', normal_body(lines).decode('ascii', 'surrogateescape')
   156|         0|            0|            0|  0.00%|        sniff = embedded_body(lines[:10])
   157|         0|            0|            0|  0.00%|        sniff_qp = quoprimime.body_encode(sniff.decode('latin-1'),
   158|         0|            0|            0|  0.00%|                                          policy.max_line_length)
   159|         0|            0|            0|  0.00%|        sniff_base64 = binascii.b2a_base64(sniff)
   160|         0|            0|            0|  0.00%|        # This is a little unfair to qp; it includes lineseps, base64 doesn't.
   161|         0|            0|            0|  0.00%|        if len(sniff_qp) > len(sniff_base64):
   162|         0|            0|            0|  0.00%|            cte = 'base64'
   163|         0|            0|            0|  0.00%|        else:
   164|         0|            0|            0|  0.00%|            cte = 'quoted-printable'
   165|         0|            0|            0|  0.00%|            if len(lines) <= 10:
   166|         0|            0|            0|  0.00%|                return cte, sniff_qp
   167|         0|            0|            0|  0.00%|    if cte == '7bit':
   168|         0|            0|            0|  0.00%|        data = normal_body(lines).decode('ascii')
   169|         0|            0|            0|  0.00%|    elif cte == '8bit':
   170|         0|            0|            0|  0.00%|        data = normal_body(lines).decode('ascii', 'surrogateescape')
   171|         0|            0|            0|  0.00%|    elif cte == 'quoted-printable':
   172|         0|            0|            0|  0.00%|        data = quoprimime.body_encode(normal_body(lines).decode('latin-1'),
   173|         0|            0|            0|  0.00%|                                      policy.max_line_length)
   174|         0|            0|            0|  0.00%|    elif cte == 'base64':
   175|         0|            0|            0|  0.00%|        data = _encode_base64(embedded_body(lines), policy.max_line_length)
   176|         0|            0|            0|  0.00%|    else:
   177|         0|            0|            0|  0.00%|        raise ValueError("Unknown content transfer encoding {}".format(cte))
   178|         0|            0|            0|  0.00%|    return cte, data
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|
   181|         1|  5.96046e-06|  5.96046e-06|  0.00%|def set_text_content(msg, string, subtype="plain", charset='utf-8', cte=None,
   182|         0|            0|            0|  0.00%|                     disposition=None, filename=None, cid=None,
   183|         0|            0|            0|  0.00%|                     params=None, headers=None):
   184|         1|  1.43051e-05|  1.43051e-05|  0.01%|    _prepare_set(msg, 'text', subtype, headers)
(call)|         1|   0.00153303|   0.00153303|  0.63%|# /usr/lib/python3.10/email/contentmanager.py:95 _prepare_set
   185|         1|  1.45435e-05|  1.45435e-05|  0.01%|    cte, payload = _encode_text(string, charset, cte, msg.policy)
(call)|         1|  0.000178337|  0.000178337|  0.07%|# /usr/lib/python3.10/email/contentmanager.py:142 _encode_text
   186|         1|  1.21593e-05|  1.21593e-05|  0.01%|    msg.set_payload(payload)
(call)|         1|  1.93119e-05|  1.93119e-05|  0.01%|# /usr/lib/python3.10/email/message.py:303 set_payload
   187|         2|  1.88351e-05|  9.41753e-06|  0.01%|    msg.set_param('charset',
(call)|         1|   0.00390172|   0.00390172|  1.61%|# /usr/lib/python3.10/email/message.py:701 set_param
   188|         1|  6.19888e-06|  6.19888e-06|  0.00%|                  email.charset.ALIASES.get(charset, charset),
   189|         1|  4.29153e-06|  4.29153e-06|  0.00%|                  replace=True)
   190|         1|  1.12057e-05|  1.12057e-05|  0.00%|    msg['Content-Transfer-Encoding'] = cte
(call)|         1|  0.000658035|  0.000658035|  0.27%|# /usr/lib/python3.10/email/message.py:393 __setitem__
   191|         1|  1.23978e-05|  1.23978e-05|  0.01%|    _finalize_set(msg, disposition, filename, cid, params)
(call)|         1|  2.47955e-05|  2.47955e-05|  0.01%|# /usr/lib/python3.10/email/contentmanager.py:112 _finalize_set
   192|         0|            0|            0|  0.00%|raw_data_manager.add_set_handler(str, set_text_content)
   193|         0|            0|            0|  0.00%|
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|def set_message_content(msg, message, subtype="rfc822", cte=None,
   196|         0|            0|            0|  0.00%|                       disposition=None, filename=None, cid=None,
   197|         0|            0|            0|  0.00%|                       params=None, headers=None):
   198|         0|            0|            0|  0.00%|    if subtype == 'partial':
   199|         0|            0|            0|  0.00%|        raise ValueError("message/partial is not supported for Message objects")
   200|         0|            0|            0|  0.00%|    if subtype == 'rfc822':
   201|         0|            0|            0|  0.00%|        if cte not in (None, '7bit', '8bit', 'binary'):
   202|         0|            0|            0|  0.00%|            # http://tools.ietf.org/html/rfc2046#section-5.2.1 mandate.
   203|         0|            0|            0|  0.00%|            raise ValueError(
   204|         0|            0|            0|  0.00%|                "message/rfc822 parts do not support cte={}".format(cte))
   205|         0|            0|            0|  0.00%|        # 8bit will get coerced on serialization if policy.cte_type='7bit'.  We
   206|         0|            0|            0|  0.00%|        # may end up claiming 8bit when it isn't needed, but the only negative
   207|         0|            0|            0|  0.00%|        # result of that should be a gateway that needs to coerce to 7bit
   208|         0|            0|            0|  0.00%|        # having to look through the whole embedded message to discover whether
   209|         0|            0|            0|  0.00%|        # or not it actually has to do anything.
   210|         0|            0|            0|  0.00%|        cte = '8bit' if cte is None else cte
   211|         0|            0|            0|  0.00%|    elif subtype == 'external-body':
   212|         0|            0|            0|  0.00%|        if cte not in (None, '7bit'):
   213|         0|            0|            0|  0.00%|            # http://tools.ietf.org/html/rfc2046#section-5.2.3 mandate.
   214|         0|            0|            0|  0.00%|            raise ValueError(
   215|         0|            0|            0|  0.00%|                "message/external-body parts do not support cte={}".format(cte))
   216|         0|            0|            0|  0.00%|        cte = '7bit'
   217|         0|            0|            0|  0.00%|    elif cte is None:
   218|         0|            0|            0|  0.00%|        # http://tools.ietf.org/html/rfc2046#section-5.2.4 says all future
   219|         0|            0|            0|  0.00%|        # subtypes should be restricted to 7bit, so assume that.
   220|         0|            0|            0|  0.00%|        cte = '7bit'
   221|         0|            0|            0|  0.00%|    _prepare_set(msg, 'message', subtype, headers)
   222|         0|            0|            0|  0.00%|    msg.set_payload([message])
   223|         0|            0|            0|  0.00%|    msg['Content-Transfer-Encoding'] = cte
   224|         0|            0|            0|  0.00%|    _finalize_set(msg, disposition, filename, cid, params)
   225|         0|            0|            0|  0.00%|raw_data_manager.add_set_handler(email.message.Message, set_message_content)
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|def set_bytes_content(msg, data, maintype, subtype, cte='base64',
   229|         0|            0|            0|  0.00%|                     disposition=None, filename=None, cid=None,
   230|         0|            0|            0|  0.00%|                     params=None, headers=None):
   231|         0|            0|            0|  0.00%|    _prepare_set(msg, maintype, subtype, headers)
   232|         0|            0|            0|  0.00%|    if cte == 'base64':
   233|         0|            0|            0|  0.00%|        data = _encode_base64(data, max_line_length=msg.policy.max_line_length)
   234|         0|            0|            0|  0.00%|    elif cte == 'quoted-printable':
   235|         0|            0|            0|  0.00%|        # XXX: quoprimime.body_encode won't encode newline characters in data,
   236|         0|            0|            0|  0.00%|        # so we can't use it.  This means max_line_length is ignored.  Another
   237|         0|            0|            0|  0.00%|        # bug to fix later.  (Note: encoders.quopri is broken on line ends.)
   238|         0|            0|            0|  0.00%|        data = binascii.b2a_qp(data, istext=False, header=False, quotetabs=True)
   239|         0|            0|            0|  0.00%|        data = data.decode('ascii')
   240|         0|            0|            0|  0.00%|    elif cte == '7bit':
   241|         0|            0|            0|  0.00%|        data = data.decode('ascii')
   242|         0|            0|            0|  0.00%|    elif cte in ('8bit', 'binary'):
   243|         0|            0|            0|  0.00%|        data = data.decode('ascii', 'surrogateescape')
   244|         0|            0|            0|  0.00%|    msg.set_payload(data)
   245|         0|            0|            0|  0.00%|    msg['Content-Transfer-Encoding'] = cte
   246|         0|            0|            0|  0.00%|    _finalize_set(msg, disposition, filename, cid, params)
   247|         0|            0|            0|  0.00%|for typ in (bytes, bytearray, memoryview):
   248|         0|            0|            0|  0.00%|    raw_data_manager.add_set_handler(typ, set_bytes_content)
File: /usr/lib/python3.10/calendar.py
File duration: 0.000589132s (0.24%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""Calendar printing functions
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Note when comparing these calendars to the ones printed by cal(1): By
     4|         0|            0|            0|  0.00%|default, these calendars have Monday as the first day of the week, and
     5|         0|            0|            0|  0.00%|Sunday as the last (the European convention). Use setfirstweekday() to
     6|         0|            0|            0|  0.00%|set the first day of the week (0=Monday, 6=Sunday)."""
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|import sys
     9|         0|            0|            0|  0.00%|import datetime
    10|         0|            0|            0|  0.00%|import locale as _locale
    11|         0|            0|            0|  0.00%|from itertools import repeat
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|__all__ = ["IllegalMonthError", "IllegalWeekdayError", "setfirstweekday",
    14|         0|            0|            0|  0.00%|           "firstweekday", "isleap", "leapdays", "weekday", "monthrange",
    15|         0|            0|            0|  0.00%|           "monthcalendar", "prmonth", "month", "prcal", "calendar",
    16|         0|            0|            0|  0.00%|           "timegm", "month_name", "month_abbr", "day_name", "day_abbr",
    17|         0|            0|            0|  0.00%|           "Calendar", "TextCalendar", "HTMLCalendar", "LocaleTextCalendar",
    18|         0|            0|            0|  0.00%|           "LocaleHTMLCalendar", "weekheader"]
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|# Exception raised for bad input (with string parameter for details)
    21|         0|            0|            0|  0.00%|error = ValueError
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|# Exceptions raised for bad input
    24|         0|            0|            0|  0.00%|class IllegalMonthError(ValueError):
    25|         0|            0|            0|  0.00%|    def __init__(self, month):
    26|         0|            0|            0|  0.00%|        self.month = month
    27|         0|            0|            0|  0.00%|    def __str__(self):
    28|         0|            0|            0|  0.00%|        return "bad month number %r; must be 1-12" % self.month
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|class IllegalWeekdayError(ValueError):
    32|         0|            0|            0|  0.00%|    def __init__(self, weekday):
    33|         0|            0|            0|  0.00%|        self.weekday = weekday
    34|         0|            0|            0|  0.00%|    def __str__(self):
    35|         0|            0|            0|  0.00%|        return "bad weekday number %r; must be 0 (Monday) to 6 (Sunday)" % self.weekday
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|# Constants for months referenced later
    39|         0|            0|            0|  0.00%|January = 1
    40|         0|            0|            0|  0.00%|February = 2
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|# Number of days per month (except for February in leap years)
    43|         0|            0|            0|  0.00%|mdays = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|# This module used to have hard-coded lists of day and month names, as
    46|         0|            0|            0|  0.00%|# English strings.  The classes following emulate a read-only version of
    47|         0|            0|            0|  0.00%|# that, but supply localized names.  Note that the values are computed
    48|         0|            0|            0|  0.00%|# fresh on each call, in case the user changes locale between calls.
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|class _localized_month:
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|    _months = [datetime.date(2001, i+1, 1).strftime for i in range(12)]
    53|         4|  1.19209e-05|  2.98023e-06|  0.00%|    _months.insert(0, lambda x: "")
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|    def __init__(self, format):
    56|         0|            0|            0|  0.00%|        self.format = format
    57|         0|            0|            0|  0.00%|
    58|        26|  7.00951e-05|  2.69596e-06|  0.03%|    def __getitem__(self, i):
    59|        26|  8.27312e-05|  3.18197e-06|  0.03%|        funcs = self._months[i]
    60|        26|  8.03471e-05|  3.09027e-06|  0.03%|        if isinstance(i, slice):
    61|         0|            0|            0|  0.00%|            return [f(self.format) for f in funcs]
    62|         0|            0|            0|  0.00%|        else:
    63|        26|  0.000134945|  5.19019e-06|  0.06%|            return funcs(self.format)
(call)|         2|  1.19209e-05|  5.96046e-06|  0.00%|# /usr/lib/python3.10/calendar.py:53 <lambda>
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|    def __len__(self):
    66|         0|            0|            0|  0.00%|        return 13
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|class _localized_day:
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|    # January 1, 2001, was a Monday.
    72|         0|            0|            0|  0.00%|    _days = [datetime.date(2001, 1, i+1).strftime for i in range(7)]
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|    def __init__(self, format):
    75|         0|            0|            0|  0.00%|        self.format = format
    76|         0|            0|            0|  0.00%|
    77|        14|  3.95775e-05|  2.82696e-06|  0.02%|    def __getitem__(self, i):
    78|        14|  4.91142e-05|  3.50816e-06|  0.02%|        funcs = self._days[i]
    79|        14|   4.3869e-05|   3.1335e-06|  0.02%|        if isinstance(i, slice):
    80|         0|            0|            0|  0.00%|            return [f(self.format) for f in funcs]
    81|         0|            0|            0|  0.00%|        else:
    82|        14|  7.65324e-05|   5.4666e-06|  0.03%|            return funcs(self.format)
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|    def __len__(self):
    85|         0|            0|            0|  0.00%|        return 7
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|# Full and abbreviated names of weekdays
    89|         0|            0|            0|  0.00%|day_name = _localized_day('%A')
    90|         0|            0|            0|  0.00%|day_abbr = _localized_day('%a')
    91|         0|            0|            0|  0.00%|
    92|         0|            0|            0|  0.00%|# Full and abbreviated names of months (1-based arrays!!!)
    93|         0|            0|            0|  0.00%|month_name = _localized_month('%B')
    94|         0|            0|            0|  0.00%|month_abbr = _localized_month('%b')
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|# Constants for weekdays
    97|         0|            0|            0|  0.00%|(MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY) = range(7)
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|def isleap(year):
   101|         0|            0|            0|  0.00%|    """Return True for leap years, False for non-leap years."""
   102|         0|            0|            0|  0.00%|    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|def leapdays(y1, y2):
   106|         0|            0|            0|  0.00%|    """Return number of leap years in range [y1, y2).
   107|         0|            0|            0|  0.00%|       Assume y1 <= y2."""
   108|         0|            0|            0|  0.00%|    y1 -= 1
   109|         0|            0|            0|  0.00%|    y2 -= 1
   110|         0|            0|            0|  0.00%|    return (y2//4 - y1//4) - (y2//100 - y1//100) + (y2//400 - y1//400)
   111|         0|            0|            0|  0.00%|
   112|         0|            0|            0|  0.00%|
   113|         0|            0|            0|  0.00%|def weekday(year, month, day):
   114|         0|            0|            0|  0.00%|    """Return weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31)."""
   115|         0|            0|            0|  0.00%|    if not datetime.MINYEAR <= year <= datetime.MAXYEAR:
   116|         0|            0|            0|  0.00%|        year = 2000 + year % 400
   117|         0|            0|            0|  0.00%|    return datetime.date(year, month, day).weekday()
   118|         0|            0|            0|  0.00%|
   119|         0|            0|            0|  0.00%|
   120|         0|            0|            0|  0.00%|def monthrange(year, month):
   121|         0|            0|            0|  0.00%|    """Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
   122|         0|            0|            0|  0.00%|       year, month."""
   123|         0|            0|            0|  0.00%|    if not 1 <= month <= 12:
   124|         0|            0|            0|  0.00%|        raise IllegalMonthError(month)
   125|         0|            0|            0|  0.00%|    day1 = weekday(year, month, 1)
   126|         0|            0|            0|  0.00%|    ndays = mdays[month] + (month == February and isleap(year))
   127|         0|            0|            0|  0.00%|    return day1, ndays
   128|         0|            0|            0|  0.00%|
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|def _monthlen(year, month):
   131|         0|            0|            0|  0.00%|    return mdays[month] + (month == February and isleap(year))
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|def _prevmonth(year, month):
   135|         0|            0|            0|  0.00%|    if month == 1:
   136|         0|            0|            0|  0.00%|        return year-1, 12
   137|         0|            0|            0|  0.00%|    else:
   138|         0|            0|            0|  0.00%|        return year, month-1
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|def _nextmonth(year, month):
   142|         0|            0|            0|  0.00%|    if month == 12:
   143|         0|            0|            0|  0.00%|        return year+1, 1
   144|         0|            0|            0|  0.00%|    else:
   145|         0|            0|            0|  0.00%|        return year, month+1
   146|         0|            0|            0|  0.00%|
   147|         0|            0|            0|  0.00%|
   148|         0|            0|            0|  0.00%|class Calendar(object):
   149|         0|            0|            0|  0.00%|    """
   150|         0|            0|            0|  0.00%|    Base calendar class. This class doesn't do any formatting. It simply
   151|         0|            0|            0|  0.00%|    provides data to subclasses.
   152|         0|            0|            0|  0.00%|    """
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|    def __init__(self, firstweekday=0):
   155|         0|            0|            0|  0.00%|        self.firstweekday = firstweekday # 0 = Monday, 6 = Sunday
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|    def getfirstweekday(self):
   158|         0|            0|            0|  0.00%|        return self._firstweekday % 7
   159|         0|            0|            0|  0.00%|
   160|         0|            0|            0|  0.00%|    def setfirstweekday(self, firstweekday):
   161|         0|            0|            0|  0.00%|        self._firstweekday = firstweekday
   162|         0|            0|            0|  0.00%|
   163|         0|            0|            0|  0.00%|    firstweekday = property(getfirstweekday, setfirstweekday)
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|    def iterweekdays(self):
   166|         0|            0|            0|  0.00%|        """
   167|         0|            0|            0|  0.00%|        Return an iterator for one week of weekday numbers starting with the
   168|         0|            0|            0|  0.00%|        configured first one.
   169|         0|            0|            0|  0.00%|        """
   170|         0|            0|            0|  0.00%|        for i in range(self.firstweekday, self.firstweekday + 7):
   171|         0|            0|            0|  0.00%|            yield i%7
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|    def itermonthdates(self, year, month):
   174|         0|            0|            0|  0.00%|        """
   175|         0|            0|            0|  0.00%|        Return an iterator for one month. The iterator will yield datetime.date
   176|         0|            0|            0|  0.00%|        values and will always iterate through complete weeks, so it will yield
   177|         0|            0|            0|  0.00%|        dates outside the specified month.
   178|         0|            0|            0|  0.00%|        """
   179|         0|            0|            0|  0.00%|        for y, m, d in self.itermonthdays3(year, month):
   180|         0|            0|            0|  0.00%|            yield datetime.date(y, m, d)
   181|         0|            0|            0|  0.00%|
   182|         0|            0|            0|  0.00%|    def itermonthdays(self, year, month):
   183|         0|            0|            0|  0.00%|        """
   184|         0|            0|            0|  0.00%|        Like itermonthdates(), but will yield day numbers. For days outside
   185|         0|            0|            0|  0.00%|        the specified month the day number is 0.
   186|         0|            0|            0|  0.00%|        """
   187|         0|            0|            0|  0.00%|        day1, ndays = monthrange(year, month)
   188|         0|            0|            0|  0.00%|        days_before = (day1 - self.firstweekday) % 7
   189|         0|            0|            0|  0.00%|        yield from repeat(0, days_before)
   190|         0|            0|            0|  0.00%|        yield from range(1, ndays + 1)
   191|         0|            0|            0|  0.00%|        days_after = (self.firstweekday - day1 - ndays) % 7
   192|         0|            0|            0|  0.00%|        yield from repeat(0, days_after)
   193|         0|            0|            0|  0.00%|
   194|         0|            0|            0|  0.00%|    def itermonthdays2(self, year, month):
   195|         0|            0|            0|  0.00%|        """
   196|         0|            0|            0|  0.00%|        Like itermonthdates(), but will yield (day number, weekday number)
   197|         0|            0|            0|  0.00%|        tuples. For days outside the specified month the day number is 0.
   198|         0|            0|            0|  0.00%|        """
   199|         0|            0|            0|  0.00%|        for i, d in enumerate(self.itermonthdays(year, month), self.firstweekday):
   200|         0|            0|            0|  0.00%|            yield d, i % 7
   201|         0|            0|            0|  0.00%|
   202|         0|            0|            0|  0.00%|    def itermonthdays3(self, year, month):
   203|         0|            0|            0|  0.00%|        """
   204|         0|            0|            0|  0.00%|        Like itermonthdates(), but will yield (year, month, day) tuples.  Can be
   205|         0|            0|            0|  0.00%|        used for dates outside of datetime.date range.
   206|         0|            0|            0|  0.00%|        """
   207|         0|            0|            0|  0.00%|        day1, ndays = monthrange(year, month)
   208|         0|            0|            0|  0.00%|        days_before = (day1 - self.firstweekday) % 7
   209|         0|            0|            0|  0.00%|        days_after = (self.firstweekday - day1 - ndays) % 7
   210|         0|            0|            0|  0.00%|        y, m = _prevmonth(year, month)
   211|         0|            0|            0|  0.00%|        end = _monthlen(y, m) + 1
   212|         0|            0|            0|  0.00%|        for d in range(end-days_before, end):
   213|         0|            0|            0|  0.00%|            yield y, m, d
   214|         0|            0|            0|  0.00%|        for d in range(1, ndays + 1):
   215|         0|            0|            0|  0.00%|            yield year, month, d
   216|         0|            0|            0|  0.00%|        y, m = _nextmonth(year, month)
   217|         0|            0|            0|  0.00%|        for d in range(1, days_after + 1):
   218|         0|            0|            0|  0.00%|            yield y, m, d
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|    def itermonthdays4(self, year, month):
   221|         0|            0|            0|  0.00%|        """
   222|         0|            0|            0|  0.00%|        Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
   223|         0|            0|            0|  0.00%|        Can be used for dates outside of datetime.date range.
   224|         0|            0|            0|  0.00%|        """
   225|         0|            0|            0|  0.00%|        for i, (y, m, d) in enumerate(self.itermonthdays3(year, month)):
   226|         0|            0|            0|  0.00%|            yield y, m, d, (self.firstweekday + i) % 7
   227|         0|            0|            0|  0.00%|
   228|         0|            0|            0|  0.00%|    def monthdatescalendar(self, year, month):
   229|         0|            0|            0|  0.00%|        """
   230|         0|            0|            0|  0.00%|        Return a matrix (list of lists) representing a month's calendar.
   231|         0|            0|            0|  0.00%|        Each row represents a week; week entries are datetime.date values.
   232|         0|            0|            0|  0.00%|        """
   233|         0|            0|            0|  0.00%|        dates = list(self.itermonthdates(year, month))
   234|         0|            0|            0|  0.00%|        return [ dates[i:i+7] for i in range(0, len(dates), 7) ]
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|    def monthdays2calendar(self, year, month):
   237|         0|            0|            0|  0.00%|        """
   238|         0|            0|            0|  0.00%|        Return a matrix representing a month's calendar.
   239|         0|            0|            0|  0.00%|        Each row represents a week; week entries are
   240|         0|            0|            0|  0.00%|        (day number, weekday number) tuples. Day numbers outside this month
   241|         0|            0|            0|  0.00%|        are zero.
   242|         0|            0|            0|  0.00%|        """
   243|         0|            0|            0|  0.00%|        days = list(self.itermonthdays2(year, month))
   244|         0|            0|            0|  0.00%|        return [ days[i:i+7] for i in range(0, len(days), 7) ]
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    def monthdayscalendar(self, year, month):
   247|         0|            0|            0|  0.00%|        """
   248|         0|            0|            0|  0.00%|        Return a matrix representing a month's calendar.
   249|         0|            0|            0|  0.00%|        Each row represents a week; days outside this month are zero.
   250|         0|            0|            0|  0.00%|        """
   251|         0|            0|            0|  0.00%|        days = list(self.itermonthdays(year, month))
   252|         0|            0|            0|  0.00%|        return [ days[i:i+7] for i in range(0, len(days), 7) ]
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|    def yeardatescalendar(self, year, width=3):
   255|         0|            0|            0|  0.00%|        """
   256|         0|            0|            0|  0.00%|        Return the data for the specified year ready for formatting. The return
   257|         0|            0|            0|  0.00%|        value is a list of month rows. Each month row contains up to width months.
   258|         0|            0|            0|  0.00%|        Each month contains between 4 and 6 weeks and each week contains 1-7
   259|         0|            0|            0|  0.00%|        days. Days are datetime.date objects.
   260|         0|            0|            0|  0.00%|        """
   261|         0|            0|            0|  0.00%|        months = [
   262|         0|            0|            0|  0.00%|            self.monthdatescalendar(year, i)
   263|         0|            0|            0|  0.00%|            for i in range(January, January+12)
   264|         0|            0|            0|  0.00%|        ]
   265|         0|            0|            0|  0.00%|        return [months[i:i+width] for i in range(0, len(months), width) ]
   266|         0|            0|            0|  0.00%|
   267|         0|            0|            0|  0.00%|    def yeardays2calendar(self, year, width=3):
   268|         0|            0|            0|  0.00%|        """
   269|         0|            0|            0|  0.00%|        Return the data for the specified year ready for formatting (similar to
   270|         0|            0|            0|  0.00%|        yeardatescalendar()). Entries in the week lists are
   271|         0|            0|            0|  0.00%|        (day number, weekday number) tuples. Day numbers outside this month are
   272|         0|            0|            0|  0.00%|        zero.
   273|         0|            0|            0|  0.00%|        """
   274|         0|            0|            0|  0.00%|        months = [
   275|         0|            0|            0|  0.00%|            self.monthdays2calendar(year, i)
   276|         0|            0|            0|  0.00%|            for i in range(January, January+12)
   277|         0|            0|            0|  0.00%|        ]
   278|         0|            0|            0|  0.00%|        return [months[i:i+width] for i in range(0, len(months), width) ]
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|    def yeardayscalendar(self, year, width=3):
   281|         0|            0|            0|  0.00%|        """
   282|         0|            0|            0|  0.00%|        Return the data for the specified year ready for formatting (similar to
   283|         0|            0|            0|  0.00%|        yeardatescalendar()). Entries in the week lists are day numbers.
   284|         0|            0|            0|  0.00%|        Day numbers outside this month are zero.
   285|         0|            0|            0|  0.00%|        """
   286|         0|            0|            0|  0.00%|        months = [
   287|         0|            0|            0|  0.00%|            self.monthdayscalendar(year, i)
   288|         0|            0|            0|  0.00%|            for i in range(January, January+12)
   289|         0|            0|            0|  0.00%|        ]
   290|         0|            0|            0|  0.00%|        return [months[i:i+width] for i in range(0, len(months), width) ]
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|class TextCalendar(Calendar):
   294|         0|            0|            0|  0.00%|    """
   295|         0|            0|            0|  0.00%|    Subclass of Calendar that outputs a calendar as a simple plain text
   296|         0|            0|            0|  0.00%|    similar to the UNIX program cal.
   297|         0|            0|            0|  0.00%|    """
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|    def prweek(self, theweek, width):
   300|         0|            0|            0|  0.00%|        """
   301|         0|            0|            0|  0.00%|        Print a single week (no newline).
   302|         0|            0|            0|  0.00%|        """
   303|         0|            0|            0|  0.00%|        print(self.formatweek(theweek, width), end='')
   304|         0|            0|            0|  0.00%|
   305|         0|            0|            0|  0.00%|    def formatday(self, day, weekday, width):
   306|         0|            0|            0|  0.00%|        """
   307|         0|            0|            0|  0.00%|        Returns a formatted day.
   308|         0|            0|            0|  0.00%|        """
   309|         0|            0|            0|  0.00%|        if day == 0:
   310|         0|            0|            0|  0.00%|            s = ''
   311|         0|            0|            0|  0.00%|        else:
   312|         0|            0|            0|  0.00%|            s = '%2i' % day             # right-align single-digit days
   313|         0|            0|            0|  0.00%|        return s.center(width)
   314|         0|            0|            0|  0.00%|
   315|         0|            0|            0|  0.00%|    def formatweek(self, theweek, width):
   316|         0|            0|            0|  0.00%|        """
   317|         0|            0|            0|  0.00%|        Returns a single week in a string (no newline).
   318|         0|            0|            0|  0.00%|        """
   319|         0|            0|            0|  0.00%|        return ' '.join(self.formatday(d, wd, width) for (d, wd) in theweek)
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|    def formatweekday(self, day, width):
   322|         0|            0|            0|  0.00%|        """
   323|         0|            0|            0|  0.00%|        Returns a formatted week day name.
   324|         0|            0|            0|  0.00%|        """
   325|         0|            0|            0|  0.00%|        if width >= 9:
   326|         0|            0|            0|  0.00%|            names = day_name
   327|         0|            0|            0|  0.00%|        else:
   328|         0|            0|            0|  0.00%|            names = day_abbr
   329|         0|            0|            0|  0.00%|        return names[day][:width].center(width)
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|    def formatweekheader(self, width):
   332|         0|            0|            0|  0.00%|        """
   333|         0|            0|            0|  0.00%|        Return a header for a week.
   334|         0|            0|            0|  0.00%|        """
   335|         0|            0|            0|  0.00%|        return ' '.join(self.formatweekday(i, width) for i in self.iterweekdays())
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|    def formatmonthname(self, theyear, themonth, width, withyear=True):
   338|         0|            0|            0|  0.00%|        """
   339|         0|            0|            0|  0.00%|        Return a formatted month name.
   340|         0|            0|            0|  0.00%|        """
   341|         0|            0|            0|  0.00%|        s = month_name[themonth]
   342|         0|            0|            0|  0.00%|        if withyear:
   343|         0|            0|            0|  0.00%|            s = "%s %r" % (s, theyear)
   344|         0|            0|            0|  0.00%|        return s.center(width)
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|    def prmonth(self, theyear, themonth, w=0, l=0):
   347|         0|            0|            0|  0.00%|        """
   348|         0|            0|            0|  0.00%|        Print a month's calendar.
   349|         0|            0|            0|  0.00%|        """
   350|         0|            0|            0|  0.00%|        print(self.formatmonth(theyear, themonth, w, l), end='')
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|    def formatmonth(self, theyear, themonth, w=0, l=0):
   353|         0|            0|            0|  0.00%|        """
   354|         0|            0|            0|  0.00%|        Return a month's calendar string (multi-line).
   355|         0|            0|            0|  0.00%|        """
   356|         0|            0|            0|  0.00%|        w = max(2, w)
   357|         0|            0|            0|  0.00%|        l = max(1, l)
   358|         0|            0|            0|  0.00%|        s = self.formatmonthname(theyear, themonth, 7 * (w + 1) - 1)
   359|         0|            0|            0|  0.00%|        s = s.rstrip()
   360|         0|            0|            0|  0.00%|        s += '\n' * l
   361|         0|            0|            0|  0.00%|        s += self.formatweekheader(w).rstrip()
   362|         0|            0|            0|  0.00%|        s += '\n' * l
   363|         0|            0|            0|  0.00%|        for week in self.monthdays2calendar(theyear, themonth):
   364|         0|            0|            0|  0.00%|            s += self.formatweek(week, w).rstrip()
   365|         0|            0|            0|  0.00%|            s += '\n' * l
   366|         0|            0|            0|  0.00%|        return s
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|    def formatyear(self, theyear, w=2, l=1, c=6, m=3):
   369|         0|            0|            0|  0.00%|        """
   370|         0|            0|            0|  0.00%|        Returns a year's calendar as a multi-line string.
   371|         0|            0|            0|  0.00%|        """
   372|         0|            0|            0|  0.00%|        w = max(2, w)
   373|         0|            0|            0|  0.00%|        l = max(1, l)
   374|         0|            0|            0|  0.00%|        c = max(2, c)
   375|         0|            0|            0|  0.00%|        colwidth = (w + 1) * 7 - 1
   376|         0|            0|            0|  0.00%|        v = []
   377|         0|            0|            0|  0.00%|        a = v.append
   378|         0|            0|            0|  0.00%|        a(repr(theyear).center(colwidth*m+c*(m-1)).rstrip())
   379|         0|            0|            0|  0.00%|        a('\n'*l)
   380|         0|            0|            0|  0.00%|        header = self.formatweekheader(w)
   381|         0|            0|            0|  0.00%|        for (i, row) in enumerate(self.yeardays2calendar(theyear, m)):
   382|         0|            0|            0|  0.00%|            # months in this row
   383|         0|            0|            0|  0.00%|            months = range(m*i+1, min(m*(i+1)+1, 13))
   384|         0|            0|            0|  0.00%|            a('\n'*l)
   385|         0|            0|            0|  0.00%|            names = (self.formatmonthname(theyear, k, colwidth, False)
   386|         0|            0|            0|  0.00%|                     for k in months)
   387|         0|            0|            0|  0.00%|            a(formatstring(names, colwidth, c).rstrip())
   388|         0|            0|            0|  0.00%|            a('\n'*l)
   389|         0|            0|            0|  0.00%|            headers = (header for k in months)
   390|         0|            0|            0|  0.00%|            a(formatstring(headers, colwidth, c).rstrip())
   391|         0|            0|            0|  0.00%|            a('\n'*l)
   392|         0|            0|            0|  0.00%|            # max number of weeks for this row
   393|         0|            0|            0|  0.00%|            height = max(len(cal) for cal in row)
   394|         0|            0|            0|  0.00%|            for j in range(height):
   395|         0|            0|            0|  0.00%|                weeks = []
   396|         0|            0|            0|  0.00%|                for cal in row:
   397|         0|            0|            0|  0.00%|                    if j >= len(cal):
   398|         0|            0|            0|  0.00%|                        weeks.append('')
   399|         0|            0|            0|  0.00%|                    else:
   400|         0|            0|            0|  0.00%|                        weeks.append(self.formatweek(cal[j], w))
   401|         0|            0|            0|  0.00%|                a(formatstring(weeks, colwidth, c).rstrip())
   402|         0|            0|            0|  0.00%|                a('\n' * l)
   403|         0|            0|            0|  0.00%|        return ''.join(v)
   404|         0|            0|            0|  0.00%|
   405|         0|            0|            0|  0.00%|    def pryear(self, theyear, w=0, l=0, c=6, m=3):
   406|         0|            0|            0|  0.00%|        """Print a year's calendar."""
   407|         0|            0|            0|  0.00%|        print(self.formatyear(theyear, w, l, c, m), end='')
   408|         0|            0|            0|  0.00%|
   409|         0|            0|            0|  0.00%|
   410|         0|            0|            0|  0.00%|class HTMLCalendar(Calendar):
   411|         0|            0|            0|  0.00%|    """
   412|         0|            0|            0|  0.00%|    This calendar returns complete HTML pages.
   413|         0|            0|            0|  0.00%|    """
   414|         0|            0|            0|  0.00%|
   415|         0|            0|            0|  0.00%|    # CSS classes for the day <td>s
   416|         0|            0|            0|  0.00%|    cssclasses = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
   417|         0|            0|            0|  0.00%|
   418|         0|            0|            0|  0.00%|    # CSS classes for the day <th>s
   419|         0|            0|            0|  0.00%|    cssclasses_weekday_head = cssclasses
   420|         0|            0|            0|  0.00%|
   421|         0|            0|            0|  0.00%|    # CSS class for the days before and after current month
   422|         0|            0|            0|  0.00%|    cssclass_noday = "noday"
   423|         0|            0|            0|  0.00%|
   424|         0|            0|            0|  0.00%|    # CSS class for the month's head
   425|         0|            0|            0|  0.00%|    cssclass_month_head = "month"
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    # CSS class for the month
   428|         0|            0|            0|  0.00%|    cssclass_month = "month"
   429|         0|            0|            0|  0.00%|
   430|         0|            0|            0|  0.00%|    # CSS class for the year's table head
   431|         0|            0|            0|  0.00%|    cssclass_year_head = "year"
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|    # CSS class for the whole year table
   434|         0|            0|            0|  0.00%|    cssclass_year = "year"
   435|         0|            0|            0|  0.00%|
   436|         0|            0|            0|  0.00%|    def formatday(self, day, weekday):
   437|         0|            0|            0|  0.00%|        """
   438|         0|            0|            0|  0.00%|        Return a day as a table cell.
   439|         0|            0|            0|  0.00%|        """
   440|         0|            0|            0|  0.00%|        if day == 0:
   441|         0|            0|            0|  0.00%|            # day outside month
   442|         0|            0|            0|  0.00%|            return '<td class="%s">&nbsp;</td>' % self.cssclass_noday
   443|         0|            0|            0|  0.00%|        else:
   444|         0|            0|            0|  0.00%|            return '<td class="%s">%d</td>' % (self.cssclasses[weekday], day)
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|    def formatweek(self, theweek):
   447|         0|            0|            0|  0.00%|        """
   448|         0|            0|            0|  0.00%|        Return a complete week as a table row.
   449|         0|            0|            0|  0.00%|        """
   450|         0|            0|            0|  0.00%|        s = ''.join(self.formatday(d, wd) for (d, wd) in theweek)
   451|         0|            0|            0|  0.00%|        return '<tr>%s</tr>' % s
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|    def formatweekday(self, day):
   454|         0|            0|            0|  0.00%|        """
   455|         0|            0|            0|  0.00%|        Return a weekday name as a table header.
   456|         0|            0|            0|  0.00%|        """
   457|         0|            0|            0|  0.00%|        return '<th class="%s">%s</th>' % (
   458|         0|            0|            0|  0.00%|            self.cssclasses_weekday_head[day], day_abbr[day])
   459|         0|            0|            0|  0.00%|
   460|         0|            0|            0|  0.00%|    def formatweekheader(self):
   461|         0|            0|            0|  0.00%|        """
   462|         0|            0|            0|  0.00%|        Return a header for a week as a table row.
   463|         0|            0|            0|  0.00%|        """
   464|         0|            0|            0|  0.00%|        s = ''.join(self.formatweekday(i) for i in self.iterweekdays())
   465|         0|            0|            0|  0.00%|        return '<tr>%s</tr>' % s
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|    def formatmonthname(self, theyear, themonth, withyear=True):
   468|         0|            0|            0|  0.00%|        """
   469|         0|            0|            0|  0.00%|        Return a month name as a table row.
   470|         0|            0|            0|  0.00%|        """
   471|         0|            0|            0|  0.00%|        if withyear:
   472|         0|            0|            0|  0.00%|            s = '%s %s' % (month_name[themonth], theyear)
   473|         0|            0|            0|  0.00%|        else:
   474|         0|            0|            0|  0.00%|            s = '%s' % month_name[themonth]
   475|         0|            0|            0|  0.00%|        return '<tr><th colspan="7" class="%s">%s</th></tr>' % (
   476|         0|            0|            0|  0.00%|            self.cssclass_month_head, s)
   477|         0|            0|            0|  0.00%|
   478|         0|            0|            0|  0.00%|    def formatmonth(self, theyear, themonth, withyear=True):
   479|         0|            0|            0|  0.00%|        """
   480|         0|            0|            0|  0.00%|        Return a formatted month as a table.
   481|         0|            0|            0|  0.00%|        """
   482|         0|            0|            0|  0.00%|        v = []
   483|         0|            0|            0|  0.00%|        a = v.append
   484|         0|            0|            0|  0.00%|        a('<table border="0" cellpadding="0" cellspacing="0" class="%s">' % (
   485|         0|            0|            0|  0.00%|            self.cssclass_month))
   486|         0|            0|            0|  0.00%|        a('\n')
   487|         0|            0|            0|  0.00%|        a(self.formatmonthname(theyear, themonth, withyear=withyear))
   488|         0|            0|            0|  0.00%|        a('\n')
   489|         0|            0|            0|  0.00%|        a(self.formatweekheader())
   490|         0|            0|            0|  0.00%|        a('\n')
   491|         0|            0|            0|  0.00%|        for week in self.monthdays2calendar(theyear, themonth):
   492|         0|            0|            0|  0.00%|            a(self.formatweek(week))
   493|         0|            0|            0|  0.00%|            a('\n')
   494|         0|            0|            0|  0.00%|        a('</table>')
   495|         0|            0|            0|  0.00%|        a('\n')
   496|         0|            0|            0|  0.00%|        return ''.join(v)
   497|         0|            0|            0|  0.00%|
   498|         0|            0|            0|  0.00%|    def formatyear(self, theyear, width=3):
   499|         0|            0|            0|  0.00%|        """
   500|         0|            0|            0|  0.00%|        Return a formatted year as a table of tables.
   501|         0|            0|            0|  0.00%|        """
   502|         0|            0|            0|  0.00%|        v = []
   503|         0|            0|            0|  0.00%|        a = v.append
   504|         0|            0|            0|  0.00%|        width = max(width, 1)
   505|         0|            0|            0|  0.00%|        a('<table border="0" cellpadding="0" cellspacing="0" class="%s">' %
   506|         0|            0|            0|  0.00%|          self.cssclass_year)
   507|         0|            0|            0|  0.00%|        a('\n')
   508|         0|            0|            0|  0.00%|        a('<tr><th colspan="%d" class="%s">%s</th></tr>' % (
   509|         0|            0|            0|  0.00%|            width, self.cssclass_year_head, theyear))
   510|         0|            0|            0|  0.00%|        for i in range(January, January+12, width):
   511|         0|            0|            0|  0.00%|            # months in this row
   512|         0|            0|            0|  0.00%|            months = range(i, min(i+width, 13))
   513|         0|            0|            0|  0.00%|            a('<tr>')
   514|         0|            0|            0|  0.00%|            for m in months:
   515|         0|            0|            0|  0.00%|                a('<td>')
   516|         0|            0|            0|  0.00%|                a(self.formatmonth(theyear, m, withyear=False))
   517|         0|            0|            0|  0.00%|                a('</td>')
   518|         0|            0|            0|  0.00%|            a('</tr>')
   519|         0|            0|            0|  0.00%|        a('</table>')
   520|         0|            0|            0|  0.00%|        return ''.join(v)
   521|         0|            0|            0|  0.00%|
   522|         0|            0|            0|  0.00%|    def formatyearpage(self, theyear, width=3, css='calendar.css', encoding=None):
   523|         0|            0|            0|  0.00%|        """
   524|         0|            0|            0|  0.00%|        Return a formatted year as a complete HTML page.
   525|         0|            0|            0|  0.00%|        """
   526|         0|            0|            0|  0.00%|        if encoding is None:
   527|         0|            0|            0|  0.00%|            encoding = sys.getdefaultencoding()
   528|         0|            0|            0|  0.00%|        v = []
   529|         0|            0|            0|  0.00%|        a = v.append
   530|         0|            0|            0|  0.00%|        a('<?xml version="1.0" encoding="%s"?>\n' % encoding)
   531|         0|            0|            0|  0.00%|        a('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n')
   532|         0|            0|            0|  0.00%|        a('<html>\n')
   533|         0|            0|            0|  0.00%|        a('<head>\n')
   534|         0|            0|            0|  0.00%|        a('<meta http-equiv="Content-Type" content="text/html; charset=%s" />\n' % encoding)
   535|         0|            0|            0|  0.00%|        if css is not None:
   536|         0|            0|            0|  0.00%|            a('<link rel="stylesheet" type="text/css" href="%s" />\n' % css)
   537|         0|            0|            0|  0.00%|        a('<title>Calendar for %d</title>\n' % theyear)
   538|         0|            0|            0|  0.00%|        a('</head>\n')
   539|         0|            0|            0|  0.00%|        a('<body>\n')
   540|         0|            0|            0|  0.00%|        a(self.formatyear(theyear, width))
   541|         0|            0|            0|  0.00%|        a('</body>\n')
   542|         0|            0|            0|  0.00%|        a('</html>\n')
   543|         0|            0|            0|  0.00%|        return ''.join(v).encode(encoding, "xmlcharrefreplace")
   544|         0|            0|            0|  0.00%|
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|class different_locale:
   547|         0|            0|            0|  0.00%|    def __init__(self, locale):
   548|         0|            0|            0|  0.00%|        self.locale = locale
   549|         0|            0|            0|  0.00%|
   550|         0|            0|            0|  0.00%|    def __enter__(self):
   551|         0|            0|            0|  0.00%|        self.oldlocale = _locale.getlocale(_locale.LC_TIME)
   552|         0|            0|            0|  0.00%|        _locale.setlocale(_locale.LC_TIME, self.locale)
   553|         0|            0|            0|  0.00%|
   554|         0|            0|            0|  0.00%|    def __exit__(self, *args):
   555|         0|            0|            0|  0.00%|        _locale.setlocale(_locale.LC_TIME, self.oldlocale)
   556|         0|            0|            0|  0.00%|
   557|         0|            0|            0|  0.00%|
   558|         0|            0|            0|  0.00%|class LocaleTextCalendar(TextCalendar):
   559|         0|            0|            0|  0.00%|    """
   560|         0|            0|            0|  0.00%|    This class can be passed a locale name in the constructor and will return
   561|         0|            0|            0|  0.00%|    month and weekday names in the specified locale. If this locale includes
   562|         0|            0|            0|  0.00%|    an encoding all strings containing month and weekday names will be returned
   563|         0|            0|            0|  0.00%|    as unicode.
   564|         0|            0|            0|  0.00%|    """
   565|         0|            0|            0|  0.00%|
   566|         0|            0|            0|  0.00%|    def __init__(self, firstweekday=0, locale=None):
   567|         0|            0|            0|  0.00%|        TextCalendar.__init__(self, firstweekday)
   568|         0|            0|            0|  0.00%|        if locale is None:
   569|         0|            0|            0|  0.00%|            locale = _locale.getdefaultlocale()
   570|         0|            0|            0|  0.00%|        self.locale = locale
   571|         0|            0|            0|  0.00%|
   572|         0|            0|            0|  0.00%|    def formatweekday(self, day, width):
   573|         0|            0|            0|  0.00%|        with different_locale(self.locale):
   574|         0|            0|            0|  0.00%|            return super().formatweekday(day, width)
   575|         0|            0|            0|  0.00%|
   576|         0|            0|            0|  0.00%|    def formatmonthname(self, theyear, themonth, width, withyear=True):
   577|         0|            0|            0|  0.00%|        with different_locale(self.locale):
   578|         0|            0|            0|  0.00%|            return super().formatmonthname(theyear, themonth, width, withyear)
   579|         0|            0|            0|  0.00%|
   580|         0|            0|            0|  0.00%|
   581|         0|            0|            0|  0.00%|class LocaleHTMLCalendar(HTMLCalendar):
   582|         0|            0|            0|  0.00%|    """
   583|         0|            0|            0|  0.00%|    This class can be passed a locale name in the constructor and will return
   584|         0|            0|            0|  0.00%|    month and weekday names in the specified locale. If this locale includes
   585|         0|            0|            0|  0.00%|    an encoding all strings containing month and weekday names will be returned
   586|         0|            0|            0|  0.00%|    as unicode.
   587|         0|            0|            0|  0.00%|    """
   588|         0|            0|            0|  0.00%|    def __init__(self, firstweekday=0, locale=None):
   589|         0|            0|            0|  0.00%|        HTMLCalendar.__init__(self, firstweekday)
   590|         0|            0|            0|  0.00%|        if locale is None:
   591|         0|            0|            0|  0.00%|            locale = _locale.getdefaultlocale()
   592|         0|            0|            0|  0.00%|        self.locale = locale
   593|         0|            0|            0|  0.00%|
   594|         0|            0|            0|  0.00%|    def formatweekday(self, day):
   595|         0|            0|            0|  0.00%|        with different_locale(self.locale):
   596|         0|            0|            0|  0.00%|            return super().formatweekday(day)
   597|         0|            0|            0|  0.00%|
   598|         0|            0|            0|  0.00%|    def formatmonthname(self, theyear, themonth, withyear=True):
   599|         0|            0|            0|  0.00%|        with different_locale(self.locale):
   600|         0|            0|            0|  0.00%|            return super().formatmonthname(theyear, themonth, withyear)
   601|         0|            0|            0|  0.00%|
   602|         0|            0|            0|  0.00%|# Support for old module level interface
   603|         0|            0|            0|  0.00%|c = TextCalendar()
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|firstweekday = c.getfirstweekday
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|def setfirstweekday(firstweekday):
   608|         0|            0|            0|  0.00%|    if not MONDAY <= firstweekday <= SUNDAY:
   609|         0|            0|            0|  0.00%|        raise IllegalWeekdayError(firstweekday)
   610|         0|            0|            0|  0.00%|    c.firstweekday = firstweekday
   611|         0|            0|            0|  0.00%|
   612|         0|            0|            0|  0.00%|monthcalendar = c.monthdayscalendar
   613|         0|            0|            0|  0.00%|prweek = c.prweek
   614|         0|            0|            0|  0.00%|week = c.formatweek
   615|         0|            0|            0|  0.00%|weekheader = c.formatweekheader
   616|         0|            0|            0|  0.00%|prmonth = c.prmonth
   617|         0|            0|            0|  0.00%|month = c.formatmonth
   618|         0|            0|            0|  0.00%|calendar = c.formatyear
   619|         0|            0|            0|  0.00%|prcal = c.pryear
   620|         0|            0|            0|  0.00%|
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|# Spacing of month columns for multi-column year calendar
   623|         0|            0|            0|  0.00%|_colwidth = 7*3 - 1         # Amount printed by prweek()
   624|         0|            0|            0|  0.00%|_spacing = 6                # Number of spaces between columns
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|
   627|         0|            0|            0|  0.00%|def format(cols, colwidth=_colwidth, spacing=_spacing):
   628|         0|            0|            0|  0.00%|    """Prints multi-column formatting for year calendars"""
   629|         0|            0|            0|  0.00%|    print(formatstring(cols, colwidth, spacing))
   630|         0|            0|            0|  0.00%|
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|def formatstring(cols, colwidth=_colwidth, spacing=_spacing):
   633|         0|            0|            0|  0.00%|    """Returns a string formatted from n strings, centered within n columns."""
   634|         0|            0|            0|  0.00%|    spacing *= ' '
   635|         0|            0|            0|  0.00%|    return spacing.join(c.center(colwidth) for c in cols)
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|
   638|         0|            0|            0|  0.00%|EPOCH = 1970
   639|         0|            0|            0|  0.00%|_EPOCH_ORD = datetime.date(EPOCH, 1, 1).toordinal()
   640|         0|            0|            0|  0.00%|
   641|         0|            0|            0|  0.00%|
   642|         0|            0|            0|  0.00%|def timegm(tuple):
   643|         0|            0|            0|  0.00%|    """Unrelated but handy function to calculate Unix timestamp from GMT."""
   644|         0|            0|            0|  0.00%|    year, month, day, hour, minute, second = tuple[:6]
   645|         0|            0|            0|  0.00%|    days = datetime.date(year, month, 1).toordinal() - _EPOCH_ORD + day - 1
   646|         0|            0|            0|  0.00%|    hours = days*24 + hour
   647|         0|            0|            0|  0.00%|    minutes = hours*60 + minute
   648|         0|            0|            0|  0.00%|    seconds = minutes*60 + second
   649|         0|            0|            0|  0.00%|    return seconds
   650|         0|            0|            0|  0.00%|
   651|         0|            0|            0|  0.00%|
   652|         0|            0|            0|  0.00%|def main(args):
   653|         0|            0|            0|  0.00%|    import argparse
   654|         0|            0|            0|  0.00%|    parser = argparse.ArgumentParser()
   655|         0|            0|            0|  0.00%|    textgroup = parser.add_argument_group('text only arguments')
   656|         0|            0|            0|  0.00%|    htmlgroup = parser.add_argument_group('html only arguments')
   657|         0|            0|            0|  0.00%|    textgroup.add_argument(
   658|         0|            0|            0|  0.00%|        "-w", "--width",
   659|         0|            0|            0|  0.00%|        type=int, default=2,
   660|         0|            0|            0|  0.00%|        help="width of date column (default 2)"
   661|         0|            0|            0|  0.00%|    )
   662|         0|            0|            0|  0.00%|    textgroup.add_argument(
   663|         0|            0|            0|  0.00%|        "-l", "--lines",
   664|         0|            0|            0|  0.00%|        type=int, default=1,
   665|         0|            0|            0|  0.00%|        help="number of lines for each week (default 1)"
   666|         0|            0|            0|  0.00%|    )
   667|         0|            0|            0|  0.00%|    textgroup.add_argument(
   668|         0|            0|            0|  0.00%|        "-s", "--spacing",
   669|         0|            0|            0|  0.00%|        type=int, default=6,
   670|         0|            0|            0|  0.00%|        help="spacing between months (default 6)"
   671|         0|            0|            0|  0.00%|    )
   672|         0|            0|            0|  0.00%|    textgroup.add_argument(
   673|         0|            0|            0|  0.00%|        "-m", "--months",
   674|         0|            0|            0|  0.00%|        type=int, default=3,
   675|         0|            0|            0|  0.00%|        help="months per row (default 3)"
   676|         0|            0|            0|  0.00%|    )
   677|         0|            0|            0|  0.00%|    htmlgroup.add_argument(
   678|         0|            0|            0|  0.00%|        "-c", "--css",
   679|         0|            0|            0|  0.00%|        default="calendar.css",
   680|         0|            0|            0|  0.00%|        help="CSS to use for page"
   681|         0|            0|            0|  0.00%|    )
   682|         0|            0|            0|  0.00%|    parser.add_argument(
   683|         0|            0|            0|  0.00%|        "-L", "--locale",
   684|         0|            0|            0|  0.00%|        default=None,
   685|         0|            0|            0|  0.00%|        help="locale to be used from month and weekday names"
   686|         0|            0|            0|  0.00%|    )
   687|         0|            0|            0|  0.00%|    parser.add_argument(
   688|         0|            0|            0|  0.00%|        "-e", "--encoding",
   689|         0|            0|            0|  0.00%|        default=None,
   690|         0|            0|            0|  0.00%|        help="encoding to use for output"
   691|         0|            0|            0|  0.00%|    )
   692|         0|            0|            0|  0.00%|    parser.add_argument(
   693|         0|            0|            0|  0.00%|        "-t", "--type",
   694|         0|            0|            0|  0.00%|        default="text",
   695|         0|            0|            0|  0.00%|        choices=("text", "html"),
   696|         0|            0|            0|  0.00%|        help="output type (text or html)"
   697|         0|            0|            0|  0.00%|    )
   698|         0|            0|            0|  0.00%|    parser.add_argument(
   699|         0|            0|            0|  0.00%|        "year",
   700|         0|            0|            0|  0.00%|        nargs='?', type=int,
   701|         0|            0|            0|  0.00%|        help="year number (1-9999)"
   702|         0|            0|            0|  0.00%|    )
   703|         0|            0|            0|  0.00%|    parser.add_argument(
   704|         0|            0|            0|  0.00%|        "month",
   705|         0|            0|            0|  0.00%|        nargs='?', type=int,
   706|         0|            0|            0|  0.00%|        help="month number (1-12, text only)"
   707|         0|            0|            0|  0.00%|    )
   708|         0|            0|            0|  0.00%|
   709|         0|            0|            0|  0.00%|    options = parser.parse_args(args[1:])
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|    if options.locale and not options.encoding:
   712|         0|            0|            0|  0.00%|        parser.error("if --locale is specified --encoding is required")
   713|         0|            0|            0|  0.00%|        sys.exit(1)
   714|         0|            0|            0|  0.00%|
   715|         0|            0|            0|  0.00%|    locale = options.locale, options.encoding
   716|         0|            0|            0|  0.00%|
   717|         0|            0|            0|  0.00%|    if options.type == "html":
   718|         0|            0|            0|  0.00%|        if options.locale:
   719|         0|            0|            0|  0.00%|            cal = LocaleHTMLCalendar(locale=locale)
   720|         0|            0|            0|  0.00%|        else:
   721|         0|            0|            0|  0.00%|            cal = HTMLCalendar()
   722|         0|            0|            0|  0.00%|        encoding = options.encoding
   723|         0|            0|            0|  0.00%|        if encoding is None:
   724|         0|            0|            0|  0.00%|            encoding = sys.getdefaultencoding()
   725|         0|            0|            0|  0.00%|        optdict = dict(encoding=encoding, css=options.css)
   726|         0|            0|            0|  0.00%|        write = sys.stdout.buffer.write
   727|         0|            0|            0|  0.00%|        if options.year is None:
   728|         0|            0|            0|  0.00%|            write(cal.formatyearpage(datetime.date.today().year, **optdict))
   729|         0|            0|            0|  0.00%|        elif options.month is None:
   730|         0|            0|            0|  0.00%|            write(cal.formatyearpage(options.year, **optdict))
   731|         0|            0|            0|  0.00%|        else:
   732|         0|            0|            0|  0.00%|            parser.error("incorrect number of arguments")
   733|         0|            0|            0|  0.00%|            sys.exit(1)
   734|         0|            0|            0|  0.00%|    else:
   735|         0|            0|            0|  0.00%|        if options.locale:
   736|         0|            0|            0|  0.00%|            cal = LocaleTextCalendar(locale=locale)
   737|         0|            0|            0|  0.00%|        else:
   738|         0|            0|            0|  0.00%|            cal = TextCalendar()
   739|         0|            0|            0|  0.00%|        optdict = dict(w=options.width, l=options.lines)
   740|         0|            0|            0|  0.00%|        if options.month is None:
   741|         0|            0|            0|  0.00%|            optdict["c"] = options.spacing
   742|         0|            0|            0|  0.00%|            optdict["m"] = options.months
   743|         0|            0|            0|  0.00%|        if options.year is None:
   744|         0|            0|            0|  0.00%|            result = cal.formatyear(datetime.date.today().year, **optdict)
   745|         0|            0|            0|  0.00%|        elif options.month is None:
   746|         0|            0|            0|  0.00%|            result = cal.formatyear(options.year, **optdict)
   747|         0|            0|            0|  0.00%|        else:
   748|         0|            0|            0|  0.00%|            result = cal.formatmonth(options.year, options.month, **optdict)
   749|         0|            0|            0|  0.00%|        write = sys.stdout.write
   750|         0|            0|            0|  0.00%|        if options.encoding:
   751|         0|            0|            0|  0.00%|            result = result.encode(options.encoding)
   752|         0|            0|            0|  0.00%|            write = sys.stdout.buffer.write
   753|         0|            0|            0|  0.00%|        write(result)
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|
   756|         0|            0|            0|  0.00%|if __name__ == "__main__":
   757|         0|            0|            0|  0.00%|    main(sys.argv)
File: /usr/lib/python3.10/email/generator.py
File duration: 0.000574112s (0.24%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         1|  1.45435e-05|  1.45435e-05|  0.01%|# Copyright (C) 2001-2010 Python Software Foundation
     2|         0|            0|            0|  0.00%|# Author: Barry Warsaw
     3|         0|            0|            0|  0.00%|# Contact: email-sig@python.org
     4|         0|            0|            0|  0.00%|
     5|         1|   1.3113e-05|   1.3113e-05|  0.01%|"""Classes to generate plain text from a message object tree."""
     6|         0|            0|            0|  0.00%|
     7|         1|  7.86781e-06|  7.86781e-06|  0.00%|__all__ = ['Generator', 'DecodedGenerator', 'BytesGenerator']
     8|         0|            0|            0|  0.00%|
     9|         1|  8.58307e-06|  8.58307e-06|  0.00%|import re
    10|         1|  8.58307e-06|  8.58307e-06|  0.00%|import sys
    11|         1|  8.10623e-06|  8.10623e-06|  0.00%|import time
    12|         1|  8.58307e-06|  8.58307e-06|  0.00%|import random
    13|         0|            0|            0|  0.00%|
    14|         1|  2.45571e-05|  2.45571e-05|  0.01%|from copy import deepcopy
(call)|         1|   0.00810194|   0.00810194|  3.34%|# <frozen importlib._bootstrap>:1022 _find_and_load
    15|         1|  2.45571e-05|  2.45571e-05|  0.01%|from io import StringIO, BytesIO
(call)|         1|  2.19345e-05|  2.19345e-05|  0.01%|# /usr/lib/python3.10/io.py:60 __getattr__
    16|         1|   1.0252e-05|   1.0252e-05|  0.00%|from email.utils import _has_surrogates
    17|         0|            0|            0|  0.00%|
    18|         1|  7.39098e-06|  7.39098e-06|  0.00%|UNDERSCORE = '_'
    19|         1|  1.52588e-05|  1.52588e-05|  0.01%|NL = '\n'  # XXX: no longer used by the code below.
    20|         0|            0|            0|  0.00%|
    21|         1|  2.26498e-05|  2.26498e-05|  0.01%|NLCRE = re.compile(r'\r\n|\r|\n')
(call)|         1|   0.00403357|   0.00403357|  1.66%|# /usr/lib/python3.10/re.py:249 compile
    22|         1|  2.19345e-05|  2.19345e-05|  0.01%|fcre = re.compile(r'^From ', re.MULTILINE)
(call)|         1|   0.00229359|   0.00229359|  0.94%|# /usr/lib/python3.10/re.py:249 compile
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         3|  5.53131e-05|  1.84377e-05|  0.02%|class Generator:
(call)|         1|   0.00015831|   0.00015831|  0.07%|# /usr/lib/python3.10/email/generator.py:26 Generator
    27|         1|  3.57628e-06|  3.57628e-06|  0.00%|    """Generates output from a Message object tree.
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|    This basic generator writes the message to the given file object as plain
    30|         0|            0|            0|  0.00%|    text.
    31|         0|            0|            0|  0.00%|    """
    32|         0|            0|            0|  0.00%|    #
    33|         0|            0|            0|  0.00%|    # Public interface
    34|         0|            0|            0|  0.00%|    #
    35|         0|            0|            0|  0.00%|
    36|         2|  1.23978e-05|  6.19888e-06|  0.01%|    def __init__(self, outfp, mangle_from_=None, maxheaderlen=None, *,
    37|         1|  5.48363e-06|  5.48363e-06|  0.00%|                 policy=None):
    38|         0|            0|            0|  0.00%|        """Create the generator for message flattening.
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|        outfp is the output file-like object for writing the message to.  It
    41|         0|            0|            0|  0.00%|        must have a write() method.
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|        Optional mangle_from_ is a flag that, when True (the default if policy
    44|         0|            0|            0|  0.00%|        is not set), escapes From_ lines in the body of the message by putting
    45|         0|            0|            0|  0.00%|        a `>' in front of them.
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|        Optional maxheaderlen specifies the longest length for a non-continued
    48|         0|            0|            0|  0.00%|        header.  When a header line is longer (in characters, with tabs
    49|         0|            0|            0|  0.00%|        expanded to 8 spaces) than maxheaderlen, the header will split as
    50|         0|            0|            0|  0.00%|        defined in the Header class.  Set maxheaderlen to zero to disable
    51|         0|            0|            0|  0.00%|        header wrapping.  The default is 78, as recommended (but not required)
    52|         0|            0|            0|  0.00%|        by RFC 2822.
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|        The policy keyword specifies a policy object that controls a number of
    55|         0|            0|            0|  0.00%|        aspects of the generator's operation.  If no policy is specified,
    56|         0|            0|            0|  0.00%|        the policy associated with the Message object passed to the
    57|         0|            0|            0|  0.00%|        flatten method is used.
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|        """
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|        if mangle_from_ is None:
    62|         0|            0|            0|  0.00%|            mangle_from_ = True if policy is None else policy.mangle_from_
    63|         0|            0|            0|  0.00%|        self._fp = outfp
    64|         0|            0|            0|  0.00%|        self._mangle_from_ = mangle_from_
    65|         0|            0|            0|  0.00%|        self.maxheaderlen = maxheaderlen
    66|         0|            0|            0|  0.00%|        self.policy = policy
    67|         0|            0|            0|  0.00%|
    68|         1|  6.19888e-06|  6.19888e-06|  0.00%|    def write(self, s):
    69|         0|            0|            0|  0.00%|        # Just delegate to the file object
    70|         0|            0|            0|  0.00%|        self._fp.write(s)
    71|         0|            0|            0|  0.00%|
    72|         1|  6.19888e-06|  6.19888e-06|  0.00%|    def flatten(self, msg, unixfrom=False, linesep=None):
    73|         0|            0|            0|  0.00%|        r"""Print the message object tree rooted at msg to the output file
    74|         0|            0|            0|  0.00%|        specified when the Generator instance was created.
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|        unixfrom is a flag that forces the printing of a Unix From_ delimiter
    77|         0|            0|            0|  0.00%|        before the first object in the message tree.  If the original message
    78|         0|            0|            0|  0.00%|        has no From_ delimiter, a `standard' one is crafted.  By default, this
    79|         0|            0|            0|  0.00%|        is False to inhibit the printing of any From_ delimiter.
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|        Note that for subobjects, no From_ line is printed.
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|        linesep specifies the characters used to indicate a new line in
    84|         0|            0|            0|  0.00%|        the output.  The default value is determined by the policy specified
    85|         0|            0|            0|  0.00%|        when the Generator instance was created or, if none was specified,
    86|         0|            0|            0|  0.00%|        from the policy associated with the msg.
    87|         0|            0|            0|  0.00%|
    88|         0|            0|            0|  0.00%|        """
    89|         0|            0|            0|  0.00%|        # We use the _XXX constants for operating on data that comes directly
    90|         0|            0|            0|  0.00%|        # from the msg, and _encoded_XXX constants for operating on data that
    91|         0|            0|            0|  0.00%|        # has already been converted (to bytes in the BytesGenerator) and
    92|         0|            0|            0|  0.00%|        # inserted into a temporary buffer.
    93|         0|            0|            0|  0.00%|        policy = msg.policy if self.policy is None else self.policy
    94|         0|            0|            0|  0.00%|        if linesep is not None:
    95|         0|            0|            0|  0.00%|            policy = policy.clone(linesep=linesep)
    96|         0|            0|            0|  0.00%|        if self.maxheaderlen is not None:
    97|         0|            0|            0|  0.00%|            policy = policy.clone(max_line_length=self.maxheaderlen)
    98|         0|            0|            0|  0.00%|        self._NL = policy.linesep
    99|         0|            0|            0|  0.00%|        self._encoded_NL = self._encode(self._NL)
   100|         0|            0|            0|  0.00%|        self._EMPTY = ''
   101|         0|            0|            0|  0.00%|        self._encoded_EMPTY = self._encode(self._EMPTY)
   102|         0|            0|            0|  0.00%|        # Because we use clone (below) when we recursively process message
   103|         0|            0|            0|  0.00%|        # subparts, and because clone uses the computed policy (not None),
   104|         0|            0|            0|  0.00%|        # submessages will automatically get set to the computed policy when
   105|         0|            0|            0|  0.00%|        # they are processed by this code.
   106|         0|            0|            0|  0.00%|        old_gen_policy = self.policy
   107|         0|            0|            0|  0.00%|        old_msg_policy = msg.policy
   108|         0|            0|            0|  0.00%|        try:
   109|         0|            0|            0|  0.00%|            self.policy = policy
   110|         0|            0|            0|  0.00%|            msg.policy = policy
   111|         0|            0|            0|  0.00%|            if unixfrom:
   112|         0|            0|            0|  0.00%|                ufrom = msg.get_unixfrom()
   113|         0|            0|            0|  0.00%|                if not ufrom:
   114|         0|            0|            0|  0.00%|                    ufrom = 'From nobody ' + time.ctime(time.time())
   115|         0|            0|            0|  0.00%|                self.write(ufrom + self._NL)
   116|         0|            0|            0|  0.00%|            self._write(msg)
   117|         0|            0|            0|  0.00%|        finally:
   118|         0|            0|            0|  0.00%|            self.policy = old_gen_policy
   119|         0|            0|            0|  0.00%|            msg.policy = old_msg_policy
   120|         0|            0|            0|  0.00%|
   121|         1|  6.19888e-06|  6.19888e-06|  0.00%|    def clone(self, fp):
   122|         0|            0|            0|  0.00%|        """Clone this generator with the exact same options."""
   123|         0|            0|            0|  0.00%|        return self.__class__(fp,
   124|         0|            0|            0|  0.00%|                              self._mangle_from_,
   125|         0|            0|            0|  0.00%|                              None, # Use policy setting, which we've adjusted
   126|         0|            0|            0|  0.00%|                              policy=self.policy)
   127|         0|            0|            0|  0.00%|
   128|         0|            0|            0|  0.00%|    #
   129|         0|            0|            0|  0.00%|    # Protected interface - undocumented ;/
   130|         0|            0|            0|  0.00%|    #
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|    # Note that we use 'self.write' when what we are writing is coming from
   133|         0|            0|            0|  0.00%|    # the source, and self._fp.write when what we are writing is coming from a
   134|         0|            0|            0|  0.00%|    # buffer (because the Bytes subclass has already had a chance to transform
   135|         0|            0|            0|  0.00%|    # the data in its write method in that case).  This is an entirely
   136|         0|            0|            0|  0.00%|    # pragmatic split determined by experiment; we could be more general by
   137|         0|            0|            0|  0.00%|    # always using write and having the Bytes subclass write method detect when
   138|         0|            0|            0|  0.00%|    # it has already transformed the input; but, since this whole thing is a
   139|         0|            0|            0|  0.00%|    # hack anyway this seems good enough.
   140|         0|            0|            0|  0.00%|
   141|         1|  5.24521e-06|  5.24521e-06|  0.00%|    def _new_buffer(self):
   142|         0|            0|            0|  0.00%|        # BytesGenerator overrides this to return BytesIO.
   143|         0|            0|            0|  0.00%|        return StringIO()
   144|         0|            0|            0|  0.00%|
   145|         1|  6.19888e-06|  6.19888e-06|  0.00%|    def _encode(self, s):
   146|         0|            0|            0|  0.00%|        # BytesGenerator overrides this to encode strings to bytes.
   147|         0|            0|            0|  0.00%|        return s
   148|         0|            0|            0|  0.00%|
   149|         1|  5.72205e-06|  5.72205e-06|  0.00%|    def _write_lines(self, lines):
   150|         0|            0|            0|  0.00%|        # We have to transform the line endings.
   151|         0|            0|            0|  0.00%|        if not lines:
   152|         0|            0|            0|  0.00%|            return
   153|         0|            0|            0|  0.00%|        lines = NLCRE.split(lines)
   154|         0|            0|            0|  0.00%|        for line in lines[:-1]:
   155|         0|            0|            0|  0.00%|            self.write(line)
   156|         0|            0|            0|  0.00%|            self.write(self._NL)
   157|         0|            0|            0|  0.00%|        if lines[-1]:
   158|         0|            0|            0|  0.00%|            self.write(lines[-1])
   159|         0|            0|            0|  0.00%|        # XXX logic tells me this else should be needed, but the tests fail
   160|         0|            0|            0|  0.00%|        # with it and pass without it.  (NLCRE.split ends with a blank element
   161|         0|            0|            0|  0.00%|        # if and only if there was a trailing newline.)
   162|         0|            0|            0|  0.00%|        #else:
   163|         0|            0|            0|  0.00%|        #    self.write(self._NL)
   164|         0|            0|            0|  0.00%|
   165|         1|  7.15256e-06|  7.15256e-06|  0.00%|    def _write(self, msg):
   166|         0|            0|            0|  0.00%|        # We can't write the headers yet because of the following scenario:
   167|         0|            0|            0|  0.00%|        # say a multipart message includes the boundary string somewhere in
   168|         0|            0|            0|  0.00%|        # its body.  We'd have to calculate the new boundary /before/ we write
   169|         0|            0|            0|  0.00%|        # the headers so that we can write the correct Content-Type:
   170|         0|            0|            0|  0.00%|        # parameter.
   171|         0|            0|            0|  0.00%|        #
   172|         0|            0|            0|  0.00%|        # The way we do this, so as to make the _handle_*() methods simpler,
   173|         0|            0|            0|  0.00%|        # is to cache any subpart writes into a buffer.  The we write the
   174|         0|            0|            0|  0.00%|        # headers and the buffer contents.  That way, subpart handlers can
   175|         0|            0|            0|  0.00%|        # Do The Right Thing, and can still modify the Content-Type: header if
   176|         0|            0|            0|  0.00%|        # necessary.
   177|         0|            0|            0|  0.00%|        oldfp = self._fp
   178|         0|            0|            0|  0.00%|        try:
   179|         0|            0|            0|  0.00%|            self._munge_cte = None
   180|         0|            0|            0|  0.00%|            self._fp = sfp = self._new_buffer()
   181|         0|            0|            0|  0.00%|            self._dispatch(msg)
   182|         0|            0|            0|  0.00%|        finally:
   183|         0|            0|            0|  0.00%|            self._fp = oldfp
   184|         0|            0|            0|  0.00%|            munge_cte = self._munge_cte
   185|         0|            0|            0|  0.00%|            del self._munge_cte
   186|         0|            0|            0|  0.00%|        # If we munged the cte, copy the message again and re-fix the CTE.
   187|         0|            0|            0|  0.00%|        if munge_cte:
   188|         0|            0|            0|  0.00%|            msg = deepcopy(msg)
   189|         0|            0|            0|  0.00%|            # Preserve the header order if the CTE header already exists.
   190|         0|            0|            0|  0.00%|            if msg.get('content-transfer-encoding') is None:
   191|         0|            0|            0|  0.00%|                msg['Content-Transfer-Encoding'] = munge_cte[0]
   192|         0|            0|            0|  0.00%|            else:
   193|         0|            0|            0|  0.00%|                msg.replace_header('content-transfer-encoding', munge_cte[0])
   194|         0|            0|            0|  0.00%|            msg.replace_header('content-type', munge_cte[1])
   195|         0|            0|            0|  0.00%|        # Write the headers.  First we see if the message object wants to
   196|         0|            0|            0|  0.00%|        # handle that itself.  If not, we'll do it generically.
   197|         0|            0|            0|  0.00%|        meth = getattr(msg, '_write_headers', None)
   198|         0|            0|            0|  0.00%|        if meth is None:
   199|         0|            0|            0|  0.00%|            self._write_headers(msg)
   200|         0|            0|            0|  0.00%|        else:
   201|         0|            0|            0|  0.00%|            meth(self)
   202|         0|            0|            0|  0.00%|        self._fp.write(sfp.getvalue())
   203|         0|            0|            0|  0.00%|
   204|         1|  6.19888e-06|  6.19888e-06|  0.00%|    def _dispatch(self, msg):
   205|         0|            0|            0|  0.00%|        # Get the Content-Type: for the message, then try to dispatch to
   206|         0|            0|            0|  0.00%|        # self._handle_<maintype>_<subtype>().  If there's no handler for the
   207|         0|            0|            0|  0.00%|        # full MIME type, then dispatch to self._handle_<maintype>().  If
   208|         0|            0|            0|  0.00%|        # that's missing too, then dispatch to self._writeBody().
   209|         0|            0|            0|  0.00%|        main = msg.get_content_maintype()
   210|         0|            0|            0|  0.00%|        sub = msg.get_content_subtype()
   211|         0|            0|            0|  0.00%|        specific = UNDERSCORE.join((main, sub)).replace('-', '_')
   212|         0|            0|            0|  0.00%|        meth = getattr(self, '_handle_' + specific, None)
   213|         0|            0|            0|  0.00%|        if meth is None:
   214|         0|            0|            0|  0.00%|            generic = main.replace('-', '_')
   215|         0|            0|            0|  0.00%|            meth = getattr(self, '_handle_' + generic, None)
   216|         0|            0|            0|  0.00%|            if meth is None:
   217|         0|            0|            0|  0.00%|                meth = self._writeBody
   218|         0|            0|            0|  0.00%|        meth(msg)
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|    #
   221|         0|            0|            0|  0.00%|    # Default handlers
   222|         0|            0|            0|  0.00%|    #
   223|         0|            0|            0|  0.00%|
   224|         1|  5.72205e-06|  5.72205e-06|  0.00%|    def _write_headers(self, msg):
   225|         0|            0|            0|  0.00%|        for h, v in msg.raw_items():
   226|         0|            0|            0|  0.00%|            self.write(self.policy.fold(h, v))
   227|         0|            0|            0|  0.00%|        # A blank line always separates headers from body
   228|         0|            0|            0|  0.00%|        self.write(self._NL)
   229|         0|            0|            0|  0.00%|
   230|         0|            0|            0|  0.00%|    #
   231|         0|            0|            0|  0.00%|    # Handlers for writing types and subtypes
   232|         0|            0|            0|  0.00%|    #
   233|         0|            0|            0|  0.00%|
   234|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def _handle_text(self, msg):
   235|         0|            0|            0|  0.00%|        payload = msg.get_payload()
   236|         0|            0|            0|  0.00%|        if payload is None:
   237|         0|            0|            0|  0.00%|            return
   238|         0|            0|            0|  0.00%|        if not isinstance(payload, str):
   239|         0|            0|            0|  0.00%|            raise TypeError('string payload expected: %s' % type(payload))
   240|         0|            0|            0|  0.00%|        if _has_surrogates(msg._payload):
   241|         0|            0|            0|  0.00%|            charset = msg.get_param('charset')
   242|         0|            0|            0|  0.00%|            if charset is not None:
   243|         0|            0|            0|  0.00%|                # XXX: This copy stuff is an ugly hack to avoid modifying the
   244|         0|            0|            0|  0.00%|                # existing message.
   245|         0|            0|            0|  0.00%|                msg = deepcopy(msg)
   246|         0|            0|            0|  0.00%|                del msg['content-transfer-encoding']
   247|         0|            0|            0|  0.00%|                msg.set_payload(payload, charset)
   248|         0|            0|            0|  0.00%|                payload = msg.get_payload()
   249|         0|            0|            0|  0.00%|                self._munge_cte = (msg['content-transfer-encoding'],
   250|         0|            0|            0|  0.00%|                                   msg['content-type'])
   251|         0|            0|            0|  0.00%|        if self._mangle_from_:
   252|         0|            0|            0|  0.00%|            payload = fcre.sub('>From ', payload)
   253|         0|            0|            0|  0.00%|        self._write_lines(payload)
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|    # Default body handler
   256|         1|  6.19888e-06|  6.19888e-06|  0.00%|    _writeBody = _handle_text
   257|         0|            0|            0|  0.00%|
   258|         1|   6.4373e-06|   6.4373e-06|  0.00%|    def _handle_multipart(self, msg):
   259|         0|            0|            0|  0.00%|        # The trick here is to write out each part separately, merge them all
   260|         0|            0|            0|  0.00%|        # together, and then make sure that the boundary we've chosen isn't
   261|         0|            0|            0|  0.00%|        # present in the payload.
   262|         0|            0|            0|  0.00%|        msgtexts = []
   263|         0|            0|            0|  0.00%|        subparts = msg.get_payload()
   264|         0|            0|            0|  0.00%|        if subparts is None:
   265|         0|            0|            0|  0.00%|            subparts = []
   266|         0|            0|            0|  0.00%|        elif isinstance(subparts, str):
   267|         0|            0|            0|  0.00%|            # e.g. a non-strict parse of a message with no starting boundary.
   268|         0|            0|            0|  0.00%|            self.write(subparts)
   269|         0|            0|            0|  0.00%|            return
   270|         0|            0|            0|  0.00%|        elif not isinstance(subparts, list):
   271|         0|            0|            0|  0.00%|            # Scalar payload
   272|         0|            0|            0|  0.00%|            subparts = [subparts]
   273|         0|            0|            0|  0.00%|        for part in subparts:
   274|         0|            0|            0|  0.00%|            s = self._new_buffer()
   275|         0|            0|            0|  0.00%|            g = self.clone(s)
   276|         0|            0|            0|  0.00%|            g.flatten(part, unixfrom=False, linesep=self._NL)
   277|         0|            0|            0|  0.00%|            msgtexts.append(s.getvalue())
   278|         0|            0|            0|  0.00%|        # BAW: What about boundaries that are wrapped in double-quotes?
   279|         0|            0|            0|  0.00%|        boundary = msg.get_boundary()
   280|         0|            0|            0|  0.00%|        if not boundary:
   281|         0|            0|            0|  0.00%|            # Create a boundary that doesn't appear in any of the
   282|         0|            0|            0|  0.00%|            # message texts.
   283|         0|            0|            0|  0.00%|            alltext = self._encoded_NL.join(msgtexts)
   284|         0|            0|            0|  0.00%|            boundary = self._make_boundary(alltext)
   285|         0|            0|            0|  0.00%|            msg.set_boundary(boundary)
   286|         0|            0|            0|  0.00%|        # If there's a preamble, write it out, with a trailing CRLF
   287|         0|            0|            0|  0.00%|        if msg.preamble is not None:
   288|         0|            0|            0|  0.00%|            if self._mangle_from_:
   289|         0|            0|            0|  0.00%|                preamble = fcre.sub('>From ', msg.preamble)
   290|         0|            0|            0|  0.00%|            else:
   291|         0|            0|            0|  0.00%|                preamble = msg.preamble
   292|         0|            0|            0|  0.00%|            self._write_lines(preamble)
   293|         0|            0|            0|  0.00%|            self.write(self._NL)
   294|         0|            0|            0|  0.00%|        # dash-boundary transport-padding CRLF
   295|         0|            0|            0|  0.00%|        self.write('--' + boundary + self._NL)
   296|         0|            0|            0|  0.00%|        # body-part
   297|         0|            0|            0|  0.00%|        if msgtexts:
   298|         0|            0|            0|  0.00%|            self._fp.write(msgtexts.pop(0))
   299|         0|            0|            0|  0.00%|        # *encapsulation
   300|         0|            0|            0|  0.00%|        # --> delimiter transport-padding
   301|         0|            0|            0|  0.00%|        # --> CRLF body-part
   302|         0|            0|            0|  0.00%|        for body_part in msgtexts:
   303|         0|            0|            0|  0.00%|            # delimiter transport-padding CRLF
   304|         0|            0|            0|  0.00%|            self.write(self._NL + '--' + boundary + self._NL)
   305|         0|            0|            0|  0.00%|            # body-part
   306|         0|            0|            0|  0.00%|            self._fp.write(body_part)
   307|         0|            0|            0|  0.00%|        # close-delimiter transport-padding
   308|         0|            0|            0|  0.00%|        self.write(self._NL + '--' + boundary + '--' + self._NL)
   309|         0|            0|            0|  0.00%|        if msg.epilogue is not None:
   310|         0|            0|            0|  0.00%|            if self._mangle_from_:
   311|         0|            0|            0|  0.00%|                epilogue = fcre.sub('>From ', msg.epilogue)
   312|         0|            0|            0|  0.00%|            else:
   313|         0|            0|            0|  0.00%|                epilogue = msg.epilogue
   314|         0|            0|            0|  0.00%|            self._write_lines(epilogue)
   315|         0|            0|            0|  0.00%|
   316|         1|  5.72205e-06|  5.72205e-06|  0.00%|    def _handle_multipart_signed(self, msg):
   317|         0|            0|            0|  0.00%|        # The contents of signed parts has to stay unmodified in order to keep
   318|         0|            0|            0|  0.00%|        # the signature intact per RFC1847 2.1, so we disable header wrapping.
   319|         0|            0|            0|  0.00%|        # RDM: This isn't enough to completely preserve the part, but it helps.
   320|         0|            0|            0|  0.00%|        p = self.policy
   321|         0|            0|            0|  0.00%|        self.policy = p.clone(max_line_length=0)
   322|         0|            0|            0|  0.00%|        try:
   323|         0|            0|            0|  0.00%|            self._handle_multipart(msg)
   324|         0|            0|            0|  0.00%|        finally:
   325|         0|            0|            0|  0.00%|            self.policy = p
   326|         0|            0|            0|  0.00%|
   327|         1|  5.96046e-06|  5.96046e-06|  0.00%|    def _handle_message_delivery_status(self, msg):
   328|         0|            0|            0|  0.00%|        # We can't just write the headers directly to self's file object
   329|         0|            0|            0|  0.00%|        # because this will leave an extra newline between the last header
   330|         0|            0|            0|  0.00%|        # block and the boundary.  Sigh.
   331|         0|            0|            0|  0.00%|        blocks = []
   332|         0|            0|            0|  0.00%|        for part in msg.get_payload():
   333|         0|            0|            0|  0.00%|            s = self._new_buffer()
   334|         0|            0|            0|  0.00%|            g = self.clone(s)
   335|         0|            0|            0|  0.00%|            g.flatten(part, unixfrom=False, linesep=self._NL)
   336|         0|            0|            0|  0.00%|            text = s.getvalue()
   337|         0|            0|            0|  0.00%|            lines = text.split(self._encoded_NL)
   338|         0|            0|            0|  0.00%|            # Strip off the unnecessary trailing empty line
   339|         0|            0|            0|  0.00%|            if lines and lines[-1] == self._encoded_EMPTY:
   340|         0|            0|            0|  0.00%|                blocks.append(self._encoded_NL.join(lines[:-1]))
   341|         0|            0|            0|  0.00%|            else:
   342|         0|            0|            0|  0.00%|                blocks.append(text)
   343|         0|            0|            0|  0.00%|        # Now join all the blocks with an empty line.  This has the lovely
   344|         0|            0|            0|  0.00%|        # effect of separating each block with an empty line, but not adding
   345|         0|            0|            0|  0.00%|        # an extra one after the last one.
   346|         0|            0|            0|  0.00%|        self._fp.write(self._encoded_NL.join(blocks))
   347|         0|            0|            0|  0.00%|
   348|         1|  5.96046e-06|  5.96046e-06|  0.00%|    def _handle_message(self, msg):
   349|         0|            0|            0|  0.00%|        s = self._new_buffer()
   350|         0|            0|            0|  0.00%|        g = self.clone(s)
   351|         0|            0|            0|  0.00%|        # The payload of a message/rfc822 part should be a multipart sequence
   352|         0|            0|            0|  0.00%|        # of length 1.  The zeroth element of the list should be the Message
   353|         0|            0|            0|  0.00%|        # object for the subpart.  Extract that object, stringify it, and
   354|         0|            0|            0|  0.00%|        # write it out.
   355|         0|            0|            0|  0.00%|        # Except, it turns out, when it's a string instead, which happens when
   356|         0|            0|            0|  0.00%|        # and only when HeaderParser is used on a message of mime type
   357|         0|            0|            0|  0.00%|        # message/rfc822.  Such messages are generated by, for example,
   358|         0|            0|            0|  0.00%|        # Groupwise when forwarding unadorned messages.  (Issue 7970.)  So
   359|         0|            0|            0|  0.00%|        # in that case we just emit the string body.
   360|         0|            0|            0|  0.00%|        payload = msg._payload
   361|         0|            0|            0|  0.00%|        if isinstance(payload, list):
   362|         0|            0|            0|  0.00%|            g.flatten(msg.get_payload(0), unixfrom=False, linesep=self._NL)
   363|         0|            0|            0|  0.00%|            payload = s.getvalue()
   364|         0|            0|            0|  0.00%|        else:
   365|         0|            0|            0|  0.00%|            payload = self._encode(payload)
   366|         0|            0|            0|  0.00%|        self._fp.write(payload)
   367|         0|            0|            0|  0.00%|
   368|         0|            0|            0|  0.00%|    # This used to be a module level function; we use a classmethod for this
   369|         0|            0|            0|  0.00%|    # and _compile_re so we can continue to provide the module level function
   370|         0|            0|            0|  0.00%|    # for backward compatibility by doing
   371|         0|            0|            0|  0.00%|    #   _make_boundary = Generator._make_boundary
   372|         0|            0|            0|  0.00%|    # at the end of the module.  It *is* internal, so we could drop that...
   373|         1|  6.91414e-06|  6.91414e-06|  0.00%|    @classmethod
   374|         1|  8.34465e-06|  8.34465e-06|  0.00%|    def _make_boundary(cls, text=None):
   375|         0|            0|            0|  0.00%|        # Craft a random boundary.  If text is given, ensure that the chosen
   376|         0|            0|            0|  0.00%|        # boundary doesn't appear in the text.
   377|         0|            0|            0|  0.00%|        token = random.randrange(sys.maxsize)
   378|         0|            0|            0|  0.00%|        boundary = ('=' * 15) + (_fmt % token) + '=='
   379|         0|            0|            0|  0.00%|        if text is None:
   380|         0|            0|            0|  0.00%|            return boundary
   381|         0|            0|            0|  0.00%|        b = boundary
   382|         0|            0|            0|  0.00%|        counter = 0
   383|         0|            0|            0|  0.00%|        while True:
   384|         0|            0|            0|  0.00%|            cre = cls._compile_re('^--' + re.escape(b) + '(--)?$', re.MULTILINE)
   385|         0|            0|            0|  0.00%|            if not cre.search(text):
   386|         0|            0|            0|  0.00%|                break
   387|         0|            0|            0|  0.00%|            b = boundary + '.' + str(counter)
   388|         0|            0|            0|  0.00%|            counter += 1
   389|         0|            0|            0|  0.00%|        return b
   390|         0|            0|            0|  0.00%|
   391|         1|  5.48363e-06|  5.48363e-06|  0.00%|    @classmethod
   392|         1|  6.91414e-06|  6.91414e-06|  0.00%|    def _compile_re(cls, s, flags):
   393|         0|            0|            0|  0.00%|        return re.compile(s, flags)
   394|         0|            0|            0|  0.00%|
   395|         0|            0|            0|  0.00%|
   396|         3|  4.57764e-05|  1.52588e-05|  0.02%|class BytesGenerator(Generator):
(call)|         1|  5.43594e-05|  5.43594e-05|  0.02%|# /usr/lib/python3.10/email/generator.py:396 BytesGenerator
   397|         1|   3.8147e-06|   3.8147e-06|  0.00%|    """Generates a bytes version of a Message object tree.
   398|         0|            0|            0|  0.00%|
   399|         0|            0|            0|  0.00%|    Functionally identical to the base Generator except that the output is
   400|         0|            0|            0|  0.00%|    bytes and not string.  When surrogates were used in the input to encode
   401|         0|            0|            0|  0.00%|    bytes, these are decoded back to bytes for output.  If the policy has
   402|         0|            0|            0|  0.00%|    cte_type set to 7bit, then the message is transformed such that the
   403|         0|            0|            0|  0.00%|    non-ASCII bytes are properly content transfer encoded, using the charset
   404|         0|            0|            0|  0.00%|    unknown-8bit.
   405|         0|            0|            0|  0.00%|
   406|         0|            0|            0|  0.00%|    The outfp object must accept bytes in its write method.
   407|         0|            0|            0|  0.00%|    """
   408|         0|            0|            0|  0.00%|
   409|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def write(self, s):
   410|         0|            0|            0|  0.00%|        self._fp.write(s.encode('ascii', 'surrogateescape'))
   411|         0|            0|            0|  0.00%|
   412|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def _new_buffer(self):
   413|         0|            0|            0|  0.00%|        return BytesIO()
   414|         0|            0|            0|  0.00%|
   415|         1|  4.76837e-06|  4.76837e-06|  0.00%|    def _encode(self, s):
   416|         0|            0|            0|  0.00%|        return s.encode('ascii')
   417|         0|            0|            0|  0.00%|
   418|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def _write_headers(self, msg):
   419|         0|            0|            0|  0.00%|        # This is almost the same as the string version, except for handling
   420|         0|            0|            0|  0.00%|        # strings with 8bit bytes.
   421|         0|            0|            0|  0.00%|        for h, v in msg.raw_items():
   422|         0|            0|            0|  0.00%|            self._fp.write(self.policy.fold_binary(h, v))
   423|         0|            0|            0|  0.00%|        # A blank line always separates headers from body
   424|         0|            0|            0|  0.00%|        self.write(self._NL)
   425|         0|            0|            0|  0.00%|
   426|         1|  4.52995e-06|  4.52995e-06|  0.00%|    def _handle_text(self, msg):
   427|         0|            0|            0|  0.00%|        # If the string has surrogates the original source was bytes, so
   428|         0|            0|            0|  0.00%|        # just write it back out.
   429|         0|            0|            0|  0.00%|        if msg._payload is None:
   430|         0|            0|            0|  0.00%|            return
   431|         0|            0|            0|  0.00%|        if _has_surrogates(msg._payload) and not self.policy.cte_type=='7bit':
   432|         0|            0|            0|  0.00%|            if self._mangle_from_:
   433|         0|            0|            0|  0.00%|                msg._payload = fcre.sub(">From ", msg._payload)
   434|         0|            0|            0|  0.00%|            self._write_lines(msg._payload)
   435|         0|            0|            0|  0.00%|        else:
   436|         0|            0|            0|  0.00%|            super(BytesGenerator,self)._handle_text(msg)
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|    # Default body handler
   439|         1|   3.8147e-06|   3.8147e-06|  0.00%|    _writeBody = _handle_text
   440|         0|            0|            0|  0.00%|
   441|         1|  4.29153e-06|  4.29153e-06|  0.00%|    @classmethod
   442|         1|  5.72205e-06|  5.72205e-06|  0.00%|    def _compile_re(cls, s, flags):
   443|         0|            0|            0|  0.00%|        return re.compile(s.encode('ascii'), flags)
   444|         0|            0|            0|  0.00%|
   445|         0|            0|            0|  0.00%|
   446|         0|            0|            0|  0.00%|
   447|         1|  7.62939e-06|  7.62939e-06|  0.00%|_FMT = '[Non-text (%(type)s) part of message omitted, filename %(filename)s]'
   448|         0|            0|            0|  0.00%|
   449|         3|  4.00543e-05|  1.33514e-05|  0.02%|class DecodedGenerator(Generator):
(call)|         1|  3.26633e-05|  3.26633e-05|  0.01%|# /usr/lib/python3.10/email/generator.py:449 DecodedGenerator
   450|         1|  3.33786e-06|  3.33786e-06|  0.00%|    """Generates a text representation of a message.
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    Like the Generator base class, except that non-text parts are substituted
   453|         0|            0|            0|  0.00%|    with a format string representing the part.
   454|         0|            0|            0|  0.00%|    """
   455|         2|  9.77516e-06|  4.88758e-06|  0.00%|    def __init__(self, outfp, mangle_from_=None, maxheaderlen=None, fmt=None, *,
   456|         1|   3.8147e-06|   3.8147e-06|  0.00%|                 policy=None):
   457|         0|            0|            0|  0.00%|        """Like Generator.__init__() except that an additional optional
   458|         0|            0|            0|  0.00%|        argument is allowed.
   459|         0|            0|            0|  0.00%|
   460|         0|            0|            0|  0.00%|        Walks through all subparts of a message.  If the subpart is of main
   461|         0|            0|            0|  0.00%|        type `text', then it prints the decoded payload of the subpart.
   462|         0|            0|            0|  0.00%|
   463|         0|            0|            0|  0.00%|        Otherwise, fmt is a format string that is used instead of the message
   464|         0|            0|            0|  0.00%|        payload.  fmt is expanded with the following keywords (in
   465|         0|            0|            0|  0.00%|        %(keyword)s format):
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|        type       : Full MIME type of the non-text part
   468|         0|            0|            0|  0.00%|        maintype   : Main MIME type of the non-text part
   469|         0|            0|            0|  0.00%|        subtype    : Sub-MIME type of the non-text part
   470|         0|            0|            0|  0.00%|        filename   : Filename of the non-text part
   471|         0|            0|            0|  0.00%|        description: Description associated with the non-text part
   472|         0|            0|            0|  0.00%|        encoding   : Content transfer encoding of the non-text part
   473|         0|            0|            0|  0.00%|
   474|         0|            0|            0|  0.00%|        The default value for fmt is None, meaning
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|        [Non-text (%(type)s) part of message omitted, filename %(filename)s]
   477|         0|            0|            0|  0.00%|        """
   478|         0|            0|            0|  0.00%|        Generator.__init__(self, outfp, mangle_from_, maxheaderlen,
   479|         0|            0|            0|  0.00%|                           policy=policy)
   480|         0|            0|            0|  0.00%|        if fmt is None:
   481|         0|            0|            0|  0.00%|            self._fmt = _FMT
   482|         0|            0|            0|  0.00%|        else:
   483|         0|            0|            0|  0.00%|            self._fmt = fmt
   484|         0|            0|            0|  0.00%|
   485|         1|  3.33786e-06|  3.33786e-06|  0.00%|    def _dispatch(self, msg):
   486|         0|            0|            0|  0.00%|        for part in msg.walk():
   487|         0|            0|            0|  0.00%|            maintype = part.get_content_maintype()
   488|         0|            0|            0|  0.00%|            if maintype == 'text':
   489|         0|            0|            0|  0.00%|                print(part.get_payload(decode=False), file=self)
   490|         0|            0|            0|  0.00%|            elif maintype == 'multipart':
   491|         0|            0|            0|  0.00%|                # Just skip this
   492|         0|            0|            0|  0.00%|                pass
   493|         0|            0|            0|  0.00%|            else:
   494|         0|            0|            0|  0.00%|                print(self._fmt % {
   495|         0|            0|            0|  0.00%|                    'type'       : part.get_content_type(),
   496|         0|            0|            0|  0.00%|                    'maintype'   : part.get_content_maintype(),
   497|         0|            0|            0|  0.00%|                    'subtype'    : part.get_content_subtype(),
   498|         0|            0|            0|  0.00%|                    'filename'   : part.get_filename('[no filename]'),
   499|         0|            0|            0|  0.00%|                    'description': part.get('Content-Description',
   500|         0|            0|            0|  0.00%|                                            '[no description]'),
   501|         0|            0|            0|  0.00%|                    'encoding'   : part.get('Content-Transfer-Encoding',
   502|         0|            0|            0|  0.00%|                                            '[no encoding]'),
   503|         0|            0|            0|  0.00%|                    }, file=self)
   504|         0|            0|            0|  0.00%|
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|
   507|         0|            0|            0|  0.00%|# Helper used by Generator._make_boundary
   508|         1|  9.29832e-06|  9.29832e-06|  0.00%|_width = len(repr(sys.maxsize-1))
   509|         1|  9.53674e-06|  9.53674e-06|  0.00%|_fmt = '%%0%dd' % _width
   510|         0|            0|            0|  0.00%|
   511|         0|            0|            0|  0.00%|# Backward compatibility
   512|         1|  7.86781e-06|  7.86781e-06|  0.00%|_make_boundary = Generator._make_boundary
File: /usr/lib/python3.10/copy.py
File duration: 0.00053978s (0.22%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|   2.0504e-05|   1.0252e-05|  0.01%|"""Generic (shallow and deep) copying operations.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|Interface summary:
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|        import copy
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|        x = copy.copy(y)        # make a shallow copy of y
     8|         0|            0|            0|  0.00%|        x = copy.deepcopy(y)    # make a deep copy of y
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|For module specific errors, copy.Error is raised.
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|The difference between shallow and deep copying is only relevant for
    13|         0|            0|            0|  0.00%|compound objects (objects that contain other objects, like lists or
    14|         0|            0|            0|  0.00%|class instances).
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|- A shallow copy constructs a new compound object and then (to the
    17|         0|            0|            0|  0.00%|  extent possible) inserts *the same objects* into it that the
    18|         0|            0|            0|  0.00%|  original contains.
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|- A deep copy constructs a new compound object and then, recursively,
    21|         0|            0|            0|  0.00%|  inserts *copies* into it of the objects found in the original.
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|Two problems often exist with deep copy operations that don't exist
    24|         0|            0|            0|  0.00%|with shallow copy operations:
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%| a) recursive objects (compound objects that, directly or indirectly,
    27|         0|            0|            0|  0.00%|    contain a reference to themselves) may cause a recursive loop
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%| b) because deep copy copies *everything* it may copy too much, e.g.
    30|         0|            0|            0|  0.00%|    administrative data structures that should be shared even between
    31|         0|            0|            0|  0.00%|    copies
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|Python's deep copy operation avoids these problems by:
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%| a) keeping a table of objects already copied during the current
    36|         0|            0|            0|  0.00%|    copying pass
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%| b) letting user-defined classes override the copying operation or the
    39|         0|            0|            0|  0.00%|    set of components copied
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|This version does not copy types like module, class, function, method,
    42|         0|            0|            0|  0.00%|nor stack trace, stack frame, nor file, socket, window, nor any
    43|         0|            0|            0|  0.00%|similar types.
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|Classes can use the same interfaces to control copying that they use
    46|         0|            0|            0|  0.00%|to control pickling: they can define methods called __getinitargs__(),
    47|         0|            0|            0|  0.00%|__getstate__() and __setstate__().  See the documentation for module
    48|         0|            0|            0|  0.00%|"pickle" for information on these methods.
    49|         0|            0|            0|  0.00%|"""
    50|         0|            0|            0|  0.00%|
    51|         1|  4.76837e-06|  4.76837e-06|  0.00%|import types
    52|         1|  6.19888e-06|  6.19888e-06|  0.00%|import weakref
    53|         1|  6.91414e-06|  6.91414e-06|  0.00%|from copyreg import dispatch_table
    54|         0|            0|            0|  0.00%|
    55|         3|  3.83854e-05|  1.27951e-05|  0.02%|class Error(Exception):
(call)|         1|  1.33514e-05|  1.33514e-05|  0.01%|# /usr/lib/python3.10/copy.py:55 Error
    56|         1|  3.33786e-06|  3.33786e-06|  0.00%|    pass
    57|         1|  5.24521e-06|  5.24521e-06|  0.00%|error = Error   # backward compatibility
    58|         0|            0|            0|  0.00%|
    59|         1|  5.48363e-06|  5.48363e-06|  0.00%|try:
    60|         1|  1.62125e-05|  1.62125e-05|  0.01%|    from org.python.core import PyStringMap
(call)|         1|   0.00426817|   0.00426817|  1.76%|# <frozen importlib._bootstrap>:1022 _find_and_load
    61|         1|  6.19888e-06|  6.19888e-06|  0.00%|except ImportError:
    62|         1|  5.48363e-06|  5.48363e-06|  0.00%|    PyStringMap = None
    63|         0|            0|            0|  0.00%|
    64|         1|  5.96046e-06|  5.96046e-06|  0.00%|__all__ = ["Error", "copy", "deepcopy"]
    65|         0|            0|            0|  0.00%|
    66|         1|  5.00679e-06|  5.00679e-06|  0.00%|def copy(x):
    67|         0|            0|            0|  0.00%|    """Shallow copy operation on arbitrary Python objects.
    68|         0|            0|            0|  0.00%|
    69|         0|            0|            0|  0.00%|    See the module's __doc__ string for more info.
    70|         0|            0|            0|  0.00%|    """
    71|         0|            0|            0|  0.00%|
    72|         0|            0|            0|  0.00%|    cls = type(x)
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|    copier = _copy_dispatch.get(cls)
    75|         0|            0|            0|  0.00%|    if copier:
    76|         0|            0|            0|  0.00%|        return copier(x)
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|    if issubclass(cls, type):
    79|         0|            0|            0|  0.00%|        # treat it as a regular class:
    80|         0|            0|            0|  0.00%|        return _copy_immutable(x)
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|    copier = getattr(cls, "__copy__", None)
    83|         0|            0|            0|  0.00%|    if copier is not None:
    84|         0|            0|            0|  0.00%|        return copier(x)
    85|         0|            0|            0|  0.00%|
    86|         0|            0|            0|  0.00%|    reductor = dispatch_table.get(cls)
    87|         0|            0|            0|  0.00%|    if reductor is not None:
    88|         0|            0|            0|  0.00%|        rv = reductor(x)
    89|         0|            0|            0|  0.00%|    else:
    90|         0|            0|            0|  0.00%|        reductor = getattr(x, "__reduce_ex__", None)
    91|         0|            0|            0|  0.00%|        if reductor is not None:
    92|         0|            0|            0|  0.00%|            rv = reductor(4)
    93|         0|            0|            0|  0.00%|        else:
    94|         0|            0|            0|  0.00%|            reductor = getattr(x, "__reduce__", None)
    95|         0|            0|            0|  0.00%|            if reductor:
    96|         0|            0|            0|  0.00%|                rv = reductor()
    97|         0|            0|            0|  0.00%|            else:
    98|         0|            0|            0|  0.00%|                raise Error("un(shallow)copyable object of type %s" % cls)
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|    if isinstance(rv, str):
   101|         0|            0|            0|  0.00%|        return x
   102|         0|            0|            0|  0.00%|    return _reconstruct(x, None, *rv)
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|
   105|         1|  5.48363e-06|  5.48363e-06|  0.00%|_copy_dispatch = d = {}
   106|         0|            0|            0|  0.00%|
   107|         1|  4.76837e-06|  4.76837e-06|  0.00%|def _copy_immutable(x):
   108|         0|            0|            0|  0.00%|    return x
   109|        20|  7.84397e-05|  3.92199e-06|  0.03%|for t in (type(None), int, float, bool, complex, str, tuple,
   110|         1|  6.19888e-06|  6.19888e-06|  0.00%|          bytes, frozenset, type, range, slice, property,
   111|         1|  5.48363e-06|  5.48363e-06|  0.00%|          types.BuiltinFunctionType, type(Ellipsis), type(NotImplemented),
   112|         1|  5.24521e-06|  5.24521e-06|  0.00%|          types.FunctionType, weakref.ref):
   113|        18|  6.65188e-05|  3.69549e-06|  0.03%|    d[t] = _copy_immutable
   114|         1|  4.05312e-06|  4.05312e-06|  0.00%|t = getattr(types, "CodeType", None)
   115|         1|  5.48363e-06|  5.48363e-06|  0.00%|if t is not None:
   116|         1|  5.00679e-06|  5.00679e-06|  0.00%|    d[t] = _copy_immutable
   117|         0|            0|            0|  0.00%|
   118|         1|  7.86781e-06|  7.86781e-06|  0.00%|d[list] = list.copy
   119|         1|  5.72205e-06|  5.72205e-06|  0.00%|d[dict] = dict.copy
   120|         1|  6.67572e-06|  6.67572e-06|  0.00%|d[set] = set.copy
   121|         1|  5.96046e-06|  5.96046e-06|  0.00%|d[bytearray] = bytearray.copy
   122|         0|            0|            0|  0.00%|
   123|         1|  5.24521e-06|  5.24521e-06|  0.00%|if PyStringMap is not None:
   124|         0|            0|            0|  0.00%|    d[PyStringMap] = PyStringMap.copy
   125|         0|            0|            0|  0.00%|
   126|         1|  6.19888e-06|  6.19888e-06|  0.00%|del d, t
   127|         0|            0|            0|  0.00%|
   128|         1|  5.96046e-06|  5.96046e-06|  0.00%|def deepcopy(x, memo=None, _nil=[]):
   129|         0|            0|            0|  0.00%|    """Deep copy operation on arbitrary Python objects.
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|    See the module's __doc__ string for more info.
   132|         0|            0|            0|  0.00%|    """
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|    if memo is None:
   135|         0|            0|            0|  0.00%|        memo = {}
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|    d = id(x)
   138|         0|            0|            0|  0.00%|    y = memo.get(d, _nil)
   139|         0|            0|            0|  0.00%|    if y is not _nil:
   140|         0|            0|            0|  0.00%|        return y
   141|         0|            0|            0|  0.00%|
   142|         0|            0|            0|  0.00%|    cls = type(x)
   143|         0|            0|            0|  0.00%|
   144|         0|            0|            0|  0.00%|    copier = _deepcopy_dispatch.get(cls)
   145|         0|            0|            0|  0.00%|    if copier is not None:
   146|         0|            0|            0|  0.00%|        y = copier(x, memo)
   147|         0|            0|            0|  0.00%|    else:
   148|         0|            0|            0|  0.00%|        if issubclass(cls, type):
   149|         0|            0|            0|  0.00%|            y = _deepcopy_atomic(x, memo)
   150|         0|            0|            0|  0.00%|        else:
   151|         0|            0|            0|  0.00%|            copier = getattr(x, "__deepcopy__", None)
   152|         0|            0|            0|  0.00%|            if copier is not None:
   153|         0|            0|            0|  0.00%|                y = copier(memo)
   154|         0|            0|            0|  0.00%|            else:
   155|         0|            0|            0|  0.00%|                reductor = dispatch_table.get(cls)
   156|         0|            0|            0|  0.00%|                if reductor:
   157|         0|            0|            0|  0.00%|                    rv = reductor(x)
   158|         0|            0|            0|  0.00%|                else:
   159|         0|            0|            0|  0.00%|                    reductor = getattr(x, "__reduce_ex__", None)
   160|         0|            0|            0|  0.00%|                    if reductor is not None:
   161|         0|            0|            0|  0.00%|                        rv = reductor(4)
   162|         0|            0|            0|  0.00%|                    else:
   163|         0|            0|            0|  0.00%|                        reductor = getattr(x, "__reduce__", None)
   164|         0|            0|            0|  0.00%|                        if reductor:
   165|         0|            0|            0|  0.00%|                            rv = reductor()
   166|         0|            0|            0|  0.00%|                        else:
   167|         0|            0|            0|  0.00%|                            raise Error(
   168|         0|            0|            0|  0.00%|                                "un(deep)copyable object of type %s" % cls)
   169|         0|            0|            0|  0.00%|                if isinstance(rv, str):
   170|         0|            0|            0|  0.00%|                    y = x
   171|         0|            0|            0|  0.00%|                else:
   172|         0|            0|            0|  0.00%|                    y = _reconstruct(x, memo, *rv)
   173|         0|            0|            0|  0.00%|
   174|         0|            0|            0|  0.00%|    # If is its own copy, don't memoize.
   175|         0|            0|            0|  0.00%|    if y is not x:
   176|         0|            0|            0|  0.00%|        memo[d] = y
   177|         0|            0|            0|  0.00%|        _keep_alive(x, memo) # Make sure x lives at least as long as d
   178|         0|            0|            0|  0.00%|    return y
   179|         0|            0|            0|  0.00%|
   180|         1|  5.00679e-06|  5.00679e-06|  0.00%|_deepcopy_dispatch = d = {}
   181|         0|            0|            0|  0.00%|
   182|         1|  6.67572e-06|  6.67572e-06|  0.00%|def _deepcopy_atomic(x, memo):
   183|         0|            0|            0|  0.00%|    return x
   184|         1|  5.48363e-06|  5.48363e-06|  0.00%|d[type(None)] = _deepcopy_atomic
   185|         1|  5.00679e-06|  5.00679e-06|  0.00%|d[type(Ellipsis)] = _deepcopy_atomic
   186|         1|  5.48363e-06|  5.48363e-06|  0.00%|d[type(NotImplemented)] = _deepcopy_atomic
   187|         1|  5.24521e-06|  5.24521e-06|  0.00%|d[int] = _deepcopy_atomic
   188|         1|  5.96046e-06|  5.96046e-06|  0.00%|d[float] = _deepcopy_atomic
   189|         1|  9.53674e-06|  9.53674e-06|  0.00%|d[bool] = _deepcopy_atomic
   190|         1|  4.76837e-06|  4.76837e-06|  0.00%|d[complex] = _deepcopy_atomic
   191|         1|  5.48363e-06|  5.48363e-06|  0.00%|d[bytes] = _deepcopy_atomic
   192|         1|  5.24521e-06|  5.24521e-06|  0.00%|d[str] = _deepcopy_atomic
   193|         1|  5.24521e-06|  5.24521e-06|  0.00%|d[types.CodeType] = _deepcopy_atomic
   194|         1|  5.00679e-06|  5.00679e-06|  0.00%|d[type] = _deepcopy_atomic
   195|         1|  5.72205e-06|  5.72205e-06|  0.00%|d[range] = _deepcopy_atomic
   196|         1|  4.76837e-06|  4.76837e-06|  0.00%|d[types.BuiltinFunctionType] = _deepcopy_atomic
   197|         1|  5.48363e-06|  5.48363e-06|  0.00%|d[types.FunctionType] = _deepcopy_atomic
   198|         1|  4.76837e-06|  4.76837e-06|  0.00%|d[weakref.ref] = _deepcopy_atomic
   199|         1|  5.24521e-06|  5.24521e-06|  0.00%|d[property] = _deepcopy_atomic
   200|         0|            0|            0|  0.00%|
   201|         1|  5.00679e-06|  5.00679e-06|  0.00%|def _deepcopy_list(x, memo, deepcopy=deepcopy):
   202|         0|            0|            0|  0.00%|    y = []
   203|         0|            0|            0|  0.00%|    memo[id(x)] = y
   204|         0|            0|            0|  0.00%|    append = y.append
   205|         0|            0|            0|  0.00%|    for a in x:
   206|         0|            0|            0|  0.00%|        append(deepcopy(a, memo))
   207|         0|            0|            0|  0.00%|    return y
   208|         1|  5.48363e-06|  5.48363e-06|  0.00%|d[list] = _deepcopy_list
   209|         0|            0|            0|  0.00%|
   210|         1|  5.48363e-06|  5.48363e-06|  0.00%|def _deepcopy_tuple(x, memo, deepcopy=deepcopy):
   211|         0|            0|            0|  0.00%|    y = [deepcopy(a, memo) for a in x]
   212|         0|            0|            0|  0.00%|    # We're not going to put the tuple in the memo, but it's still important we
   213|         0|            0|            0|  0.00%|    # check for it, in case the tuple contains recursive mutable structures.
   214|         0|            0|            0|  0.00%|    try:
   215|         0|            0|            0|  0.00%|        return memo[id(x)]
   216|         0|            0|            0|  0.00%|    except KeyError:
   217|         0|            0|            0|  0.00%|        pass
   218|         0|            0|            0|  0.00%|    for k, j in zip(x, y):
   219|         0|            0|            0|  0.00%|        if k is not j:
   220|         0|            0|            0|  0.00%|            y = tuple(y)
   221|         0|            0|            0|  0.00%|            break
   222|         0|            0|            0|  0.00%|    else:
   223|         0|            0|            0|  0.00%|        y = x
   224|         0|            0|            0|  0.00%|    return y
   225|         1|  5.48363e-06|  5.48363e-06|  0.00%|d[tuple] = _deepcopy_tuple
   226|         0|            0|            0|  0.00%|
   227|         1|  4.76837e-06|  4.76837e-06|  0.00%|def _deepcopy_dict(x, memo, deepcopy=deepcopy):
   228|         0|            0|            0|  0.00%|    y = {}
   229|         0|            0|            0|  0.00%|    memo[id(x)] = y
   230|         0|            0|            0|  0.00%|    for key, value in x.items():
   231|         0|            0|            0|  0.00%|        y[deepcopy(key, memo)] = deepcopy(value, memo)
   232|         0|            0|            0|  0.00%|    return y
   233|         1|  5.24521e-06|  5.24521e-06|  0.00%|d[dict] = _deepcopy_dict
   234|         1|  5.00679e-06|  5.00679e-06|  0.00%|if PyStringMap is not None:
   235|         0|            0|            0|  0.00%|    d[PyStringMap] = _deepcopy_dict
   236|         0|            0|            0|  0.00%|
   237|         1|  6.19888e-06|  6.19888e-06|  0.00%|def _deepcopy_method(x, memo): # Copy instance methods
   238|         0|            0|            0|  0.00%|    return type(x)(x.__func__, deepcopy(x.__self__, memo))
   239|         1|  5.24521e-06|  5.24521e-06|  0.00%|d[types.MethodType] = _deepcopy_method
   240|         0|            0|            0|  0.00%|
   241|         1|  5.24521e-06|  5.24521e-06|  0.00%|del d
   242|         0|            0|            0|  0.00%|
   243|         1|  5.48363e-06|  5.48363e-06|  0.00%|def _keep_alive(x, memo):
   244|         0|            0|            0|  0.00%|    """Keeps a reference to the object x in the memo.
   245|         0|            0|            0|  0.00%|
   246|         0|            0|            0|  0.00%|    Because we remember objects by their id, we have
   247|         0|            0|            0|  0.00%|    to assure that possibly temporary objects are kept
   248|         0|            0|            0|  0.00%|    alive by referencing them.
   249|         0|            0|            0|  0.00%|    We store a reference at the id of the memo, which should
   250|         0|            0|            0|  0.00%|    normally not be used unless someone tries to deepcopy
   251|         0|            0|            0|  0.00%|    the memo itself...
   252|         0|            0|            0|  0.00%|    """
   253|         0|            0|            0|  0.00%|    try:
   254|         0|            0|            0|  0.00%|        memo[id(memo)].append(x)
   255|         0|            0|            0|  0.00%|    except KeyError:
   256|         0|            0|            0|  0.00%|        # aha, this is the first one :-)
   257|         0|            0|            0|  0.00%|        memo[id(memo)]=[x]
   258|         0|            0|            0|  0.00%|
   259|         1|  5.24521e-06|  5.24521e-06|  0.00%|def _reconstruct(x, memo, func, args,
   260|         1|  5.72205e-06|  5.72205e-06|  0.00%|                 state=None, listiter=None, dictiter=None,
   261|         1|  5.24521e-06|  5.24521e-06|  0.00%|                 deepcopy=deepcopy):
   262|         0|            0|            0|  0.00%|    deep = memo is not None
   263|         0|            0|            0|  0.00%|    if deep and args:
   264|         0|            0|            0|  0.00%|        args = (deepcopy(arg, memo) for arg in args)
   265|         0|            0|            0|  0.00%|    y = func(*args)
   266|         0|            0|            0|  0.00%|    if deep:
   267|         0|            0|            0|  0.00%|        memo[id(x)] = y
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|    if state is not None:
   270|         0|            0|            0|  0.00%|        if deep:
   271|         0|            0|            0|  0.00%|            state = deepcopy(state, memo)
   272|         0|            0|            0|  0.00%|        if hasattr(y, '__setstate__'):
   273|         0|            0|            0|  0.00%|            y.__setstate__(state)
   274|         0|            0|            0|  0.00%|        else:
   275|         0|            0|            0|  0.00%|            if isinstance(state, tuple) and len(state) == 2:
   276|         0|            0|            0|  0.00%|                state, slotstate = state
   277|         0|            0|            0|  0.00%|            else:
   278|         0|            0|            0|  0.00%|                slotstate = None
   279|         0|            0|            0|  0.00%|            if state is not None:
   280|         0|            0|            0|  0.00%|                y.__dict__.update(state)
   281|         0|            0|            0|  0.00%|            if slotstate is not None:
   282|         0|            0|            0|  0.00%|                for key, value in slotstate.items():
   283|         0|            0|            0|  0.00%|                    setattr(y, key, value)
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|    if listiter is not None:
   286|         0|            0|            0|  0.00%|        if deep:
   287|         0|            0|            0|  0.00%|            for item in listiter:
   288|         0|            0|            0|  0.00%|                item = deepcopy(item, memo)
   289|         0|            0|            0|  0.00%|                y.append(item)
   290|         0|            0|            0|  0.00%|        else:
   291|         0|            0|            0|  0.00%|            for item in listiter:
   292|         0|            0|            0|  0.00%|                y.append(item)
   293|         0|            0|            0|  0.00%|    if dictiter is not None:
   294|         0|            0|            0|  0.00%|        if deep:
   295|         0|            0|            0|  0.00%|            for key, value in dictiter:
   296|         0|            0|            0|  0.00%|                key = deepcopy(key, memo)
   297|         0|            0|            0|  0.00%|                value = deepcopy(value, memo)
   298|         0|            0|            0|  0.00%|                y[key] = value
   299|         0|            0|            0|  0.00%|        else:
   300|         0|            0|            0|  0.00%|            for key, value in dictiter:
   301|         0|            0|            0|  0.00%|                y[key] = value
   302|         0|            0|            0|  0.00%|    return y
   303|         0|            0|            0|  0.00%|
   304|         1|  4.76837e-06|  4.76837e-06|  0.00%|del types, weakref, PyStringMap
File: /usr/lib/python3.10/encodings/idna.py
File duration: 0.000447273s (0.18%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         1|  9.05991e-06|  9.05991e-06|  0.00%|# This module implements the RFCs 3490 (IDNA) and 3491 (Nameprep)
     2|         0|            0|            0|  0.00%|
     3|         1|  6.31809e-05|  6.31809e-05|  0.03%|import stringprep, re, codecs
(call)|         1|    0.0160666|    0.0160666|  6.61%|# <frozen importlib._bootstrap>:1022 _find_and_load
     4|         1|  1.00136e-05|  1.00136e-05|  0.00%|from unicodedata import ucd_3_2_0 as unicodedata
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|# IDNA section 3.1
     7|         1|  2.36034e-05|  2.36034e-05|  0.01%|dots = re.compile("[\u002E\u3002\uFF0E\uFF61]")
(call)|         1|    0.0111716|    0.0111716|  4.60%|# /usr/lib/python3.10/re.py:249 compile
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|# IDNA section 5
    10|         1|  9.53674e-06|  9.53674e-06|  0.00%|ace_prefix = b"xn--"
    11|         1|  5.96046e-06|  5.96046e-06|  0.00%|sace_prefix = "xn--"
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|# This assumes query strings, so AllowUnassigned is true
    14|         1|  6.91414e-06|  6.91414e-06|  0.00%|def nameprep(label):
    15|         0|            0|            0|  0.00%|    # Map
    16|         0|            0|            0|  0.00%|    newlabel = []
    17|         0|            0|            0|  0.00%|    for c in label:
    18|         0|            0|            0|  0.00%|        if stringprep.in_table_b1(c):
    19|         0|            0|            0|  0.00%|            # Map to nothing
    20|         0|            0|            0|  0.00%|            continue
    21|         0|            0|            0|  0.00%|        newlabel.append(stringprep.map_table_b2(c))
    22|         0|            0|            0|  0.00%|    label = "".join(newlabel)
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|    # Normalize
    25|         0|            0|            0|  0.00%|    label = unicodedata.normalize("NFKC", label)
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|    # Prohibit
    28|         0|            0|            0|  0.00%|    for c in label:
    29|         0|            0|            0|  0.00%|        if stringprep.in_table_c12(c) or \
    30|         0|            0|            0|  0.00%|           stringprep.in_table_c22(c) or \
    31|         0|            0|            0|  0.00%|           stringprep.in_table_c3(c) or \
    32|         0|            0|            0|  0.00%|           stringprep.in_table_c4(c) or \
    33|         0|            0|            0|  0.00%|           stringprep.in_table_c5(c) or \
    34|         0|            0|            0|  0.00%|           stringprep.in_table_c6(c) or \
    35|         0|            0|            0|  0.00%|           stringprep.in_table_c7(c) or \
    36|         0|            0|            0|  0.00%|           stringprep.in_table_c8(c) or \
    37|         0|            0|            0|  0.00%|           stringprep.in_table_c9(c):
    38|         0|            0|            0|  0.00%|            raise UnicodeError("Invalid character %r" % c)
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|    # Check bidi
    41|         0|            0|            0|  0.00%|    RandAL = [stringprep.in_table_d1(x) for x in label]
    42|         0|            0|            0|  0.00%|    for c in RandAL:
    43|         0|            0|            0|  0.00%|        if c:
    44|         0|            0|            0|  0.00%|            # There is a RandAL char in the string. Must perform further
    45|         0|            0|            0|  0.00%|            # tests:
    46|         0|            0|            0|  0.00%|            # 1) The characters in section 5.8 MUST be prohibited.
    47|         0|            0|            0|  0.00%|            # This is table C.8, which was already checked
    48|         0|            0|            0|  0.00%|            # 2) If a string contains any RandALCat character, the string
    49|         0|            0|            0|  0.00%|            # MUST NOT contain any LCat character.
    50|         0|            0|            0|  0.00%|            if any(stringprep.in_table_d2(x) for x in label):
    51|         0|            0|            0|  0.00%|                raise UnicodeError("Violation of BIDI requirement 2")
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|            # 3) If a string contains any RandALCat character, a
    54|         0|            0|            0|  0.00%|            # RandALCat character MUST be the first character of the
    55|         0|            0|            0|  0.00%|            # string, and a RandALCat character MUST be the last
    56|         0|            0|            0|  0.00%|            # character of the string.
    57|         0|            0|            0|  0.00%|            if not RandAL[0] or not RandAL[-1]:
    58|         0|            0|            0|  0.00%|                raise UnicodeError("Violation of BIDI requirement 3")
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|    return label
    61|         0|            0|            0|  0.00%|
    62|         1|  5.72205e-06|  5.72205e-06|  0.00%|def ToASCII(label):
    63|         0|            0|            0|  0.00%|    try:
    64|         0|            0|            0|  0.00%|        # Step 1: try ASCII
    65|         0|            0|            0|  0.00%|        label = label.encode("ascii")
    66|         0|            0|            0|  0.00%|    except UnicodeError:
    67|         0|            0|            0|  0.00%|        pass
    68|         0|            0|            0|  0.00%|    else:
    69|         0|            0|            0|  0.00%|        # Skip to step 3: UseSTD3ASCIIRules is false, so
    70|         0|            0|            0|  0.00%|        # Skip to step 8.
    71|         0|            0|            0|  0.00%|        if 0 < len(label) < 64:
    72|         0|            0|            0|  0.00%|            return label
    73|         0|            0|            0|  0.00%|        raise UnicodeError("label empty or too long")
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|    # Step 2: nameprep
    76|         0|            0|            0|  0.00%|    label = nameprep(label)
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|    # Step 3: UseSTD3ASCIIRules is false
    79|         0|            0|            0|  0.00%|    # Step 4: try ASCII
    80|         0|            0|            0|  0.00%|    try:
    81|         0|            0|            0|  0.00%|        label = label.encode("ascii")
    82|         0|            0|            0|  0.00%|    except UnicodeError:
    83|         0|            0|            0|  0.00%|        pass
    84|         0|            0|            0|  0.00%|    else:
    85|         0|            0|            0|  0.00%|        # Skip to step 8.
    86|         0|            0|            0|  0.00%|        if 0 < len(label) < 64:
    87|         0|            0|            0|  0.00%|            return label
    88|         0|            0|            0|  0.00%|        raise UnicodeError("label empty or too long")
    89|         0|            0|            0|  0.00%|
    90|         0|            0|            0|  0.00%|    # Step 5: Check ACE prefix
    91|         0|            0|            0|  0.00%|    if label.startswith(sace_prefix):
    92|         0|            0|            0|  0.00%|        raise UnicodeError("Label starts with ACE prefix")
    93|         0|            0|            0|  0.00%|
    94|         0|            0|            0|  0.00%|    # Step 6: Encode with PUNYCODE
    95|         0|            0|            0|  0.00%|    label = label.encode("punycode")
    96|         0|            0|            0|  0.00%|
    97|         0|            0|            0|  0.00%|    # Step 7: Prepend ACE prefix
    98|         0|            0|            0|  0.00%|    label = ace_prefix + label
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|    # Step 8: Check size
   101|         0|            0|            0|  0.00%|    if 0 < len(label) < 64:
   102|         0|            0|            0|  0.00%|        return label
   103|         0|            0|            0|  0.00%|    raise UnicodeError("label empty or too long")
   104|         0|            0|            0|  0.00%|
   105|         1|  5.96046e-06|  5.96046e-06|  0.00%|def ToUnicode(label):
   106|         0|            0|            0|  0.00%|    # Step 1: Check for ASCII
   107|         0|            0|            0|  0.00%|    if isinstance(label, bytes):
   108|         0|            0|            0|  0.00%|        pure_ascii = True
   109|         0|            0|            0|  0.00%|    else:
   110|         0|            0|            0|  0.00%|        try:
   111|         0|            0|            0|  0.00%|            label = label.encode("ascii")
   112|         0|            0|            0|  0.00%|            pure_ascii = True
   113|         0|            0|            0|  0.00%|        except UnicodeError:
   114|         0|            0|            0|  0.00%|            pure_ascii = False
   115|         0|            0|            0|  0.00%|    if not pure_ascii:
   116|         0|            0|            0|  0.00%|        # Step 2: Perform nameprep
   117|         0|            0|            0|  0.00%|        label = nameprep(label)
   118|         0|            0|            0|  0.00%|        # It doesn't say this, but apparently, it should be ASCII now
   119|         0|            0|            0|  0.00%|        try:
   120|         0|            0|            0|  0.00%|            label = label.encode("ascii")
   121|         0|            0|            0|  0.00%|        except UnicodeError:
   122|         0|            0|            0|  0.00%|            raise UnicodeError("Invalid character in IDN label")
   123|         0|            0|            0|  0.00%|    # Step 3: Check for ACE prefix
   124|         0|            0|            0|  0.00%|    if not label.startswith(ace_prefix):
   125|         0|            0|            0|  0.00%|        return str(label, "ascii")
   126|         0|            0|            0|  0.00%|
   127|         0|            0|            0|  0.00%|    # Step 4: Remove ACE prefix
   128|         0|            0|            0|  0.00%|    label1 = label[len(ace_prefix):]
   129|         0|            0|            0|  0.00%|
   130|         0|            0|            0|  0.00%|    # Step 5: Decode using PUNYCODE
   131|         0|            0|            0|  0.00%|    result = label1.decode("punycode")
   132|         0|            0|            0|  0.00%|
   133|         0|            0|            0|  0.00%|    # Step 6: Apply ToASCII
   134|         0|            0|            0|  0.00%|    label2 = ToASCII(result)
   135|         0|            0|            0|  0.00%|
   136|         0|            0|            0|  0.00%|    # Step 7: Compare the result of step 6 with the one of step 3
   137|         0|            0|            0|  0.00%|    # label2 will already be in lower case.
   138|         0|            0|            0|  0.00%|    if str(label, "ascii").lower() != str(label2, "ascii"):
   139|         0|            0|            0|  0.00%|        raise UnicodeError("IDNA does not round-trip", label, label2)
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|    # Step 8: return the result of step 5
   142|         0|            0|            0|  0.00%|    return result
   143|         0|            0|            0|  0.00%|
   144|         0|            0|            0|  0.00%|### Codec APIs
   145|         0|            0|            0|  0.00%|
   146|         3|  4.41074e-05|  1.47025e-05|  0.02%|class Codec(codecs.Codec):
(call)|         1|  1.90735e-05|  1.90735e-05|  0.01%|# /usr/lib/python3.10/encodings/idna.py:146 Codec
   147|         2|  7.86781e-06|  3.93391e-06|  0.00%|    def encode(self, input, errors='strict'):
   148|         0|            0|            0|  0.00%|
   149|         1|  4.29153e-06|  4.29153e-06|  0.00%|        if errors != 'strict':
   150|         0|            0|            0|  0.00%|            # IDNA is quite clear that implementations must be strict
   151|         0|            0|            0|  0.00%|            raise UnicodeError("unsupported error handling "+errors)
   152|         0|            0|            0|  0.00%|
   153|         1|  4.05312e-06|  4.05312e-06|  0.00%|        if not input:
   154|         0|            0|            0|  0.00%|            return b'', 0
   155|         0|            0|            0|  0.00%|
   156|         1|  4.05312e-06|  4.05312e-06|  0.00%|        try:
   157|         1|  5.00679e-06|  5.00679e-06|  0.00%|            result = input.encode('ascii')
   158|         0|            0|            0|  0.00%|        except UnicodeEncodeError:
   159|         0|            0|            0|  0.00%|            pass
   160|         0|            0|            0|  0.00%|        else:
   161|         0|            0|            0|  0.00%|            # ASCII name: fast path
   162|         1|  4.76837e-06|  4.76837e-06|  0.00%|            labels = result.split(b'.')
   163|         1|  5.00679e-06|  5.00679e-06|  0.00%|            for label in labels[:-1]:
   164|         0|            0|            0|  0.00%|                if not (0 < len(label) < 64):
   165|         0|            0|            0|  0.00%|                    raise UnicodeError("label empty or too long")
   166|         1|  4.29153e-06|  4.29153e-06|  0.00%|            if len(labels[-1]) >= 64:
   167|         0|            0|            0|  0.00%|                raise UnicodeError("label too long")
   168|         1|   3.8147e-06|   3.8147e-06|  0.00%|            return result, len(input)
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|        result = bytearray()
   171|         0|            0|            0|  0.00%|        labels = dots.split(input)
   172|         0|            0|            0|  0.00%|        if labels and not labels[-1]:
   173|         0|            0|            0|  0.00%|            trailing_dot = b'.'
   174|         0|            0|            0|  0.00%|            del labels[-1]
   175|         0|            0|            0|  0.00%|        else:
   176|         0|            0|            0|  0.00%|            trailing_dot = b''
   177|         0|            0|            0|  0.00%|        for label in labels:
   178|         0|            0|            0|  0.00%|            if result:
   179|         0|            0|            0|  0.00%|                # Join with U+002E
   180|         0|            0|            0|  0.00%|                result.extend(b'.')
   181|         0|            0|            0|  0.00%|            result.extend(ToASCII(label))
   182|         0|            0|            0|  0.00%|        return bytes(result+trailing_dot), len(input)
   183|         0|            0|            0|  0.00%|
   184|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def decode(self, input, errors='strict'):
   185|         0|            0|            0|  0.00%|
   186|         0|            0|            0|  0.00%|        if errors != 'strict':
   187|         0|            0|            0|  0.00%|            raise UnicodeError("Unsupported error handling "+errors)
   188|         0|            0|            0|  0.00%|
   189|         0|            0|            0|  0.00%|        if not input:
   190|         0|            0|            0|  0.00%|            return "", 0
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|        # IDNA allows decoding to operate on Unicode strings, too.
   193|         0|            0|            0|  0.00%|        if not isinstance(input, bytes):
   194|         0|            0|            0|  0.00%|            # XXX obviously wrong, see #3232
   195|         0|            0|            0|  0.00%|            input = bytes(input)
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|        if ace_prefix not in input:
   198|         0|            0|            0|  0.00%|            # Fast path
   199|         0|            0|            0|  0.00%|            try:
   200|         0|            0|            0|  0.00%|                return input.decode('ascii'), len(input)
   201|         0|            0|            0|  0.00%|            except UnicodeDecodeError:
   202|         0|            0|            0|  0.00%|                pass
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|        labels = input.split(b".")
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|        if labels and len(labels[-1]) == 0:
   207|         0|            0|            0|  0.00%|            trailing_dot = '.'
   208|         0|            0|            0|  0.00%|            del labels[-1]
   209|         0|            0|            0|  0.00%|        else:
   210|         0|            0|            0|  0.00%|            trailing_dot = ''
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|        result = []
   213|         0|            0|            0|  0.00%|        for label in labels:
   214|         0|            0|            0|  0.00%|            result.append(ToUnicode(label))
   215|         0|            0|            0|  0.00%|
   216|         0|            0|            0|  0.00%|        return ".".join(result)+trailing_dot, len(input)
   217|         0|            0|            0|  0.00%|
   218|         3|  4.24385e-05|  1.41462e-05|  0.02%|class IncrementalEncoder(codecs.BufferedIncrementalEncoder):
(call)|         1|  1.81198e-05|  1.81198e-05|  0.01%|# /usr/lib/python3.10/encodings/idna.py:218 IncrementalEncoder
   219|         1|  3.57628e-06|  3.57628e-06|  0.00%|    def _buffer_encode(self, input, errors, final):
   220|         0|            0|            0|  0.00%|        if errors != 'strict':
   221|         0|            0|            0|  0.00%|            # IDNA is quite clear that implementations must be strict
   222|         0|            0|            0|  0.00%|            raise UnicodeError("unsupported error handling "+errors)
   223|         0|            0|            0|  0.00%|
   224|         0|            0|            0|  0.00%|        if not input:
   225|         0|            0|            0|  0.00%|            return (b'', 0)
   226|         0|            0|            0|  0.00%|
   227|         0|            0|            0|  0.00%|        labels = dots.split(input)
   228|         0|            0|            0|  0.00%|        trailing_dot = b''
   229|         0|            0|            0|  0.00%|        if labels:
   230|         0|            0|            0|  0.00%|            if not labels[-1]:
   231|         0|            0|            0|  0.00%|                trailing_dot = b'.'
   232|         0|            0|            0|  0.00%|                del labels[-1]
   233|         0|            0|            0|  0.00%|            elif not final:
   234|         0|            0|            0|  0.00%|                # Keep potentially unfinished label until the next call
   235|         0|            0|            0|  0.00%|                del labels[-1]
   236|         0|            0|            0|  0.00%|                if labels:
   237|         0|            0|            0|  0.00%|                    trailing_dot = b'.'
   238|         0|            0|            0|  0.00%|
   239|         0|            0|            0|  0.00%|        result = bytearray()
   240|         0|            0|            0|  0.00%|        size = 0
   241|         0|            0|            0|  0.00%|        for label in labels:
   242|         0|            0|            0|  0.00%|            if size:
   243|         0|            0|            0|  0.00%|                # Join with U+002E
   244|         0|            0|            0|  0.00%|                result.extend(b'.')
   245|         0|            0|            0|  0.00%|                size += 1
   246|         0|            0|            0|  0.00%|            result.extend(ToASCII(label))
   247|         0|            0|            0|  0.00%|            size += len(label)
   248|         0|            0|            0|  0.00%|
   249|         0|            0|            0|  0.00%|        result += trailing_dot
   250|         0|            0|            0|  0.00%|        size += len(trailing_dot)
   251|         0|            0|            0|  0.00%|        return (bytes(result), size)
   252|         0|            0|            0|  0.00%|
   253|         3|  3.48091e-05|   1.1603e-05|  0.01%|class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
(call)|         1|  1.28746e-05|  1.28746e-05|  0.01%|# /usr/lib/python3.10/encodings/idna.py:253 IncrementalDecoder
   254|         1|   3.8147e-06|   3.8147e-06|  0.00%|    def _buffer_decode(self, input, errors, final):
   255|         0|            0|            0|  0.00%|        if errors != 'strict':
   256|         0|            0|            0|  0.00%|            raise UnicodeError("Unsupported error handling "+errors)
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|        if not input:
   259|         0|            0|            0|  0.00%|            return ("", 0)
   260|         0|            0|            0|  0.00%|
   261|         0|            0|            0|  0.00%|        # IDNA allows decoding to operate on Unicode strings, too.
   262|         0|            0|            0|  0.00%|        if isinstance(input, str):
   263|         0|            0|            0|  0.00%|            labels = dots.split(input)
   264|         0|            0|            0|  0.00%|        else:
   265|         0|            0|            0|  0.00%|            # Must be ASCII string
   266|         0|            0|            0|  0.00%|            input = str(input, "ascii")
   267|         0|            0|            0|  0.00%|            labels = input.split(".")
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|        trailing_dot = ''
   270|         0|            0|            0|  0.00%|        if labels:
   271|         0|            0|            0|  0.00%|            if not labels[-1]:
   272|         0|            0|            0|  0.00%|                trailing_dot = '.'
   273|         0|            0|            0|  0.00%|                del labels[-1]
   274|         0|            0|            0|  0.00%|            elif not final:
   275|         0|            0|            0|  0.00%|                # Keep potentially unfinished label until the next call
   276|         0|            0|            0|  0.00%|                del labels[-1]
   277|         0|            0|            0|  0.00%|                if labels:
   278|         0|            0|            0|  0.00%|                    trailing_dot = '.'
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|        result = []
   281|         0|            0|            0|  0.00%|        size = 0
   282|         0|            0|            0|  0.00%|        for label in labels:
   283|         0|            0|            0|  0.00%|            result.append(ToUnicode(label))
   284|         0|            0|            0|  0.00%|            if size:
   285|         0|            0|            0|  0.00%|                size += 1
   286|         0|            0|            0|  0.00%|            size += len(label)
   287|         0|            0|            0|  0.00%|
   288|         0|            0|            0|  0.00%|        result = ".".join(result) + trailing_dot
   289|         0|            0|            0|  0.00%|        size += len(trailing_dot)
   290|         0|            0|            0|  0.00%|        return (result, size)
   291|         0|            0|            0|  0.00%|
   292|         3|  3.67165e-05|  1.22388e-05|  0.02%|class StreamWriter(Codec,codecs.StreamWriter):
(call)|         1|  1.28746e-05|  1.28746e-05|  0.01%|# /usr/lib/python3.10/encodings/idna.py:292 StreamWriter
   293|         1|  3.33786e-06|  3.33786e-06|  0.00%|    pass
   294|         0|            0|            0|  0.00%|
   295|         3|  3.48091e-05|   1.1603e-05|  0.01%|class StreamReader(Codec,codecs.StreamReader):
(call)|         1|  1.21593e-05|  1.21593e-05|  0.01%|# /usr/lib/python3.10/encodings/idna.py:295 StreamReader
   296|         1|  2.86102e-06|  2.86102e-06|  0.00%|    pass
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|### encodings module API
   299|         0|            0|            0|  0.00%|
   300|         2|  1.00136e-05|  5.00679e-06|  0.00%|def getregentry():
   301|         2|  1.64509e-05|  8.22544e-06|  0.01%|    return codecs.CodecInfo(
(call)|         1|  5.31673e-05|  5.31673e-05|  0.02%|# /usr/lib/python3.10/codecs.py:94 __new__
   302|         1|  4.05312e-06|  4.05312e-06|  0.00%|        name='idna',
   303|         1|  4.29153e-06|  4.29153e-06|  0.00%|        encode=Codec().encode,
   304|         1|   3.8147e-06|   3.8147e-06|  0.00%|        decode=Codec().decode,
   305|         1|  5.24521e-06|  5.24521e-06|  0.00%|        incrementalencoder=IncrementalEncoder,
   306|         1|  3.09944e-06|  3.09944e-06|  0.00%|        incrementaldecoder=IncrementalDecoder,
   307|         1|  3.33786e-06|  3.33786e-06|  0.00%|        streamwriter=StreamWriter,
   308|         1|  3.09944e-06|  3.09944e-06|  0.00%|        streamreader=StreamReader,
   309|         0|            0|            0|  0.00%|    )
File: ./send_reminders.py
File duration: 0.000338793s (0.14%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         1|  9.77516e-06|  9.77516e-06|  0.00%|#!/usr/bin/env python3
     2|         0|            0|            0|  0.00%|
     3|         1|  1.21593e-05|  1.21593e-05|  0.01%|import datetime
     4|         1|  6.19888e-06|  6.19888e-06|  0.00%|import email
     5|         1|  1.64509e-05|  1.64509e-05|  0.01%|import smtplib
(call)|         1|     0.163931|     0.163931| 67.48%|# <frozen importlib._bootstrap>:1022 _find_and_load
     6|         1|  8.82149e-06|  8.82149e-06|  0.00%|import sys
     7|         0|            0|            0|  0.00%|
     8|         1|  5.00679e-06|  5.00679e-06|  0.00%|def usage():
     9|         0|            0|            0|  0.00%|    print("send_reminders: Send meeting reminders")
    10|         0|            0|            0|  0.00%|    print()
    11|         0|            0|            0|  0.00%|    print("invocation:")
    12|         0|            0|            0|  0.00%|    print("     send_reminders 'date|Meeting Title|Emails'")
    13|         0|            0|            0|  0.00%|    return 1
    14|         0|            0|            0|  0.00%|
    15|         2|  7.62939e-06|   3.8147e-06|  0.00%|def dow(date):
    16|         1|  2.71797e-05|  2.71797e-05|  0.01%|    dateobj = datetime.datetime.strptime(date, r"%Y-%m-%d")
(call)|         1|    0.0173929|    0.0173929|  7.16%|# <frozen importlib._bootstrap>:1022 _find_and_load
(call)|         1|    0.0203705|    0.0203705|  8.39%|# /usr/lib/python3.10/_strptime.py:565 _strptime_datetime
    17|         1|   1.5974e-05|   1.5974e-05|  0.01%|    return dateobj.strftime("%A")
    18|         0|            0|            0|  0.00%|
    19|         2|  8.10623e-06|  4.05312e-06|  0.00%|def message_template(date, title):
    20|         1|  1.21593e-05|  1.21593e-05|  0.01%|    message = email.message.EmailMessage()
(call)|         1|  7.31945e-05|  7.31945e-05|  0.03%|# /usr/lib/python3.10/email/message.py:947 __init__
    21|         1|  1.21593e-05|  1.21593e-05|  0.01%|    weekday = dow(date)
(call)|         1|    0.0378101|    0.0378101| 15.56%|# ./send_reminders.py:15 dow
    22|         1|  1.50204e-05|  1.50204e-05|  0.01%|    message['Subject'] = f'Meeting reminder: "{title}"'
(call)|         1|   0.00101519|   0.00101519|  0.42%|# /usr/lib/python3.10/email/message.py:393 __setitem__
    23|         4|   2.3365e-05|  5.84126e-06|  0.01%|    message.set_content(f'''
(call)|         1|   0.00791597|   0.00791597|  3.26%|# /usr/lib/python3.10/email/message.py:1170 set_content
    24|         0|            0|            0|  0.00%|    Hi all!
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|    This is a quick mail to remind you all that we have a meeting about:
    27|         1|  3.33786e-06|  3.33786e-06|  0.00%|    "{title}"
    28|         2|   6.4373e-06|  3.21865e-06|  0.00%|    the {weekday} {date}.
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|    See you there.
    31|         0|            0|            0|  0.00%|    ''')
    32|         1|   3.8147e-06|   3.8147e-06|  0.00%|    return message
    33|         0|            0|            0|  0.00%|
    34|         2|  9.29832e-06|  4.64916e-06|  0.00%|def send_message(message, emails):
    35|         1|  1.66893e-05|  1.66893e-05|  0.01%|    smtp = smtplib.SMTP('localhost')
(call)|         1|    0.0318413|    0.0318413| 13.11%|# /usr/lib/python3.10/smtplib.py:229 __init__
    36|         0|            0|            0|  0.00%|    message['From'] = 'noreply@example.com'
    37|         0|            0|            0|  0.00%|    for email in emails.split(','):
    38|         0|            0|            0|  0.00%|        del message['To']
    39|         0|            0|            0|  0.00%|        message['To'] = email
    40|         0|            0|            0|  0.00%|        smtp.send_message(message)
    41|         0|            0|            0|  0.00%|    smtp.quit()
    42|         0|            0|            0|  0.00%|
    43|         2|  8.58307e-06|  4.29153e-06|  0.00%|def main():
    44|         1|  4.52995e-06|  4.52995e-06|  0.00%|    if len(sys.argv) < 2:
    45|         0|            0|            0|  0.00%|        return usage()
    46|         0|            0|            0|  0.00%|
    47|         1|  5.00679e-06|  5.00679e-06|  0.00%|    try:
    48|         1|  5.72205e-06|  5.72205e-06|  0.00%|        date, title, emails = sys.argv[1].split('|')
    49|         1|  1.38283e-05|  1.38283e-05|  0.01%|        message = message_template(date, title)
(call)|         1|    0.0468946|    0.0468946| 19.30%|# ./send_reminders.py:19 message_template
    50|         1|   1.3113e-05|   1.3113e-05|  0.01%|        send_message(message, emails)
(call)|         1|    0.0318627|    0.0318627| 13.12%|# ./send_reminders.py:34 send_message
    51|         0|            0|            0|  0.00%|        print("Successfully sent reminders to:", emails)
    52|         1|  4.76837e-06|  4.76837e-06|  0.00%|    except Exception as e:
    53|         1|  2.90871e-05|  2.90871e-05|  0.01%|        print(f"Failure to send email with: {e}", file=sys.stderr)
    54|         0|            0|            0|  0.00%|
    55|         1|  4.29153e-06|  4.29153e-06|  0.00%|if __name__ == "__main__":
    56|         1|  3.02792e-05|  3.02792e-05|  0.01%|    sys.exit(main())
(call)|         1|    0.0788376|    0.0788376| 32.45%|# ./send_reminders.py:43 main
File: /usr/lib/python3.10/locale.py
File duration: 0.000328541s (0.14%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""Locale support module.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|The module provides low-level access to the C lib's locale APIs and adds high
     4|         0|            0|            0|  0.00%|level number formatting APIs as well as a locale aliasing engine to complement
     5|         0|            0|            0|  0.00%|these.
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|The aliasing engine includes support for many commonly used locale names and
     8|         0|            0|            0|  0.00%|maps them to values suitable for passing to the C lib's setlocale() function. It
     9|         0|            0|            0|  0.00%|also includes default encodings for all supported locale names.
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|"""
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|import sys
    14|         0|            0|            0|  0.00%|import encodings
    15|         0|            0|            0|  0.00%|import encodings.aliases
    16|         0|            0|            0|  0.00%|import re
    17|         0|            0|            0|  0.00%|import _collections_abc
    18|         0|            0|            0|  0.00%|from builtins import str as _builtin_str
    19|         0|            0|            0|  0.00%|import functools
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|# Try importing the _locale module.
    22|         0|            0|            0|  0.00%|#
    23|         0|            0|            0|  0.00%|# If this fails, fall back on a basic 'C' locale emulation.
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|# Yuck:  LC_MESSAGES is non-standard:  can't tell whether it exists before
    26|         0|            0|            0|  0.00%|# trying the import.  So __all__ is also fiddled at the end of the file.
    27|         0|            0|            0|  0.00%|__all__ = ["getlocale", "getdefaultlocale", "getpreferredencoding", "Error",
    28|         0|            0|            0|  0.00%|           "setlocale", "resetlocale", "localeconv", "strcoll", "strxfrm",
    29|         0|            0|            0|  0.00%|           "str", "atof", "atoi", "format", "format_string", "currency",
    30|         0|            0|            0|  0.00%|           "normalize", "LC_CTYPE", "LC_COLLATE", "LC_TIME", "LC_MONETARY",
    31|         0|            0|            0|  0.00%|           "LC_NUMERIC", "LC_ALL", "CHAR_MAX"]
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|def _strcoll(a,b):
    34|         0|            0|            0|  0.00%|    """ strcoll(string,string) -> int.
    35|         0|            0|            0|  0.00%|        Compares two strings according to the locale.
    36|         0|            0|            0|  0.00%|    """
    37|         0|            0|            0|  0.00%|    return (a > b) - (a < b)
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|def _strxfrm(s):
    40|         0|            0|            0|  0.00%|    """ strxfrm(string) -> string.
    41|         0|            0|            0|  0.00%|        Returns a string that behaves for cmp locale-aware.
    42|         0|            0|            0|  0.00%|    """
    43|         0|            0|            0|  0.00%|    return s
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|try:
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|    from _locale import *
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|except ImportError:
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|    # Locale emulation
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|    CHAR_MAX = 127
    54|         0|            0|            0|  0.00%|    LC_ALL = 6
    55|         0|            0|            0|  0.00%|    LC_COLLATE = 3
    56|         0|            0|            0|  0.00%|    LC_CTYPE = 0
    57|         0|            0|            0|  0.00%|    LC_MESSAGES = 5
    58|         0|            0|            0|  0.00%|    LC_MONETARY = 4
    59|         0|            0|            0|  0.00%|    LC_NUMERIC = 1
    60|         0|            0|            0|  0.00%|    LC_TIME = 2
    61|         0|            0|            0|  0.00%|    Error = ValueError
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|    def localeconv():
    64|         0|            0|            0|  0.00%|        """ localeconv() -> dict.
    65|         0|            0|            0|  0.00%|            Returns numeric and monetary locale-specific parameters.
    66|         0|            0|            0|  0.00%|        """
    67|         0|            0|            0|  0.00%|        # 'C' locale default values
    68|         0|            0|            0|  0.00%|        return {'grouping': [127],
    69|         0|            0|            0|  0.00%|                'currency_symbol': '',
    70|         0|            0|            0|  0.00%|                'n_sign_posn': 127,
    71|         0|            0|            0|  0.00%|                'p_cs_precedes': 127,
    72|         0|            0|            0|  0.00%|                'n_cs_precedes': 127,
    73|         0|            0|            0|  0.00%|                'mon_grouping': [],
    74|         0|            0|            0|  0.00%|                'n_sep_by_space': 127,
    75|         0|            0|            0|  0.00%|                'decimal_point': '.',
    76|         0|            0|            0|  0.00%|                'negative_sign': '',
    77|         0|            0|            0|  0.00%|                'positive_sign': '',
    78|         0|            0|            0|  0.00%|                'p_sep_by_space': 127,
    79|         0|            0|            0|  0.00%|                'int_curr_symbol': '',
    80|         0|            0|            0|  0.00%|                'p_sign_posn': 127,
    81|         0|            0|            0|  0.00%|                'thousands_sep': '',
    82|         0|            0|            0|  0.00%|                'mon_thousands_sep': '',
    83|         0|            0|            0|  0.00%|                'frac_digits': 127,
    84|         0|            0|            0|  0.00%|                'mon_decimal_point': '',
    85|         0|            0|            0|  0.00%|                'int_frac_digits': 127}
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|    def setlocale(category, value=None):
    88|         0|            0|            0|  0.00%|        """ setlocale(integer,string=None) -> string.
    89|         0|            0|            0|  0.00%|            Activates/queries locale processing.
    90|         0|            0|            0|  0.00%|        """
    91|         0|            0|            0|  0.00%|        if value not in (None, '', 'C'):
    92|         0|            0|            0|  0.00%|            raise Error('_locale emulation only supports "C" locale')
    93|         0|            0|            0|  0.00%|        return 'C'
    94|         0|            0|            0|  0.00%|
    95|         0|            0|            0|  0.00%|# These may or may not exist in _locale, so be sure to set them.
    96|         0|            0|            0|  0.00%|if 'strxfrm' not in globals():
    97|         0|            0|            0|  0.00%|    strxfrm = _strxfrm
    98|         0|            0|            0|  0.00%|if 'strcoll' not in globals():
    99|         0|            0|            0|  0.00%|    strcoll = _strcoll
   100|         0|            0|            0|  0.00%|
   101|         0|            0|            0|  0.00%|
   102|         0|            0|            0|  0.00%|_localeconv = localeconv
   103|         0|            0|            0|  0.00%|
   104|         0|            0|            0|  0.00%|# With this dict, you can override some items of localeconv's return value.
   105|         0|            0|            0|  0.00%|# This is useful for testing purposes.
   106|         0|            0|            0|  0.00%|_override_localeconv = {}
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|@functools.wraps(_localeconv)
   109|         0|            0|            0|  0.00%|def localeconv():
   110|         0|            0|            0|  0.00%|    d = _localeconv()
   111|         0|            0|            0|  0.00%|    if _override_localeconv:
   112|         0|            0|            0|  0.00%|        d.update(_override_localeconv)
   113|         0|            0|            0|  0.00%|    return d
   114|         0|            0|            0|  0.00%|
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|### Number formatting APIs
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|# Author: Martin von Loewis
   119|         0|            0|            0|  0.00%|# improved by Georg Brandl
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|# Iterate over grouping intervals
   122|         0|            0|            0|  0.00%|def _grouping_intervals(grouping):
   123|         0|            0|            0|  0.00%|    last_interval = None
   124|         0|            0|            0|  0.00%|    for interval in grouping:
   125|         0|            0|            0|  0.00%|        # if grouping is -1, we are done
   126|         0|            0|            0|  0.00%|        if interval == CHAR_MAX:
   127|         0|            0|            0|  0.00%|            return
   128|         0|            0|            0|  0.00%|        # 0: re-use last group ad infinitum
   129|         0|            0|            0|  0.00%|        if interval == 0:
   130|         0|            0|            0|  0.00%|            if last_interval is None:
   131|         0|            0|            0|  0.00%|                raise ValueError("invalid grouping")
   132|         0|            0|            0|  0.00%|            while True:
   133|         0|            0|            0|  0.00%|                yield last_interval
   134|         0|            0|            0|  0.00%|        yield interval
   135|         0|            0|            0|  0.00%|        last_interval = interval
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|#perform the grouping from right to left
   138|         0|            0|            0|  0.00%|def _group(s, monetary=False):
   139|         0|            0|            0|  0.00%|    conv = localeconv()
   140|         0|            0|            0|  0.00%|    thousands_sep = conv[monetary and 'mon_thousands_sep' or 'thousands_sep']
   141|         0|            0|            0|  0.00%|    grouping = conv[monetary and 'mon_grouping' or 'grouping']
   142|         0|            0|            0|  0.00%|    if not grouping:
   143|         0|            0|            0|  0.00%|        return (s, 0)
   144|         0|            0|            0|  0.00%|    if s[-1] == ' ':
   145|         0|            0|            0|  0.00%|        stripped = s.rstrip()
   146|         0|            0|            0|  0.00%|        right_spaces = s[len(stripped):]
   147|         0|            0|            0|  0.00%|        s = stripped
   148|         0|            0|            0|  0.00%|    else:
   149|         0|            0|            0|  0.00%|        right_spaces = ''
   150|         0|            0|            0|  0.00%|    left_spaces = ''
   151|         0|            0|            0|  0.00%|    groups = []
   152|         0|            0|            0|  0.00%|    for interval in _grouping_intervals(grouping):
   153|         0|            0|            0|  0.00%|        if not s or s[-1] not in "0123456789":
   154|         0|            0|            0|  0.00%|            # only non-digit characters remain (sign, spaces)
   155|         0|            0|            0|  0.00%|            left_spaces = s
   156|         0|            0|            0|  0.00%|            s = ''
   157|         0|            0|            0|  0.00%|            break
   158|         0|            0|            0|  0.00%|        groups.append(s[-interval:])
   159|         0|            0|            0|  0.00%|        s = s[:-interval]
   160|         0|            0|            0|  0.00%|    if s:
   161|         0|            0|            0|  0.00%|        groups.append(s)
   162|         0|            0|            0|  0.00%|    groups.reverse()
   163|         0|            0|            0|  0.00%|    return (
   164|         0|            0|            0|  0.00%|        left_spaces + thousands_sep.join(groups) + right_spaces,
   165|         0|            0|            0|  0.00%|        len(thousands_sep) * (len(groups) - 1)
   166|         0|            0|            0|  0.00%|    )
   167|         0|            0|            0|  0.00%|
   168|         0|            0|            0|  0.00%|# Strip a given amount of excess padding from the given string
   169|         0|            0|            0|  0.00%|def _strip_padding(s, amount):
   170|         0|            0|            0|  0.00%|    lpos = 0
   171|         0|            0|            0|  0.00%|    while amount and s[lpos] == ' ':
   172|         0|            0|            0|  0.00%|        lpos += 1
   173|         0|            0|            0|  0.00%|        amount -= 1
   174|         0|            0|            0|  0.00%|    rpos = len(s) - 1
   175|         0|            0|            0|  0.00%|    while amount and s[rpos] == ' ':
   176|         0|            0|            0|  0.00%|        rpos -= 1
   177|         0|            0|            0|  0.00%|        amount -= 1
   178|         0|            0|            0|  0.00%|    return s[lpos:rpos+1]
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|_percent_re = re.compile(r'%(?:\((?P<key>.*?)\))?'
   181|         0|            0|            0|  0.00%|                         r'(?P<modifiers>[-#0-9 +*.hlL]*?)[eEfFgGdiouxXcrs%]')
   182|         0|            0|            0|  0.00%|
   183|         0|            0|            0|  0.00%|def _format(percent, value, grouping=False, monetary=False, *additional):
   184|         0|            0|            0|  0.00%|    if additional:
   185|         0|            0|            0|  0.00%|        formatted = percent % ((value,) + additional)
   186|         0|            0|            0|  0.00%|    else:
   187|         0|            0|            0|  0.00%|        formatted = percent % value
   188|         0|            0|            0|  0.00%|    if percent[-1] in 'eEfFgGdiu':
   189|         0|            0|            0|  0.00%|        formatted = _localize(formatted, grouping, monetary)
   190|         0|            0|            0|  0.00%|    return formatted
   191|         0|            0|            0|  0.00%|
   192|         0|            0|            0|  0.00%|# Transform formatted as locale number according to the locale settings
   193|         0|            0|            0|  0.00%|def _localize(formatted, grouping=False, monetary=False):
   194|         0|            0|            0|  0.00%|    # floats and decimal ints need special action!
   195|         0|            0|            0|  0.00%|    if '.' in formatted:
   196|         0|            0|            0|  0.00%|        seps = 0
   197|         0|            0|            0|  0.00%|        parts = formatted.split('.')
   198|         0|            0|            0|  0.00%|        if grouping:
   199|         0|            0|            0|  0.00%|            parts[0], seps = _group(parts[0], monetary=monetary)
   200|         0|            0|            0|  0.00%|        decimal_point = localeconv()[monetary and 'mon_decimal_point'
   201|         0|            0|            0|  0.00%|                                              or 'decimal_point']
   202|         0|            0|            0|  0.00%|        formatted = decimal_point.join(parts)
   203|         0|            0|            0|  0.00%|        if seps:
   204|         0|            0|            0|  0.00%|            formatted = _strip_padding(formatted, seps)
   205|         0|            0|            0|  0.00%|    else:
   206|         0|            0|            0|  0.00%|        seps = 0
   207|         0|            0|            0|  0.00%|        if grouping:
   208|         0|            0|            0|  0.00%|            formatted, seps = _group(formatted, monetary=monetary)
   209|         0|            0|            0|  0.00%|        if seps:
   210|         0|            0|            0|  0.00%|            formatted = _strip_padding(formatted, seps)
   211|         0|            0|            0|  0.00%|    return formatted
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|def format_string(f, val, grouping=False, monetary=False):
   214|         0|            0|            0|  0.00%|    """Formats a string in the same way that the % formatting would use,
   215|         0|            0|            0|  0.00%|    but takes the current locale into account.
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|    Grouping is applied if the third parameter is true.
   218|         0|            0|            0|  0.00%|    Conversion uses monetary thousands separator and grouping strings if
   219|         0|            0|            0|  0.00%|    forth parameter monetary is true."""
   220|         0|            0|            0|  0.00%|    percents = list(_percent_re.finditer(f))
   221|         0|            0|            0|  0.00%|    new_f = _percent_re.sub('%s', f)
   222|         0|            0|            0|  0.00%|
   223|         0|            0|            0|  0.00%|    if isinstance(val, _collections_abc.Mapping):
   224|         0|            0|            0|  0.00%|        new_val = []
   225|         0|            0|            0|  0.00%|        for perc in percents:
   226|         0|            0|            0|  0.00%|            if perc.group()[-1]=='%':
   227|         0|            0|            0|  0.00%|                new_val.append('%')
   228|         0|            0|            0|  0.00%|            else:
   229|         0|            0|            0|  0.00%|                new_val.append(_format(perc.group(), val, grouping, monetary))
   230|         0|            0|            0|  0.00%|    else:
   231|         0|            0|            0|  0.00%|        if not isinstance(val, tuple):
   232|         0|            0|            0|  0.00%|            val = (val,)
   233|         0|            0|            0|  0.00%|        new_val = []
   234|         0|            0|            0|  0.00%|        i = 0
   235|         0|            0|            0|  0.00%|        for perc in percents:
   236|         0|            0|            0|  0.00%|            if perc.group()[-1]=='%':
   237|         0|            0|            0|  0.00%|                new_val.append('%')
   238|         0|            0|            0|  0.00%|            else:
   239|         0|            0|            0|  0.00%|                starcount = perc.group('modifiers').count('*')
   240|         0|            0|            0|  0.00%|                new_val.append(_format(perc.group(),
   241|         0|            0|            0|  0.00%|                                      val[i],
   242|         0|            0|            0|  0.00%|                                      grouping,
   243|         0|            0|            0|  0.00%|                                      monetary,
   244|         0|            0|            0|  0.00%|                                      *val[i+1:i+1+starcount]))
   245|         0|            0|            0|  0.00%|                i += (1 + starcount)
   246|         0|            0|            0|  0.00%|    val = tuple(new_val)
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|    return new_f % val
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|def format(percent, value, grouping=False, monetary=False, *additional):
   251|         0|            0|            0|  0.00%|    """Deprecated, use format_string instead."""
   252|         0|            0|            0|  0.00%|    import warnings
   253|         0|            0|            0|  0.00%|    warnings.warn(
   254|         0|            0|            0|  0.00%|        "This method will be removed in a future version of Python. "
   255|         0|            0|            0|  0.00%|        "Use 'locale.format_string()' instead.",
   256|         0|            0|            0|  0.00%|        DeprecationWarning, stacklevel=2
   257|         0|            0|            0|  0.00%|    )
   258|         0|            0|            0|  0.00%|
   259|         0|            0|            0|  0.00%|    match = _percent_re.match(percent)
   260|         0|            0|            0|  0.00%|    if not match or len(match.group())!= len(percent):
   261|         0|            0|            0|  0.00%|        raise ValueError(("format() must be given exactly one %%char "
   262|         0|            0|            0|  0.00%|                         "format specifier, %s not valid") % repr(percent))
   263|         0|            0|            0|  0.00%|    return _format(percent, value, grouping, monetary, *additional)
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|def currency(val, symbol=True, grouping=False, international=False):
   266|         0|            0|            0|  0.00%|    """Formats val according to the currency settings
   267|         0|            0|            0|  0.00%|    in the current locale."""
   268|         0|            0|            0|  0.00%|    conv = localeconv()
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|    # check for illegal values
   271|         0|            0|            0|  0.00%|    digits = conv[international and 'int_frac_digits' or 'frac_digits']
   272|         0|            0|            0|  0.00%|    if digits == 127:
   273|         0|            0|            0|  0.00%|        raise ValueError("Currency formatting is not possible using "
   274|         0|            0|            0|  0.00%|                         "the 'C' locale.")
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|    s = _localize(f'{abs(val):.{digits}f}', grouping, monetary=True)
   277|         0|            0|            0|  0.00%|    # '<' and '>' are markers if the sign must be inserted between symbol and value
   278|         0|            0|            0|  0.00%|    s = '<' + s + '>'
   279|         0|            0|            0|  0.00%|
   280|         0|            0|            0|  0.00%|    if symbol:
   281|         0|            0|            0|  0.00%|        smb = conv[international and 'int_curr_symbol' or 'currency_symbol']
   282|         0|            0|            0|  0.00%|        precedes = conv[val<0 and 'n_cs_precedes' or 'p_cs_precedes']
   283|         0|            0|            0|  0.00%|        separated = conv[val<0 and 'n_sep_by_space' or 'p_sep_by_space']
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|        if precedes:
   286|         0|            0|            0|  0.00%|            s = smb + (separated and ' ' or '') + s
   287|         0|            0|            0|  0.00%|        else:
   288|         0|            0|            0|  0.00%|            if international and smb[-1] == ' ':
   289|         0|            0|            0|  0.00%|                smb = smb[:-1]
   290|         0|            0|            0|  0.00%|            s = s + (separated and ' ' or '') + smb
   291|         0|            0|            0|  0.00%|
   292|         0|            0|            0|  0.00%|    sign_pos = conv[val<0 and 'n_sign_posn' or 'p_sign_posn']
   293|         0|            0|            0|  0.00%|    sign = conv[val<0 and 'negative_sign' or 'positive_sign']
   294|         0|            0|            0|  0.00%|
   295|         0|            0|            0|  0.00%|    if sign_pos == 0:
   296|         0|            0|            0|  0.00%|        s = '(' + s + ')'
   297|         0|            0|            0|  0.00%|    elif sign_pos == 1:
   298|         0|            0|            0|  0.00%|        s = sign + s
   299|         0|            0|            0|  0.00%|    elif sign_pos == 2:
   300|         0|            0|            0|  0.00%|        s = s + sign
   301|         0|            0|            0|  0.00%|    elif sign_pos == 3:
   302|         0|            0|            0|  0.00%|        s = s.replace('<', sign)
   303|         0|            0|            0|  0.00%|    elif sign_pos == 4:
   304|         0|            0|            0|  0.00%|        s = s.replace('>', sign)
   305|         0|            0|            0|  0.00%|    else:
   306|         0|            0|            0|  0.00%|        # the default if nothing specified;
   307|         0|            0|            0|  0.00%|        # this should be the most fitting sign position
   308|         0|            0|            0|  0.00%|        s = sign + s
   309|         0|            0|            0|  0.00%|
   310|         0|            0|            0|  0.00%|    return s.replace('<', '').replace('>', '')
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|def str(val):
   313|         0|            0|            0|  0.00%|    """Convert float to string, taking the locale into account."""
   314|         0|            0|            0|  0.00%|    return _format("%.12g", val)
   315|         0|            0|            0|  0.00%|
   316|         0|            0|            0|  0.00%|def delocalize(string):
   317|         0|            0|            0|  0.00%|    "Parses a string as a normalized number according to the locale settings."
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|    conv = localeconv()
   320|         0|            0|            0|  0.00%|
   321|         0|            0|            0|  0.00%|    #First, get rid of the grouping
   322|         0|            0|            0|  0.00%|    ts = conv['thousands_sep']
   323|         0|            0|            0|  0.00%|    if ts:
   324|         0|            0|            0|  0.00%|        string = string.replace(ts, '')
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|    #next, replace the decimal point with a dot
   327|         0|            0|            0|  0.00%|    dd = conv['decimal_point']
   328|         0|            0|            0|  0.00%|    if dd:
   329|         0|            0|            0|  0.00%|        string = string.replace(dd, '.')
   330|         0|            0|            0|  0.00%|    return string
   331|         0|            0|            0|  0.00%|
   332|         0|            0|            0|  0.00%|def localize(string, grouping=False, monetary=False):
   333|         0|            0|            0|  0.00%|    """Parses a string as locale number according to the locale settings."""
   334|         0|            0|            0|  0.00%|    return _localize(string, grouping, monetary)
   335|         0|            0|            0|  0.00%|
   336|         0|            0|            0|  0.00%|def atof(string, func=float):
   337|         0|            0|            0|  0.00%|    "Parses a string as a float according to the locale settings."
   338|         0|            0|            0|  0.00%|    return func(delocalize(string))
   339|         0|            0|            0|  0.00%|
   340|         0|            0|            0|  0.00%|def atoi(string):
   341|         0|            0|            0|  0.00%|    "Converts a string to an integer according to the locale settings."
   342|         0|            0|            0|  0.00%|    return int(delocalize(string))
   343|         0|            0|            0|  0.00%|
   344|         0|            0|            0|  0.00%|def _test():
   345|         0|            0|            0|  0.00%|    setlocale(LC_ALL, "")
   346|         0|            0|            0|  0.00%|    #do grouping
   347|         0|            0|            0|  0.00%|    s1 = format_string("%d", 123456789,1)
   348|         0|            0|            0|  0.00%|    print(s1, "is", atoi(s1))
   349|         0|            0|            0|  0.00%|    #standard formatting
   350|         0|            0|            0|  0.00%|    s1 = str(3.14)
   351|         0|            0|            0|  0.00%|    print(s1, "is", atof(s1))
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|### Locale name aliasing engine
   354|         0|            0|            0|  0.00%|
   355|         0|            0|            0|  0.00%|# Author: Marc-Andre Lemburg, mal@lemburg.com
   356|         0|            0|            0|  0.00%|# Various tweaks by Fredrik Lundh <fredrik@pythonware.com>
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|# store away the low-level version of setlocale (it's
   359|         0|            0|            0|  0.00%|# overridden below)
   360|         0|            0|            0|  0.00%|_setlocale = setlocale
   361|         0|            0|            0|  0.00%|
   362|         0|            0|            0|  0.00%|def _replace_encoding(code, encoding):
   363|         0|            0|            0|  0.00%|    if '.' in code:
   364|         0|            0|            0|  0.00%|        langname = code[:code.index('.')]
   365|         0|            0|            0|  0.00%|    else:
   366|         0|            0|            0|  0.00%|        langname = code
   367|         0|            0|            0|  0.00%|    # Convert the encoding to a C lib compatible encoding string
   368|         0|            0|            0|  0.00%|    norm_encoding = encodings.normalize_encoding(encoding)
   369|         0|            0|            0|  0.00%|    #print('norm encoding: %r' % norm_encoding)
   370|         0|            0|            0|  0.00%|    norm_encoding = encodings.aliases.aliases.get(norm_encoding.lower(),
   371|         0|            0|            0|  0.00%|                                                  norm_encoding)
   372|         0|            0|            0|  0.00%|    #print('aliased encoding: %r' % norm_encoding)
   373|         0|            0|            0|  0.00%|    encoding = norm_encoding
   374|         0|            0|            0|  0.00%|    norm_encoding = norm_encoding.lower()
   375|         0|            0|            0|  0.00%|    if norm_encoding in locale_encoding_alias:
   376|         0|            0|            0|  0.00%|        encoding = locale_encoding_alias[norm_encoding]
   377|         0|            0|            0|  0.00%|    else:
   378|         0|            0|            0|  0.00%|        norm_encoding = norm_encoding.replace('_', '')
   379|         0|            0|            0|  0.00%|        norm_encoding = norm_encoding.replace('-', '')
   380|         0|            0|            0|  0.00%|        if norm_encoding in locale_encoding_alias:
   381|         0|            0|            0|  0.00%|            encoding = locale_encoding_alias[norm_encoding]
   382|         0|            0|            0|  0.00%|    #print('found encoding %r' % encoding)
   383|         0|            0|            0|  0.00%|    return langname + '.' + encoding
   384|         0|            0|            0|  0.00%|
   385|         0|            0|            0|  0.00%|def _append_modifier(code, modifier):
   386|         0|            0|            0|  0.00%|    if modifier == 'euro':
   387|         0|            0|            0|  0.00%|        if '.' not in code:
   388|         0|            0|            0|  0.00%|            return code + '.ISO8859-15'
   389|         0|            0|            0|  0.00%|        _, _, encoding = code.partition('.')
   390|         0|            0|            0|  0.00%|        if encoding in ('ISO8859-15', 'UTF-8'):
   391|         0|            0|            0|  0.00%|            return code
   392|         0|            0|            0|  0.00%|        if encoding == 'ISO8859-1':
   393|         0|            0|            0|  0.00%|            return _replace_encoding(code, 'ISO8859-15')
   394|         0|            0|            0|  0.00%|    return code + '@' + modifier
   395|         0|            0|            0|  0.00%|
   396|         3|  1.21593e-05|  4.05312e-06|  0.01%|def normalize(localename):
   397|         0|            0|            0|  0.00%|
   398|         0|            0|            0|  0.00%|    """ Returns a normalized locale code for the given locale
   399|         0|            0|            0|  0.00%|        name.
   400|         0|            0|            0|  0.00%|
   401|         0|            0|            0|  0.00%|        The returned locale code is formatted for use with
   402|         0|            0|            0|  0.00%|        setlocale().
   403|         0|            0|            0|  0.00%|
   404|         0|            0|            0|  0.00%|        If normalization fails, the original name is returned
   405|         0|            0|            0|  0.00%|        unchanged.
   406|         0|            0|            0|  0.00%|
   407|         0|            0|            0|  0.00%|        If the given encoding is not known, the function defaults to
   408|         0|            0|            0|  0.00%|        the default encoding for the locale code just like setlocale()
   409|         0|            0|            0|  0.00%|        does.
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|    """
   412|         0|            0|            0|  0.00%|    # Normalize the locale name and extract the encoding and modifier
   413|         3|  1.71661e-05|  5.72205e-06|  0.01%|    code = localename.lower()
   414|         3|  1.14441e-05|   3.8147e-06|  0.00%|    if ':' in code:
   415|         0|            0|            0|  0.00%|        # ':' is sometimes used as encoding delimiter.
   416|         0|            0|            0|  0.00%|        code = code.replace(':', '.')
   417|         3|  1.21593e-05|  4.05312e-06|  0.01%|    if '@' in code:
   418|         0|            0|            0|  0.00%|        code, modifier = code.split('@', 1)
   419|         0|            0|            0|  0.00%|    else:
   420|         3|  1.09673e-05|  3.65575e-06|  0.00%|        modifier = ''
   421|         3|  1.14441e-05|   3.8147e-06|  0.00%|    if '.' in code:
   422|         0|            0|            0|  0.00%|        langname, encoding = code.split('.')[:2]
   423|         0|            0|            0|  0.00%|    else:
   424|         3|  1.07288e-05|  3.57628e-06|  0.00%|        langname = code
   425|         3|  1.12057e-05|  3.73522e-06|  0.00%|        encoding = ''
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|    # First lookup: fullname (possibly with encoding and modifier)
   428|         3|  1.09673e-05|  3.65575e-06|  0.00%|    lang_enc = langname
   429|         3|  1.09673e-05|  3.65575e-06|  0.00%|    if encoding:
   430|         0|            0|            0|  0.00%|        norm_encoding = encoding.replace('-', '')
   431|         0|            0|            0|  0.00%|        norm_encoding = norm_encoding.replace('_', '')
   432|         0|            0|            0|  0.00%|        lang_enc += '.' + norm_encoding
   433|         3|  1.04904e-05|  3.49681e-06|  0.00%|    lookup_name = lang_enc
   434|         3|  1.04904e-05|  3.49681e-06|  0.00%|    if modifier:
   435|         0|            0|            0|  0.00%|        lookup_name += '@' + modifier
   436|         3|  1.21593e-05|  4.05312e-06|  0.01%|    code = locale_alias.get(lookup_name, None)
   437|         3|  1.04904e-05|  3.49681e-06|  0.00%|    if code is not None:
   438|         3|  1.00136e-05|  3.33786e-06|  0.00%|        return code
   439|         0|            0|            0|  0.00%|    #print('first lookup failed')
   440|         0|            0|            0|  0.00%|
   441|         0|            0|            0|  0.00%|    if modifier:
   442|         0|            0|            0|  0.00%|        # Second try: fullname without modifier (possibly with encoding)
   443|         0|            0|            0|  0.00%|        code = locale_alias.get(lang_enc, None)
   444|         0|            0|            0|  0.00%|        if code is not None:
   445|         0|            0|            0|  0.00%|            #print('lookup without modifier succeeded')
   446|         0|            0|            0|  0.00%|            if '@' not in code:
   447|         0|            0|            0|  0.00%|                return _append_modifier(code, modifier)
   448|         0|            0|            0|  0.00%|            if code.split('@', 1)[1].lower() == modifier:
   449|         0|            0|            0|  0.00%|                return code
   450|         0|            0|            0|  0.00%|        #print('second lookup failed')
   451|         0|            0|            0|  0.00%|
   452|         0|            0|            0|  0.00%|    if encoding:
   453|         0|            0|            0|  0.00%|        # Third try: langname (without encoding, possibly with modifier)
   454|         0|            0|            0|  0.00%|        lookup_name = langname
   455|         0|            0|            0|  0.00%|        if modifier:
   456|         0|            0|            0|  0.00%|            lookup_name += '@' + modifier
   457|         0|            0|            0|  0.00%|        code = locale_alias.get(lookup_name, None)
   458|         0|            0|            0|  0.00%|        if code is not None:
   459|         0|            0|            0|  0.00%|            #print('lookup without encoding succeeded')
   460|         0|            0|            0|  0.00%|            if '@' not in code:
   461|         0|            0|            0|  0.00%|                return _replace_encoding(code, encoding)
   462|         0|            0|            0|  0.00%|            code, modifier = code.split('@', 1)
   463|         0|            0|            0|  0.00%|            return _replace_encoding(code, encoding) + '@' + modifier
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|        if modifier:
   466|         0|            0|            0|  0.00%|            # Fourth try: langname (without encoding and modifier)
   467|         0|            0|            0|  0.00%|            code = locale_alias.get(langname, None)
   468|         0|            0|            0|  0.00%|            if code is not None:
   469|         0|            0|            0|  0.00%|                #print('lookup without modifier and encoding succeeded')
   470|         0|            0|            0|  0.00%|                if '@' not in code:
   471|         0|            0|            0|  0.00%|                    code = _replace_encoding(code, encoding)
   472|         0|            0|            0|  0.00%|                    return _append_modifier(code, modifier)
   473|         0|            0|            0|  0.00%|                code, defmod = code.split('@', 1)
   474|         0|            0|            0|  0.00%|                if defmod.lower() == modifier:
   475|         0|            0|            0|  0.00%|                    return _replace_encoding(code, encoding) + '@' + defmod
   476|         0|            0|            0|  0.00%|
   477|         0|            0|            0|  0.00%|    return localename
   478|         0|            0|            0|  0.00%|
   479|         3|  1.21593e-05|  4.05312e-06|  0.01%|def _parse_localename(localename):
   480|         0|            0|            0|  0.00%|
   481|         0|            0|            0|  0.00%|    """ Parses the locale code for localename and returns the
   482|         0|            0|            0|  0.00%|        result as tuple (language code, encoding).
   483|         0|            0|            0|  0.00%|
   484|         0|            0|            0|  0.00%|        The localename is normalized and passed through the locale
   485|         0|            0|            0|  0.00%|        alias engine. A ValueError is raised in case the locale name
   486|         0|            0|            0|  0.00%|        cannot be parsed.
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|        The language code corresponds to RFC 1766.  code and encoding
   489|         0|            0|            0|  0.00%|        can be None in case the values cannot be determined or are
   490|         0|            0|            0|  0.00%|        unknown to this implementation.
   491|         0|            0|            0|  0.00%|
   492|         0|            0|            0|  0.00%|    """
   493|         3|  3.21865e-05|  1.07288e-05|  0.01%|    code = normalize(localename)
(call)|         3|  0.000172853|  5.76178e-05|  0.07%|# /usr/lib/python3.10/locale.py:396 normalize
   494|         3|  1.09673e-05|  3.65575e-06|  0.00%|    if '@' in code:
   495|         0|            0|            0|  0.00%|        # Deal with locale modifiers
   496|         0|            0|            0|  0.00%|        code, modifier = code.split('@', 1)
   497|         0|            0|            0|  0.00%|        if modifier == 'euro' and '.' not in code:
   498|         0|            0|            0|  0.00%|            # Assume Latin-9 for @euro locales. This is bogus,
   499|         0|            0|            0|  0.00%|            # since some systems may use other encodings for these
   500|         0|            0|            0|  0.00%|            # locales. Also, we ignore other modifiers.
   501|         0|            0|            0|  0.00%|            return code, 'iso-8859-15'
   502|         0|            0|            0|  0.00%|
   503|         3|   1.0252e-05|  3.41733e-06|  0.00%|    if '.' in code:
   504|         0|            0|            0|  0.00%|        return tuple(code.split('.')[:2])
   505|         3|  9.77516e-06|  3.25839e-06|  0.00%|    elif code == 'C':
   506|         3|   1.0252e-05|  3.41733e-06|  0.00%|        return None, None
   507|         0|            0|            0|  0.00%|    elif code == 'UTF-8':
   508|         0|            0|            0|  0.00%|        # On macOS "LC_CTYPE=UTF-8" is a valid locale setting
   509|         0|            0|            0|  0.00%|        # for getting UTF-8 handling for text.
   510|         0|            0|            0|  0.00%|        return None, 'UTF-8'
   511|         0|            0|            0|  0.00%|    raise ValueError('unknown locale: %s' % localename)
   512|         0|            0|            0|  0.00%|
   513|         0|            0|            0|  0.00%|def _build_localename(localetuple):
   514|         0|            0|            0|  0.00%|
   515|         0|            0|            0|  0.00%|    """ Builds a locale code from the given tuple (language code,
   516|         0|            0|            0|  0.00%|        encoding).
   517|         0|            0|            0|  0.00%|
   518|         0|            0|            0|  0.00%|        No aliasing or normalizing takes place.
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|    """
   521|         0|            0|            0|  0.00%|    try:
   522|         0|            0|            0|  0.00%|        language, encoding = localetuple
   523|         0|            0|            0|  0.00%|
   524|         0|            0|            0|  0.00%|        if language is None:
   525|         0|            0|            0|  0.00%|            language = 'C'
   526|         0|            0|            0|  0.00%|        if encoding is None:
   527|         0|            0|            0|  0.00%|            return language
   528|         0|            0|            0|  0.00%|        else:
   529|         0|            0|            0|  0.00%|            return language + '.' + encoding
   530|         0|            0|            0|  0.00%|    except (TypeError, ValueError):
   531|         0|            0|            0|  0.00%|        raise TypeError('Locale must be None, a string, or an iterable of '
   532|         0|            0|            0|  0.00%|                        'two strings -- language code, encoding.') from None
   533|         0|            0|            0|  0.00%|
   534|         0|            0|            0|  0.00%|def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|    """ Tries to determine the default locale settings and returns
   537|         0|            0|            0|  0.00%|        them as tuple (language code, encoding).
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|        According to POSIX, a program which has not called
   540|         0|            0|            0|  0.00%|        setlocale(LC_ALL, "") runs using the portable 'C' locale.
   541|         0|            0|            0|  0.00%|        Calling setlocale(LC_ALL, "") lets it use the default locale as
   542|         0|            0|            0|  0.00%|        defined by the LANG variable. Since we don't want to interfere
   543|         0|            0|            0|  0.00%|        with the current locale setting we thus emulate the behavior
   544|         0|            0|            0|  0.00%|        in the way described above.
   545|         0|            0|            0|  0.00%|
   546|         0|            0|            0|  0.00%|        To maintain compatibility with other platforms, not only the
   547|         0|            0|            0|  0.00%|        LANG variable is tested, but a list of variables given as
   548|         0|            0|            0|  0.00%|        envvars parameter. The first found to be defined will be
   549|         0|            0|            0|  0.00%|        used. envvars defaults to the search path used in GNU gettext;
   550|         0|            0|            0|  0.00%|        it must always contain the variable name 'LANG'.
   551|         0|            0|            0|  0.00%|
   552|         0|            0|            0|  0.00%|        Except for the code 'C', the language code corresponds to RFC
   553|         0|            0|            0|  0.00%|        1766.  code and encoding can be None in case the values cannot
   554|         0|            0|            0|  0.00%|        be determined.
   555|         0|            0|            0|  0.00%|
   556|         0|            0|            0|  0.00%|    """
   557|         0|            0|            0|  0.00%|
   558|         0|            0|            0|  0.00%|    try:
   559|         0|            0|            0|  0.00%|        # check if it's supported by the _locale module
   560|         0|            0|            0|  0.00%|        import _locale
   561|         0|            0|            0|  0.00%|        code, encoding = _locale._getdefaultlocale()
   562|         0|            0|            0|  0.00%|    except (ImportError, AttributeError):
   563|         0|            0|            0|  0.00%|        pass
   564|         0|            0|            0|  0.00%|    else:
   565|         0|            0|            0|  0.00%|        # make sure the code/encoding values are valid
   566|         0|            0|            0|  0.00%|        if sys.platform == "win32" and code and code[:2] == "0x":
   567|         0|            0|            0|  0.00%|            # map windows language identifier to language name
   568|         0|            0|            0|  0.00%|            code = windows_locale.get(int(code, 0))
   569|         0|            0|            0|  0.00%|        # ...add other platform-specific processing here, if
   570|         0|            0|            0|  0.00%|        # necessary...
   571|         0|            0|            0|  0.00%|        return code, encoding
   572|         0|            0|            0|  0.00%|
   573|         0|            0|            0|  0.00%|    # fall back on POSIX behaviour
   574|         0|            0|            0|  0.00%|    import os
   575|         0|            0|            0|  0.00%|    lookup = os.environ.get
   576|         0|            0|            0|  0.00%|    for variable in envvars:
   577|         0|            0|            0|  0.00%|        localename = lookup(variable,None)
   578|         0|            0|            0|  0.00%|        if localename:
   579|         0|            0|            0|  0.00%|            if variable == 'LANGUAGE':
   580|         0|            0|            0|  0.00%|                localename = localename.split(':')[0]
   581|         0|            0|            0|  0.00%|            break
   582|         0|            0|            0|  0.00%|    else:
   583|         0|            0|            0|  0.00%|        localename = 'C'
   584|         0|            0|            0|  0.00%|    return _parse_localename(localename)
   585|         0|            0|            0|  0.00%|
   586|         0|            0|            0|  0.00%|
   587|         3|   1.0252e-05|  3.41733e-06|  0.00%|def getlocale(category=LC_CTYPE):
   588|         0|            0|            0|  0.00%|
   589|         0|            0|            0|  0.00%|    """ Returns the current setting for the given locale category as
   590|         0|            0|            0|  0.00%|        tuple (language code, encoding).
   591|         0|            0|            0|  0.00%|
   592|         0|            0|            0|  0.00%|        category may be one of the LC_* value except LC_ALL. It
   593|         0|            0|            0|  0.00%|        defaults to LC_CTYPE.
   594|         0|            0|            0|  0.00%|
   595|         0|            0|            0|  0.00%|        Except for the code 'C', the language code corresponds to RFC
   596|         0|            0|            0|  0.00%|        1766.  code and encoding can be None in case the values cannot
   597|         0|            0|            0|  0.00%|        be determined.
   598|         0|            0|            0|  0.00%|
   599|         0|            0|            0|  0.00%|    """
   600|         3|  2.09808e-05|  6.99361e-06|  0.01%|    localename = _setlocale(category)
   601|         3|  1.16825e-05|  3.89417e-06|  0.00%|    if category == LC_ALL and ';' in localename:
   602|         0|            0|            0|  0.00%|        raise TypeError('category LC_ALL is not supported')
   603|         3|  2.71797e-05|  9.05991e-06|  0.01%|    return _parse_localename(localename)
(call)|         3|  0.000258446|  8.61486e-05|  0.11%|# /usr/lib/python3.10/locale.py:479 _parse_localename
   604|         0|            0|            0|  0.00%|
   605|         0|            0|            0|  0.00%|def setlocale(category, locale=None):
   606|         0|            0|            0|  0.00%|
   607|         0|            0|            0|  0.00%|    """ Set the locale for the given category.  The locale can be
   608|         0|            0|            0|  0.00%|        a string, an iterable of two strings (language code and encoding),
   609|         0|            0|            0|  0.00%|        or None.
   610|         0|            0|            0|  0.00%|
   611|         0|            0|            0|  0.00%|        Iterables are converted to strings using the locale aliasing
   612|         0|            0|            0|  0.00%|        engine.  Locale strings are passed directly to the C lib.
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|        category may be given as one of the LC_* values.
   615|         0|            0|            0|  0.00%|
   616|         0|            0|            0|  0.00%|    """
   617|         0|            0|            0|  0.00%|    if locale and not isinstance(locale, _builtin_str):
   618|         0|            0|            0|  0.00%|        # convert to string
   619|         0|            0|            0|  0.00%|        locale = normalize(_build_localename(locale))
   620|         0|            0|            0|  0.00%|    return _setlocale(category, locale)
   621|         0|            0|            0|  0.00%|
   622|         0|            0|            0|  0.00%|def resetlocale(category=LC_ALL):
   623|         0|            0|            0|  0.00%|
   624|         0|            0|            0|  0.00%|    """ Sets the locale for category to the default setting.
   625|         0|            0|            0|  0.00%|
   626|         0|            0|            0|  0.00%|        The default setting is determined by calling
   627|         0|            0|            0|  0.00%|        getdefaultlocale(). category defaults to LC_ALL.
   628|         0|            0|            0|  0.00%|
   629|         0|            0|            0|  0.00%|    """
   630|         0|            0|            0|  0.00%|    _setlocale(category, _build_localename(getdefaultlocale()))
   631|         0|            0|            0|  0.00%|
   632|         0|            0|            0|  0.00%|
   633|         0|            0|            0|  0.00%|try:
   634|         0|            0|            0|  0.00%|    from _locale import _get_locale_encoding
   635|         0|            0|            0|  0.00%|except ImportError:
   636|         0|            0|            0|  0.00%|    def _get_locale_encoding():
   637|         0|            0|            0|  0.00%|        if hasattr(sys, 'getandroidapilevel'):
   638|         0|            0|            0|  0.00%|            # On Android langinfo.h and CODESET are missing, and UTF-8 is
   639|         0|            0|            0|  0.00%|            # always used in mbstowcs() and wcstombs().
   640|         0|            0|            0|  0.00%|            return 'UTF-8'
   641|         0|            0|            0|  0.00%|        if sys.flags.utf8_mode:
   642|         0|            0|            0|  0.00%|            return 'UTF-8'
   643|         0|            0|            0|  0.00%|        encoding = getdefaultlocale()[1]
   644|         0|            0|            0|  0.00%|        if encoding is None:
   645|         0|            0|            0|  0.00%|            # LANG not set, default conservatively to ASCII
   646|         0|            0|            0|  0.00%|            encoding = 'ascii'
   647|         0|            0|            0|  0.00%|        return encoding
   648|         0|            0|            0|  0.00%|
   649|         0|            0|            0|  0.00%|try:
   650|         0|            0|            0|  0.00%|    CODESET
   651|         0|            0|            0|  0.00%|except NameError:
   652|         0|            0|            0|  0.00%|    def getpreferredencoding(do_setlocale=True):
   653|         0|            0|            0|  0.00%|        """Return the charset that the user is likely using."""
   654|         0|            0|            0|  0.00%|        return _get_locale_encoding()
   655|         0|            0|            0|  0.00%|else:
   656|         0|            0|            0|  0.00%|    # On Unix, if CODESET is available, use that.
   657|         0|            0|            0|  0.00%|    def getpreferredencoding(do_setlocale=True):
   658|         0|            0|            0|  0.00%|        """Return the charset that the user is likely using,
   659|         0|            0|            0|  0.00%|        according to the system configuration."""
   660|         0|            0|            0|  0.00%|        if sys.flags.utf8_mode:
   661|         0|            0|            0|  0.00%|            return 'UTF-8'
   662|         0|            0|            0|  0.00%|
   663|         0|            0|            0|  0.00%|        if not do_setlocale:
   664|         0|            0|            0|  0.00%|            return _get_locale_encoding()
   665|         0|            0|            0|  0.00%|
   666|         0|            0|            0|  0.00%|        old_loc = setlocale(LC_CTYPE)
   667|         0|            0|            0|  0.00%|        try:
   668|         0|            0|            0|  0.00%|            try:
   669|         0|            0|            0|  0.00%|                setlocale(LC_CTYPE, "")
   670|         0|            0|            0|  0.00%|            except Error:
   671|         0|            0|            0|  0.00%|                pass
   672|         0|            0|            0|  0.00%|            return _get_locale_encoding()
   673|         0|            0|            0|  0.00%|        finally:
   674|         0|            0|            0|  0.00%|            setlocale(LC_CTYPE, old_loc)
   675|         0|            0|            0|  0.00%|
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|### Database
   678|         0|            0|            0|  0.00%|#
   679|         0|            0|            0|  0.00%|# The following data was extracted from the locale.alias file which
   680|         0|            0|            0|  0.00%|# comes with X11 and then hand edited removing the explicit encoding
   681|         0|            0|            0|  0.00%|# definitions and adding some more aliases. The file is usually
   682|         0|            0|            0|  0.00%|# available as /usr/lib/X11/locale/locale.alias.
   683|         0|            0|            0|  0.00%|#
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|#
   686|         0|            0|            0|  0.00%|# The local_encoding_alias table maps lowercase encoding alias names
   687|         0|            0|            0|  0.00%|# to C locale encoding names (case-sensitive). Note that normalize()
   688|         0|            0|            0|  0.00%|# first looks up the encoding in the encodings.aliases dictionary and
   689|         0|            0|            0|  0.00%|# then applies this mapping to find the correct C lib name for the
   690|         0|            0|            0|  0.00%|# encoding.
   691|         0|            0|            0|  0.00%|#
   692|         0|            0|            0|  0.00%|locale_encoding_alias = {
   693|         0|            0|            0|  0.00%|
   694|         0|            0|            0|  0.00%|    # Mappings for non-standard encoding names used in locale names
   695|         0|            0|            0|  0.00%|    '437':                          'C',
   696|         0|            0|            0|  0.00%|    'c':                            'C',
   697|         0|            0|            0|  0.00%|    'en':                           'ISO8859-1',
   698|         0|            0|            0|  0.00%|    'jis':                          'JIS7',
   699|         0|            0|            0|  0.00%|    'jis7':                         'JIS7',
   700|         0|            0|            0|  0.00%|    'ajec':                         'eucJP',
   701|         0|            0|            0|  0.00%|    'koi8c':                        'KOI8-C',
   702|         0|            0|            0|  0.00%|    'microsoftcp1251':              'CP1251',
   703|         0|            0|            0|  0.00%|    'microsoftcp1255':              'CP1255',
   704|         0|            0|            0|  0.00%|    'microsoftcp1256':              'CP1256',
   705|         0|            0|            0|  0.00%|    '88591':                        'ISO8859-1',
   706|         0|            0|            0|  0.00%|    '88592':                        'ISO8859-2',
   707|         0|            0|            0|  0.00%|    '88595':                        'ISO8859-5',
   708|         0|            0|            0|  0.00%|    '885915':                       'ISO8859-15',
   709|         0|            0|            0|  0.00%|
   710|         0|            0|            0|  0.00%|    # Mappings from Python codec names to C lib encoding names
   711|         0|            0|            0|  0.00%|    'ascii':                        'ISO8859-1',
   712|         0|            0|            0|  0.00%|    'latin_1':                      'ISO8859-1',
   713|         0|            0|            0|  0.00%|    'iso8859_1':                    'ISO8859-1',
   714|         0|            0|            0|  0.00%|    'iso8859_10':                   'ISO8859-10',
   715|         0|            0|            0|  0.00%|    'iso8859_11':                   'ISO8859-11',
   716|         0|            0|            0|  0.00%|    'iso8859_13':                   'ISO8859-13',
   717|         0|            0|            0|  0.00%|    'iso8859_14':                   'ISO8859-14',
   718|         0|            0|            0|  0.00%|    'iso8859_15':                   'ISO8859-15',
   719|         0|            0|            0|  0.00%|    'iso8859_16':                   'ISO8859-16',
   720|         0|            0|            0|  0.00%|    'iso8859_2':                    'ISO8859-2',
   721|         0|            0|            0|  0.00%|    'iso8859_3':                    'ISO8859-3',
   722|         0|            0|            0|  0.00%|    'iso8859_4':                    'ISO8859-4',
   723|         0|            0|            0|  0.00%|    'iso8859_5':                    'ISO8859-5',
   724|         0|            0|            0|  0.00%|    'iso8859_6':                    'ISO8859-6',
   725|         0|            0|            0|  0.00%|    'iso8859_7':                    'ISO8859-7',
   726|         0|            0|            0|  0.00%|    'iso8859_8':                    'ISO8859-8',
   727|         0|            0|            0|  0.00%|    'iso8859_9':                    'ISO8859-9',
   728|         0|            0|            0|  0.00%|    'iso2022_jp':                   'JIS7',
   729|         0|            0|            0|  0.00%|    'shift_jis':                    'SJIS',
   730|         0|            0|            0|  0.00%|    'tactis':                       'TACTIS',
   731|         0|            0|            0|  0.00%|    'euc_jp':                       'eucJP',
   732|         0|            0|            0|  0.00%|    'euc_kr':                       'eucKR',
   733|         0|            0|            0|  0.00%|    'utf_8':                        'UTF-8',
   734|         0|            0|            0|  0.00%|    'koi8_r':                       'KOI8-R',
   735|         0|            0|            0|  0.00%|    'koi8_t':                       'KOI8-T',
   736|         0|            0|            0|  0.00%|    'koi8_u':                       'KOI8-U',
   737|         0|            0|            0|  0.00%|    'kz1048':                       'RK1048',
   738|         0|            0|            0|  0.00%|    'cp1251':                       'CP1251',
   739|         0|            0|            0|  0.00%|    'cp1255':                       'CP1255',
   740|         0|            0|            0|  0.00%|    'cp1256':                       'CP1256',
   741|         0|            0|            0|  0.00%|
   742|         0|            0|            0|  0.00%|    # XXX This list is still incomplete. If you know more
   743|         0|            0|            0|  0.00%|    # mappings, please file a bug report. Thanks.
   744|         0|            0|            0|  0.00%|}
   745|         0|            0|            0|  0.00%|
   746|         0|            0|            0|  0.00%|for k, v in sorted(locale_encoding_alias.items()):
   747|         0|            0|            0|  0.00%|    k = k.replace('_', '')
   748|         0|            0|            0|  0.00%|    locale_encoding_alias.setdefault(k, v)
   749|         0|            0|            0|  0.00%|
   750|         0|            0|            0|  0.00%|#
   751|         0|            0|            0|  0.00%|# The locale_alias table maps lowercase alias names to C locale names
   752|         0|            0|            0|  0.00%|# (case-sensitive). Encodings are always separated from the locale
   753|         0|            0|            0|  0.00%|# name using a dot ('.'); they should only be given in case the
   754|         0|            0|            0|  0.00%|# language name is needed to interpret the given encoding alias
   755|         0|            0|            0|  0.00%|# correctly (CJK codes often have this need).
   756|         0|            0|            0|  0.00%|#
   757|         0|            0|            0|  0.00%|# Note that the normalize() function which uses this tables
   758|         0|            0|            0|  0.00%|# removes '_' and '-' characters from the encoding part of the
   759|         0|            0|            0|  0.00%|# locale name before doing the lookup. This saves a lot of
   760|         0|            0|            0|  0.00%|# space in the table.
   761|         0|            0|            0|  0.00%|#
   762|         0|            0|            0|  0.00%|# MAL 2004-12-10:
   763|         0|            0|            0|  0.00%|# Updated alias mapping to most recent locale.alias file
   764|         0|            0|            0|  0.00%|# from X.org distribution using makelocalealias.py.
   765|         0|            0|            0|  0.00%|#
   766|         0|            0|            0|  0.00%|# These are the differences compared to the old mapping (Python 2.4
   767|         0|            0|            0|  0.00%|# and older):
   768|         0|            0|            0|  0.00%|#
   769|         0|            0|            0|  0.00%|#    updated 'bg' -> 'bg_BG.ISO8859-5' to 'bg_BG.CP1251'
   770|         0|            0|            0|  0.00%|#    updated 'bg_bg' -> 'bg_BG.ISO8859-5' to 'bg_BG.CP1251'
   771|         0|            0|            0|  0.00%|#    updated 'bulgarian' -> 'bg_BG.ISO8859-5' to 'bg_BG.CP1251'
   772|         0|            0|            0|  0.00%|#    updated 'cz' -> 'cz_CZ.ISO8859-2' to 'cs_CZ.ISO8859-2'
   773|         0|            0|            0|  0.00%|#    updated 'cz_cz' -> 'cz_CZ.ISO8859-2' to 'cs_CZ.ISO8859-2'
   774|         0|            0|            0|  0.00%|#    updated 'czech' -> 'cs_CS.ISO8859-2' to 'cs_CZ.ISO8859-2'
   775|         0|            0|            0|  0.00%|#    updated 'dutch' -> 'nl_BE.ISO8859-1' to 'nl_NL.ISO8859-1'
   776|         0|            0|            0|  0.00%|#    updated 'et' -> 'et_EE.ISO8859-4' to 'et_EE.ISO8859-15'
   777|         0|            0|            0|  0.00%|#    updated 'et_ee' -> 'et_EE.ISO8859-4' to 'et_EE.ISO8859-15'
   778|         0|            0|            0|  0.00%|#    updated 'fi' -> 'fi_FI.ISO8859-1' to 'fi_FI.ISO8859-15'
   779|         0|            0|            0|  0.00%|#    updated 'fi_fi' -> 'fi_FI.ISO8859-1' to 'fi_FI.ISO8859-15'
   780|         0|            0|            0|  0.00%|#    updated 'iw' -> 'iw_IL.ISO8859-8' to 'he_IL.ISO8859-8'
   781|         0|            0|            0|  0.00%|#    updated 'iw_il' -> 'iw_IL.ISO8859-8' to 'he_IL.ISO8859-8'
   782|         0|            0|            0|  0.00%|#    updated 'japanese' -> 'ja_JP.SJIS' to 'ja_JP.eucJP'
   783|         0|            0|            0|  0.00%|#    updated 'lt' -> 'lt_LT.ISO8859-4' to 'lt_LT.ISO8859-13'
   784|         0|            0|            0|  0.00%|#    updated 'lv' -> 'lv_LV.ISO8859-4' to 'lv_LV.ISO8859-13'
   785|         0|            0|            0|  0.00%|#    updated 'sl' -> 'sl_CS.ISO8859-2' to 'sl_SI.ISO8859-2'
   786|         0|            0|            0|  0.00%|#    updated 'slovene' -> 'sl_CS.ISO8859-2' to 'sl_SI.ISO8859-2'
   787|         0|            0|            0|  0.00%|#    updated 'th_th' -> 'th_TH.TACTIS' to 'th_TH.ISO8859-11'
   788|         0|            0|            0|  0.00%|#    updated 'zh_cn' -> 'zh_CN.eucCN' to 'zh_CN.gb2312'
   789|         0|            0|            0|  0.00%|#    updated 'zh_cn.big5' -> 'zh_TW.eucTW' to 'zh_TW.big5'
   790|         0|            0|            0|  0.00%|#    updated 'zh_tw' -> 'zh_TW.eucTW' to 'zh_TW.big5'
   791|         0|            0|            0|  0.00%|#
   792|         0|            0|            0|  0.00%|# MAL 2008-05-30:
   793|         0|            0|            0|  0.00%|# Updated alias mapping to most recent locale.alias file
   794|         0|            0|            0|  0.00%|# from X.org distribution using makelocalealias.py.
   795|         0|            0|            0|  0.00%|#
   796|         0|            0|            0|  0.00%|# These are the differences compared to the old mapping (Python 2.5
   797|         0|            0|            0|  0.00%|# and older):
   798|         0|            0|            0|  0.00%|#
   799|         0|            0|            0|  0.00%|#    updated 'cs_cs.iso88592' -> 'cs_CZ.ISO8859-2' to 'cs_CS.ISO8859-2'
   800|         0|            0|            0|  0.00%|#    updated 'serbocroatian' -> 'sh_YU.ISO8859-2' to 'sr_CS.ISO8859-2'
   801|         0|            0|            0|  0.00%|#    updated 'sh' -> 'sh_YU.ISO8859-2' to 'sr_CS.ISO8859-2'
   802|         0|            0|            0|  0.00%|#    updated 'sh_hr.iso88592' -> 'sh_HR.ISO8859-2' to 'hr_HR.ISO8859-2'
   803|         0|            0|            0|  0.00%|#    updated 'sh_sp' -> 'sh_YU.ISO8859-2' to 'sr_CS.ISO8859-2'
   804|         0|            0|            0|  0.00%|#    updated 'sh_yu' -> 'sh_YU.ISO8859-2' to 'sr_CS.ISO8859-2'
   805|         0|            0|            0|  0.00%|#    updated 'sp' -> 'sp_YU.ISO8859-5' to 'sr_CS.ISO8859-5'
   806|         0|            0|            0|  0.00%|#    updated 'sp_yu' -> 'sp_YU.ISO8859-5' to 'sr_CS.ISO8859-5'
   807|         0|            0|            0|  0.00%|#    updated 'sr' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'
   808|         0|            0|            0|  0.00%|#    updated 'sr@cyrillic' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'
   809|         0|            0|            0|  0.00%|#    updated 'sr_sp' -> 'sr_SP.ISO8859-2' to 'sr_CS.ISO8859-2'
   810|         0|            0|            0|  0.00%|#    updated 'sr_yu' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'
   811|         0|            0|            0|  0.00%|#    updated 'sr_yu.cp1251@cyrillic' -> 'sr_YU.CP1251' to 'sr_CS.CP1251'
   812|         0|            0|            0|  0.00%|#    updated 'sr_yu.iso88592' -> 'sr_YU.ISO8859-2' to 'sr_CS.ISO8859-2'
   813|         0|            0|            0|  0.00%|#    updated 'sr_yu.iso88595' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'
   814|         0|            0|            0|  0.00%|#    updated 'sr_yu.iso88595@cyrillic' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'
   815|         0|            0|            0|  0.00%|#    updated 'sr_yu.microsoftcp1251@cyrillic' -> 'sr_YU.CP1251' to 'sr_CS.CP1251'
   816|         0|            0|            0|  0.00%|#    updated 'sr_yu.utf8@cyrillic' -> 'sr_YU.UTF-8' to 'sr_CS.UTF-8'
   817|         0|            0|            0|  0.00%|#    updated 'sr_yu@cyrillic' -> 'sr_YU.ISO8859-5' to 'sr_CS.ISO8859-5'
   818|         0|            0|            0|  0.00%|#
   819|         0|            0|            0|  0.00%|# AP 2010-04-12:
   820|         0|            0|            0|  0.00%|# Updated alias mapping to most recent locale.alias file
   821|         0|            0|            0|  0.00%|# from X.org distribution using makelocalealias.py.
   822|         0|            0|            0|  0.00%|#
   823|         0|            0|            0|  0.00%|# These are the differences compared to the old mapping (Python 2.6.5
   824|         0|            0|            0|  0.00%|# and older):
   825|         0|            0|            0|  0.00%|#
   826|         0|            0|            0|  0.00%|#    updated 'ru' -> 'ru_RU.ISO8859-5' to 'ru_RU.UTF-8'
   827|         0|            0|            0|  0.00%|#    updated 'ru_ru' -> 'ru_RU.ISO8859-5' to 'ru_RU.UTF-8'
   828|         0|            0|            0|  0.00%|#    updated 'serbocroatian' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'
   829|         0|            0|            0|  0.00%|#    updated 'sh' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'
   830|         0|            0|            0|  0.00%|#    updated 'sh_yu' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'
   831|         0|            0|            0|  0.00%|#    updated 'sr' -> 'sr_CS.ISO8859-5' to 'sr_RS.UTF-8'
   832|         0|            0|            0|  0.00%|#    updated 'sr@cyrillic' -> 'sr_CS.ISO8859-5' to 'sr_RS.UTF-8'
   833|         0|            0|            0|  0.00%|#    updated 'sr@latn' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'
   834|         0|            0|            0|  0.00%|#    updated 'sr_cs.utf8@latn' -> 'sr_CS.UTF-8' to 'sr_RS.UTF-8@latin'
   835|         0|            0|            0|  0.00%|#    updated 'sr_cs@latn' -> 'sr_CS.ISO8859-2' to 'sr_RS.UTF-8@latin'
   836|         0|            0|            0|  0.00%|#    updated 'sr_yu' -> 'sr_CS.ISO8859-5' to 'sr_RS.UTF-8@latin'
   837|         0|            0|            0|  0.00%|#    updated 'sr_yu.utf8@cyrillic' -> 'sr_CS.UTF-8' to 'sr_RS.UTF-8'
   838|         0|            0|            0|  0.00%|#    updated 'sr_yu@cyrillic' -> 'sr_CS.ISO8859-5' to 'sr_RS.UTF-8'
   839|         0|            0|            0|  0.00%|#
   840|         0|            0|            0|  0.00%|# SS 2013-12-20:
   841|         0|            0|            0|  0.00%|# Updated alias mapping to most recent locale.alias file
   842|         0|            0|            0|  0.00%|# from X.org distribution using makelocalealias.py.
   843|         0|            0|            0|  0.00%|#
   844|         0|            0|            0|  0.00%|# These are the differences compared to the old mapping (Python 3.3.3
   845|         0|            0|            0|  0.00%|# and older):
   846|         0|            0|            0|  0.00%|#
   847|         0|            0|            0|  0.00%|#    updated 'a3' -> 'a3_AZ.KOI8-C' to 'az_AZ.KOI8-C'
   848|         0|            0|            0|  0.00%|#    updated 'a3_az' -> 'a3_AZ.KOI8-C' to 'az_AZ.KOI8-C'
   849|         0|            0|            0|  0.00%|#    updated 'a3_az.koi8c' -> 'a3_AZ.KOI8-C' to 'az_AZ.KOI8-C'
   850|         0|            0|            0|  0.00%|#    updated 'cs_cs.iso88592' -> 'cs_CS.ISO8859-2' to 'cs_CZ.ISO8859-2'
   851|         0|            0|            0|  0.00%|#    updated 'hebrew' -> 'iw_IL.ISO8859-8' to 'he_IL.ISO8859-8'
   852|         0|            0|            0|  0.00%|#    updated 'hebrew.iso88598' -> 'iw_IL.ISO8859-8' to 'he_IL.ISO8859-8'
   853|         0|            0|            0|  0.00%|#    updated 'sd' -> 'sd_IN@devanagari.UTF-8' to 'sd_IN.UTF-8'
   854|         0|            0|            0|  0.00%|#    updated 'sr@latn' -> 'sr_RS.UTF-8@latin' to 'sr_CS.UTF-8@latin'
   855|         0|            0|            0|  0.00%|#    updated 'sr_cs' -> 'sr_RS.UTF-8' to 'sr_CS.UTF-8'
   856|         0|            0|            0|  0.00%|#    updated 'sr_cs.utf8@latn' -> 'sr_RS.UTF-8@latin' to 'sr_CS.UTF-8@latin'
   857|         0|            0|            0|  0.00%|#    updated 'sr_cs@latn' -> 'sr_RS.UTF-8@latin' to 'sr_CS.UTF-8@latin'
   858|         0|            0|            0|  0.00%|#
   859|         0|            0|            0|  0.00%|# SS 2014-10-01:
   860|         0|            0|            0|  0.00%|# Updated alias mapping with glibc 2.19 supported locales.
   861|         0|            0|            0|  0.00%|#
   862|         0|            0|            0|  0.00%|# SS 2018-05-05:
   863|         0|            0|            0|  0.00%|# Updated alias mapping with glibc 2.27 supported locales.
   864|         0|            0|            0|  0.00%|#
   865|         0|            0|            0|  0.00%|# These are the differences compared to the old mapping (Python 3.6.5
   866|         0|            0|            0|  0.00%|# and older):
   867|         0|            0|            0|  0.00%|#
   868|         0|            0|            0|  0.00%|#    updated 'ca_es@valencia' -> 'ca_ES.ISO8859-15@valencia' to 'ca_ES.UTF-8@valencia'
   869|         0|            0|            0|  0.00%|#    updated 'kk_kz' -> 'kk_KZ.RK1048' to 'kk_KZ.ptcp154'
   870|         0|            0|            0|  0.00%|#    updated 'russian' -> 'ru_RU.ISO8859-5' to 'ru_RU.KOI8-R'
   871|         0|            0|            0|  0.00%|
   872|         0|            0|            0|  0.00%|locale_alias = {
   873|         0|            0|            0|  0.00%|    'a3':                                   'az_AZ.KOI8-C',
   874|         0|            0|            0|  0.00%|    'a3_az':                                'az_AZ.KOI8-C',
   875|         0|            0|            0|  0.00%|    'a3_az.koic':                           'az_AZ.KOI8-C',
   876|         0|            0|            0|  0.00%|    'aa_dj':                                'aa_DJ.ISO8859-1',
   877|         0|            0|            0|  0.00%|    'aa_er':                                'aa_ER.UTF-8',
   878|         0|            0|            0|  0.00%|    'aa_et':                                'aa_ET.UTF-8',
   879|         0|            0|            0|  0.00%|    'af':                                   'af_ZA.ISO8859-1',
   880|         0|            0|            0|  0.00%|    'af_za':                                'af_ZA.ISO8859-1',
   881|         0|            0|            0|  0.00%|    'agr_pe':                               'agr_PE.UTF-8',
   882|         0|            0|            0|  0.00%|    'ak_gh':                                'ak_GH.UTF-8',
   883|         0|            0|            0|  0.00%|    'am':                                   'am_ET.UTF-8',
   884|         0|            0|            0|  0.00%|    'am_et':                                'am_ET.UTF-8',
   885|         0|            0|            0|  0.00%|    'american':                             'en_US.ISO8859-1',
   886|         0|            0|            0|  0.00%|    'an_es':                                'an_ES.ISO8859-15',
   887|         0|            0|            0|  0.00%|    'anp_in':                               'anp_IN.UTF-8',
   888|         0|            0|            0|  0.00%|    'ar':                                   'ar_AA.ISO8859-6',
   889|         0|            0|            0|  0.00%|    'ar_aa':                                'ar_AA.ISO8859-6',
   890|         0|            0|            0|  0.00%|    'ar_ae':                                'ar_AE.ISO8859-6',
   891|         0|            0|            0|  0.00%|    'ar_bh':                                'ar_BH.ISO8859-6',
   892|         0|            0|            0|  0.00%|    'ar_dz':                                'ar_DZ.ISO8859-6',
   893|         0|            0|            0|  0.00%|    'ar_eg':                                'ar_EG.ISO8859-6',
   894|         0|            0|            0|  0.00%|    'ar_in':                                'ar_IN.UTF-8',
   895|         0|            0|            0|  0.00%|    'ar_iq':                                'ar_IQ.ISO8859-6',
   896|         0|            0|            0|  0.00%|    'ar_jo':                                'ar_JO.ISO8859-6',
   897|         0|            0|            0|  0.00%|    'ar_kw':                                'ar_KW.ISO8859-6',
   898|         0|            0|            0|  0.00%|    'ar_lb':                                'ar_LB.ISO8859-6',
   899|         0|            0|            0|  0.00%|    'ar_ly':                                'ar_LY.ISO8859-6',
   900|         0|            0|            0|  0.00%|    'ar_ma':                                'ar_MA.ISO8859-6',
   901|         0|            0|            0|  0.00%|    'ar_om':                                'ar_OM.ISO8859-6',
   902|         0|            0|            0|  0.00%|    'ar_qa':                                'ar_QA.ISO8859-6',
   903|         0|            0|            0|  0.00%|    'ar_sa':                                'ar_SA.ISO8859-6',
   904|         0|            0|            0|  0.00%|    'ar_sd':                                'ar_SD.ISO8859-6',
   905|         0|            0|            0|  0.00%|    'ar_ss':                                'ar_SS.UTF-8',
   906|         0|            0|            0|  0.00%|    'ar_sy':                                'ar_SY.ISO8859-6',
   907|         0|            0|            0|  0.00%|    'ar_tn':                                'ar_TN.ISO8859-6',
   908|         0|            0|            0|  0.00%|    'ar_ye':                                'ar_YE.ISO8859-6',
   909|         0|            0|            0|  0.00%|    'arabic':                               'ar_AA.ISO8859-6',
   910|         0|            0|            0|  0.00%|    'as':                                   'as_IN.UTF-8',
   911|         0|            0|            0|  0.00%|    'as_in':                                'as_IN.UTF-8',
   912|         0|            0|            0|  0.00%|    'ast_es':                               'ast_ES.ISO8859-15',
   913|         0|            0|            0|  0.00%|    'ayc_pe':                               'ayc_PE.UTF-8',
   914|         0|            0|            0|  0.00%|    'az':                                   'az_AZ.ISO8859-9E',
   915|         0|            0|            0|  0.00%|    'az_az':                                'az_AZ.ISO8859-9E',
   916|         0|            0|            0|  0.00%|    'az_az.iso88599e':                      'az_AZ.ISO8859-9E',
   917|         0|            0|            0|  0.00%|    'az_ir':                                'az_IR.UTF-8',
   918|         0|            0|            0|  0.00%|    'be':                                   'be_BY.CP1251',
   919|         0|            0|            0|  0.00%|    'be@latin':                             'be_BY.UTF-8@latin',
   920|         0|            0|            0|  0.00%|    'be_bg.utf8':                           'bg_BG.UTF-8',
   921|         0|            0|            0|  0.00%|    'be_by':                                'be_BY.CP1251',
   922|         0|            0|            0|  0.00%|    'be_by@latin':                          'be_BY.UTF-8@latin',
   923|         0|            0|            0|  0.00%|    'bem_zm':                               'bem_ZM.UTF-8',
   924|         0|            0|            0|  0.00%|    'ber_dz':                               'ber_DZ.UTF-8',
   925|         0|            0|            0|  0.00%|    'ber_ma':                               'ber_MA.UTF-8',
   926|         0|            0|            0|  0.00%|    'bg':                                   'bg_BG.CP1251',
   927|         0|            0|            0|  0.00%|    'bg_bg':                                'bg_BG.CP1251',
   928|         0|            0|            0|  0.00%|    'bhb_in.utf8':                          'bhb_IN.UTF-8',
   929|         0|            0|            0|  0.00%|    'bho_in':                               'bho_IN.UTF-8',
   930|         0|            0|            0|  0.00%|    'bho_np':                               'bho_NP.UTF-8',
   931|         0|            0|            0|  0.00%|    'bi_vu':                                'bi_VU.UTF-8',
   932|         0|            0|            0|  0.00%|    'bn_bd':                                'bn_BD.UTF-8',
   933|         0|            0|            0|  0.00%|    'bn_in':                                'bn_IN.UTF-8',
   934|         0|            0|            0|  0.00%|    'bo_cn':                                'bo_CN.UTF-8',
   935|         0|            0|            0|  0.00%|    'bo_in':                                'bo_IN.UTF-8',
   936|         0|            0|            0|  0.00%|    'bokmal':                               'nb_NO.ISO8859-1',
   937|         0|            0|            0|  0.00%|    'bokm\xe5l':                            'nb_NO.ISO8859-1',
   938|         0|            0|            0|  0.00%|    'br':                                   'br_FR.ISO8859-1',
   939|         0|            0|            0|  0.00%|    'br_fr':                                'br_FR.ISO8859-1',
   940|         0|            0|            0|  0.00%|    'brx_in':                               'brx_IN.UTF-8',
   941|         0|            0|            0|  0.00%|    'bs':                                   'bs_BA.ISO8859-2',
   942|         0|            0|            0|  0.00%|    'bs_ba':                                'bs_BA.ISO8859-2',
   943|         0|            0|            0|  0.00%|    'bulgarian':                            'bg_BG.CP1251',
   944|         0|            0|            0|  0.00%|    'byn_er':                               'byn_ER.UTF-8',
   945|         0|            0|            0|  0.00%|    'c':                                    'C',
   946|         0|            0|            0|  0.00%|    'c-french':                             'fr_CA.ISO8859-1',
   947|         0|            0|            0|  0.00%|    'c.ascii':                              'C',
   948|         0|            0|            0|  0.00%|    'c.en':                                 'C',
   949|         0|            0|            0|  0.00%|    'c.iso88591':                           'en_US.ISO8859-1',
   950|         0|            0|            0|  0.00%|    'c.utf8':                               'en_US.UTF-8',
   951|         0|            0|            0|  0.00%|    'c_c':                                  'C',
   952|         0|            0|            0|  0.00%|    'c_c.c':                                'C',
   953|         0|            0|            0|  0.00%|    'ca':                                   'ca_ES.ISO8859-1',
   954|         0|            0|            0|  0.00%|    'ca_ad':                                'ca_AD.ISO8859-1',
   955|         0|            0|            0|  0.00%|    'ca_es':                                'ca_ES.ISO8859-1',
   956|         0|            0|            0|  0.00%|    'ca_es@valencia':                       'ca_ES.UTF-8@valencia',
   957|         0|            0|            0|  0.00%|    'ca_fr':                                'ca_FR.ISO8859-1',
   958|         0|            0|            0|  0.00%|    'ca_it':                                'ca_IT.ISO8859-1',
   959|         0|            0|            0|  0.00%|    'catalan':                              'ca_ES.ISO8859-1',
   960|         0|            0|            0|  0.00%|    'ce_ru':                                'ce_RU.UTF-8',
   961|         0|            0|            0|  0.00%|    'cextend':                              'en_US.ISO8859-1',
   962|         0|            0|            0|  0.00%|    'chinese-s':                            'zh_CN.eucCN',
   963|         0|            0|            0|  0.00%|    'chinese-t':                            'zh_TW.eucTW',
   964|         0|            0|            0|  0.00%|    'chr_us':                               'chr_US.UTF-8',
   965|         0|            0|            0|  0.00%|    'ckb_iq':                               'ckb_IQ.UTF-8',
   966|         0|            0|            0|  0.00%|    'cmn_tw':                               'cmn_TW.UTF-8',
   967|         0|            0|            0|  0.00%|    'crh_ua':                               'crh_UA.UTF-8',
   968|         0|            0|            0|  0.00%|    'croatian':                             'hr_HR.ISO8859-2',
   969|         0|            0|            0|  0.00%|    'cs':                                   'cs_CZ.ISO8859-2',
   970|         0|            0|            0|  0.00%|    'cs_cs':                                'cs_CZ.ISO8859-2',
   971|         0|            0|            0|  0.00%|    'cs_cz':                                'cs_CZ.ISO8859-2',
   972|         0|            0|            0|  0.00%|    'csb_pl':                               'csb_PL.UTF-8',
   973|         0|            0|            0|  0.00%|    'cv_ru':                                'cv_RU.UTF-8',
   974|         0|            0|            0|  0.00%|    'cy':                                   'cy_GB.ISO8859-1',
   975|         0|            0|            0|  0.00%|    'cy_gb':                                'cy_GB.ISO8859-1',
   976|         0|            0|            0|  0.00%|    'cz':                                   'cs_CZ.ISO8859-2',
   977|         0|            0|            0|  0.00%|    'cz_cz':                                'cs_CZ.ISO8859-2',
   978|         0|            0|            0|  0.00%|    'czech':                                'cs_CZ.ISO8859-2',
   979|         0|            0|            0|  0.00%|    'da':                                   'da_DK.ISO8859-1',
   980|         0|            0|            0|  0.00%|    'da_dk':                                'da_DK.ISO8859-1',
   981|         0|            0|            0|  0.00%|    'danish':                               'da_DK.ISO8859-1',
   982|         0|            0|            0|  0.00%|    'dansk':                                'da_DK.ISO8859-1',
   983|         0|            0|            0|  0.00%|    'de':                                   'de_DE.ISO8859-1',
   984|         0|            0|            0|  0.00%|    'de_at':                                'de_AT.ISO8859-1',
   985|         0|            0|            0|  0.00%|    'de_be':                                'de_BE.ISO8859-1',
   986|         0|            0|            0|  0.00%|    'de_ch':                                'de_CH.ISO8859-1',
   987|         0|            0|            0|  0.00%|    'de_de':                                'de_DE.ISO8859-1',
   988|         0|            0|            0|  0.00%|    'de_it':                                'de_IT.ISO8859-1',
   989|         0|            0|            0|  0.00%|    'de_li.utf8':                           'de_LI.UTF-8',
   990|         0|            0|            0|  0.00%|    'de_lu':                                'de_LU.ISO8859-1',
   991|         0|            0|            0|  0.00%|    'deutsch':                              'de_DE.ISO8859-1',
   992|         0|            0|            0|  0.00%|    'doi_in':                               'doi_IN.UTF-8',
   993|         0|            0|            0|  0.00%|    'dutch':                                'nl_NL.ISO8859-1',
   994|         0|            0|            0|  0.00%|    'dutch.iso88591':                       'nl_BE.ISO8859-1',
   995|         0|            0|            0|  0.00%|    'dv_mv':                                'dv_MV.UTF-8',
   996|         0|            0|            0|  0.00%|    'dz_bt':                                'dz_BT.UTF-8',
   997|         0|            0|            0|  0.00%|    'ee':                                   'ee_EE.ISO8859-4',
   998|         0|            0|            0|  0.00%|    'ee_ee':                                'ee_EE.ISO8859-4',
   999|         0|            0|            0|  0.00%|    'eesti':                                'et_EE.ISO8859-1',
  1000|         0|            0|            0|  0.00%|    'el':                                   'el_GR.ISO8859-7',
  1001|         0|            0|            0|  0.00%|    'el_cy':                                'el_CY.ISO8859-7',
  1002|         0|            0|            0|  0.00%|    'el_gr':                                'el_GR.ISO8859-7',
  1003|         0|            0|            0|  0.00%|    'el_gr@euro':                           'el_GR.ISO8859-15',
  1004|         0|            0|            0|  0.00%|    'en':                                   'en_US.ISO8859-1',
  1005|         0|            0|            0|  0.00%|    'en_ag':                                'en_AG.UTF-8',
  1006|         0|            0|            0|  0.00%|    'en_au':                                'en_AU.ISO8859-1',
  1007|         0|            0|            0|  0.00%|    'en_be':                                'en_BE.ISO8859-1',
  1008|         0|            0|            0|  0.00%|    'en_bw':                                'en_BW.ISO8859-1',
  1009|         0|            0|            0|  0.00%|    'en_ca':                                'en_CA.ISO8859-1',
  1010|         0|            0|            0|  0.00%|    'en_dk':                                'en_DK.ISO8859-1',
  1011|         0|            0|            0|  0.00%|    'en_dl.utf8':                           'en_DL.UTF-8',
  1012|         0|            0|            0|  0.00%|    'en_gb':                                'en_GB.ISO8859-1',
  1013|         0|            0|            0|  0.00%|    'en_hk':                                'en_HK.ISO8859-1',
  1014|         0|            0|            0|  0.00%|    'en_ie':                                'en_IE.ISO8859-1',
  1015|         0|            0|            0|  0.00%|    'en_il':                                'en_IL.UTF-8',
  1016|         0|            0|            0|  0.00%|    'en_in':                                'en_IN.ISO8859-1',
  1017|         0|            0|            0|  0.00%|    'en_ng':                                'en_NG.UTF-8',
  1018|         0|            0|            0|  0.00%|    'en_nz':                                'en_NZ.ISO8859-1',
  1019|         0|            0|            0|  0.00%|    'en_ph':                                'en_PH.ISO8859-1',
  1020|         0|            0|            0|  0.00%|    'en_sc.utf8':                           'en_SC.UTF-8',
  1021|         0|            0|            0|  0.00%|    'en_sg':                                'en_SG.ISO8859-1',
  1022|         0|            0|            0|  0.00%|    'en_uk':                                'en_GB.ISO8859-1',
  1023|         0|            0|            0|  0.00%|    'en_us':                                'en_US.ISO8859-1',
  1024|         0|            0|            0|  0.00%|    'en_us@euro@euro':                      'en_US.ISO8859-15',
  1025|         0|            0|            0|  0.00%|    'en_za':                                'en_ZA.ISO8859-1',
  1026|         0|            0|            0|  0.00%|    'en_zm':                                'en_ZM.UTF-8',
  1027|         0|            0|            0|  0.00%|    'en_zw':                                'en_ZW.ISO8859-1',
  1028|         0|            0|            0|  0.00%|    'en_zw.utf8':                           'en_ZS.UTF-8',
  1029|         0|            0|            0|  0.00%|    'eng_gb':                               'en_GB.ISO8859-1',
  1030|         0|            0|            0|  0.00%|    'english':                              'en_EN.ISO8859-1',
  1031|         0|            0|            0|  0.00%|    'english.iso88591':                     'en_US.ISO8859-1',
  1032|         0|            0|            0|  0.00%|    'english_uk':                           'en_GB.ISO8859-1',
  1033|         0|            0|            0|  0.00%|    'english_united-states':                'en_US.ISO8859-1',
  1034|         0|            0|            0|  0.00%|    'english_united-states.437':            'C',
  1035|         0|            0|            0|  0.00%|    'english_us':                           'en_US.ISO8859-1',
  1036|         0|            0|            0|  0.00%|    'eo':                                   'eo_XX.ISO8859-3',
  1037|         0|            0|            0|  0.00%|    'eo.utf8':                              'eo.UTF-8',
  1038|         0|            0|            0|  0.00%|    'eo_eo':                                'eo_EO.ISO8859-3',
  1039|         0|            0|            0|  0.00%|    'eo_us.utf8':                           'eo_US.UTF-8',
  1040|         0|            0|            0|  0.00%|    'eo_xx':                                'eo_XX.ISO8859-3',
  1041|         0|            0|            0|  0.00%|    'es':                                   'es_ES.ISO8859-1',
  1042|         0|            0|            0|  0.00%|    'es_ar':                                'es_AR.ISO8859-1',
  1043|         0|            0|            0|  0.00%|    'es_bo':                                'es_BO.ISO8859-1',
  1044|         0|            0|            0|  0.00%|    'es_cl':                                'es_CL.ISO8859-1',
  1045|         0|            0|            0|  0.00%|    'es_co':                                'es_CO.ISO8859-1',
  1046|         0|            0|            0|  0.00%|    'es_cr':                                'es_CR.ISO8859-1',
  1047|         0|            0|            0|  0.00%|    'es_cu':                                'es_CU.UTF-8',
  1048|         0|            0|            0|  0.00%|    'es_do':                                'es_DO.ISO8859-1',
  1049|         0|            0|            0|  0.00%|    'es_ec':                                'es_EC.ISO8859-1',
  1050|         0|            0|            0|  0.00%|    'es_es':                                'es_ES.ISO8859-1',
  1051|         0|            0|            0|  0.00%|    'es_gt':                                'es_GT.ISO8859-1',
  1052|         0|            0|            0|  0.00%|    'es_hn':                                'es_HN.ISO8859-1',
  1053|         0|            0|            0|  0.00%|    'es_mx':                                'es_MX.ISO8859-1',
  1054|         0|            0|            0|  0.00%|    'es_ni':                                'es_NI.ISO8859-1',
  1055|         0|            0|            0|  0.00%|    'es_pa':                                'es_PA.ISO8859-1',
  1056|         0|            0|            0|  0.00%|    'es_pe':                                'es_PE.ISO8859-1',
  1057|         0|            0|            0|  0.00%|    'es_pr':                                'es_PR.ISO8859-1',
  1058|         0|            0|            0|  0.00%|    'es_py':                                'es_PY.ISO8859-1',
  1059|         0|            0|            0|  0.00%|    'es_sv':                                'es_SV.ISO8859-1',
  1060|         0|            0|            0|  0.00%|    'es_us':                                'es_US.ISO8859-1',
  1061|         0|            0|            0|  0.00%|    'es_uy':                                'es_UY.ISO8859-1',
  1062|         0|            0|            0|  0.00%|    'es_ve':                                'es_VE.ISO8859-1',
  1063|         0|            0|            0|  0.00%|    'estonian':                             'et_EE.ISO8859-1',
  1064|         0|            0|            0|  0.00%|    'et':                                   'et_EE.ISO8859-15',
  1065|         0|            0|            0|  0.00%|    'et_ee':                                'et_EE.ISO8859-15',
  1066|         0|            0|            0|  0.00%|    'eu':                                   'eu_ES.ISO8859-1',
  1067|         0|            0|            0|  0.00%|    'eu_es':                                'eu_ES.ISO8859-1',
  1068|         0|            0|            0|  0.00%|    'eu_fr':                                'eu_FR.ISO8859-1',
  1069|         0|            0|            0|  0.00%|    'fa':                                   'fa_IR.UTF-8',
  1070|         0|            0|            0|  0.00%|    'fa_ir':                                'fa_IR.UTF-8',
  1071|         0|            0|            0|  0.00%|    'fa_ir.isiri3342':                      'fa_IR.ISIRI-3342',
  1072|         0|            0|            0|  0.00%|    'ff_sn':                                'ff_SN.UTF-8',
  1073|         0|            0|            0|  0.00%|    'fi':                                   'fi_FI.ISO8859-15',
  1074|         0|            0|            0|  0.00%|    'fi_fi':                                'fi_FI.ISO8859-15',
  1075|         0|            0|            0|  0.00%|    'fil_ph':                               'fil_PH.UTF-8',
  1076|         0|            0|            0|  0.00%|    'finnish':                              'fi_FI.ISO8859-1',
  1077|         0|            0|            0|  0.00%|    'fo':                                   'fo_FO.ISO8859-1',
  1078|         0|            0|            0|  0.00%|    'fo_fo':                                'fo_FO.ISO8859-1',
  1079|         0|            0|            0|  0.00%|    'fr':                                   'fr_FR.ISO8859-1',
  1080|         0|            0|            0|  0.00%|    'fr_be':                                'fr_BE.ISO8859-1',
  1081|         0|            0|            0|  0.00%|    'fr_ca':                                'fr_CA.ISO8859-1',
  1082|         0|            0|            0|  0.00%|    'fr_ch':                                'fr_CH.ISO8859-1',
  1083|         0|            0|            0|  0.00%|    'fr_fr':                                'fr_FR.ISO8859-1',
  1084|         0|            0|            0|  0.00%|    'fr_lu':                                'fr_LU.ISO8859-1',
  1085|         0|            0|            0|  0.00%|    'fran\xe7ais':                          'fr_FR.ISO8859-1',
  1086|         0|            0|            0|  0.00%|    'fre_fr':                               'fr_FR.ISO8859-1',
  1087|         0|            0|            0|  0.00%|    'french':                               'fr_FR.ISO8859-1',
  1088|         0|            0|            0|  0.00%|    'french.iso88591':                      'fr_CH.ISO8859-1',
  1089|         0|            0|            0|  0.00%|    'french_france':                        'fr_FR.ISO8859-1',
  1090|         0|            0|            0|  0.00%|    'fur_it':                               'fur_IT.UTF-8',
  1091|         0|            0|            0|  0.00%|    'fy_de':                                'fy_DE.UTF-8',
  1092|         0|            0|            0|  0.00%|    'fy_nl':                                'fy_NL.UTF-8',
  1093|         0|            0|            0|  0.00%|    'ga':                                   'ga_IE.ISO8859-1',
  1094|         0|            0|            0|  0.00%|    'ga_ie':                                'ga_IE.ISO8859-1',
  1095|         0|            0|            0|  0.00%|    'galego':                               'gl_ES.ISO8859-1',
  1096|         0|            0|            0|  0.00%|    'galician':                             'gl_ES.ISO8859-1',
  1097|         0|            0|            0|  0.00%|    'gd':                                   'gd_GB.ISO8859-1',
  1098|         0|            0|            0|  0.00%|    'gd_gb':                                'gd_GB.ISO8859-1',
  1099|         0|            0|            0|  0.00%|    'ger_de':                               'de_DE.ISO8859-1',
  1100|         0|            0|            0|  0.00%|    'german':                               'de_DE.ISO8859-1',
  1101|         0|            0|            0|  0.00%|    'german.iso88591':                      'de_CH.ISO8859-1',
  1102|         0|            0|            0|  0.00%|    'german_germany':                       'de_DE.ISO8859-1',
  1103|         0|            0|            0|  0.00%|    'gez_er':                               'gez_ER.UTF-8',
  1104|         0|            0|            0|  0.00%|    'gez_et':                               'gez_ET.UTF-8',
  1105|         0|            0|            0|  0.00%|    'gl':                                   'gl_ES.ISO8859-1',
  1106|         0|            0|            0|  0.00%|    'gl_es':                                'gl_ES.ISO8859-1',
  1107|         0|            0|            0|  0.00%|    'greek':                                'el_GR.ISO8859-7',
  1108|         0|            0|            0|  0.00%|    'gu_in':                                'gu_IN.UTF-8',
  1109|         0|            0|            0|  0.00%|    'gv':                                   'gv_GB.ISO8859-1',
  1110|         0|            0|            0|  0.00%|    'gv_gb':                                'gv_GB.ISO8859-1',
  1111|         0|            0|            0|  0.00%|    'ha_ng':                                'ha_NG.UTF-8',
  1112|         0|            0|            0|  0.00%|    'hak_tw':                               'hak_TW.UTF-8',
  1113|         0|            0|            0|  0.00%|    'he':                                   'he_IL.ISO8859-8',
  1114|         0|            0|            0|  0.00%|    'he_il':                                'he_IL.ISO8859-8',
  1115|         0|            0|            0|  0.00%|    'hebrew':                               'he_IL.ISO8859-8',
  1116|         0|            0|            0|  0.00%|    'hi':                                   'hi_IN.ISCII-DEV',
  1117|         0|            0|            0|  0.00%|    'hi_in':                                'hi_IN.ISCII-DEV',
  1118|         0|            0|            0|  0.00%|    'hi_in.isciidev':                       'hi_IN.ISCII-DEV',
  1119|         0|            0|            0|  0.00%|    'hif_fj':                               'hif_FJ.UTF-8',
  1120|         0|            0|            0|  0.00%|    'hne':                                  'hne_IN.UTF-8',
  1121|         0|            0|            0|  0.00%|    'hne_in':                               'hne_IN.UTF-8',
  1122|         0|            0|            0|  0.00%|    'hr':                                   'hr_HR.ISO8859-2',
  1123|         0|            0|            0|  0.00%|    'hr_hr':                                'hr_HR.ISO8859-2',
  1124|         0|            0|            0|  0.00%|    'hrvatski':                             'hr_HR.ISO8859-2',
  1125|         0|            0|            0|  0.00%|    'hsb_de':                               'hsb_DE.ISO8859-2',
  1126|         0|            0|            0|  0.00%|    'ht_ht':                                'ht_HT.UTF-8',
  1127|         0|            0|            0|  0.00%|    'hu':                                   'hu_HU.ISO8859-2',
  1128|         0|            0|            0|  0.00%|    'hu_hu':                                'hu_HU.ISO8859-2',
  1129|         0|            0|            0|  0.00%|    'hungarian':                            'hu_HU.ISO8859-2',
  1130|         0|            0|            0|  0.00%|    'hy_am':                                'hy_AM.UTF-8',
  1131|         0|            0|            0|  0.00%|    'hy_am.armscii8':                       'hy_AM.ARMSCII_8',
  1132|         0|            0|            0|  0.00%|    'ia':                                   'ia.UTF-8',
  1133|         0|            0|            0|  0.00%|    'ia_fr':                                'ia_FR.UTF-8',
  1134|         0|            0|            0|  0.00%|    'icelandic':                            'is_IS.ISO8859-1',
  1135|         0|            0|            0|  0.00%|    'id':                                   'id_ID.ISO8859-1',
  1136|         0|            0|            0|  0.00%|    'id_id':                                'id_ID.ISO8859-1',
  1137|         0|            0|            0|  0.00%|    'ig_ng':                                'ig_NG.UTF-8',
  1138|         0|            0|            0|  0.00%|    'ik_ca':                                'ik_CA.UTF-8',
  1139|         0|            0|            0|  0.00%|    'in':                                   'id_ID.ISO8859-1',
  1140|         0|            0|            0|  0.00%|    'in_id':                                'id_ID.ISO8859-1',
  1141|         0|            0|            0|  0.00%|    'is':                                   'is_IS.ISO8859-1',
  1142|         0|            0|            0|  0.00%|    'is_is':                                'is_IS.ISO8859-1',
  1143|         0|            0|            0|  0.00%|    'iso-8859-1':                           'en_US.ISO8859-1',
  1144|         0|            0|            0|  0.00%|    'iso-8859-15':                          'en_US.ISO8859-15',
  1145|         0|            0|            0|  0.00%|    'iso8859-1':                            'en_US.ISO8859-1',
  1146|         0|            0|            0|  0.00%|    'iso8859-15':                           'en_US.ISO8859-15',
  1147|         0|            0|            0|  0.00%|    'iso_8859_1':                           'en_US.ISO8859-1',
  1148|         0|            0|            0|  0.00%|    'iso_8859_15':                          'en_US.ISO8859-15',
  1149|         0|            0|            0|  0.00%|    'it':                                   'it_IT.ISO8859-1',
  1150|         0|            0|            0|  0.00%|    'it_ch':                                'it_CH.ISO8859-1',
  1151|         0|            0|            0|  0.00%|    'it_it':                                'it_IT.ISO8859-1',
  1152|         0|            0|            0|  0.00%|    'italian':                              'it_IT.ISO8859-1',
  1153|         0|            0|            0|  0.00%|    'iu':                                   'iu_CA.NUNACOM-8',
  1154|         0|            0|            0|  0.00%|    'iu_ca':                                'iu_CA.NUNACOM-8',
  1155|         0|            0|            0|  0.00%|    'iu_ca.nunacom8':                       'iu_CA.NUNACOM-8',
  1156|         0|            0|            0|  0.00%|    'iw':                                   'he_IL.ISO8859-8',
  1157|         0|            0|            0|  0.00%|    'iw_il':                                'he_IL.ISO8859-8',
  1158|         0|            0|            0|  0.00%|    'iw_il.utf8':                           'iw_IL.UTF-8',
  1159|         0|            0|            0|  0.00%|    'ja':                                   'ja_JP.eucJP',
  1160|         0|            0|            0|  0.00%|    'ja_jp':                                'ja_JP.eucJP',
  1161|         0|            0|            0|  0.00%|    'ja_jp.euc':                            'ja_JP.eucJP',
  1162|         0|            0|            0|  0.00%|    'ja_jp.mscode':                         'ja_JP.SJIS',
  1163|         0|            0|            0|  0.00%|    'ja_jp.pck':                            'ja_JP.SJIS',
  1164|         0|            0|            0|  0.00%|    'japan':                                'ja_JP.eucJP',
  1165|         0|            0|            0|  0.00%|    'japanese':                             'ja_JP.eucJP',
  1166|         0|            0|            0|  0.00%|    'japanese-euc':                         'ja_JP.eucJP',
  1167|         0|            0|            0|  0.00%|    'japanese.euc':                         'ja_JP.eucJP',
  1168|         0|            0|            0|  0.00%|    'jp_jp':                                'ja_JP.eucJP',
  1169|         0|            0|            0|  0.00%|    'ka':                                   'ka_GE.GEORGIAN-ACADEMY',
  1170|         0|            0|            0|  0.00%|    'ka_ge':                                'ka_GE.GEORGIAN-ACADEMY',
  1171|         0|            0|            0|  0.00%|    'ka_ge.georgianacademy':                'ka_GE.GEORGIAN-ACADEMY',
  1172|         0|            0|            0|  0.00%|    'ka_ge.georgianps':                     'ka_GE.GEORGIAN-PS',
  1173|         0|            0|            0|  0.00%|    'ka_ge.georgianrs':                     'ka_GE.GEORGIAN-ACADEMY',
  1174|         0|            0|            0|  0.00%|    'kab_dz':                               'kab_DZ.UTF-8',
  1175|         0|            0|            0|  0.00%|    'kk_kz':                                'kk_KZ.ptcp154',
  1176|         0|            0|            0|  0.00%|    'kl':                                   'kl_GL.ISO8859-1',
  1177|         0|            0|            0|  0.00%|    'kl_gl':                                'kl_GL.ISO8859-1',
  1178|         0|            0|            0|  0.00%|    'km_kh':                                'km_KH.UTF-8',
  1179|         0|            0|            0|  0.00%|    'kn':                                   'kn_IN.UTF-8',
  1180|         0|            0|            0|  0.00%|    'kn_in':                                'kn_IN.UTF-8',
  1181|         0|            0|            0|  0.00%|    'ko':                                   'ko_KR.eucKR',
  1182|         0|            0|            0|  0.00%|    'ko_kr':                                'ko_KR.eucKR',
  1183|         0|            0|            0|  0.00%|    'ko_kr.euc':                            'ko_KR.eucKR',
  1184|         0|            0|            0|  0.00%|    'kok_in':                               'kok_IN.UTF-8',
  1185|         0|            0|            0|  0.00%|    'korean':                               'ko_KR.eucKR',
  1186|         0|            0|            0|  0.00%|    'korean.euc':                           'ko_KR.eucKR',
  1187|         0|            0|            0|  0.00%|    'ks':                                   'ks_IN.UTF-8',
  1188|         0|            0|            0|  0.00%|    'ks_in':                                'ks_IN.UTF-8',
  1189|         0|            0|            0|  0.00%|    'ks_in@devanagari.utf8':                'ks_IN.UTF-8@devanagari',
  1190|         0|            0|            0|  0.00%|    'ku_tr':                                'ku_TR.ISO8859-9',
  1191|         0|            0|            0|  0.00%|    'kw':                                   'kw_GB.ISO8859-1',
  1192|         0|            0|            0|  0.00%|    'kw_gb':                                'kw_GB.ISO8859-1',
  1193|         0|            0|            0|  0.00%|    'ky':                                   'ky_KG.UTF-8',
  1194|         0|            0|            0|  0.00%|    'ky_kg':                                'ky_KG.UTF-8',
  1195|         0|            0|            0|  0.00%|    'lb_lu':                                'lb_LU.UTF-8',
  1196|         0|            0|            0|  0.00%|    'lg_ug':                                'lg_UG.ISO8859-10',
  1197|         0|            0|            0|  0.00%|    'li_be':                                'li_BE.UTF-8',
  1198|         0|            0|            0|  0.00%|    'li_nl':                                'li_NL.UTF-8',
  1199|         0|            0|            0|  0.00%|    'lij_it':                               'lij_IT.UTF-8',
  1200|         0|            0|            0|  0.00%|    'lithuanian':                           'lt_LT.ISO8859-13',
  1201|         0|            0|            0|  0.00%|    'ln_cd':                                'ln_CD.UTF-8',
  1202|         0|            0|            0|  0.00%|    'lo':                                   'lo_LA.MULELAO-1',
  1203|         0|            0|            0|  0.00%|    'lo_la':                                'lo_LA.MULELAO-1',
  1204|         0|            0|            0|  0.00%|    'lo_la.cp1133':                         'lo_LA.IBM-CP1133',
  1205|         0|            0|            0|  0.00%|    'lo_la.ibmcp1133':                      'lo_LA.IBM-CP1133',
  1206|         0|            0|            0|  0.00%|    'lo_la.mulelao1':                       'lo_LA.MULELAO-1',
  1207|         0|            0|            0|  0.00%|    'lt':                                   'lt_LT.ISO8859-13',
  1208|         0|            0|            0|  0.00%|    'lt_lt':                                'lt_LT.ISO8859-13',
  1209|         0|            0|            0|  0.00%|    'lv':                                   'lv_LV.ISO8859-13',
  1210|         0|            0|            0|  0.00%|    'lv_lv':                                'lv_LV.ISO8859-13',
  1211|         0|            0|            0|  0.00%|    'lzh_tw':                               'lzh_TW.UTF-8',
  1212|         0|            0|            0|  0.00%|    'mag_in':                               'mag_IN.UTF-8',
  1213|         0|            0|            0|  0.00%|    'mai':                                  'mai_IN.UTF-8',
  1214|         0|            0|            0|  0.00%|    'mai_in':                               'mai_IN.UTF-8',
  1215|         0|            0|            0|  0.00%|    'mai_np':                               'mai_NP.UTF-8',
  1216|         0|            0|            0|  0.00%|    'mfe_mu':                               'mfe_MU.UTF-8',
  1217|         0|            0|            0|  0.00%|    'mg_mg':                                'mg_MG.ISO8859-15',
  1218|         0|            0|            0|  0.00%|    'mhr_ru':                               'mhr_RU.UTF-8',
  1219|         0|            0|            0|  0.00%|    'mi':                                   'mi_NZ.ISO8859-1',
  1220|         0|            0|            0|  0.00%|    'mi_nz':                                'mi_NZ.ISO8859-1',
  1221|         0|            0|            0|  0.00%|    'miq_ni':                               'miq_NI.UTF-8',
  1222|         0|            0|            0|  0.00%|    'mjw_in':                               'mjw_IN.UTF-8',
  1223|         0|            0|            0|  0.00%|    'mk':                                   'mk_MK.ISO8859-5',
  1224|         0|            0|            0|  0.00%|    'mk_mk':                                'mk_MK.ISO8859-5',
  1225|         0|            0|            0|  0.00%|    'ml':                                   'ml_IN.UTF-8',
  1226|         0|            0|            0|  0.00%|    'ml_in':                                'ml_IN.UTF-8',
  1227|         0|            0|            0|  0.00%|    'mn_mn':                                'mn_MN.UTF-8',
  1228|         0|            0|            0|  0.00%|    'mni_in':                               'mni_IN.UTF-8',
  1229|         0|            0|            0|  0.00%|    'mr':                                   'mr_IN.UTF-8',
  1230|         0|            0|            0|  0.00%|    'mr_in':                                'mr_IN.UTF-8',
  1231|         0|            0|            0|  0.00%|    'ms':                                   'ms_MY.ISO8859-1',
  1232|         0|            0|            0|  0.00%|    'ms_my':                                'ms_MY.ISO8859-1',
  1233|         0|            0|            0|  0.00%|    'mt':                                   'mt_MT.ISO8859-3',
  1234|         0|            0|            0|  0.00%|    'mt_mt':                                'mt_MT.ISO8859-3',
  1235|         0|            0|            0|  0.00%|    'my_mm':                                'my_MM.UTF-8',
  1236|         0|            0|            0|  0.00%|    'nan_tw':                               'nan_TW.UTF-8',
  1237|         0|            0|            0|  0.00%|    'nb':                                   'nb_NO.ISO8859-1',
  1238|         0|            0|            0|  0.00%|    'nb_no':                                'nb_NO.ISO8859-1',
  1239|         0|            0|            0|  0.00%|    'nds_de':                               'nds_DE.UTF-8',
  1240|         0|            0|            0|  0.00%|    'nds_nl':                               'nds_NL.UTF-8',
  1241|         0|            0|            0|  0.00%|    'ne_np':                                'ne_NP.UTF-8',
  1242|         0|            0|            0|  0.00%|    'nhn_mx':                               'nhn_MX.UTF-8',
  1243|         0|            0|            0|  0.00%|    'niu_nu':                               'niu_NU.UTF-8',
  1244|         0|            0|            0|  0.00%|    'niu_nz':                               'niu_NZ.UTF-8',
  1245|         0|            0|            0|  0.00%|    'nl':                                   'nl_NL.ISO8859-1',
  1246|         0|            0|            0|  0.00%|    'nl_aw':                                'nl_AW.UTF-8',
  1247|         0|            0|            0|  0.00%|    'nl_be':                                'nl_BE.ISO8859-1',
  1248|         0|            0|            0|  0.00%|    'nl_nl':                                'nl_NL.ISO8859-1',
  1249|         0|            0|            0|  0.00%|    'nn':                                   'nn_NO.ISO8859-1',
  1250|         0|            0|            0|  0.00%|    'nn_no':                                'nn_NO.ISO8859-1',
  1251|         0|            0|            0|  0.00%|    'no':                                   'no_NO.ISO8859-1',
  1252|         0|            0|            0|  0.00%|    'no@nynorsk':                           'ny_NO.ISO8859-1',
  1253|         0|            0|            0|  0.00%|    'no_no':                                'no_NO.ISO8859-1',
  1254|         0|            0|            0|  0.00%|    'no_no.iso88591@bokmal':                'no_NO.ISO8859-1',
  1255|         0|            0|            0|  0.00%|    'no_no.iso88591@nynorsk':               'no_NO.ISO8859-1',
  1256|         0|            0|            0|  0.00%|    'norwegian':                            'no_NO.ISO8859-1',
  1257|         0|            0|            0|  0.00%|    'nr':                                   'nr_ZA.ISO8859-1',
  1258|         0|            0|            0|  0.00%|    'nr_za':                                'nr_ZA.ISO8859-1',
  1259|         0|            0|            0|  0.00%|    'nso':                                  'nso_ZA.ISO8859-15',
  1260|         0|            0|            0|  0.00%|    'nso_za':                               'nso_ZA.ISO8859-15',
  1261|         0|            0|            0|  0.00%|    'ny':                                   'ny_NO.ISO8859-1',
  1262|         0|            0|            0|  0.00%|    'ny_no':                                'ny_NO.ISO8859-1',
  1263|         0|            0|            0|  0.00%|    'nynorsk':                              'nn_NO.ISO8859-1',
  1264|         0|            0|            0|  0.00%|    'oc':                                   'oc_FR.ISO8859-1',
  1265|         0|            0|            0|  0.00%|    'oc_fr':                                'oc_FR.ISO8859-1',
  1266|         0|            0|            0|  0.00%|    'om_et':                                'om_ET.UTF-8',
  1267|         0|            0|            0|  0.00%|    'om_ke':                                'om_KE.ISO8859-1',
  1268|         0|            0|            0|  0.00%|    'or':                                   'or_IN.UTF-8',
  1269|         0|            0|            0|  0.00%|    'or_in':                                'or_IN.UTF-8',
  1270|         0|            0|            0|  0.00%|    'os_ru':                                'os_RU.UTF-8',
  1271|         0|            0|            0|  0.00%|    'pa':                                   'pa_IN.UTF-8',
  1272|         0|            0|            0|  0.00%|    'pa_in':                                'pa_IN.UTF-8',
  1273|         0|            0|            0|  0.00%|    'pa_pk':                                'pa_PK.UTF-8',
  1274|         0|            0|            0|  0.00%|    'pap_an':                               'pap_AN.UTF-8',
  1275|         0|            0|            0|  0.00%|    'pap_aw':                               'pap_AW.UTF-8',
  1276|         0|            0|            0|  0.00%|    'pap_cw':                               'pap_CW.UTF-8',
  1277|         0|            0|            0|  0.00%|    'pd':                                   'pd_US.ISO8859-1',
  1278|         0|            0|            0|  0.00%|    'pd_de':                                'pd_DE.ISO8859-1',
  1279|         0|            0|            0|  0.00%|    'pd_us':                                'pd_US.ISO8859-1',
  1280|         0|            0|            0|  0.00%|    'ph':                                   'ph_PH.ISO8859-1',
  1281|         0|            0|            0|  0.00%|    'ph_ph':                                'ph_PH.ISO8859-1',
  1282|         0|            0|            0|  0.00%|    'pl':                                   'pl_PL.ISO8859-2',
  1283|         0|            0|            0|  0.00%|    'pl_pl':                                'pl_PL.ISO8859-2',
  1284|         0|            0|            0|  0.00%|    'polish':                               'pl_PL.ISO8859-2',
  1285|         0|            0|            0|  0.00%|    'portuguese':                           'pt_PT.ISO8859-1',
  1286|         0|            0|            0|  0.00%|    'portuguese_brazil':                    'pt_BR.ISO8859-1',
  1287|         0|            0|            0|  0.00%|    'posix':                                'C',
  1288|         0|            0|            0|  0.00%|    'posix-utf2':                           'C',
  1289|         0|            0|            0|  0.00%|    'pp':                                   'pp_AN.ISO8859-1',
  1290|         0|            0|            0|  0.00%|    'pp_an':                                'pp_AN.ISO8859-1',
  1291|         0|            0|            0|  0.00%|    'ps_af':                                'ps_AF.UTF-8',
  1292|         0|            0|            0|  0.00%|    'pt':                                   'pt_PT.ISO8859-1',
  1293|         0|            0|            0|  0.00%|    'pt_br':                                'pt_BR.ISO8859-1',
  1294|         0|            0|            0|  0.00%|    'pt_pt':                                'pt_PT.ISO8859-1',
  1295|         0|            0|            0|  0.00%|    'quz_pe':                               'quz_PE.UTF-8',
  1296|         0|            0|            0|  0.00%|    'raj_in':                               'raj_IN.UTF-8',
  1297|         0|            0|            0|  0.00%|    'ro':                                   'ro_RO.ISO8859-2',
  1298|         0|            0|            0|  0.00%|    'ro_ro':                                'ro_RO.ISO8859-2',
  1299|         0|            0|            0|  0.00%|    'romanian':                             'ro_RO.ISO8859-2',
  1300|         0|            0|            0|  0.00%|    'ru':                                   'ru_RU.UTF-8',
  1301|         0|            0|            0|  0.00%|    'ru_ru':                                'ru_RU.UTF-8',
  1302|         0|            0|            0|  0.00%|    'ru_ua':                                'ru_UA.KOI8-U',
  1303|         0|            0|            0|  0.00%|    'rumanian':                             'ro_RO.ISO8859-2',
  1304|         0|            0|            0|  0.00%|    'russian':                              'ru_RU.KOI8-R',
  1305|         0|            0|            0|  0.00%|    'rw':                                   'rw_RW.ISO8859-1',
  1306|         0|            0|            0|  0.00%|    'rw_rw':                                'rw_RW.ISO8859-1',
  1307|         0|            0|            0|  0.00%|    'sa_in':                                'sa_IN.UTF-8',
  1308|         0|            0|            0|  0.00%|    'sat_in':                               'sat_IN.UTF-8',
  1309|         0|            0|            0|  0.00%|    'sc_it':                                'sc_IT.UTF-8',
  1310|         0|            0|            0|  0.00%|    'sd':                                   'sd_IN.UTF-8',
  1311|         0|            0|            0|  0.00%|    'sd_in':                                'sd_IN.UTF-8',
  1312|         0|            0|            0|  0.00%|    'sd_in@devanagari.utf8':                'sd_IN.UTF-8@devanagari',
  1313|         0|            0|            0|  0.00%|    'sd_pk':                                'sd_PK.UTF-8',
  1314|         0|            0|            0|  0.00%|    'se_no':                                'se_NO.UTF-8',
  1315|         0|            0|            0|  0.00%|    'serbocroatian':                        'sr_RS.UTF-8@latin',
  1316|         0|            0|            0|  0.00%|    'sgs_lt':                               'sgs_LT.UTF-8',
  1317|         0|            0|            0|  0.00%|    'sh':                                   'sr_RS.UTF-8@latin',
  1318|         0|            0|            0|  0.00%|    'sh_ba.iso88592@bosnia':                'sr_CS.ISO8859-2',
  1319|         0|            0|            0|  0.00%|    'sh_hr':                                'sh_HR.ISO8859-2',
  1320|         0|            0|            0|  0.00%|    'sh_hr.iso88592':                       'hr_HR.ISO8859-2',
  1321|         0|            0|            0|  0.00%|    'sh_sp':                                'sr_CS.ISO8859-2',
  1322|         0|            0|            0|  0.00%|    'sh_yu':                                'sr_RS.UTF-8@latin',
  1323|         0|            0|            0|  0.00%|    'shn_mm':                               'shn_MM.UTF-8',
  1324|         0|            0|            0|  0.00%|    'shs_ca':                               'shs_CA.UTF-8',
  1325|         0|            0|            0|  0.00%|    'si':                                   'si_LK.UTF-8',
  1326|         0|            0|            0|  0.00%|    'si_lk':                                'si_LK.UTF-8',
  1327|         0|            0|            0|  0.00%|    'sid_et':                               'sid_ET.UTF-8',
  1328|         0|            0|            0|  0.00%|    'sinhala':                              'si_LK.UTF-8',
  1329|         0|            0|            0|  0.00%|    'sk':                                   'sk_SK.ISO8859-2',
  1330|         0|            0|            0|  0.00%|    'sk_sk':                                'sk_SK.ISO8859-2',
  1331|         0|            0|            0|  0.00%|    'sl':                                   'sl_SI.ISO8859-2',
  1332|         0|            0|            0|  0.00%|    'sl_cs':                                'sl_CS.ISO8859-2',
  1333|         0|            0|            0|  0.00%|    'sl_si':                                'sl_SI.ISO8859-2',
  1334|         0|            0|            0|  0.00%|    'slovak':                               'sk_SK.ISO8859-2',
  1335|         0|            0|            0|  0.00%|    'slovene':                              'sl_SI.ISO8859-2',
  1336|         0|            0|            0|  0.00%|    'slovenian':                            'sl_SI.ISO8859-2',
  1337|         0|            0|            0|  0.00%|    'sm_ws':                                'sm_WS.UTF-8',
  1338|         0|            0|            0|  0.00%|    'so_dj':                                'so_DJ.ISO8859-1',
  1339|         0|            0|            0|  0.00%|    'so_et':                                'so_ET.UTF-8',
  1340|         0|            0|            0|  0.00%|    'so_ke':                                'so_KE.ISO8859-1',
  1341|         0|            0|            0|  0.00%|    'so_so':                                'so_SO.ISO8859-1',
  1342|         0|            0|            0|  0.00%|    'sp':                                   'sr_CS.ISO8859-5',
  1343|         0|            0|            0|  0.00%|    'sp_yu':                                'sr_CS.ISO8859-5',
  1344|         0|            0|            0|  0.00%|    'spanish':                              'es_ES.ISO8859-1',
  1345|         0|            0|            0|  0.00%|    'spanish_spain':                        'es_ES.ISO8859-1',
  1346|         0|            0|            0|  0.00%|    'sq':                                   'sq_AL.ISO8859-2',
  1347|         0|            0|            0|  0.00%|    'sq_al':                                'sq_AL.ISO8859-2',
  1348|         0|            0|            0|  0.00%|    'sq_mk':                                'sq_MK.UTF-8',
  1349|         0|            0|            0|  0.00%|    'sr':                                   'sr_RS.UTF-8',
  1350|         0|            0|            0|  0.00%|    'sr@cyrillic':                          'sr_RS.UTF-8',
  1351|         0|            0|            0|  0.00%|    'sr@latn':                              'sr_CS.UTF-8@latin',
  1352|         0|            0|            0|  0.00%|    'sr_cs':                                'sr_CS.UTF-8',
  1353|         0|            0|            0|  0.00%|    'sr_cs.iso88592@latn':                  'sr_CS.ISO8859-2',
  1354|         0|            0|            0|  0.00%|    'sr_cs@latn':                           'sr_CS.UTF-8@latin',
  1355|         0|            0|            0|  0.00%|    'sr_me':                                'sr_ME.UTF-8',
  1356|         0|            0|            0|  0.00%|    'sr_rs':                                'sr_RS.UTF-8',
  1357|         0|            0|            0|  0.00%|    'sr_rs@latn':                           'sr_RS.UTF-8@latin',
  1358|         0|            0|            0|  0.00%|    'sr_sp':                                'sr_CS.ISO8859-2',
  1359|         0|            0|            0|  0.00%|    'sr_yu':                                'sr_RS.UTF-8@latin',
  1360|         0|            0|            0|  0.00%|    'sr_yu.cp1251@cyrillic':                'sr_CS.CP1251',
  1361|         0|            0|            0|  0.00%|    'sr_yu.iso88592':                       'sr_CS.ISO8859-2',
  1362|         0|            0|            0|  0.00%|    'sr_yu.iso88595':                       'sr_CS.ISO8859-5',
  1363|         0|            0|            0|  0.00%|    'sr_yu.iso88595@cyrillic':              'sr_CS.ISO8859-5',
  1364|         0|            0|            0|  0.00%|    'sr_yu.microsoftcp1251@cyrillic':       'sr_CS.CP1251',
  1365|         0|            0|            0|  0.00%|    'sr_yu.utf8':                           'sr_RS.UTF-8',
  1366|         0|            0|            0|  0.00%|    'sr_yu.utf8@cyrillic':                  'sr_RS.UTF-8',
  1367|         0|            0|            0|  0.00%|    'sr_yu@cyrillic':                       'sr_RS.UTF-8',
  1368|         0|            0|            0|  0.00%|    'ss':                                   'ss_ZA.ISO8859-1',
  1369|         0|            0|            0|  0.00%|    'ss_za':                                'ss_ZA.ISO8859-1',
  1370|         0|            0|            0|  0.00%|    'st':                                   'st_ZA.ISO8859-1',
  1371|         0|            0|            0|  0.00%|    'st_za':                                'st_ZA.ISO8859-1',
  1372|         0|            0|            0|  0.00%|    'sv':                                   'sv_SE.ISO8859-1',
  1373|         0|            0|            0|  0.00%|    'sv_fi':                                'sv_FI.ISO8859-1',
  1374|         0|            0|            0|  0.00%|    'sv_se':                                'sv_SE.ISO8859-1',
  1375|         0|            0|            0|  0.00%|    'sw_ke':                                'sw_KE.UTF-8',
  1376|         0|            0|            0|  0.00%|    'sw_tz':                                'sw_TZ.UTF-8',
  1377|         0|            0|            0|  0.00%|    'swedish':                              'sv_SE.ISO8859-1',
  1378|         0|            0|            0|  0.00%|    'szl_pl':                               'szl_PL.UTF-8',
  1379|         0|            0|            0|  0.00%|    'ta':                                   'ta_IN.TSCII-0',
  1380|         0|            0|            0|  0.00%|    'ta_in':                                'ta_IN.TSCII-0',
  1381|         0|            0|            0|  0.00%|    'ta_in.tscii':                          'ta_IN.TSCII-0',
  1382|         0|            0|            0|  0.00%|    'ta_in.tscii0':                         'ta_IN.TSCII-0',
  1383|         0|            0|            0|  0.00%|    'ta_lk':                                'ta_LK.UTF-8',
  1384|         0|            0|            0|  0.00%|    'tcy_in.utf8':                          'tcy_IN.UTF-8',
  1385|         0|            0|            0|  0.00%|    'te':                                   'te_IN.UTF-8',
  1386|         0|            0|            0|  0.00%|    'te_in':                                'te_IN.UTF-8',
  1387|         0|            0|            0|  0.00%|    'tg':                                   'tg_TJ.KOI8-C',
  1388|         0|            0|            0|  0.00%|    'tg_tj':                                'tg_TJ.KOI8-C',
  1389|         0|            0|            0|  0.00%|    'th':                                   'th_TH.ISO8859-11',
  1390|         0|            0|            0|  0.00%|    'th_th':                                'th_TH.ISO8859-11',
  1391|         0|            0|            0|  0.00%|    'th_th.tactis':                         'th_TH.TIS620',
  1392|         0|            0|            0|  0.00%|    'th_th.tis620':                         'th_TH.TIS620',
  1393|         0|            0|            0|  0.00%|    'thai':                                 'th_TH.ISO8859-11',
  1394|         0|            0|            0|  0.00%|    'the_np':                               'the_NP.UTF-8',
  1395|         0|            0|            0|  0.00%|    'ti_er':                                'ti_ER.UTF-8',
  1396|         0|            0|            0|  0.00%|    'ti_et':                                'ti_ET.UTF-8',
  1397|         0|            0|            0|  0.00%|    'tig_er':                               'tig_ER.UTF-8',
  1398|         0|            0|            0|  0.00%|    'tk_tm':                                'tk_TM.UTF-8',
  1399|         0|            0|            0|  0.00%|    'tl':                                   'tl_PH.ISO8859-1',
  1400|         0|            0|            0|  0.00%|    'tl_ph':                                'tl_PH.ISO8859-1',
  1401|         0|            0|            0|  0.00%|    'tn':                                   'tn_ZA.ISO8859-15',
  1402|         0|            0|            0|  0.00%|    'tn_za':                                'tn_ZA.ISO8859-15',
  1403|         0|            0|            0|  0.00%|    'to_to':                                'to_TO.UTF-8',
  1404|         0|            0|            0|  0.00%|    'tpi_pg':                               'tpi_PG.UTF-8',
  1405|         0|            0|            0|  0.00%|    'tr':                                   'tr_TR.ISO8859-9',
  1406|         0|            0|            0|  0.00%|    'tr_cy':                                'tr_CY.ISO8859-9',
  1407|         0|            0|            0|  0.00%|    'tr_tr':                                'tr_TR.ISO8859-9',
  1408|         0|            0|            0|  0.00%|    'ts':                                   'ts_ZA.ISO8859-1',
  1409|         0|            0|            0|  0.00%|    'ts_za':                                'ts_ZA.ISO8859-1',
  1410|         0|            0|            0|  0.00%|    'tt':                                   'tt_RU.TATAR-CYR',
  1411|         0|            0|            0|  0.00%|    'tt_ru':                                'tt_RU.TATAR-CYR',
  1412|         0|            0|            0|  0.00%|    'tt_ru.tatarcyr':                       'tt_RU.TATAR-CYR',
  1413|         0|            0|            0|  0.00%|    'tt_ru@iqtelif':                        'tt_RU.UTF-8@iqtelif',
  1414|         0|            0|            0|  0.00%|    'turkish':                              'tr_TR.ISO8859-9',
  1415|         0|            0|            0|  0.00%|    'ug_cn':                                'ug_CN.UTF-8',
  1416|         0|            0|            0|  0.00%|    'uk':                                   'uk_UA.KOI8-U',
  1417|         0|            0|            0|  0.00%|    'uk_ua':                                'uk_UA.KOI8-U',
  1418|         0|            0|            0|  0.00%|    'univ':                                 'en_US.utf',
  1419|         0|            0|            0|  0.00%|    'universal':                            'en_US.utf',
  1420|         0|            0|            0|  0.00%|    'universal.utf8@ucs4':                  'en_US.UTF-8',
  1421|         0|            0|            0|  0.00%|    'unm_us':                               'unm_US.UTF-8',
  1422|         0|            0|            0|  0.00%|    'ur':                                   'ur_PK.CP1256',
  1423|         0|            0|            0|  0.00%|    'ur_in':                                'ur_IN.UTF-8',
  1424|         0|            0|            0|  0.00%|    'ur_pk':                                'ur_PK.CP1256',
  1425|         0|            0|            0|  0.00%|    'uz':                                   'uz_UZ.UTF-8',
  1426|         0|            0|            0|  0.00%|    'uz_uz':                                'uz_UZ.UTF-8',
  1427|         0|            0|            0|  0.00%|    'uz_uz@cyrillic':                       'uz_UZ.UTF-8',
  1428|         0|            0|            0|  0.00%|    've':                                   've_ZA.UTF-8',
  1429|         0|            0|            0|  0.00%|    've_za':                                've_ZA.UTF-8',
  1430|         0|            0|            0|  0.00%|    'vi':                                   'vi_VN.TCVN',
  1431|         0|            0|            0|  0.00%|    'vi_vn':                                'vi_VN.TCVN',
  1432|         0|            0|            0|  0.00%|    'vi_vn.tcvn':                           'vi_VN.TCVN',
  1433|         0|            0|            0|  0.00%|    'vi_vn.tcvn5712':                       'vi_VN.TCVN',
  1434|         0|            0|            0|  0.00%|    'vi_vn.viscii':                         'vi_VN.VISCII',
  1435|         0|            0|            0|  0.00%|    'vi_vn.viscii111':                      'vi_VN.VISCII',
  1436|         0|            0|            0|  0.00%|    'wa':                                   'wa_BE.ISO8859-1',
  1437|         0|            0|            0|  0.00%|    'wa_be':                                'wa_BE.ISO8859-1',
  1438|         0|            0|            0|  0.00%|    'wae_ch':                               'wae_CH.UTF-8',
  1439|         0|            0|            0|  0.00%|    'wal_et':                               'wal_ET.UTF-8',
  1440|         0|            0|            0|  0.00%|    'wo_sn':                                'wo_SN.UTF-8',
  1441|         0|            0|            0|  0.00%|    'xh':                                   'xh_ZA.ISO8859-1',
  1442|         0|            0|            0|  0.00%|    'xh_za':                                'xh_ZA.ISO8859-1',
  1443|         0|            0|            0|  0.00%|    'yi':                                   'yi_US.CP1255',
  1444|         0|            0|            0|  0.00%|    'yi_us':                                'yi_US.CP1255',
  1445|         0|            0|            0|  0.00%|    'yo_ng':                                'yo_NG.UTF-8',
  1446|         0|            0|            0|  0.00%|    'yue_hk':                               'yue_HK.UTF-8',
  1447|         0|            0|            0|  0.00%|    'yuw_pg':                               'yuw_PG.UTF-8',
  1448|         0|            0|            0|  0.00%|    'zh':                                   'zh_CN.eucCN',
  1449|         0|            0|            0|  0.00%|    'zh_cn':                                'zh_CN.gb2312',
  1450|         0|            0|            0|  0.00%|    'zh_cn.big5':                           'zh_TW.big5',
  1451|         0|            0|            0|  0.00%|    'zh_cn.euc':                            'zh_CN.eucCN',
  1452|         0|            0|            0|  0.00%|    'zh_hk':                                'zh_HK.big5hkscs',
  1453|         0|            0|            0|  0.00%|    'zh_hk.big5hk':                         'zh_HK.big5hkscs',
  1454|         0|            0|            0|  0.00%|    'zh_sg':                                'zh_SG.GB2312',
  1455|         0|            0|            0|  0.00%|    'zh_sg.gbk':                            'zh_SG.GBK',
  1456|         0|            0|            0|  0.00%|    'zh_tw':                                'zh_TW.big5',
  1457|         0|            0|            0|  0.00%|    'zh_tw.euc':                            'zh_TW.eucTW',
  1458|         0|            0|            0|  0.00%|    'zh_tw.euctw':                          'zh_TW.eucTW',
  1459|         0|            0|            0|  0.00%|    'zu':                                   'zu_ZA.ISO8859-1',
  1460|         0|            0|            0|  0.00%|    'zu_za':                                'zu_ZA.ISO8859-1',
  1461|         0|            0|            0|  0.00%|}
  1462|         0|            0|            0|  0.00%|
  1463|         0|            0|            0|  0.00%|#
  1464|         0|            0|            0|  0.00%|# This maps Windows language identifiers to locale strings.
  1465|         0|            0|            0|  0.00%|#
  1466|         0|            0|            0|  0.00%|# This list has been updated from
  1467|         0|            0|            0|  0.00%|# http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/nls_238z.asp
  1468|         0|            0|            0|  0.00%|# to include every locale up to Windows Vista.
  1469|         0|            0|            0|  0.00%|#
  1470|         0|            0|            0|  0.00%|# NOTE: this mapping is incomplete.  If your language is missing, please
  1471|         0|            0|            0|  0.00%|# submit a bug report to the Python bug tracker at http://bugs.python.org/
  1472|         0|            0|            0|  0.00%|# Make sure you include the missing language identifier and the suggested
  1473|         0|            0|            0|  0.00%|# locale code.
  1474|         0|            0|            0|  0.00%|#
  1475|         0|            0|            0|  0.00%|
  1476|         0|            0|            0|  0.00%|windows_locale = {
  1477|         0|            0|            0|  0.00%|    0x0436: "af_ZA", # Afrikaans
  1478|         0|            0|            0|  0.00%|    0x041c: "sq_AL", # Albanian
  1479|         0|            0|            0|  0.00%|    0x0484: "gsw_FR",# Alsatian - France
  1480|         0|            0|            0|  0.00%|    0x045e: "am_ET", # Amharic - Ethiopia
  1481|         0|            0|            0|  0.00%|    0x0401: "ar_SA", # Arabic - Saudi Arabia
  1482|         0|            0|            0|  0.00%|    0x0801: "ar_IQ", # Arabic - Iraq
  1483|         0|            0|            0|  0.00%|    0x0c01: "ar_EG", # Arabic - Egypt
  1484|         0|            0|            0|  0.00%|    0x1001: "ar_LY", # Arabic - Libya
  1485|         0|            0|            0|  0.00%|    0x1401: "ar_DZ", # Arabic - Algeria
  1486|         0|            0|            0|  0.00%|    0x1801: "ar_MA", # Arabic - Morocco
  1487|         0|            0|            0|  0.00%|    0x1c01: "ar_TN", # Arabic - Tunisia
  1488|         0|            0|            0|  0.00%|    0x2001: "ar_OM", # Arabic - Oman
  1489|         0|            0|            0|  0.00%|    0x2401: "ar_YE", # Arabic - Yemen
  1490|         0|            0|            0|  0.00%|    0x2801: "ar_SY", # Arabic - Syria
  1491|         0|            0|            0|  0.00%|    0x2c01: "ar_JO", # Arabic - Jordan
  1492|         0|            0|            0|  0.00%|    0x3001: "ar_LB", # Arabic - Lebanon
  1493|         0|            0|            0|  0.00%|    0x3401: "ar_KW", # Arabic - Kuwait
  1494|         0|            0|            0|  0.00%|    0x3801: "ar_AE", # Arabic - United Arab Emirates
  1495|         0|            0|            0|  0.00%|    0x3c01: "ar_BH", # Arabic - Bahrain
  1496|         0|            0|            0|  0.00%|    0x4001: "ar_QA", # Arabic - Qatar
  1497|         0|            0|            0|  0.00%|    0x042b: "hy_AM", # Armenian
  1498|         0|            0|            0|  0.00%|    0x044d: "as_IN", # Assamese - India
  1499|         0|            0|            0|  0.00%|    0x042c: "az_AZ", # Azeri - Latin
  1500|         0|            0|            0|  0.00%|    0x082c: "az_AZ", # Azeri - Cyrillic
  1501|         0|            0|            0|  0.00%|    0x046d: "ba_RU", # Bashkir
  1502|         0|            0|            0|  0.00%|    0x042d: "eu_ES", # Basque - Russia
  1503|         0|            0|            0|  0.00%|    0x0423: "be_BY", # Belarusian
  1504|         0|            0|            0|  0.00%|    0x0445: "bn_IN", # Begali
  1505|         0|            0|            0|  0.00%|    0x201a: "bs_BA", # Bosnian - Cyrillic
  1506|         0|            0|            0|  0.00%|    0x141a: "bs_BA", # Bosnian - Latin
  1507|         0|            0|            0|  0.00%|    0x047e: "br_FR", # Breton - France
  1508|         0|            0|            0|  0.00%|    0x0402: "bg_BG", # Bulgarian
  1509|         0|            0|            0|  0.00%|#    0x0455: "my_MM", # Burmese - Not supported
  1510|         0|            0|            0|  0.00%|    0x0403: "ca_ES", # Catalan
  1511|         0|            0|            0|  0.00%|    0x0004: "zh_CHS",# Chinese - Simplified
  1512|         0|            0|            0|  0.00%|    0x0404: "zh_TW", # Chinese - Taiwan
  1513|         0|            0|            0|  0.00%|    0x0804: "zh_CN", # Chinese - PRC
  1514|         0|            0|            0|  0.00%|    0x0c04: "zh_HK", # Chinese - Hong Kong S.A.R.
  1515|         0|            0|            0|  0.00%|    0x1004: "zh_SG", # Chinese - Singapore
  1516|         0|            0|            0|  0.00%|    0x1404: "zh_MO", # Chinese - Macao S.A.R.
  1517|         0|            0|            0|  0.00%|    0x7c04: "zh_CHT",# Chinese - Traditional
  1518|         0|            0|            0|  0.00%|    0x0483: "co_FR", # Corsican - France
  1519|         0|            0|            0|  0.00%|    0x041a: "hr_HR", # Croatian
  1520|         0|            0|            0|  0.00%|    0x101a: "hr_BA", # Croatian - Bosnia
  1521|         0|            0|            0|  0.00%|    0x0405: "cs_CZ", # Czech
  1522|         0|            0|            0|  0.00%|    0x0406: "da_DK", # Danish
  1523|         0|            0|            0|  0.00%|    0x048c: "gbz_AF",# Dari - Afghanistan
  1524|         0|            0|            0|  0.00%|    0x0465: "div_MV",# Divehi - Maldives
  1525|         0|            0|            0|  0.00%|    0x0413: "nl_NL", # Dutch - The Netherlands
  1526|         0|            0|            0|  0.00%|    0x0813: "nl_BE", # Dutch - Belgium
  1527|         0|            0|            0|  0.00%|    0x0409: "en_US", # English - United States
  1528|         0|            0|            0|  0.00%|    0x0809: "en_GB", # English - United Kingdom
  1529|         0|            0|            0|  0.00%|    0x0c09: "en_AU", # English - Australia
  1530|         0|            0|            0|  0.00%|    0x1009: "en_CA", # English - Canada
  1531|         0|            0|            0|  0.00%|    0x1409: "en_NZ", # English - New Zealand
  1532|         0|            0|            0|  0.00%|    0x1809: "en_IE", # English - Ireland
  1533|         0|            0|            0|  0.00%|    0x1c09: "en_ZA", # English - South Africa
  1534|         0|            0|            0|  0.00%|    0x2009: "en_JA", # English - Jamaica
  1535|         0|            0|            0|  0.00%|    0x2409: "en_CB", # English - Caribbean
  1536|         0|            0|            0|  0.00%|    0x2809: "en_BZ", # English - Belize
  1537|         0|            0|            0|  0.00%|    0x2c09: "en_TT", # English - Trinidad
  1538|         0|            0|            0|  0.00%|    0x3009: "en_ZW", # English - Zimbabwe
  1539|         0|            0|            0|  0.00%|    0x3409: "en_PH", # English - Philippines
  1540|         0|            0|            0|  0.00%|    0x4009: "en_IN", # English - India
  1541|         0|            0|            0|  0.00%|    0x4409: "en_MY", # English - Malaysia
  1542|         0|            0|            0|  0.00%|    0x4809: "en_IN", # English - Singapore
  1543|         0|            0|            0|  0.00%|    0x0425: "et_EE", # Estonian
  1544|         0|            0|            0|  0.00%|    0x0438: "fo_FO", # Faroese
  1545|         0|            0|            0|  0.00%|    0x0464: "fil_PH",# Filipino
  1546|         0|            0|            0|  0.00%|    0x040b: "fi_FI", # Finnish
  1547|         0|            0|            0|  0.00%|    0x040c: "fr_FR", # French - France
  1548|         0|            0|            0|  0.00%|    0x080c: "fr_BE", # French - Belgium
  1549|         0|            0|            0|  0.00%|    0x0c0c: "fr_CA", # French - Canada
  1550|         0|            0|            0|  0.00%|    0x100c: "fr_CH", # French - Switzerland
  1551|         0|            0|            0|  0.00%|    0x140c: "fr_LU", # French - Luxembourg
  1552|         0|            0|            0|  0.00%|    0x180c: "fr_MC", # French - Monaco
  1553|         0|            0|            0|  0.00%|    0x0462: "fy_NL", # Frisian - Netherlands
  1554|         0|            0|            0|  0.00%|    0x0456: "gl_ES", # Galician
  1555|         0|            0|            0|  0.00%|    0x0437: "ka_GE", # Georgian
  1556|         0|            0|            0|  0.00%|    0x0407: "de_DE", # German - Germany
  1557|         0|            0|            0|  0.00%|    0x0807: "de_CH", # German - Switzerland
  1558|         0|            0|            0|  0.00%|    0x0c07: "de_AT", # German - Austria
  1559|         0|            0|            0|  0.00%|    0x1007: "de_LU", # German - Luxembourg
  1560|         0|            0|            0|  0.00%|    0x1407: "de_LI", # German - Liechtenstein
  1561|         0|            0|            0|  0.00%|    0x0408: "el_GR", # Greek
  1562|         0|            0|            0|  0.00%|    0x046f: "kl_GL", # Greenlandic - Greenland
  1563|         0|            0|            0|  0.00%|    0x0447: "gu_IN", # Gujarati
  1564|         0|            0|            0|  0.00%|    0x0468: "ha_NG", # Hausa - Latin
  1565|         0|            0|            0|  0.00%|    0x040d: "he_IL", # Hebrew
  1566|         0|            0|            0|  0.00%|    0x0439: "hi_IN", # Hindi
  1567|         0|            0|            0|  0.00%|    0x040e: "hu_HU", # Hungarian
  1568|         0|            0|            0|  0.00%|    0x040f: "is_IS", # Icelandic
  1569|         0|            0|            0|  0.00%|    0x0421: "id_ID", # Indonesian
  1570|         0|            0|            0|  0.00%|    0x045d: "iu_CA", # Inuktitut - Syllabics
  1571|         0|            0|            0|  0.00%|    0x085d: "iu_CA", # Inuktitut - Latin
  1572|         0|            0|            0|  0.00%|    0x083c: "ga_IE", # Irish - Ireland
  1573|         0|            0|            0|  0.00%|    0x0410: "it_IT", # Italian - Italy
  1574|         0|            0|            0|  0.00%|    0x0810: "it_CH", # Italian - Switzerland
  1575|         0|            0|            0|  0.00%|    0x0411: "ja_JP", # Japanese
  1576|         0|            0|            0|  0.00%|    0x044b: "kn_IN", # Kannada - India
  1577|         0|            0|            0|  0.00%|    0x043f: "kk_KZ", # Kazakh
  1578|         0|            0|            0|  0.00%|    0x0453: "kh_KH", # Khmer - Cambodia
  1579|         0|            0|            0|  0.00%|    0x0486: "qut_GT",# K'iche - Guatemala
  1580|         0|            0|            0|  0.00%|    0x0487: "rw_RW", # Kinyarwanda - Rwanda
  1581|         0|            0|            0|  0.00%|    0x0457: "kok_IN",# Konkani
  1582|         0|            0|            0|  0.00%|    0x0412: "ko_KR", # Korean
  1583|         0|            0|            0|  0.00%|    0x0440: "ky_KG", # Kyrgyz
  1584|         0|            0|            0|  0.00%|    0x0454: "lo_LA", # Lao - Lao PDR
  1585|         0|            0|            0|  0.00%|    0x0426: "lv_LV", # Latvian
  1586|         0|            0|            0|  0.00%|    0x0427: "lt_LT", # Lithuanian
  1587|         0|            0|            0|  0.00%|    0x082e: "dsb_DE",# Lower Sorbian - Germany
  1588|         0|            0|            0|  0.00%|    0x046e: "lb_LU", # Luxembourgish
  1589|         0|            0|            0|  0.00%|    0x042f: "mk_MK", # FYROM Macedonian
  1590|         0|            0|            0|  0.00%|    0x043e: "ms_MY", # Malay - Malaysia
  1591|         0|            0|            0|  0.00%|    0x083e: "ms_BN", # Malay - Brunei Darussalam
  1592|         0|            0|            0|  0.00%|    0x044c: "ml_IN", # Malayalam - India
  1593|         0|            0|            0|  0.00%|    0x043a: "mt_MT", # Maltese
  1594|         0|            0|            0|  0.00%|    0x0481: "mi_NZ", # Maori
  1595|         0|            0|            0|  0.00%|    0x047a: "arn_CL",# Mapudungun
  1596|         0|            0|            0|  0.00%|    0x044e: "mr_IN", # Marathi
  1597|         0|            0|            0|  0.00%|    0x047c: "moh_CA",# Mohawk - Canada
  1598|         0|            0|            0|  0.00%|    0x0450: "mn_MN", # Mongolian - Cyrillic
  1599|         0|            0|            0|  0.00%|    0x0850: "mn_CN", # Mongolian - PRC
  1600|         0|            0|            0|  0.00%|    0x0461: "ne_NP", # Nepali
  1601|         0|            0|            0|  0.00%|    0x0414: "nb_NO", # Norwegian - Bokmal
  1602|         0|            0|            0|  0.00%|    0x0814: "nn_NO", # Norwegian - Nynorsk
  1603|         0|            0|            0|  0.00%|    0x0482: "oc_FR", # Occitan - France
  1604|         0|            0|            0|  0.00%|    0x0448: "or_IN", # Oriya - India
  1605|         0|            0|            0|  0.00%|    0x0463: "ps_AF", # Pashto - Afghanistan
  1606|         0|            0|            0|  0.00%|    0x0429: "fa_IR", # Persian
  1607|         0|            0|            0|  0.00%|    0x0415: "pl_PL", # Polish
  1608|         0|            0|            0|  0.00%|    0x0416: "pt_BR", # Portuguese - Brazil
  1609|         0|            0|            0|  0.00%|    0x0816: "pt_PT", # Portuguese - Portugal
  1610|         0|            0|            0|  0.00%|    0x0446: "pa_IN", # Punjabi
  1611|         0|            0|            0|  0.00%|    0x046b: "quz_BO",# Quechua (Bolivia)
  1612|         0|            0|            0|  0.00%|    0x086b: "quz_EC",# Quechua (Ecuador)
  1613|         0|            0|            0|  0.00%|    0x0c6b: "quz_PE",# Quechua (Peru)
  1614|         0|            0|            0|  0.00%|    0x0418: "ro_RO", # Romanian - Romania
  1615|         0|            0|            0|  0.00%|    0x0417: "rm_CH", # Romansh
  1616|         0|            0|            0|  0.00%|    0x0419: "ru_RU", # Russian
  1617|         0|            0|            0|  0.00%|    0x243b: "smn_FI",# Sami Finland
  1618|         0|            0|            0|  0.00%|    0x103b: "smj_NO",# Sami Norway
  1619|         0|            0|            0|  0.00%|    0x143b: "smj_SE",# Sami Sweden
  1620|         0|            0|            0|  0.00%|    0x043b: "se_NO", # Sami Northern Norway
  1621|         0|            0|            0|  0.00%|    0x083b: "se_SE", # Sami Northern Sweden
  1622|         0|            0|            0|  0.00%|    0x0c3b: "se_FI", # Sami Northern Finland
  1623|         0|            0|            0|  0.00%|    0x203b: "sms_FI",# Sami Skolt
  1624|         0|            0|            0|  0.00%|    0x183b: "sma_NO",# Sami Southern Norway
  1625|         0|            0|            0|  0.00%|    0x1c3b: "sma_SE",# Sami Southern Sweden
  1626|         0|            0|            0|  0.00%|    0x044f: "sa_IN", # Sanskrit
  1627|         0|            0|            0|  0.00%|    0x0c1a: "sr_SP", # Serbian - Cyrillic
  1628|         0|            0|            0|  0.00%|    0x1c1a: "sr_BA", # Serbian - Bosnia Cyrillic
  1629|         0|            0|            0|  0.00%|    0x081a: "sr_SP", # Serbian - Latin
  1630|         0|            0|            0|  0.00%|    0x181a: "sr_BA", # Serbian - Bosnia Latin
  1631|         0|            0|            0|  0.00%|    0x045b: "si_LK", # Sinhala - Sri Lanka
  1632|         0|            0|            0|  0.00%|    0x046c: "ns_ZA", # Northern Sotho
  1633|         0|            0|            0|  0.00%|    0x0432: "tn_ZA", # Setswana - Southern Africa
  1634|         0|            0|            0|  0.00%|    0x041b: "sk_SK", # Slovak
  1635|         0|            0|            0|  0.00%|    0x0424: "sl_SI", # Slovenian
  1636|         0|            0|            0|  0.00%|    0x040a: "es_ES", # Spanish - Spain
  1637|         0|            0|            0|  0.00%|    0x080a: "es_MX", # Spanish - Mexico
  1638|         0|            0|            0|  0.00%|    0x0c0a: "es_ES", # Spanish - Spain (Modern)
  1639|         0|            0|            0|  0.00%|    0x100a: "es_GT", # Spanish - Guatemala
  1640|         0|            0|            0|  0.00%|    0x140a: "es_CR", # Spanish - Costa Rica
  1641|         0|            0|            0|  0.00%|    0x180a: "es_PA", # Spanish - Panama
  1642|         0|            0|            0|  0.00%|    0x1c0a: "es_DO", # Spanish - Dominican Republic
  1643|         0|            0|            0|  0.00%|    0x200a: "es_VE", # Spanish - Venezuela
  1644|         0|            0|            0|  0.00%|    0x240a: "es_CO", # Spanish - Colombia
  1645|         0|            0|            0|  0.00%|    0x280a: "es_PE", # Spanish - Peru
  1646|         0|            0|            0|  0.00%|    0x2c0a: "es_AR", # Spanish - Argentina
  1647|         0|            0|            0|  0.00%|    0x300a: "es_EC", # Spanish - Ecuador
  1648|         0|            0|            0|  0.00%|    0x340a: "es_CL", # Spanish - Chile
  1649|         0|            0|            0|  0.00%|    0x380a: "es_UR", # Spanish - Uruguay
  1650|         0|            0|            0|  0.00%|    0x3c0a: "es_PY", # Spanish - Paraguay
  1651|         0|            0|            0|  0.00%|    0x400a: "es_BO", # Spanish - Bolivia
  1652|         0|            0|            0|  0.00%|    0x440a: "es_SV", # Spanish - El Salvador
  1653|         0|            0|            0|  0.00%|    0x480a: "es_HN", # Spanish - Honduras
  1654|         0|            0|            0|  0.00%|    0x4c0a: "es_NI", # Spanish - Nicaragua
  1655|         0|            0|            0|  0.00%|    0x500a: "es_PR", # Spanish - Puerto Rico
  1656|         0|            0|            0|  0.00%|    0x540a: "es_US", # Spanish - United States
  1657|         0|            0|            0|  0.00%|#    0x0430: "", # Sutu - Not supported
  1658|         0|            0|            0|  0.00%|    0x0441: "sw_KE", # Swahili
  1659|         0|            0|            0|  0.00%|    0x041d: "sv_SE", # Swedish - Sweden
  1660|         0|            0|            0|  0.00%|    0x081d: "sv_FI", # Swedish - Finland
  1661|         0|            0|            0|  0.00%|    0x045a: "syr_SY",# Syriac
  1662|         0|            0|            0|  0.00%|    0x0428: "tg_TJ", # Tajik - Cyrillic
  1663|         0|            0|            0|  0.00%|    0x085f: "tmz_DZ",# Tamazight - Latin
  1664|         0|            0|            0|  0.00%|    0x0449: "ta_IN", # Tamil
  1665|         0|            0|            0|  0.00%|    0x0444: "tt_RU", # Tatar
  1666|         0|            0|            0|  0.00%|    0x044a: "te_IN", # Telugu
  1667|         0|            0|            0|  0.00%|    0x041e: "th_TH", # Thai
  1668|         0|            0|            0|  0.00%|    0x0851: "bo_BT", # Tibetan - Bhutan
  1669|         0|            0|            0|  0.00%|    0x0451: "bo_CN", # Tibetan - PRC
  1670|         0|            0|            0|  0.00%|    0x041f: "tr_TR", # Turkish
  1671|         0|            0|            0|  0.00%|    0x0442: "tk_TM", # Turkmen - Cyrillic
  1672|         0|            0|            0|  0.00%|    0x0480: "ug_CN", # Uighur - Arabic
  1673|         0|            0|            0|  0.00%|    0x0422: "uk_UA", # Ukrainian
  1674|         0|            0|            0|  0.00%|    0x042e: "wen_DE",# Upper Sorbian - Germany
  1675|         0|            0|            0|  0.00%|    0x0420: "ur_PK", # Urdu
  1676|         0|            0|            0|  0.00%|    0x0820: "ur_IN", # Urdu - India
  1677|         0|            0|            0|  0.00%|    0x0443: "uz_UZ", # Uzbek - Latin
  1678|         0|            0|            0|  0.00%|    0x0843: "uz_UZ", # Uzbek - Cyrillic
  1679|         0|            0|            0|  0.00%|    0x042a: "vi_VN", # Vietnamese
  1680|         0|            0|            0|  0.00%|    0x0452: "cy_GB", # Welsh
  1681|         0|            0|            0|  0.00%|    0x0488: "wo_SN", # Wolof - Senegal
  1682|         0|            0|            0|  0.00%|    0x0434: "xh_ZA", # Xhosa - South Africa
  1683|         0|            0|            0|  0.00%|    0x0485: "sah_RU",# Yakut - Cyrillic
  1684|         0|            0|            0|  0.00%|    0x0478: "ii_CN", # Yi - PRC
  1685|         0|            0|            0|  0.00%|    0x046a: "yo_NG", # Yoruba - Nigeria
  1686|         0|            0|            0|  0.00%|    0x0435: "zu_ZA", # Zulu
  1687|         0|            0|            0|  0.00%|}
  1688|         0|            0|            0|  0.00%|
  1689|         0|            0|            0|  0.00%|def _print_locale():
  1690|         0|            0|            0|  0.00%|
  1691|         0|            0|            0|  0.00%|    """ Test function.
  1692|         0|            0|            0|  0.00%|    """
  1693|         0|            0|            0|  0.00%|    categories = {}
  1694|         0|            0|            0|  0.00%|    def _init_categories(categories=categories):
  1695|         0|            0|            0|  0.00%|        for k,v in globals().items():
  1696|         0|            0|            0|  0.00%|            if k[:3] == 'LC_':
  1697|         0|            0|            0|  0.00%|                categories[k] = v
  1698|         0|            0|            0|  0.00%|    _init_categories()
  1699|         0|            0|            0|  0.00%|    del categories['LC_ALL']
  1700|         0|            0|            0|  0.00%|
  1701|         0|            0|            0|  0.00%|    print('Locale defaults as determined by getdefaultlocale():')
  1702|         0|            0|            0|  0.00%|    print('-'*72)
  1703|         0|            0|            0|  0.00%|    lang, enc = getdefaultlocale()
  1704|         0|            0|            0|  0.00%|    print('Language: ', lang or '(undefined)')
  1705|         0|            0|            0|  0.00%|    print('Encoding: ', enc or '(undefined)')
  1706|         0|            0|            0|  0.00%|    print()
  1707|         0|            0|            0|  0.00%|
  1708|         0|            0|            0|  0.00%|    print('Locale settings on startup:')
  1709|         0|            0|            0|  0.00%|    print('-'*72)
  1710|         0|            0|            0|  0.00%|    for name,category in categories.items():
  1711|         0|            0|            0|  0.00%|        print(name, '...')
  1712|         0|            0|            0|  0.00%|        lang, enc = getlocale(category)
  1713|         0|            0|            0|  0.00%|        print('   Language: ', lang or '(undefined)')
  1714|         0|            0|            0|  0.00%|        print('   Encoding: ', enc or '(undefined)')
  1715|         0|            0|            0|  0.00%|        print()
  1716|         0|            0|            0|  0.00%|
  1717|         0|            0|            0|  0.00%|    print()
  1718|         0|            0|            0|  0.00%|    print('Locale settings after calling resetlocale():')
  1719|         0|            0|            0|  0.00%|    print('-'*72)
  1720|         0|            0|            0|  0.00%|    resetlocale()
  1721|         0|            0|            0|  0.00%|    for name,category in categories.items():
  1722|         0|            0|            0|  0.00%|        print(name, '...')
  1723|         0|            0|            0|  0.00%|        lang, enc = getlocale(category)
  1724|         0|            0|            0|  0.00%|        print('   Language: ', lang or '(undefined)')
  1725|         0|            0|            0|  0.00%|        print('   Encoding: ', enc or '(undefined)')
  1726|         0|            0|            0|  0.00%|        print()
  1727|         0|            0|            0|  0.00%|
  1728|         0|            0|            0|  0.00%|    try:
  1729|         0|            0|            0|  0.00%|        setlocale(LC_ALL, "")
  1730|         0|            0|            0|  0.00%|    except:
  1731|         0|            0|            0|  0.00%|        print('NOTE:')
  1732|         0|            0|            0|  0.00%|        print('setlocale(LC_ALL, "") does not support the default locale')
  1733|         0|            0|            0|  0.00%|        print('given in the OS environment variables.')
  1734|         0|            0|            0|  0.00%|    else:
  1735|         0|            0|            0|  0.00%|        print()
  1736|         0|            0|            0|  0.00%|        print('Locale settings after calling setlocale(LC_ALL, ""):')
  1737|         0|            0|            0|  0.00%|        print('-'*72)
  1738|         0|            0|            0|  0.00%|        for name,category in categories.items():
  1739|         0|            0|            0|  0.00%|            print(name, '...')
  1740|         0|            0|            0|  0.00%|            lang, enc = getlocale(category)
  1741|         0|            0|            0|  0.00%|            print('   Language: ', lang or '(undefined)')
  1742|         0|            0|            0|  0.00%|            print('   Encoding: ', enc or '(undefined)')
  1743|         0|            0|            0|  0.00%|            print()
  1744|         0|            0|            0|  0.00%|
  1745|         0|            0|            0|  0.00%|###
  1746|         0|            0|            0|  0.00%|
  1747|         0|            0|            0|  0.00%|try:
  1748|         0|            0|            0|  0.00%|    LC_MESSAGES
  1749|         0|            0|            0|  0.00%|except NameError:
  1750|         0|            0|            0|  0.00%|    pass
  1751|         0|            0|            0|  0.00%|else:
  1752|         0|            0|            0|  0.00%|    __all__.append("LC_MESSAGES")
  1753|         0|            0|            0|  0.00%|
  1754|         0|            0|            0|  0.00%|if __name__=='__main__':
  1755|         0|            0|            0|  0.00%|    print('Locale aliasing:')
  1756|         0|            0|            0|  0.00%|    print()
  1757|         0|            0|            0|  0.00%|    _print_locale()
  1758|         0|            0|            0|  0.00%|    print()
  1759|         0|            0|            0|  0.00%|    print('Number formatting:')
  1760|         0|            0|            0|  0.00%|    print()
  1761|         0|            0|            0|  0.00%|    _test()
File: /usr/lib/python3.10/email/utils.py
File duration: 0.000311375s (0.13%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# Copyright (C) 2001-2010 Python Software Foundation
     2|         0|            0|            0|  0.00%|# Author: Barry Warsaw
     3|         0|            0|            0|  0.00%|# Contact: email-sig@python.org
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|"""Miscellaneous utilities."""
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|__all__ = [
     8|         0|            0|            0|  0.00%|    'collapse_rfc2231_value',
     9|         0|            0|            0|  0.00%|    'decode_params',
    10|         0|            0|            0|  0.00%|    'decode_rfc2231',
    11|         0|            0|            0|  0.00%|    'encode_rfc2231',
    12|         0|            0|            0|  0.00%|    'formataddr',
    13|         0|            0|            0|  0.00%|    'formatdate',
    14|         0|            0|            0|  0.00%|    'format_datetime',
    15|         0|            0|            0|  0.00%|    'getaddresses',
    16|         0|            0|            0|  0.00%|    'make_msgid',
    17|         0|            0|            0|  0.00%|    'mktime_tz',
    18|         0|            0|            0|  0.00%|    'parseaddr',
    19|         0|            0|            0|  0.00%|    'parsedate',
    20|         0|            0|            0|  0.00%|    'parsedate_tz',
    21|         0|            0|            0|  0.00%|    'parsedate_to_datetime',
    22|         0|            0|            0|  0.00%|    'unquote',
    23|         0|            0|            0|  0.00%|    ]
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|import os
    26|         0|            0|            0|  0.00%|import re
    27|         0|            0|            0|  0.00%|import time
    28|         0|            0|            0|  0.00%|import random
    29|         0|            0|            0|  0.00%|import socket
    30|         0|            0|            0|  0.00%|import datetime
    31|         0|            0|            0|  0.00%|import urllib.parse
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|from email._parseaddr import quote
    34|         0|            0|            0|  0.00%|from email._parseaddr import AddressList as _AddressList
    35|         0|            0|            0|  0.00%|from email._parseaddr import mktime_tz
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|from email._parseaddr import parsedate, parsedate_tz, _parsedate_tz
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|# Intrapackage imports
    40|         0|            0|            0|  0.00%|from email.charset import Charset
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|COMMASPACE = ', '
    43|         0|            0|            0|  0.00%|EMPTYSTRING = ''
    44|         0|            0|            0|  0.00%|UEMPTYSTRING = ''
    45|         0|            0|            0|  0.00%|CRLF = '\r\n'
    46|         0|            0|            0|  0.00%|TICK = "'"
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|specialsre = re.compile(r'[][\\()<>@,:;".]')
    49|         0|            0|            0|  0.00%|escapesre = re.compile(r'[\\"]')
    50|         0|            0|            0|  0.00%|
    51|        16|  4.62532e-05|  2.89083e-06|  0.02%|def _has_surrogates(s):
    52|         0|            0|            0|  0.00%|    """Return True if s contains surrogate-escaped binary data."""
    53|         0|            0|            0|  0.00%|    # This check is based on the fact that unless there are surrogates, utf8
    54|         0|            0|            0|  0.00%|    # (Python's default encoding) can encode any string.  This is the fastest
    55|         0|            0|            0|  0.00%|    # way to check for surrogates, see issue 11454 for timings.
    56|        16|  5.57899e-05|  3.48687e-06|  0.02%|    try:
    57|        16|   5.6982e-05|  3.56138e-06|  0.02%|        s.encode()
    58|        16|  5.00679e-05|  3.12924e-06|  0.02%|        return False
    59|         0|            0|            0|  0.00%|    except UnicodeEncodeError:
    60|         0|            0|            0|  0.00%|        return True
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|# How to deal with a string containing bytes before handing it to the
    63|         0|            0|            0|  0.00%|# application through the 'normal' interface.
    64|         7|  2.12193e-05|  3.03132e-06|  0.01%|def _sanitize(string):
    65|         0|            0|            0|  0.00%|    # Turn any escaped bytes into unicode 'unknown' char.  If the escaped
    66|         0|            0|            0|  0.00%|    # bytes happen to be utf-8 they will instead get decoded, even if they
    67|         0|            0|            0|  0.00%|    # were invalid in the charset the source was supposed to be in.  This
    68|         0|            0|            0|  0.00%|    # seems like it is not a bad thing; a defect was still registered.
    69|         7|  2.47955e-05|  3.54222e-06|  0.01%|    original_bytes = string.encode('utf-8', 'surrogateescape')
    70|         7|  2.43187e-05|   3.4741e-06|  0.01%|    return original_bytes.decode('utf-8', 'replace')
    71|         0|            0|            0|  0.00%|
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|# Helpers
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|def formataddr(pair, charset='utf-8'):
    77|         0|            0|            0|  0.00%|    """The inverse of parseaddr(), this takes a 2-tuple of the form
    78|         0|            0|            0|  0.00%|    (realname, email_address) and returns the string value suitable
    79|         0|            0|            0|  0.00%|    for an RFC 2822 From, To or Cc header.
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|    If the first element of pair is false, then the second element is
    82|         0|            0|            0|  0.00%|    returned unmodified.
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|    The optional charset is the character set that is used to encode
    85|         0|            0|            0|  0.00%|    realname in case realname is not ASCII safe.  Can be an instance of str or
    86|         0|            0|            0|  0.00%|    a Charset-like object which has a header_encode method.  Default is
    87|         0|            0|            0|  0.00%|    'utf-8'.
    88|         0|            0|            0|  0.00%|    """
    89|         0|            0|            0|  0.00%|    name, address = pair
    90|         0|            0|            0|  0.00%|    # The address MUST (per RFC) be ascii, so raise a UnicodeError if it isn't.
    91|         0|            0|            0|  0.00%|    address.encode('ascii')
    92|         0|            0|            0|  0.00%|    if name:
    93|         0|            0|            0|  0.00%|        try:
    94|         0|            0|            0|  0.00%|            name.encode('ascii')
    95|         0|            0|            0|  0.00%|        except UnicodeEncodeError:
    96|         0|            0|            0|  0.00%|            if isinstance(charset, str):
    97|         0|            0|            0|  0.00%|                charset = Charset(charset)
    98|         0|            0|            0|  0.00%|            encoded_name = charset.header_encode(name)
    99|         0|            0|            0|  0.00%|            return "%s <%s>" % (encoded_name, address)
   100|         0|            0|            0|  0.00%|        else:
   101|         0|            0|            0|  0.00%|            quotes = ''
   102|         0|            0|            0|  0.00%|            if specialsre.search(name):
   103|         0|            0|            0|  0.00%|                quotes = '"'
   104|         0|            0|            0|  0.00%|            name = escapesre.sub(r'\\\g<0>', name)
   105|         0|            0|            0|  0.00%|            return '%s%s%s <%s>' % (quotes, name, quotes, address)
   106|         0|            0|            0|  0.00%|    return address
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|
   110|         0|            0|            0|  0.00%|def getaddresses(fieldvalues):
   111|         0|            0|            0|  0.00%|    """Return a list of (REALNAME, EMAIL) for each fieldvalue."""
   112|         0|            0|            0|  0.00%|    all = COMMASPACE.join(str(v) for v in fieldvalues)
   113|         0|            0|            0|  0.00%|    a = _AddressList(all)
   114|         0|            0|            0|  0.00%|    return a.addresslist
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|
   117|         0|            0|            0|  0.00%|def _format_timetuple_and_zone(timetuple, zone):
   118|         0|            0|            0|  0.00%|    return '%s, %02d %s %04d %02d:%02d:%02d %s' % (
   119|         0|            0|            0|  0.00%|        ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][timetuple[6]],
   120|         0|            0|            0|  0.00%|        timetuple[2],
   121|         0|            0|            0|  0.00%|        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
   122|         0|            0|            0|  0.00%|         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][timetuple[1] - 1],
   123|         0|            0|            0|  0.00%|        timetuple[0], timetuple[3], timetuple[4], timetuple[5],
   124|         0|            0|            0|  0.00%|        zone)
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|def formatdate(timeval=None, localtime=False, usegmt=False):
   127|         0|            0|            0|  0.00%|    """Returns a date string as specified by RFC 2822, e.g.:
   128|         0|            0|            0|  0.00%|
   129|         0|            0|            0|  0.00%|    Fri, 09 Nov 2001 01:08:47 -0000
   130|         0|            0|            0|  0.00%|
   131|         0|            0|            0|  0.00%|    Optional timeval if given is a floating point time value as accepted by
   132|         0|            0|            0|  0.00%|    gmtime() and localtime(), otherwise the current time is used.
   133|         0|            0|            0|  0.00%|
   134|         0|            0|            0|  0.00%|    Optional localtime is a flag that when True, interprets timeval, and
   135|         0|            0|            0|  0.00%|    returns a date relative to the local timezone instead of UTC, properly
   136|         0|            0|            0|  0.00%|    taking daylight savings time into account.
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|    Optional argument usegmt means that the timezone is written out as
   139|         0|            0|            0|  0.00%|    an ascii string, not numeric one (so "GMT" instead of "+0000"). This
   140|         0|            0|            0|  0.00%|    is needed for HTTP, and is only used when localtime==False.
   141|         0|            0|            0|  0.00%|    """
   142|         0|            0|            0|  0.00%|    # Note: we cannot use strftime() because that honors the locale and RFC
   143|         0|            0|            0|  0.00%|    # 2822 requires that day and month names be the English abbreviations.
   144|         0|            0|            0|  0.00%|    if timeval is None:
   145|         0|            0|            0|  0.00%|        timeval = time.time()
   146|         0|            0|            0|  0.00%|    if localtime or usegmt:
   147|         0|            0|            0|  0.00%|        dt = datetime.datetime.fromtimestamp(timeval, datetime.timezone.utc)
   148|         0|            0|            0|  0.00%|    else:
   149|         0|            0|            0|  0.00%|        dt = datetime.datetime.utcfromtimestamp(timeval)
   150|         0|            0|            0|  0.00%|    if localtime:
   151|         0|            0|            0|  0.00%|        dt = dt.astimezone()
   152|         0|            0|            0|  0.00%|        usegmt = False
   153|         0|            0|            0|  0.00%|    return format_datetime(dt, usegmt)
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|def format_datetime(dt, usegmt=False):
   156|         0|            0|            0|  0.00%|    """Turn a datetime into a date string as specified in RFC 2822.
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|    If usegmt is True, dt must be an aware datetime with an offset of zero.  In
   159|         0|            0|            0|  0.00%|    this case 'GMT' will be rendered instead of the normal +0000 required by
   160|         0|            0|            0|  0.00%|    RFC2822.  This is to support HTTP headers involving date stamps.
   161|         0|            0|            0|  0.00%|    """
   162|         0|            0|            0|  0.00%|    now = dt.timetuple()
   163|         0|            0|            0|  0.00%|    if usegmt:
   164|         0|            0|            0|  0.00%|        if dt.tzinfo is None or dt.tzinfo != datetime.timezone.utc:
   165|         0|            0|            0|  0.00%|            raise ValueError("usegmt option requires a UTC datetime")
   166|         0|            0|            0|  0.00%|        zone = 'GMT'
   167|         0|            0|            0|  0.00%|    elif dt.tzinfo is None:
   168|         0|            0|            0|  0.00%|        zone = '-0000'
   169|         0|            0|            0|  0.00%|    else:
   170|         0|            0|            0|  0.00%|        zone = dt.strftime("%z")
   171|         0|            0|            0|  0.00%|    return _format_timetuple_and_zone(now, zone)
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|
   174|         0|            0|            0|  0.00%|def make_msgid(idstring=None, domain=None):
   175|         0|            0|            0|  0.00%|    """Returns a string suitable for RFC 2822 compliant Message-ID, e.g:
   176|         0|            0|            0|  0.00%|
   177|         0|            0|            0|  0.00%|    <142480216486.20800.16526388040877946887@nightshade.la.mastaler.com>
   178|         0|            0|            0|  0.00%|
   179|         0|            0|            0|  0.00%|    Optional idstring if given is a string used to strengthen the
   180|         0|            0|            0|  0.00%|    uniqueness of the message id.  Optional domain if given provides the
   181|         0|            0|            0|  0.00%|    portion of the message id after the '@'.  It defaults to the locally
   182|         0|            0|            0|  0.00%|    defined hostname.
   183|         0|            0|            0|  0.00%|    """
   184|         0|            0|            0|  0.00%|    timeval = int(time.time()*100)
   185|         0|            0|            0|  0.00%|    pid = os.getpid()
   186|         0|            0|            0|  0.00%|    randint = random.getrandbits(64)
   187|         0|            0|            0|  0.00%|    if idstring is None:
   188|         0|            0|            0|  0.00%|        idstring = ''
   189|         0|            0|            0|  0.00%|    else:
   190|         0|            0|            0|  0.00%|        idstring = '.' + idstring
   191|         0|            0|            0|  0.00%|    if domain is None:
   192|         0|            0|            0|  0.00%|        domain = socket.getfqdn()
   193|         0|            0|            0|  0.00%|    msgid = '<%d.%d.%d%s@%s>' % (timeval, pid, randint, idstring, domain)
   194|         0|            0|            0|  0.00%|    return msgid
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|def parsedate_to_datetime(data):
   198|         0|            0|            0|  0.00%|    parsed_date_tz = _parsedate_tz(data)
   199|         0|            0|            0|  0.00%|    if parsed_date_tz is None:
   200|         0|            0|            0|  0.00%|        raise ValueError('Invalid date value or format "%s"' % str(data))
   201|         0|            0|            0|  0.00%|    *dtuple, tz = parsed_date_tz
   202|         0|            0|            0|  0.00%|    if tz is None:
   203|         0|            0|            0|  0.00%|        return datetime.datetime(*dtuple[:6])
   204|         0|            0|            0|  0.00%|    return datetime.datetime(*dtuple[:6],
   205|         0|            0|            0|  0.00%|            tzinfo=datetime.timezone(datetime.timedelta(seconds=tz)))
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|
   208|         0|            0|            0|  0.00%|def parseaddr(addr):
   209|         0|            0|            0|  0.00%|    """
   210|         0|            0|            0|  0.00%|    Parse addr into its constituent realname and email address parts.
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|    Return a tuple of realname and email address, unless the parse fails, in
   213|         0|            0|            0|  0.00%|    which case return a 2-tuple of ('', '').
   214|         0|            0|            0|  0.00%|    """
   215|         0|            0|            0|  0.00%|    addrs = _AddressList(addr).addresslist
   216|         0|            0|            0|  0.00%|    if not addrs:
   217|         0|            0|            0|  0.00%|        return '', ''
   218|         0|            0|            0|  0.00%|    return addrs[0]
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|
   221|         0|            0|            0|  0.00%|# rfc822.unquote() doesn't properly de-backslash-ify in Python pre-2.3.
   222|         0|            0|            0|  0.00%|def unquote(str):
   223|         0|            0|            0|  0.00%|    """Remove quotes from a string."""
   224|         0|            0|            0|  0.00%|    if len(str) > 1:
   225|         0|            0|            0|  0.00%|        if str.startswith('"') and str.endswith('"'):
   226|         0|            0|            0|  0.00%|            return str[1:-1].replace('\\\\', '\\').replace('\\"', '"')
   227|         0|            0|            0|  0.00%|        if str.startswith('<') and str.endswith('>'):
   228|         0|            0|            0|  0.00%|            return str[1:-1]
   229|         0|            0|            0|  0.00%|    return str
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|
   232|         0|            0|            0|  0.00%|
   233|         0|            0|            0|  0.00%|# RFC2231-related functions - parameter encoding and decoding
   234|         0|            0|            0|  0.00%|def decode_rfc2231(s):
   235|         0|            0|            0|  0.00%|    """Decode string according to RFC 2231"""
   236|         0|            0|            0|  0.00%|    parts = s.split(TICK, 2)
   237|         0|            0|            0|  0.00%|    if len(parts) <= 2:
   238|         0|            0|            0|  0.00%|        return None, None, s
   239|         0|            0|            0|  0.00%|    return parts
   240|         0|            0|            0|  0.00%|
   241|         0|            0|            0|  0.00%|
   242|         0|            0|            0|  0.00%|def encode_rfc2231(s, charset=None, language=None):
   243|         0|            0|            0|  0.00%|    """Encode string according to RFC 2231.
   244|         0|            0|            0|  0.00%|
   245|         0|            0|            0|  0.00%|    If neither charset nor language is given, then s is returned as-is.  If
   246|         0|            0|            0|  0.00%|    charset is given but not language, the string is encoded using the empty
   247|         0|            0|            0|  0.00%|    string for language.
   248|         0|            0|            0|  0.00%|    """
   249|         0|            0|            0|  0.00%|    s = urllib.parse.quote(s, safe='', encoding=charset or 'ascii')
   250|         0|            0|            0|  0.00%|    if charset is None and language is None:
   251|         0|            0|            0|  0.00%|        return s
   252|         0|            0|            0|  0.00%|    if language is None:
   253|         0|            0|            0|  0.00%|        language = ''
   254|         0|            0|            0|  0.00%|    return "%s'%s'%s" % (charset, language, s)
   255|         0|            0|            0|  0.00%|
   256|         0|            0|            0|  0.00%|
   257|         0|            0|            0|  0.00%|rfc2231_continuation = re.compile(r'^(?P<name>\w+)\*((?P<num>[0-9]+)\*?)?$',
   258|         0|            0|            0|  0.00%|    re.ASCII)
   259|         0|            0|            0|  0.00%|
   260|         1|  5.96046e-06|  5.96046e-06|  0.00%|def decode_params(params):
   261|         0|            0|            0|  0.00%|    """Decode parameters list according to RFC 2231.
   262|         0|            0|            0|  0.00%|
   263|         0|            0|            0|  0.00%|    params is a sequence of 2-tuples containing (param name, string value).
   264|         0|            0|            0|  0.00%|    """
   265|         1|  5.24521e-06|  5.24521e-06|  0.00%|    new_params = [params[0]]
   266|         0|            0|            0|  0.00%|    # Map parameter's name to a list of continuations.  The values are a
   267|         0|            0|            0|  0.00%|    # 3-tuple of the continuation number, the string value, and a flag
   268|         0|            0|            0|  0.00%|    # specifying whether a particular segment is %-encoded.
   269|         1|  5.72205e-06|  5.72205e-06|  0.00%|    rfc2231_params = {}
   270|         1|  5.00679e-06|  5.00679e-06|  0.00%|    for name, value in params[1:]:
   271|         0|            0|            0|  0.00%|        encoded = name.endswith('*')
   272|         0|            0|            0|  0.00%|        value = unquote(value)
   273|         0|            0|            0|  0.00%|        mo = rfc2231_continuation.match(name)
   274|         0|            0|            0|  0.00%|        if mo:
   275|         0|            0|            0|  0.00%|            name, num = mo.group('name', 'num')
   276|         0|            0|            0|  0.00%|            if num is not None:
   277|         0|            0|            0|  0.00%|                num = int(num)
   278|         0|            0|            0|  0.00%|            rfc2231_params.setdefault(name, []).append((num, value, encoded))
   279|         0|            0|            0|  0.00%|        else:
   280|         0|            0|            0|  0.00%|            new_params.append((name, '"%s"' % quote(value)))
   281|         1|  5.48363e-06|  5.48363e-06|  0.00%|    if rfc2231_params:
   282|         0|            0|            0|  0.00%|        for name, continuations in rfc2231_params.items():
   283|         0|            0|            0|  0.00%|            value = []
   284|         0|            0|            0|  0.00%|            extended = False
   285|         0|            0|            0|  0.00%|            # Sort by number
   286|         0|            0|            0|  0.00%|            continuations.sort()
   287|         0|            0|            0|  0.00%|            # And now append all values in numerical order, converting
   288|         0|            0|            0|  0.00%|            # %-encodings for the encoded segments.  If any of the
   289|         0|            0|            0|  0.00%|            # continuation names ends in a *, then the entire string, after
   290|         0|            0|            0|  0.00%|            # decoding segments and concatenating, must have the charset and
   291|         0|            0|            0|  0.00%|            # language specifiers at the beginning of the string.
   292|         0|            0|            0|  0.00%|            for num, s, encoded in continuations:
   293|         0|            0|            0|  0.00%|                if encoded:
   294|         0|            0|            0|  0.00%|                    # Decode as "latin-1", so the characters in s directly
   295|         0|            0|            0|  0.00%|                    # represent the percent-encoded octet values.
   296|         0|            0|            0|  0.00%|                    # collapse_rfc2231_value treats this as an octet sequence.
   297|         0|            0|            0|  0.00%|                    s = urllib.parse.unquote(s, encoding="latin-1")
   298|         0|            0|            0|  0.00%|                    extended = True
   299|         0|            0|            0|  0.00%|                value.append(s)
   300|         0|            0|            0|  0.00%|            value = quote(EMPTYSTRING.join(value))
   301|         0|            0|            0|  0.00%|            if extended:
   302|         0|            0|            0|  0.00%|                charset, language, value = decode_rfc2231(value)
   303|         0|            0|            0|  0.00%|                new_params.append((name, (charset, language, '"%s"' % value)))
   304|         0|            0|            0|  0.00%|            else:
   305|         0|            0|            0|  0.00%|                new_params.append((name, '"%s"' % value))
   306|         1|  4.52995e-06|  4.52995e-06|  0.00%|    return new_params
   307|         0|            0|            0|  0.00%|
   308|         0|            0|            0|  0.00%|def collapse_rfc2231_value(value, errors='replace',
   309|         0|            0|            0|  0.00%|                           fallback_charset='us-ascii'):
   310|         0|            0|            0|  0.00%|    if not isinstance(value, tuple) or len(value) != 3:
   311|         0|            0|            0|  0.00%|        return unquote(value)
   312|         0|            0|            0|  0.00%|    # While value comes to us as a unicode string, we need it to be a bytes
   313|         0|            0|            0|  0.00%|    # object.  We do not want bytes() normal utf-8 decoder, we want a straight
   314|         0|            0|            0|  0.00%|    # interpretation of the string as character bytes.
   315|         0|            0|            0|  0.00%|    charset, language, text = value
   316|         0|            0|            0|  0.00%|    if charset is None:
   317|         0|            0|            0|  0.00%|        # Issue 17369: if charset/lang is None, decode_rfc2231 couldn't parse
   318|         0|            0|            0|  0.00%|        # the value, so use the fallback_charset.
   319|         0|            0|            0|  0.00%|        charset = fallback_charset
   320|         0|            0|            0|  0.00%|    rawbytes = bytes(text, 'raw-unicode-escape')
   321|         0|            0|            0|  0.00%|    try:
   322|         0|            0|            0|  0.00%|        return str(rawbytes, charset, errors)
   323|         0|            0|            0|  0.00%|    except LookupError:
   324|         0|            0|            0|  0.00%|        # charset is not a known codec.
   325|         0|            0|            0|  0.00%|        return unquote(text)
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|
   328|         0|            0|            0|  0.00%|#
   329|         0|            0|            0|  0.00%|# datetime doesn't provide a localtime function yet, so provide one.  Code
   330|         0|            0|            0|  0.00%|# adapted from the patch in issue 9527.  This may not be perfect, but it is
   331|         0|            0|            0|  0.00%|# better than not having it.
   332|         0|            0|            0|  0.00%|#
   333|         0|            0|            0|  0.00%|
   334|         0|            0|            0|  0.00%|def localtime(dt=None, isdst=-1):
   335|         0|            0|            0|  0.00%|    """Return local time as an aware datetime object.
   336|         0|            0|            0|  0.00%|
   337|         0|            0|            0|  0.00%|    If called without arguments, return current time.  Otherwise *dt*
   338|         0|            0|            0|  0.00%|    argument should be a datetime instance, and it is converted to the
   339|         0|            0|            0|  0.00%|    local time zone according to the system time zone database.  If *dt* is
   340|         0|            0|            0|  0.00%|    naive (that is, dt.tzinfo is None), it is assumed to be in local time.
   341|         0|            0|            0|  0.00%|    In this case, a positive or zero value for *isdst* causes localtime to
   342|         0|            0|            0|  0.00%|    presume initially that summer time (for example, Daylight Saving Time)
   343|         0|            0|            0|  0.00%|    is or is not (respectively) in effect for the specified time.  A
   344|         0|            0|            0|  0.00%|    negative value for *isdst* causes the localtime() function to attempt
   345|         0|            0|            0|  0.00%|    to divine whether summer time is in effect for the specified time.
   346|         0|            0|            0|  0.00%|
   347|         0|            0|            0|  0.00%|    """
   348|         0|            0|            0|  0.00%|    if dt is None:
   349|         0|            0|            0|  0.00%|        return datetime.datetime.now(datetime.timezone.utc).astimezone()
   350|         0|            0|            0|  0.00%|    if dt.tzinfo is not None:
   351|         0|            0|            0|  0.00%|        return dt.astimezone()
   352|         0|            0|            0|  0.00%|    # We have a naive datetime.  Convert to a (localtime) timetuple and pass to
   353|         0|            0|            0|  0.00%|    # system mktime together with the isdst hint.  System mktime will return
   354|         0|            0|            0|  0.00%|    # seconds since epoch.
   355|         0|            0|            0|  0.00%|    tm = dt.timetuple()[:-1] + (isdst,)
   356|         0|            0|            0|  0.00%|    seconds = time.mktime(tm)
   357|         0|            0|            0|  0.00%|    localtm = time.localtime(seconds)
   358|         0|            0|            0|  0.00%|    try:
   359|         0|            0|            0|  0.00%|        delta = datetime.timedelta(seconds=localtm.tm_gmtoff)
   360|         0|            0|            0|  0.00%|        tz = datetime.timezone(delta, localtm.tm_zone)
   361|         0|            0|            0|  0.00%|    except AttributeError:
   362|         0|            0|            0|  0.00%|        # Compute UTC offset and compare with the value implied by tm_isdst.
   363|         0|            0|            0|  0.00%|        # If the values match, use the zone name implied by tm_isdst.
   364|         0|            0|            0|  0.00%|        delta = dt - datetime.datetime(*time.gmtime(seconds)[:6])
   365|         0|            0|            0|  0.00%|        dst = time.daylight and localtm.tm_isdst > 0
   366|         0|            0|            0|  0.00%|        gmtoff = -(time.altzone if dst else time.timezone)
   367|         0|            0|            0|  0.00%|        if delta == datetime.timedelta(seconds=gmtoff):
   368|         0|            0|            0|  0.00%|            tz = datetime.timezone(delta, time.tzname[dst])
   369|         0|            0|            0|  0.00%|        else:
   370|         0|            0|            0|  0.00%|            tz = datetime.timezone(delta)
   371|         0|            0|            0|  0.00%|    return dt.replace(tzinfo=tz)
File: /usr/lib/python3.10/encodings/__init__.py
File duration: 0.000262499s (0.11%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|""" Standard "encodings" Package
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|    Standard Python encoding modules are stored in this package
     4|         0|            0|            0|  0.00%|    directory.
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|    Codec modules must have names corresponding to normalized encoding
     7|         0|            0|            0|  0.00%|    names as defined in the normalize_encoding() function below, e.g.
     8|         0|            0|            0|  0.00%|    'utf-8' must be implemented by the module 'utf_8.py'.
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|    Each codec module must export the following interface:
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|    * getregentry() -> codecs.CodecInfo object
    13|         0|            0|            0|  0.00%|    The getregentry() API must return a CodecInfo object with encoder, decoder,
    14|         0|            0|            0|  0.00%|    incrementalencoder, incrementaldecoder, streamwriter and streamreader
    15|         0|            0|            0|  0.00%|    attributes which adhere to the Python Codec Interface Standard.
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|    In addition, a module may optionally also define the following
    18|         0|            0|            0|  0.00%|    APIs which are then used by the package's codec search function:
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|    * getaliases() -> sequence of encoding name strings to use as aliases
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|    Alias names returned by getaliases() must be normalized encoding
    23|         0|            0|            0|  0.00%|    names as defined by normalize_encoding().
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|Written by Marc-Andre Lemburg (mal@lemburg.com).
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|"""#"
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|import codecs
    32|         0|            0|            0|  0.00%|import sys
    33|         0|            0|            0|  0.00%|from . import aliases
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|_cache = {}
    36|         0|            0|            0|  0.00%|_unknown = '--unknown--'
    37|         0|            0|            0|  0.00%|_import_tail = ['*']
    38|         0|            0|            0|  0.00%|_aliases = aliases.aliases
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|class CodecRegistryError(LookupError, SystemError):
    41|         0|            0|            0|  0.00%|    pass
    42|         0|            0|            0|  0.00%|
    43|         1|  4.52995e-06|  4.52995e-06|  0.00%|def normalize_encoding(encoding):
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|    """ Normalize an encoding name.
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|        Normalization works as follows: all non-alphanumeric
    48|         0|            0|            0|  0.00%|        characters except the dot used for Python package names are
    49|         0|            0|            0|  0.00%|        collapsed and replaced with a single underscore, e.g. '  -;#'
    50|         0|            0|            0|  0.00%|        becomes '_'. Leading and trailing underscores are removed.
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|        Note that encoding names should be ASCII only.
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|    """
    55|         1|  5.72205e-06|  5.72205e-06|  0.00%|    if isinstance(encoding, bytes):
    56|         0|            0|            0|  0.00%|        encoding = str(encoding, "ascii")
    57|         0|            0|            0|  0.00%|
    58|         1|  5.24521e-06|  5.24521e-06|  0.00%|    chars = []
    59|         1|   3.8147e-06|   3.8147e-06|  0.00%|    punct = False
    60|         5|  1.57356e-05|  3.14713e-06|  0.01%|    for c in encoding:
    61|         4|   1.3113e-05|  3.27826e-06|  0.01%|        if c.isalnum() or c == '.':
    62|         4|  1.28746e-05|  3.21865e-06|  0.01%|            if punct and chars:
    63|         0|            0|            0|  0.00%|                chars.append('_')
    64|         4|  1.43051e-05|  3.57628e-06|  0.01%|            if c.isascii():
    65|         4|  1.21593e-05|  3.03984e-06|  0.01%|                chars.append(c)
    66|         4|  1.16825e-05|  2.92063e-06|  0.00%|            punct = False
    67|         0|            0|            0|  0.00%|        else:
    68|         0|            0|            0|  0.00%|            punct = True
    69|         1|  3.33786e-06|  3.33786e-06|  0.00%|    return ''.join(chars)
    70|         0|            0|            0|  0.00%|
    71|         1|  5.72205e-06|  5.72205e-06|  0.00%|def search_function(encoding):
    72|         0|            0|            0|  0.00%|
    73|         0|            0|            0|  0.00%|    # Cache lookup
    74|         1|  7.62939e-06|  7.62939e-06|  0.00%|    entry = _cache.get(encoding, _unknown)
    75|         1|  4.76837e-06|  4.76837e-06|  0.00%|    if entry is not _unknown:
    76|         0|            0|            0|  0.00%|        return entry
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|    # Import the module:
    79|         0|            0|            0|  0.00%|    #
    80|         0|            0|            0|  0.00%|    # First try to find an alias for the normalized encoding
    81|         0|            0|            0|  0.00%|    # name and lookup the module using the aliased name, then try to
    82|         0|            0|            0|  0.00%|    # lookup the module using the standard import scheme, i.e. first
    83|         0|            0|            0|  0.00%|    # try in the encodings package, then at top-level.
    84|         0|            0|            0|  0.00%|    #
    85|         1|  1.21593e-05|  1.21593e-05|  0.01%|    norm_encoding = normalize_encoding(encoding)
(call)|         1|   0.00010252|   0.00010252|  0.04%|# /usr/lib/python3.10/encodings/__init__.py:43 normalize_encoding
    86|         2|  9.53674e-06|  4.76837e-06|  0.00%|    aliased_encoding = _aliases.get(norm_encoding) or \
    87|         1|  5.24521e-06|  5.24521e-06|  0.00%|                       _aliases.get(norm_encoding.replace('.', '_'))
    88|         1|  4.05312e-06|  4.05312e-06|  0.00%|    if aliased_encoding is not None:
    89|         0|            0|            0|  0.00%|        modnames = [aliased_encoding,
    90|         0|            0|            0|  0.00%|                    norm_encoding]
    91|         0|            0|            0|  0.00%|    else:
    92|         1|  5.24521e-06|  5.24521e-06|  0.00%|        modnames = [norm_encoding]
    93|         1|  4.52995e-06|  4.52995e-06|  0.00%|    for modname in modnames:
    94|         1|  4.29153e-06|  4.29153e-06|  0.00%|        if not modname or '.' in modname:
    95|         0|            0|            0|  0.00%|            continue
    96|         1|  4.29153e-06|  4.29153e-06|  0.00%|        try:
    97|         0|            0|            0|  0.00%|            # Import is absolute to prevent the possibly malicious import of a
    98|         0|            0|            0|  0.00%|            # module with side-effects that is not in the 'encodings' package.
    99|         2|  2.43187e-05|  1.21593e-05|  0.01%|            mod = __import__('encodings.' + modname, fromlist=_import_tail,
(call)|         1|    0.0299699|    0.0299699| 12.34%|# <frozen importlib._bootstrap>:1022 _find_and_load
   100|         1|   3.8147e-06|   3.8147e-06|  0.00%|                             level=0)
   101|         0|            0|            0|  0.00%|        except ImportError:
   102|         0|            0|            0|  0.00%|            # ImportError may occur because 'encodings.(modname)' does not exist,
   103|         0|            0|            0|  0.00%|            # or because it imports a name that does not exist (see mbcs and oem)
   104|         0|            0|            0|  0.00%|            pass
   105|         0|            0|            0|  0.00%|        else:
   106|         1|  4.52995e-06|  4.52995e-06|  0.00%|            break
   107|         0|            0|            0|  0.00%|    else:
   108|         0|            0|            0|  0.00%|        mod = None
   109|         0|            0|            0|  0.00%|
   110|         1|  5.48363e-06|  5.48363e-06|  0.00%|    try:
   111|         1|  4.52995e-06|  4.52995e-06|  0.00%|        getregentry = mod.getregentry
   112|         0|            0|            0|  0.00%|    except AttributeError:
   113|         0|            0|            0|  0.00%|        # Not a codec module
   114|         0|            0|            0|  0.00%|        mod = None
   115|         0|            0|            0|  0.00%|
   116|         1|   3.8147e-06|   3.8147e-06|  0.00%|    if mod is None:
   117|         0|            0|            0|  0.00%|        # Cache misses
   118|         0|            0|            0|  0.00%|        _cache[encoding] = None
   119|         0|            0|            0|  0.00%|        return None
   120|         0|            0|            0|  0.00%|
   121|         0|            0|            0|  0.00%|    # Now ask the module for the registry entry
   122|         1|  1.04904e-05|  1.04904e-05|  0.00%|    entry = getregentry()
(call)|         1|  0.000100374|  0.000100374|  0.04%|# /usr/lib/python3.10/encodings/idna.py:300 getregentry
   123|         1|  5.24521e-06|  5.24521e-06|  0.00%|    if not isinstance(entry, codecs.CodecInfo):
   124|         0|            0|            0|  0.00%|        if not 4 <= len(entry) <= 7:
   125|         0|            0|            0|  0.00%|            raise CodecRegistryError('module "%s" (%s) failed to register'
   126|         0|            0|            0|  0.00%|                                     % (mod.__name__, mod.__file__))
   127|         0|            0|            0|  0.00%|        if not callable(entry[0]) or not callable(entry[1]) or \
   128|         0|            0|            0|  0.00%|           (entry[2] is not None and not callable(entry[2])) or \
   129|         0|            0|            0|  0.00%|           (entry[3] is not None and not callable(entry[3])) or \
   130|         0|            0|            0|  0.00%|           (len(entry) > 4 and entry[4] is not None and not callable(entry[4])) or \
   131|         0|            0|            0|  0.00%|           (len(entry) > 5 and entry[5] is not None and not callable(entry[5])):
   132|         0|            0|            0|  0.00%|            raise CodecRegistryError('incompatible codecs in module "%s" (%s)'
   133|         0|            0|            0|  0.00%|                                     % (mod.__name__, mod.__file__))
   134|         0|            0|            0|  0.00%|        if len(entry)<7 or entry[6] is None:
   135|         0|            0|            0|  0.00%|            entry += (None,)*(6-len(entry)) + (mod.__name__.split(".", 1)[1],)
   136|         0|            0|            0|  0.00%|        entry = codecs.CodecInfo(*entry)
   137|         0|            0|            0|  0.00%|
   138|         0|            0|            0|  0.00%|    # Cache the codec registry entry
   139|         1|  5.48363e-06|  5.48363e-06|  0.00%|    _cache[encoding] = entry
   140|         0|            0|            0|  0.00%|
   141|         0|            0|            0|  0.00%|    # Register its aliases (without overwriting previously registered
   142|         0|            0|            0|  0.00%|    # aliases)
   143|         1|  4.52995e-06|  4.52995e-06|  0.00%|    try:
   144|         1|  6.91414e-06|  6.91414e-06|  0.00%|        codecaliases = mod.getaliases()
   145|         1|  4.52995e-06|  4.52995e-06|  0.00%|    except AttributeError:
   146|         1|  4.29153e-06|  4.29153e-06|  0.00%|        pass
   147|         0|            0|            0|  0.00%|    else:
   148|         0|            0|            0|  0.00%|        for alias in codecaliases:
   149|         0|            0|            0|  0.00%|            if alias not in _aliases:
   150|         0|            0|            0|  0.00%|                _aliases[alias] = modname
   151|         0|            0|            0|  0.00%|
   152|         0|            0|            0|  0.00%|    # Return the registry entry
   153|         1|  4.52995e-06|  4.52995e-06|  0.00%|    return entry
   154|         0|            0|            0|  0.00%|
   155|         0|            0|            0|  0.00%|# Register the search_function in the Python codec registry
   156|         0|            0|            0|  0.00%|codecs.register(search_function)
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|if sys.platform == 'win32':
   159|         0|            0|            0|  0.00%|    def _alias_mbcs(encoding):
   160|         0|            0|            0|  0.00%|        try:
   161|         0|            0|            0|  0.00%|            import _winapi
   162|         0|            0|            0|  0.00%|            ansi_code_page = "cp%s" % _winapi.GetACP()
   163|         0|            0|            0|  0.00%|            if encoding == ansi_code_page:
   164|         0|            0|            0|  0.00%|                import encodings.mbcs
   165|         0|            0|            0|  0.00%|                return encodings.mbcs.getregentry()
   166|         0|            0|            0|  0.00%|        except ImportError:
   167|         0|            0|            0|  0.00%|            # Imports may fail while we are shutting down
   168|         0|            0|            0|  0.00%|            pass
   169|         0|            0|            0|  0.00%|
   170|         0|            0|            0|  0.00%|    codecs.register(_alias_mbcs)
File: /usr/lib/python3.10/email/policy.py
File duration: 0.000229359s (0.09%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""This will be the home for the policy that hooks in the new
     2|         0|            0|            0|  0.00%|code that adds all the email6 features.
     3|         0|            0|            0|  0.00%|"""
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|import re
     6|         0|            0|            0|  0.00%|import sys
     7|         0|            0|            0|  0.00%|from email._policybase import Policy, Compat32, compat32, _extend_docstrings
     8|         0|            0|            0|  0.00%|from email.utils import _has_surrogates
     9|         0|            0|            0|  0.00%|from email.headerregistry import HeaderRegistry as HeaderRegistry
    10|         0|            0|            0|  0.00%|from email.contentmanager import raw_data_manager
    11|         0|            0|            0|  0.00%|from email.message import EmailMessage
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|__all__ = [
    14|         0|            0|            0|  0.00%|    'Compat32',
    15|         0|            0|            0|  0.00%|    'compat32',
    16|         0|            0|            0|  0.00%|    'Policy',
    17|         0|            0|            0|  0.00%|    'EmailPolicy',
    18|         0|            0|            0|  0.00%|    'default',
    19|         0|            0|            0|  0.00%|    'strict',
    20|         0|            0|            0|  0.00%|    'SMTP',
    21|         0|            0|            0|  0.00%|    'HTTP',
    22|         0|            0|            0|  0.00%|    ]
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|linesep_splitter = re.compile(r'\n|\r')
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|@_extend_docstrings
    27|         0|            0|            0|  0.00%|class EmailPolicy(Policy):
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|    """+
    30|         0|            0|            0|  0.00%|    PROVISIONAL
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|    The API extensions enabled by this policy are currently provisional.
    33|         0|            0|            0|  0.00%|    Refer to the documentation for details.
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|    This policy adds new header parsing and folding algorithms.  Instead of
    36|         0|            0|            0|  0.00%|    simple strings, headers are custom objects with custom attributes
    37|         0|            0|            0|  0.00%|    depending on the type of the field.  The folding algorithm fully
    38|         0|            0|            0|  0.00%|    implements RFCs 2047 and 5322.
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|    In addition to the settable attributes listed above that apply to
    41|         0|            0|            0|  0.00%|    all Policies, this policy adds the following additional attributes:
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|    utf8                -- if False (the default) message headers will be
    44|         0|            0|            0|  0.00%|                           serialized as ASCII, using encoded words to encode
    45|         0|            0|            0|  0.00%|                           any non-ASCII characters in the source strings.  If
    46|         0|            0|            0|  0.00%|                           True, the message headers will be serialized using
    47|         0|            0|            0|  0.00%|                           utf8 and will not contain encoded words (see RFC
    48|         0|            0|            0|  0.00%|                           6532 for more on this serialization format).
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|    refold_source       -- if the value for a header in the Message object
    51|         0|            0|            0|  0.00%|                           came from the parsing of some source, this attribute
    52|         0|            0|            0|  0.00%|                           indicates whether or not a generator should refold
    53|         0|            0|            0|  0.00%|                           that value when transforming the message back into
    54|         0|            0|            0|  0.00%|                           stream form.  The possible values are:
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|                           none  -- all source values use original folding
    57|         0|            0|            0|  0.00%|                           long  -- source values that have any line that is
    58|         0|            0|            0|  0.00%|                                    longer than max_line_length will be
    59|         0|            0|            0|  0.00%|                                    refolded
    60|         0|            0|            0|  0.00%|                           all  -- all values are refolded.
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|                           The default is 'long'.
    63|         0|            0|            0|  0.00%|
    64|         0|            0|            0|  0.00%|    header_factory      -- a callable that takes two arguments, 'name' and
    65|         0|            0|            0|  0.00%|                           'value', where 'name' is a header field name and
    66|         0|            0|            0|  0.00%|                           'value' is an unfolded header field value, and
    67|         0|            0|            0|  0.00%|                           returns a string-like object that represents that
    68|         0|            0|            0|  0.00%|                           header.  A default header_factory is provided that
    69|         0|            0|            0|  0.00%|                           understands some of the RFC5322 header field types.
    70|         0|            0|            0|  0.00%|                           (Currently address fields and date fields have
    71|         0|            0|            0|  0.00%|                           special treatment, while all other fields are
    72|         0|            0|            0|  0.00%|                           treated as unstructured.  This list will be
    73|         0|            0|            0|  0.00%|                           completed before the extension is marked stable.)
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|    content_manager     -- an object with at least two methods: get_content
    76|         0|            0|            0|  0.00%|                           and set_content.  When the get_content or
    77|         0|            0|            0|  0.00%|                           set_content method of a Message object is called,
    78|         0|            0|            0|  0.00%|                           it calls the corresponding method of this object,
    79|         0|            0|            0|  0.00%|                           passing it the message object as its first argument,
    80|         0|            0|            0|  0.00%|                           and any arguments or keywords that were passed to
    81|         0|            0|            0|  0.00%|                           it as additional arguments.  The default
    82|         0|            0|            0|  0.00%|                           content_manager is
    83|         0|            0|            0|  0.00%|                           :data:`~email.contentmanager.raw_data_manager`.
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|    """
    86|         0|            0|            0|  0.00%|
    87|         0|            0|            0|  0.00%|    message_factory = EmailMessage
    88|         0|            0|            0|  0.00%|    utf8 = False
    89|         0|            0|            0|  0.00%|    refold_source = 'long'
    90|         0|            0|            0|  0.00%|    header_factory = HeaderRegistry()
    91|         0|            0|            0|  0.00%|    content_manager = raw_data_manager
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|    def __init__(self, **kw):
    94|         0|            0|            0|  0.00%|        # Ensure that each new instance gets a unique header factory
    95|         0|            0|            0|  0.00%|        # (as opposed to clones, which share the factory).
    96|         0|            0|            0|  0.00%|        if 'header_factory' not in kw:
    97|         0|            0|            0|  0.00%|            object.__setattr__(self, 'header_factory', HeaderRegistry())
    98|         0|            0|            0|  0.00%|        super().__init__(**kw)
    99|         0|            0|            0|  0.00%|
   100|         4|  1.26362e-05|  3.15905e-06|  0.01%|    def header_max_count(self, name):
   101|         0|            0|            0|  0.00%|        """+
   102|         0|            0|            0|  0.00%|        The implementation for this class returns the max_count attribute from
   103|         0|            0|            0|  0.00%|        the specialized header class that would be used to construct a header
   104|         0|            0|            0|  0.00%|        of type 'name'.
   105|         0|            0|            0|  0.00%|        """
   106|         4|  4.76837e-05|  1.19209e-05|  0.02%|        return self.header_factory[name].max_count
(call)|         4|   0.00012064|    3.016e-05|  0.05%|# /usr/lib/python3.10/email/headerregistry.py:590 __getitem__
   107|         0|            0|            0|  0.00%|
   108|         0|            0|            0|  0.00%|    # The logic of the next three methods is chosen such that it is possible to
   109|         0|            0|            0|  0.00%|    # switch a Message object between a Compat32 policy and a policy derived
   110|         0|            0|            0|  0.00%|    # from this class and have the results stay consistent.  This allows a
   111|         0|            0|            0|  0.00%|    # Message object constructed with this policy to be passed to a library
   112|         0|            0|            0|  0.00%|    # that only handles Compat32 objects, or to receive such an object and
   113|         0|            0|            0|  0.00%|    # convert it to use the newer style by just changing its policy.  It is
   114|         0|            0|            0|  0.00%|    # also chosen because it postpones the relatively expensive full rfc5322
   115|         0|            0|            0|  0.00%|    # parse until as late as possible when parsing from source, since in many
   116|         0|            0|            0|  0.00%|    # applications only a few headers will actually be inspected.
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|    def header_source_parse(self, sourcelines):
   119|         0|            0|            0|  0.00%|        """+
   120|         0|            0|            0|  0.00%|        The name is parsed as everything up to the ':' and returned unmodified.
   121|         0|            0|            0|  0.00%|        The value is determined by stripping leading whitespace off the
   122|         0|            0|            0|  0.00%|        remainder of the first line, joining all subsequent lines together, and
   123|         0|            0|            0|  0.00%|        stripping any trailing carriage return or linefeed characters.  (This
   124|         0|            0|            0|  0.00%|        is the same as Compat32).
   125|         0|            0|            0|  0.00%|
   126|         0|            0|            0|  0.00%|        """
   127|         0|            0|            0|  0.00%|        name, value = sourcelines[0].split(':', 1)
   128|         0|            0|            0|  0.00%|        value = value.lstrip(' \t') + ''.join(sourcelines[1:])
   129|         0|            0|            0|  0.00%|        return (name, value.rstrip('\r\n'))
   130|         0|            0|            0|  0.00%|
   131|         5|  1.66893e-05|  3.33786e-06|  0.01%|    def header_store_parse(self, name, value):
   132|         0|            0|            0|  0.00%|        """+
   133|         0|            0|            0|  0.00%|        The name is returned unchanged.  If the input value has a 'name'
   134|         0|            0|            0|  0.00%|        attribute and it matches the name ignoring case, the value is returned
   135|         0|            0|            0|  0.00%|        unchanged.  Otherwise the name and value are passed to header_factory
   136|         0|            0|            0|  0.00%|        method, and the resulting custom header object is returned as the
   137|         0|            0|            0|  0.00%|        value.  In this case a ValueError is raised if the input value contains
   138|         0|            0|            0|  0.00%|        CR or LF characters.
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|        """
   141|         5|  1.88351e-05|  3.76701e-06|  0.01%|        if hasattr(value, 'name') and value.name.lower() == name.lower():
   142|         0|            0|            0|  0.00%|            return (name, value)
   143|         5|   2.3365e-05|    4.673e-06|  0.01%|        if isinstance(value, str) and len(value.splitlines())>1:
   144|         0|            0|            0|  0.00%|            # XXX this error message isn't quite right when we use splitlines
   145|         0|            0|            0|  0.00%|            # (see issue 22233), but I'm not sure what should happen here.
   146|         0|            0|            0|  0.00%|            raise ValueError("Header values may not contain linefeed "
   147|         0|            0|            0|  0.00%|                             "or carriage return characters")
   148|         5|  4.74453e-05|  9.48906e-06|  0.02%|        return (name, self.header_factory(name, value))
(call)|         5|   0.00650764|   0.00130153|  2.68%|# /usr/lib/python3.10/email/headerregistry.py:594 __call__
   149|         0|            0|            0|  0.00%|
   150|         3|  1.04904e-05|  3.49681e-06|  0.00%|    def header_fetch_parse(self, name, value):
   151|         0|            0|            0|  0.00%|        """+
   152|         0|            0|            0|  0.00%|        If the value has a 'name' attribute, it is returned to unmodified.
   153|         0|            0|            0|  0.00%|        Otherwise the name and the value with any linesep characters removed
   154|         0|            0|            0|  0.00%|        are passed to the header_factory method, and the resulting custom
   155|         0|            0|            0|  0.00%|        header object is returned.  Any surrogateescaped bytes get turned
   156|         0|            0|            0|  0.00%|        into the unicode unknown-character glyph.
   157|         0|            0|            0|  0.00%|
   158|         0|            0|            0|  0.00%|        """
   159|         3|  4.17233e-05|  1.39078e-05|  0.02%|        if hasattr(value, 'name'):
(call)|         3|  1.83582e-05|  6.11941e-06|  0.01%|# /usr/lib/python3.10/email/headerregistry.py:205 name
   160|         3|  1.04904e-05|  3.49681e-06|  0.00%|            return value
   161|         0|            0|            0|  0.00%|        # We can't use splitlines here because it splits on more than \r and \n.
   162|         0|            0|            0|  0.00%|        value = ''.join(linesep_splitter.split(value))
   163|         0|            0|            0|  0.00%|        return self.header_factory(name, value)
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|    def fold(self, name, value):
   166|         0|            0|            0|  0.00%|        """+
   167|         0|            0|            0|  0.00%|        Header folding is controlled by the refold_source policy setting.  A
   168|         0|            0|            0|  0.00%|        value is considered to be a 'source value' if and only if it does not
   169|         0|            0|            0|  0.00%|        have a 'name' attribute (having a 'name' attribute means it is a header
   170|         0|            0|            0|  0.00%|        object of some sort).  If a source value needs to be refolded according
   171|         0|            0|            0|  0.00%|        to the policy, it is converted into a custom header object by passing
   172|         0|            0|            0|  0.00%|        the name and the value with any linesep characters removed to the
   173|         0|            0|            0|  0.00%|        header_factory method.  Folding of a custom header object is done by
   174|         0|            0|            0|  0.00%|        calling its fold method with the current policy.
   175|         0|            0|            0|  0.00%|
   176|         0|            0|            0|  0.00%|        Source values are split into lines using splitlines.  If the value is
   177|         0|            0|            0|  0.00%|        not to be refolded, the lines are rejoined using the linesep from the
   178|         0|            0|            0|  0.00%|        policy and returned.  The exception is lines containing non-ascii
   179|         0|            0|            0|  0.00%|        binary data.  In that case the value is refolded regardless of the
   180|         0|            0|            0|  0.00%|        refold_source setting, which causes the binary data to be CTE encoded
   181|         0|            0|            0|  0.00%|        using the unknown-8bit charset.
   182|         0|            0|            0|  0.00%|
   183|         0|            0|            0|  0.00%|        """
   184|         0|            0|            0|  0.00%|        return self._fold(name, value, refold_binary=True)
   185|         0|            0|            0|  0.00%|
   186|         0|            0|            0|  0.00%|    def fold_binary(self, name, value):
   187|         0|            0|            0|  0.00%|        """+
   188|         0|            0|            0|  0.00%|        The same as fold if cte_type is 7bit, except that the returned value is
   189|         0|            0|            0|  0.00%|        bytes.
   190|         0|            0|            0|  0.00%|
   191|         0|            0|            0|  0.00%|        If cte_type is 8bit, non-ASCII binary data is converted back into
   192|         0|            0|            0|  0.00%|        bytes.  Headers with binary data are not refolded, regardless of the
   193|         0|            0|            0|  0.00%|        refold_header setting, since there is no way to know whether the binary
   194|         0|            0|            0|  0.00%|        data consists of single byte characters or multibyte characters.
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|        If utf8 is true, headers are encoded to utf8, otherwise to ascii with
   197|         0|            0|            0|  0.00%|        non-ASCII unicode rendered as encoded words.
   198|         0|            0|            0|  0.00%|
   199|         0|            0|            0|  0.00%|        """
   200|         0|            0|            0|  0.00%|        folded = self._fold(name, value, refold_binary=self.cte_type=='7bit')
   201|         0|            0|            0|  0.00%|        charset = 'utf8' if self.utf8 else 'ascii'
   202|         0|            0|            0|  0.00%|        return folded.encode(charset, 'surrogateescape')
   203|         0|            0|            0|  0.00%|
   204|         0|            0|            0|  0.00%|    def _fold(self, name, value, refold_binary=False):
   205|         0|            0|            0|  0.00%|        if hasattr(value, 'name'):
   206|         0|            0|            0|  0.00%|            return value.fold(policy=self)
   207|         0|            0|            0|  0.00%|        maxlen = self.max_line_length if self.max_line_length else sys.maxsize
   208|         0|            0|            0|  0.00%|        lines = value.splitlines()
   209|         0|            0|            0|  0.00%|        refold = (self.refold_source == 'all' or
   210|         0|            0|            0|  0.00%|                  self.refold_source == 'long' and
   211|         0|            0|            0|  0.00%|                    (lines and len(lines[0])+len(name)+2 > maxlen or
   212|         0|            0|            0|  0.00%|                     any(len(x) > maxlen for x in lines[1:])))
   213|         0|            0|            0|  0.00%|        if refold or refold_binary and _has_surrogates(value):
   214|         0|            0|            0|  0.00%|            return self.header_factory(name, ''.join(lines)).fold(policy=self)
   215|         0|            0|            0|  0.00%|        return name + ': ' + self.linesep.join(lines) + self.linesep
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|
   218|         0|            0|            0|  0.00%|default = EmailPolicy()
   219|         0|            0|            0|  0.00%|# Make the default policy use the class default header_factory
   220|         0|            0|            0|  0.00%|del default.header_factory
   221|         0|            0|            0|  0.00%|strict = default.clone(raise_on_defect=True)
   222|         0|            0|            0|  0.00%|SMTP = default.clone(linesep='\r\n')
   223|         0|            0|            0|  0.00%|HTTP = default.clone(linesep='\r\n', max_line_length=None)
   224|         0|            0|            0|  0.00%|SMTPUTF8 = SMTP.clone(utf8=True)
File: /usr/lib/python3.10/types.py
File duration: 6.24657e-05s (0.03%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""
     2|         0|            0|            0|  0.00%|Define names for built-in types that aren't directly accessible as a builtin.
     3|         0|            0|            0|  0.00%|"""
     4|         0|            0|            0|  0.00%|import sys
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|# Iterators in Python aren't a matter of type but of protocol.  A large
     7|         0|            0|            0|  0.00%|# and changing number of builtin types implement *some* flavor of
     8|         0|            0|            0|  0.00%|# iterator.  Don't check the type!  Use hasattr to check for both
     9|         0|            0|            0|  0.00%|# "__iter__" and "__next__" attributes instead.
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|def _f(): pass
    12|         0|            0|            0|  0.00%|FunctionType = type(_f)
    13|         0|            0|            0|  0.00%|LambdaType = type(lambda: None)         # Same as FunctionType
    14|         0|            0|            0|  0.00%|CodeType = type(_f.__code__)
    15|         0|            0|            0|  0.00%|MappingProxyType = type(type.__dict__)
    16|         0|            0|            0|  0.00%|SimpleNamespace = type(sys.implementation)
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|def _cell_factory():
    19|         0|            0|            0|  0.00%|    a = 1
    20|         0|            0|            0|  0.00%|    def f():
    21|         0|            0|            0|  0.00%|        nonlocal a
    22|         0|            0|            0|  0.00%|    return f.__closure__[0]
    23|         0|            0|            0|  0.00%|CellType = type(_cell_factory())
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|def _g():
    26|         0|            0|            0|  0.00%|    yield 1
    27|         0|            0|            0|  0.00%|GeneratorType = type(_g())
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|async def _c(): pass
    30|         0|            0|            0|  0.00%|_c = _c()
    31|         0|            0|            0|  0.00%|CoroutineType = type(_c)
    32|         0|            0|            0|  0.00%|_c.close()  # Prevent ResourceWarning
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|async def _ag():
    35|         0|            0|            0|  0.00%|    yield
    36|         0|            0|            0|  0.00%|_ag = _ag()
    37|         0|            0|            0|  0.00%|AsyncGeneratorType = type(_ag)
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|class _C:
    40|         0|            0|            0|  0.00%|    def _m(self): pass
    41|         0|            0|            0|  0.00%|MethodType = type(_C()._m)
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|BuiltinFunctionType = type(len)
    44|         0|            0|            0|  0.00%|BuiltinMethodType = type([].append)     # Same as BuiltinFunctionType
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|WrapperDescriptorType = type(object.__init__)
    47|         0|            0|            0|  0.00%|MethodWrapperType = type(object().__str__)
    48|         0|            0|            0|  0.00%|MethodDescriptorType = type(str.join)
    49|         0|            0|            0|  0.00%|ClassMethodDescriptorType = type(dict.__dict__['fromkeys'])
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|ModuleType = type(sys)
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|try:
    54|         0|            0|            0|  0.00%|    raise TypeError
    55|         0|            0|            0|  0.00%|except TypeError:
    56|         0|            0|            0|  0.00%|    tb = sys.exc_info()[2]
    57|         0|            0|            0|  0.00%|    TracebackType = type(tb)
    58|         0|            0|            0|  0.00%|    FrameType = type(tb.tb_frame)
    59|         0|            0|            0|  0.00%|    tb = None; del tb
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|# For Jython, the following two types are identical
    62|         0|            0|            0|  0.00%|GetSetDescriptorType = type(FunctionType.__code__)
    63|         0|            0|            0|  0.00%|MemberDescriptorType = type(FunctionType.__globals__)
    64|         0|            0|            0|  0.00%|
    65|         0|            0|            0|  0.00%|del sys, _f, _g, _C, _c, _ag  # Not for export
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|# Provide a PEP 3115 compliant mechanism for class creation
    69|         0|            0|            0|  0.00%|def new_class(name, bases=(), kwds=None, exec_body=None):
    70|         0|            0|            0|  0.00%|    """Create a class object dynamically using the appropriate metaclass."""
    71|         0|            0|            0|  0.00%|    resolved_bases = resolve_bases(bases)
    72|         0|            0|            0|  0.00%|    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)
    73|         0|            0|            0|  0.00%|    if exec_body is not None:
    74|         0|            0|            0|  0.00%|        exec_body(ns)
    75|         0|            0|            0|  0.00%|    if resolved_bases is not bases:
    76|         0|            0|            0|  0.00%|        ns['__orig_bases__'] = bases
    77|         0|            0|            0|  0.00%|    return meta(name, resolved_bases, ns, **kwds)
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|def resolve_bases(bases):
    80|         0|            0|            0|  0.00%|    """Resolve MRO entries dynamically as specified by PEP 560."""
    81|         0|            0|            0|  0.00%|    new_bases = list(bases)
    82|         0|            0|            0|  0.00%|    updated = False
    83|         0|            0|            0|  0.00%|    shift = 0
    84|         0|            0|            0|  0.00%|    for i, base in enumerate(bases):
    85|         0|            0|            0|  0.00%|        if isinstance(base, type) and not isinstance(base, GenericAlias):
    86|         0|            0|            0|  0.00%|            continue
    87|         0|            0|            0|  0.00%|        if not hasattr(base, "__mro_entries__"):
    88|         0|            0|            0|  0.00%|            continue
    89|         0|            0|            0|  0.00%|        new_base = base.__mro_entries__(bases)
    90|         0|            0|            0|  0.00%|        updated = True
    91|         0|            0|            0|  0.00%|        if not isinstance(new_base, tuple):
    92|         0|            0|            0|  0.00%|            raise TypeError("__mro_entries__ must return a tuple")
    93|         0|            0|            0|  0.00%|        else:
    94|         0|            0|            0|  0.00%|            new_bases[i+shift:i+shift+1] = new_base
    95|         0|            0|            0|  0.00%|            shift += len(new_base) - 1
    96|         0|            0|            0|  0.00%|    if not updated:
    97|         0|            0|            0|  0.00%|        return bases
    98|         0|            0|            0|  0.00%|    return tuple(new_bases)
    99|         0|            0|            0|  0.00%|
   100|         0|            0|            0|  0.00%|def prepare_class(name, bases=(), kwds=None):
   101|         0|            0|            0|  0.00%|    """Call the __prepare__ method of the appropriate metaclass.
   102|         0|            0|            0|  0.00%|
   103|         0|            0|            0|  0.00%|    Returns (metaclass, namespace, kwds) as a 3-tuple
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|    *metaclass* is the appropriate metaclass
   106|         0|            0|            0|  0.00%|    *namespace* is the prepared class namespace
   107|         0|            0|            0|  0.00%|    *kwds* is an updated copy of the passed in kwds argument with any
   108|         0|            0|            0|  0.00%|    'metaclass' entry removed. If no kwds argument is passed in, this will
   109|         0|            0|            0|  0.00%|    be an empty dict.
   110|         0|            0|            0|  0.00%|    """
   111|         0|            0|            0|  0.00%|    if kwds is None:
   112|         0|            0|            0|  0.00%|        kwds = {}
   113|         0|            0|            0|  0.00%|    else:
   114|         0|            0|            0|  0.00%|        kwds = dict(kwds) # Don't alter the provided mapping
   115|         0|            0|            0|  0.00%|    if 'metaclass' in kwds:
   116|         0|            0|            0|  0.00%|        meta = kwds.pop('metaclass')
   117|         0|            0|            0|  0.00%|    else:
   118|         0|            0|            0|  0.00%|        if bases:
   119|         0|            0|            0|  0.00%|            meta = type(bases[0])
   120|         0|            0|            0|  0.00%|        else:
   121|         0|            0|            0|  0.00%|            meta = type
   122|         0|            0|            0|  0.00%|    if isinstance(meta, type):
   123|         0|            0|            0|  0.00%|        # when meta is a type, we first determine the most-derived metaclass
   124|         0|            0|            0|  0.00%|        # instead of invoking the initial candidate directly
   125|         0|            0|            0|  0.00%|        meta = _calculate_meta(meta, bases)
   126|         0|            0|            0|  0.00%|    if hasattr(meta, '__prepare__'):
   127|         0|            0|            0|  0.00%|        ns = meta.__prepare__(name, bases, **kwds)
   128|         0|            0|            0|  0.00%|    else:
   129|         0|            0|            0|  0.00%|        ns = {}
   130|         0|            0|            0|  0.00%|    return meta, ns, kwds
   131|         0|            0|            0|  0.00%|
   132|         0|            0|            0|  0.00%|def _calculate_meta(meta, bases):
   133|         0|            0|            0|  0.00%|    """Calculate the most derived metaclass."""
   134|         0|            0|            0|  0.00%|    winner = meta
   135|         0|            0|            0|  0.00%|    for base in bases:
   136|         0|            0|            0|  0.00%|        base_meta = type(base)
   137|         0|            0|            0|  0.00%|        if issubclass(winner, base_meta):
   138|         0|            0|            0|  0.00%|            continue
   139|         0|            0|            0|  0.00%|        if issubclass(base_meta, winner):
   140|         0|            0|            0|  0.00%|            winner = base_meta
   141|         0|            0|            0|  0.00%|            continue
   142|         0|            0|            0|  0.00%|        # else:
   143|         0|            0|            0|  0.00%|        raise TypeError("metaclass conflict: "
   144|         0|            0|            0|  0.00%|                        "the metaclass of a derived class "
   145|         0|            0|            0|  0.00%|                        "must be a (non-strict) subclass "
   146|         0|            0|            0|  0.00%|                        "of the metaclasses of all its bases")
   147|         0|            0|            0|  0.00%|    return winner
   148|         0|            0|            0|  0.00%|
   149|         0|            0|            0|  0.00%|class DynamicClassAttribute:
   150|         0|            0|            0|  0.00%|    """Route attribute access on a class to __getattr__.
   151|         0|            0|            0|  0.00%|
   152|         0|            0|            0|  0.00%|    This is a descriptor, used to define attributes that act differently when
   153|         0|            0|            0|  0.00%|    accessed through an instance and through a class.  Instance access remains
   154|         0|            0|            0|  0.00%|    normal, but access to an attribute through a class will be routed to the
   155|         0|            0|            0|  0.00%|    class's __getattr__ method; this is done by raising AttributeError.
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|    This allows one to have properties active on an instance, and have virtual
   158|         0|            0|            0|  0.00%|    attributes on the class with the same name.  (Enum used this between Python
   159|         0|            0|            0|  0.00%|    versions 3.4 - 3.9 .)
   160|         0|            0|            0|  0.00%|
   161|         0|            0|            0|  0.00%|    Subclass from this to use a different method of accessing virtual atributes
   162|         0|            0|            0|  0.00%|    and still be treated properly by the inspect module. (Enum uses this since
   163|         0|            0|            0|  0.00%|    Python 3.10 .)
   164|         0|            0|            0|  0.00%|
   165|         0|            0|            0|  0.00%|    """
   166|         0|            0|            0|  0.00%|    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
   167|         0|            0|            0|  0.00%|        self.fget = fget
   168|         0|            0|            0|  0.00%|        self.fset = fset
   169|         0|            0|            0|  0.00%|        self.fdel = fdel
   170|         0|            0|            0|  0.00%|        # next two lines make DynamicClassAttribute act the same as property
   171|         0|            0|            0|  0.00%|        self.__doc__ = doc or fget.__doc__
   172|         0|            0|            0|  0.00%|        self.overwrite_doc = doc is None
   173|         0|            0|            0|  0.00%|        # support for abstract methods
   174|         0|            0|            0|  0.00%|        self.__isabstractmethod__ = bool(getattr(fget, '__isabstractmethod__', False))
   175|         0|            0|            0|  0.00%|
   176|         3|  1.00136e-05|  3.33786e-06|  0.00%|    def __get__(self, instance, ownerclass=None):
   177|         3|  1.43051e-05|  4.76837e-06|  0.01%|        if instance is None:
   178|         0|            0|            0|  0.00%|            if self.__isabstractmethod__:
   179|         0|            0|            0|  0.00%|                return self
   180|         0|            0|            0|  0.00%|            raise AttributeError()
   181|         3|  1.04904e-05|  3.49681e-06|  0.00%|        elif self.fget is None:
   182|         0|            0|            0|  0.00%|            raise AttributeError("unreadable attribute")
   183|         3|  2.76566e-05|  9.21885e-06|  0.01%|        return self.fget(instance)
(call)|         3|  1.88351e-05|  6.27836e-06|  0.01%|# /usr/lib/python3.10/enum.py:801 value
   184|         0|            0|            0|  0.00%|
   185|         0|            0|            0|  0.00%|    def __set__(self, instance, value):
   186|         0|            0|            0|  0.00%|        if self.fset is None:
   187|         0|            0|            0|  0.00%|            raise AttributeError("can't set attribute")
   188|         0|            0|            0|  0.00%|        self.fset(instance, value)
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|    def __delete__(self, instance):
   191|         0|            0|            0|  0.00%|        if self.fdel is None:
   192|         0|            0|            0|  0.00%|            raise AttributeError("can't delete attribute")
   193|         0|            0|            0|  0.00%|        self.fdel(instance)
   194|         0|            0|            0|  0.00%|
   195|         0|            0|            0|  0.00%|    def getter(self, fget):
   196|         0|            0|            0|  0.00%|        fdoc = fget.__doc__ if self.overwrite_doc else None
   197|         0|            0|            0|  0.00%|        result = type(self)(fget, self.fset, self.fdel, fdoc or self.__doc__)
   198|         0|            0|            0|  0.00%|        result.overwrite_doc = self.overwrite_doc
   199|         0|            0|            0|  0.00%|        return result
   200|         0|            0|            0|  0.00%|
   201|         0|            0|            0|  0.00%|    def setter(self, fset):
   202|         0|            0|            0|  0.00%|        result = type(self)(self.fget, fset, self.fdel, self.__doc__)
   203|         0|            0|            0|  0.00%|        result.overwrite_doc = self.overwrite_doc
   204|         0|            0|            0|  0.00%|        return result
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|    def deleter(self, fdel):
   207|         0|            0|            0|  0.00%|        result = type(self)(self.fget, self.fset, fdel, self.__doc__)
   208|         0|            0|            0|  0.00%|        result.overwrite_doc = self.overwrite_doc
   209|         0|            0|            0|  0.00%|        return result
   210|         0|            0|            0|  0.00%|
   211|         0|            0|            0|  0.00%|
   212|         0|            0|            0|  0.00%|class _GeneratorWrapper:
   213|         0|            0|            0|  0.00%|    # TODO: Implement this in C.
   214|         0|            0|            0|  0.00%|    def __init__(self, gen):
   215|         0|            0|            0|  0.00%|        self.__wrapped = gen
   216|         0|            0|            0|  0.00%|        self.__isgen = gen.__class__ is GeneratorType
   217|         0|            0|            0|  0.00%|        self.__name__ = getattr(gen, '__name__', None)
   218|         0|            0|            0|  0.00%|        self.__qualname__ = getattr(gen, '__qualname__', None)
   219|         0|            0|            0|  0.00%|    def send(self, val):
   220|         0|            0|            0|  0.00%|        return self.__wrapped.send(val)
   221|         0|            0|            0|  0.00%|    def throw(self, tp, *rest):
   222|         0|            0|            0|  0.00%|        return self.__wrapped.throw(tp, *rest)
   223|         0|            0|            0|  0.00%|    def close(self):
   224|         0|            0|            0|  0.00%|        return self.__wrapped.close()
   225|         0|            0|            0|  0.00%|    @property
   226|         0|            0|            0|  0.00%|    def gi_code(self):
   227|         0|            0|            0|  0.00%|        return self.__wrapped.gi_code
   228|         0|            0|            0|  0.00%|    @property
   229|         0|            0|            0|  0.00%|    def gi_frame(self):
   230|         0|            0|            0|  0.00%|        return self.__wrapped.gi_frame
   231|         0|            0|            0|  0.00%|    @property
   232|         0|            0|            0|  0.00%|    def gi_running(self):
   233|         0|            0|            0|  0.00%|        return self.__wrapped.gi_running
   234|         0|            0|            0|  0.00%|    @property
   235|         0|            0|            0|  0.00%|    def gi_yieldfrom(self):
   236|         0|            0|            0|  0.00%|        return self.__wrapped.gi_yieldfrom
   237|         0|            0|            0|  0.00%|    cr_code = gi_code
   238|         0|            0|            0|  0.00%|    cr_frame = gi_frame
   239|         0|            0|            0|  0.00%|    cr_running = gi_running
   240|         0|            0|            0|  0.00%|    cr_await = gi_yieldfrom
   241|         0|            0|            0|  0.00%|    def __next__(self):
   242|         0|            0|            0|  0.00%|        return next(self.__wrapped)
   243|         0|            0|            0|  0.00%|    def __iter__(self):
   244|         0|            0|            0|  0.00%|        if self.__isgen:
   245|         0|            0|            0|  0.00%|            return self.__wrapped
   246|         0|            0|            0|  0.00%|        return self
   247|         0|            0|            0|  0.00%|    __await__ = __iter__
   248|         0|            0|            0|  0.00%|
   249|         0|            0|            0|  0.00%|def coroutine(func):
   250|         0|            0|            0|  0.00%|    """Convert regular generator function to a coroutine."""
   251|         0|            0|            0|  0.00%|
   252|         0|            0|            0|  0.00%|    if not callable(func):
   253|         0|            0|            0|  0.00%|        raise TypeError('types.coroutine() expects a callable')
   254|         0|            0|            0|  0.00%|
   255|         0|            0|            0|  0.00%|    if (func.__class__ is FunctionType and
   256|         0|            0|            0|  0.00%|        getattr(func, '__code__', None).__class__ is CodeType):
   257|         0|            0|            0|  0.00%|
   258|         0|            0|            0|  0.00%|        co_flags = func.__code__.co_flags
   259|         0|            0|            0|  0.00%|
   260|         0|            0|            0|  0.00%|        # Check if 'func' is a coroutine function.
   261|         0|            0|            0|  0.00%|        # (0x180 == CO_COROUTINE | CO_ITERABLE_COROUTINE)
   262|         0|            0|            0|  0.00%|        if co_flags & 0x180:
   263|         0|            0|            0|  0.00%|            return func
   264|         0|            0|            0|  0.00%|
   265|         0|            0|            0|  0.00%|        # Check if 'func' is a generator function.
   266|         0|            0|            0|  0.00%|        # (0x20 == CO_GENERATOR)
   267|         0|            0|            0|  0.00%|        if co_flags & 0x20:
   268|         0|            0|            0|  0.00%|            # TODO: Implement this in C.
   269|         0|            0|            0|  0.00%|            co = func.__code__
   270|         0|            0|            0|  0.00%|            # 0x100 == CO_ITERABLE_COROUTINE
   271|         0|            0|            0|  0.00%|            func.__code__ = co.replace(co_flags=co.co_flags | 0x100)
   272|         0|            0|            0|  0.00%|            return func
   273|         0|            0|            0|  0.00%|
   274|         0|            0|            0|  0.00%|    # The following code is primarily to support functions that
   275|         0|            0|            0|  0.00%|    # return generator-like objects (for instance generators
   276|         0|            0|            0|  0.00%|    # compiled with Cython).
   277|         0|            0|            0|  0.00%|
   278|         0|            0|            0|  0.00%|    # Delay functools and _collections_abc import for speeding up types import.
   279|         0|            0|            0|  0.00%|    import functools
   280|         0|            0|            0|  0.00%|    import _collections_abc
   281|         0|            0|            0|  0.00%|    @functools.wraps(func)
   282|         0|            0|            0|  0.00%|    def wrapped(*args, **kwargs):
   283|         0|            0|            0|  0.00%|        coro = func(*args, **kwargs)
   284|         0|            0|            0|  0.00%|        if (coro.__class__ is CoroutineType or
   285|         0|            0|            0|  0.00%|            coro.__class__ is GeneratorType and coro.gi_code.co_flags & 0x100):
   286|         0|            0|            0|  0.00%|            # 'coro' is a native coroutine object or an iterable coroutine
   287|         0|            0|            0|  0.00%|            return coro
   288|         0|            0|            0|  0.00%|        if (isinstance(coro, _collections_abc.Generator) and
   289|         0|            0|            0|  0.00%|            not isinstance(coro, _collections_abc.Coroutine)):
   290|         0|            0|            0|  0.00%|            # 'coro' is either a pure Python generator iterator, or it
   291|         0|            0|            0|  0.00%|            # implements collections.abc.Generator (and does not implement
   292|         0|            0|            0|  0.00%|            # collections.abc.Coroutine).
   293|         0|            0|            0|  0.00%|            return _GeneratorWrapper(coro)
   294|         0|            0|            0|  0.00%|        # 'coro' is either an instance of collections.abc.Coroutine or
   295|         0|            0|            0|  0.00%|        # some other object -- pass it through.
   296|         0|            0|            0|  0.00%|        return coro
   297|         0|            0|            0|  0.00%|
   298|         0|            0|            0|  0.00%|    return wrapped
   299|         0|            0|            0|  0.00%|
   300|         0|            0|            0|  0.00%|GenericAlias = type(list[int])
   301|         0|            0|            0|  0.00%|UnionType = type(int | str)
   302|         0|            0|            0|  0.00%|
   303|         0|            0|            0|  0.00%|EllipsisType = type(Ellipsis)
   304|         0|            0|            0|  0.00%|NoneType = type(None)
   305|         0|            0|            0|  0.00%|NotImplementedType = type(NotImplemented)
   306|         0|            0|            0|  0.00%|
   307|         0|            0|            0|  0.00%|__all__ = [n for n in globals() if n[:1] != '_']
File: <frozen zipimport>
File duration: 6.17504e-05s (0.03%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|
    11|         0|            0|            0|  0.00%|
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|
    25|         0|            0|            0|  0.00%|
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|
    32|         0|            0|            0|  0.00%|
    33|         0|            0|            0|  0.00%|
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|
    38|         0|            0|            0|  0.00%|
    39|         0|            0|            0|  0.00%|
    40|         0|            0|            0|  0.00%|
    41|         0|            0|            0|  0.00%|
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|
    61|         0|            0|            0|  0.00%|
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|
    64|         1|  4.76837e-06|  4.76837e-06|  0.00%|
    65|         1|  8.58307e-06|  8.58307e-06|  0.00%|
    66|         0|            0|            0|  0.00%|
    67|         0|            0|            0|  0.00%|
    68|         1|  5.48363e-06|  5.48363e-06|  0.00%|
    69|         0|            0|            0|  0.00%|
    70|         1|  4.52995e-06|  4.52995e-06|  0.00%|
    71|         0|            0|            0|  0.00%|
    72|         0|            0|            0|  0.00%|
    73|         1|  4.76837e-06|  4.76837e-06|  0.00%|
    74|         1|  4.76837e-06|  4.76837e-06|  0.00%|
    75|         1|  4.29153e-06|  4.29153e-06|  0.00%|
    76|         1|  1.23978e-05|  1.23978e-05|  0.01%|
(call)|         1|  1.28746e-05|  1.28746e-05|  0.01%|# <frozen importlib._bootstrap_external>:140 _path_stat
    77|         0|            0|            0|  0.00%|
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|
    85|         0|            0|            0|  0.00%|
    86|         0|            0|            0|  0.00%|
    87|         1|  5.24521e-06|  5.24521e-06|  0.00%|
    88|         0|            0|            0|  0.00%|
    89|         1|  6.91414e-06|  6.91414e-06|  0.00%|
File: /usr/lib/python3.10/codecs.py
File duration: 5.31673e-05s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|""" codecs -- Python Codec Registry, API and helpers.
     2|         0|            0|            0|  0.00%|
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|Written by Marc-Andre Lemburg (mal@lemburg.com).
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.
     7|         0|            0|            0|  0.00%|
     8|         0|            0|            0|  0.00%|"""
     9|         0|            0|            0|  0.00%|
    10|         0|            0|            0|  0.00%|import builtins
    11|         0|            0|            0|  0.00%|import sys
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|### Registry and builtin stateless codec functions
    14|         0|            0|            0|  0.00%|
    15|         0|            0|            0|  0.00%|try:
    16|         0|            0|            0|  0.00%|    from _codecs import *
    17|         0|            0|            0|  0.00%|except ImportError as why:
    18|         0|            0|            0|  0.00%|    raise SystemError('Failed to load the builtin codecs: %s' % why)
    19|         0|            0|            0|  0.00%|
    20|         0|            0|            0|  0.00%|__all__ = ["register", "lookup", "open", "EncodedFile", "BOM", "BOM_BE",
    21|         0|            0|            0|  0.00%|           "BOM_LE", "BOM32_BE", "BOM32_LE", "BOM64_BE", "BOM64_LE",
    22|         0|            0|            0|  0.00%|           "BOM_UTF8", "BOM_UTF16", "BOM_UTF16_LE", "BOM_UTF16_BE",
    23|         0|            0|            0|  0.00%|           "BOM_UTF32", "BOM_UTF32_LE", "BOM_UTF32_BE",
    24|         0|            0|            0|  0.00%|           "CodecInfo", "Codec", "IncrementalEncoder", "IncrementalDecoder",
    25|         0|            0|            0|  0.00%|           "StreamReader", "StreamWriter",
    26|         0|            0|            0|  0.00%|           "StreamReaderWriter", "StreamRecoder",
    27|         0|            0|            0|  0.00%|           "getencoder", "getdecoder", "getincrementalencoder",
    28|         0|            0|            0|  0.00%|           "getincrementaldecoder", "getreader", "getwriter",
    29|         0|            0|            0|  0.00%|           "encode", "decode", "iterencode", "iterdecode",
    30|         0|            0|            0|  0.00%|           "strict_errors", "ignore_errors", "replace_errors",
    31|         0|            0|            0|  0.00%|           "xmlcharrefreplace_errors",
    32|         0|            0|            0|  0.00%|           "backslashreplace_errors", "namereplace_errors",
    33|         0|            0|            0|  0.00%|           "register_error", "lookup_error"]
    34|         0|            0|            0|  0.00%|
    35|         0|            0|            0|  0.00%|### Constants
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|#
    38|         0|            0|            0|  0.00%|# Byte Order Mark (BOM = ZERO WIDTH NO-BREAK SPACE = U+FEFF)
    39|         0|            0|            0|  0.00%|# and its possible byte string values
    40|         0|            0|            0|  0.00%|# for UTF8/UTF16/UTF32 output and little/big endian machines
    41|         0|            0|            0|  0.00%|#
    42|         0|            0|            0|  0.00%|
    43|         0|            0|            0|  0.00%|# UTF-8
    44|         0|            0|            0|  0.00%|BOM_UTF8 = b'\xef\xbb\xbf'
    45|         0|            0|            0|  0.00%|
    46|         0|            0|            0|  0.00%|# UTF-16, little endian
    47|         0|            0|            0|  0.00%|BOM_LE = BOM_UTF16_LE = b'\xff\xfe'
    48|         0|            0|            0|  0.00%|
    49|         0|            0|            0|  0.00%|# UTF-16, big endian
    50|         0|            0|            0|  0.00%|BOM_BE = BOM_UTF16_BE = b'\xfe\xff'
    51|         0|            0|            0|  0.00%|
    52|         0|            0|            0|  0.00%|# UTF-32, little endian
    53|         0|            0|            0|  0.00%|BOM_UTF32_LE = b'\xff\xfe\x00\x00'
    54|         0|            0|            0|  0.00%|
    55|         0|            0|            0|  0.00%|# UTF-32, big endian
    56|         0|            0|            0|  0.00%|BOM_UTF32_BE = b'\x00\x00\xfe\xff'
    57|         0|            0|            0|  0.00%|
    58|         0|            0|            0|  0.00%|if sys.byteorder == 'little':
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|    # UTF-16, native endianness
    61|         0|            0|            0|  0.00%|    BOM = BOM_UTF16 = BOM_UTF16_LE
    62|         0|            0|            0|  0.00%|
    63|         0|            0|            0|  0.00%|    # UTF-32, native endianness
    64|         0|            0|            0|  0.00%|    BOM_UTF32 = BOM_UTF32_LE
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|else:
    67|         0|            0|            0|  0.00%|
    68|         0|            0|            0|  0.00%|    # UTF-16, native endianness
    69|         0|            0|            0|  0.00%|    BOM = BOM_UTF16 = BOM_UTF16_BE
    70|         0|            0|            0|  0.00%|
    71|         0|            0|            0|  0.00%|    # UTF-32, native endianness
    72|         0|            0|            0|  0.00%|    BOM_UTF32 = BOM_UTF32_BE
    73|         0|            0|            0|  0.00%|
    74|         0|            0|            0|  0.00%|# Old broken names (don't use in new code)
    75|         0|            0|            0|  0.00%|BOM32_LE = BOM_UTF16_LE
    76|         0|            0|            0|  0.00%|BOM32_BE = BOM_UTF16_BE
    77|         0|            0|            0|  0.00%|BOM64_LE = BOM_UTF32_LE
    78|         0|            0|            0|  0.00%|BOM64_BE = BOM_UTF32_BE
    79|         0|            0|            0|  0.00%|
    80|         0|            0|            0|  0.00%|
    81|         0|            0|            0|  0.00%|### Codec base classes (defining the API)
    82|         0|            0|            0|  0.00%|
    83|         0|            0|            0|  0.00%|class CodecInfo(tuple):
    84|         0|            0|            0|  0.00%|    """Codec details when looking up the codec registry"""
    85|         0|            0|            0|  0.00%|
    86|         0|            0|            0|  0.00%|    # Private API to allow Python 3.4 to denylist the known non-Unicode
    87|         0|            0|            0|  0.00%|    # codecs in the standard library. A more general mechanism to
    88|         0|            0|            0|  0.00%|    # reliably distinguish test encodings from other codecs will hopefully
    89|         0|            0|            0|  0.00%|    # be defined for Python 3.5
    90|         0|            0|            0|  0.00%|    #
    91|         0|            0|            0|  0.00%|    # See http://bugs.python.org/issue19619
    92|         0|            0|            0|  0.00%|    _is_text_encoding = True # Assume codecs are text encodings by default
    93|         0|            0|            0|  0.00%|
    94|         1|  4.29153e-06|  4.29153e-06|  0.00%|    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,
    95|         0|            0|            0|  0.00%|        incrementalencoder=None, incrementaldecoder=None, name=None,
    96|         0|            0|            0|  0.00%|        *, _is_text_encoding=None):
    97|         1|  1.07288e-05|  1.07288e-05|  0.00%|        self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))
    98|         1|  4.52995e-06|  4.52995e-06|  0.00%|        self.name = name
    99|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.encode = encode
   100|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.decode = decode
   101|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.incrementalencoder = incrementalencoder
   102|         1|  7.62939e-06|  7.62939e-06|  0.00%|        self.incrementaldecoder = incrementaldecoder
   103|         1|  3.57628e-06|  3.57628e-06|  0.00%|        self.streamwriter = streamwriter
   104|         1|   3.8147e-06|   3.8147e-06|  0.00%|        self.streamreader = streamreader
   105|         1|   3.8147e-06|   3.8147e-06|  0.00%|        if _is_text_encoding is not None:
   106|         0|            0|            0|  0.00%|            self._is_text_encoding = _is_text_encoding
   107|         1|  3.33786e-06|  3.33786e-06|  0.00%|        return self
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|    def __repr__(self):
   110|         0|            0|            0|  0.00%|        return "<%s.%s object for encoding %s at %#x>" % \
   111|         0|            0|            0|  0.00%|                (self.__class__.__module__, self.__class__.__qualname__,
   112|         0|            0|            0|  0.00%|                 self.name, id(self))
   113|         0|            0|            0|  0.00%|
   114|         0|            0|            0|  0.00%|class Codec:
   115|         0|            0|            0|  0.00%|
   116|         0|            0|            0|  0.00%|    """ Defines the interface for stateless encoders/decoders.
   117|         0|            0|            0|  0.00%|
   118|         0|            0|            0|  0.00%|        The .encode()/.decode() methods may use different error
   119|         0|            0|            0|  0.00%|        handling schemes by providing the errors argument. These
   120|         0|            0|            0|  0.00%|        string values are predefined:
   121|         0|            0|            0|  0.00%|
   122|         0|            0|            0|  0.00%|         'strict' - raise a ValueError error (or a subclass)
   123|         0|            0|            0|  0.00%|         'ignore' - ignore the character and continue with the next
   124|         0|            0|            0|  0.00%|         'replace' - replace with a suitable replacement character;
   125|         0|            0|            0|  0.00%|                    Python will use the official U+FFFD REPLACEMENT
   126|         0|            0|            0|  0.00%|                    CHARACTER for the builtin Unicode codecs on
   127|         0|            0|            0|  0.00%|                    decoding and '?' on encoding.
   128|         0|            0|            0|  0.00%|         'surrogateescape' - replace with private code points U+DCnn.
   129|         0|            0|            0|  0.00%|         'xmlcharrefreplace' - Replace with the appropriate XML
   130|         0|            0|            0|  0.00%|                               character reference (only for encoding).
   131|         0|            0|            0|  0.00%|         'backslashreplace'  - Replace with backslashed escape sequences.
   132|         0|            0|            0|  0.00%|         'namereplace'       - Replace with \\N{...} escape sequences
   133|         0|            0|            0|  0.00%|                               (only for encoding).
   134|         0|            0|            0|  0.00%|
   135|         0|            0|            0|  0.00%|        The set of allowed values can be extended via register_error.
   136|         0|            0|            0|  0.00%|
   137|         0|            0|            0|  0.00%|    """
   138|         0|            0|            0|  0.00%|    def encode(self, input, errors='strict'):
   139|         0|            0|            0|  0.00%|
   140|         0|            0|            0|  0.00%|        """ Encodes the object input and returns a tuple (output
   141|         0|            0|            0|  0.00%|            object, length consumed).
   142|         0|            0|            0|  0.00%|
   143|         0|            0|            0|  0.00%|            errors defines the error handling to apply. It defaults to
   144|         0|            0|            0|  0.00%|            'strict' handling.
   145|         0|            0|            0|  0.00%|
   146|         0|            0|            0|  0.00%|            The method may not store state in the Codec instance. Use
   147|         0|            0|            0|  0.00%|            StreamWriter for codecs which have to keep state in order to
   148|         0|            0|            0|  0.00%|            make encoding efficient.
   149|         0|            0|            0|  0.00%|
   150|         0|            0|            0|  0.00%|            The encoder must be able to handle zero length input and
   151|         0|            0|            0|  0.00%|            return an empty object of the output object type in this
   152|         0|            0|            0|  0.00%|            situation.
   153|         0|            0|            0|  0.00%|
   154|         0|            0|            0|  0.00%|        """
   155|         0|            0|            0|  0.00%|        raise NotImplementedError
   156|         0|            0|            0|  0.00%|
   157|         0|            0|            0|  0.00%|    def decode(self, input, errors='strict'):
   158|         0|            0|            0|  0.00%|
   159|         0|            0|            0|  0.00%|        """ Decodes the object input and returns a tuple (output
   160|         0|            0|            0|  0.00%|            object, length consumed).
   161|         0|            0|            0|  0.00%|
   162|         0|            0|            0|  0.00%|            input must be an object which provides the bf_getreadbuf
   163|         0|            0|            0|  0.00%|            buffer slot. Python strings, buffer objects and memory
   164|         0|            0|            0|  0.00%|            mapped files are examples of objects providing this slot.
   165|         0|            0|            0|  0.00%|
   166|         0|            0|            0|  0.00%|            errors defines the error handling to apply. It defaults to
   167|         0|            0|            0|  0.00%|            'strict' handling.
   168|         0|            0|            0|  0.00%|
   169|         0|            0|            0|  0.00%|            The method may not store state in the Codec instance. Use
   170|         0|            0|            0|  0.00%|            StreamReader for codecs which have to keep state in order to
   171|         0|            0|            0|  0.00%|            make decoding efficient.
   172|         0|            0|            0|  0.00%|
   173|         0|            0|            0|  0.00%|            The decoder must be able to handle zero length input and
   174|         0|            0|            0|  0.00%|            return an empty object of the output object type in this
   175|         0|            0|            0|  0.00%|            situation.
   176|         0|            0|            0|  0.00%|
   177|         0|            0|            0|  0.00%|        """
   178|         0|            0|            0|  0.00%|        raise NotImplementedError
   179|         0|            0|            0|  0.00%|
   180|         0|            0|            0|  0.00%|class IncrementalEncoder(object):
   181|         0|            0|            0|  0.00%|    """
   182|         0|            0|            0|  0.00%|    An IncrementalEncoder encodes an input in multiple steps. The input can
   183|         0|            0|            0|  0.00%|    be passed piece by piece to the encode() method. The IncrementalEncoder
   184|         0|            0|            0|  0.00%|    remembers the state of the encoding process between calls to encode().
   185|         0|            0|            0|  0.00%|    """
   186|         0|            0|            0|  0.00%|    def __init__(self, errors='strict'):
   187|         0|            0|            0|  0.00%|        """
   188|         0|            0|            0|  0.00%|        Creates an IncrementalEncoder instance.
   189|         0|            0|            0|  0.00%|
   190|         0|            0|            0|  0.00%|        The IncrementalEncoder may use different error handling schemes by
   191|         0|            0|            0|  0.00%|        providing the errors keyword argument. See the module docstring
   192|         0|            0|            0|  0.00%|        for a list of possible values.
   193|         0|            0|            0|  0.00%|        """
   194|         0|            0|            0|  0.00%|        self.errors = errors
   195|         0|            0|            0|  0.00%|        self.buffer = ""
   196|         0|            0|            0|  0.00%|
   197|         0|            0|            0|  0.00%|    def encode(self, input, final=False):
   198|         0|            0|            0|  0.00%|        """
   199|         0|            0|            0|  0.00%|        Encodes input and returns the resulting object.
   200|         0|            0|            0|  0.00%|        """
   201|         0|            0|            0|  0.00%|        raise NotImplementedError
   202|         0|            0|            0|  0.00%|
   203|         0|            0|            0|  0.00%|    def reset(self):
   204|         0|            0|            0|  0.00%|        """
   205|         0|            0|            0|  0.00%|        Resets the encoder to the initial state.
   206|         0|            0|            0|  0.00%|        """
   207|         0|            0|            0|  0.00%|
   208|         0|            0|            0|  0.00%|    def getstate(self):
   209|         0|            0|            0|  0.00%|        """
   210|         0|            0|            0|  0.00%|        Return the current state of the encoder.
   211|         0|            0|            0|  0.00%|        """
   212|         0|            0|            0|  0.00%|        return 0
   213|         0|            0|            0|  0.00%|
   214|         0|            0|            0|  0.00%|    def setstate(self, state):
   215|         0|            0|            0|  0.00%|        """
   216|         0|            0|            0|  0.00%|        Set the current state of the encoder. state must have been
   217|         0|            0|            0|  0.00%|        returned by getstate().
   218|         0|            0|            0|  0.00%|        """
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|class BufferedIncrementalEncoder(IncrementalEncoder):
   221|         0|            0|            0|  0.00%|    """
   222|         0|            0|            0|  0.00%|    This subclass of IncrementalEncoder can be used as the baseclass for an
   223|         0|            0|            0|  0.00%|    incremental encoder if the encoder must keep some of the output in a
   224|         0|            0|            0|  0.00%|    buffer between calls to encode().
   225|         0|            0|            0|  0.00%|    """
   226|         0|            0|            0|  0.00%|    def __init__(self, errors='strict'):
   227|         0|            0|            0|  0.00%|        IncrementalEncoder.__init__(self, errors)
   228|         0|            0|            0|  0.00%|        # unencoded input that is kept between calls to encode()
   229|         0|            0|            0|  0.00%|        self.buffer = ""
   230|         0|            0|            0|  0.00%|
   231|         0|            0|            0|  0.00%|    def _buffer_encode(self, input, errors, final):
   232|         0|            0|            0|  0.00%|        # Overwrite this method in subclasses: It must encode input
   233|         0|            0|            0|  0.00%|        # and return an (output, length consumed) tuple
   234|         0|            0|            0|  0.00%|        raise NotImplementedError
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|    def encode(self, input, final=False):
   237|         0|            0|            0|  0.00%|        # encode input (taking the buffer into account)
   238|         0|            0|            0|  0.00%|        data = self.buffer + input
   239|         0|            0|            0|  0.00%|        (result, consumed) = self._buffer_encode(data, self.errors, final)
   240|         0|            0|            0|  0.00%|        # keep unencoded input until the next call
   241|         0|            0|            0|  0.00%|        self.buffer = data[consumed:]
   242|         0|            0|            0|  0.00%|        return result
   243|         0|            0|            0|  0.00%|
   244|         0|            0|            0|  0.00%|    def reset(self):
   245|         0|            0|            0|  0.00%|        IncrementalEncoder.reset(self)
   246|         0|            0|            0|  0.00%|        self.buffer = ""
   247|         0|            0|            0|  0.00%|
   248|         0|            0|            0|  0.00%|    def getstate(self):
   249|         0|            0|            0|  0.00%|        return self.buffer or 0
   250|         0|            0|            0|  0.00%|
   251|         0|            0|            0|  0.00%|    def setstate(self, state):
   252|         0|            0|            0|  0.00%|        self.buffer = state or ""
   253|         0|            0|            0|  0.00%|
   254|         0|            0|            0|  0.00%|class IncrementalDecoder(object):
   255|         0|            0|            0|  0.00%|    """
   256|         0|            0|            0|  0.00%|    An IncrementalDecoder decodes an input in multiple steps. The input can
   257|         0|            0|            0|  0.00%|    be passed piece by piece to the decode() method. The IncrementalDecoder
   258|         0|            0|            0|  0.00%|    remembers the state of the decoding process between calls to decode().
   259|         0|            0|            0|  0.00%|    """
   260|         0|            0|            0|  0.00%|    def __init__(self, errors='strict'):
   261|         0|            0|            0|  0.00%|        """
   262|         0|            0|            0|  0.00%|        Create an IncrementalDecoder instance.
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|        The IncrementalDecoder may use different error handling schemes by
   265|         0|            0|            0|  0.00%|        providing the errors keyword argument. See the module docstring
   266|         0|            0|            0|  0.00%|        for a list of possible values.
   267|         0|            0|            0|  0.00%|        """
   268|         0|            0|            0|  0.00%|        self.errors = errors
   269|         0|            0|            0|  0.00%|
   270|         0|            0|            0|  0.00%|    def decode(self, input, final=False):
   271|         0|            0|            0|  0.00%|        """
   272|         0|            0|            0|  0.00%|        Decode input and returns the resulting object.
   273|         0|            0|            0|  0.00%|        """
   274|         0|            0|            0|  0.00%|        raise NotImplementedError
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|    def reset(self):
   277|         0|            0|            0|  0.00%|        """
   278|         0|            0|            0|  0.00%|        Reset the decoder to the initial state.
   279|         0|            0|            0|  0.00%|        """
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|    def getstate(self):
   282|         0|            0|            0|  0.00%|        """
   283|         0|            0|            0|  0.00%|        Return the current state of the decoder.
   284|         0|            0|            0|  0.00%|
   285|         0|            0|            0|  0.00%|        This must be a (buffered_input, additional_state_info) tuple.
   286|         0|            0|            0|  0.00%|        buffered_input must be a bytes object containing bytes that
   287|         0|            0|            0|  0.00%|        were passed to decode() that have not yet been converted.
   288|         0|            0|            0|  0.00%|        additional_state_info must be a non-negative integer
   289|         0|            0|            0|  0.00%|        representing the state of the decoder WITHOUT yet having
   290|         0|            0|            0|  0.00%|        processed the contents of buffered_input.  In the initial state
   291|         0|            0|            0|  0.00%|        and after reset(), getstate() must return (b"", 0).
   292|         0|            0|            0|  0.00%|        """
   293|         0|            0|            0|  0.00%|        return (b"", 0)
   294|         0|            0|            0|  0.00%|
   295|         0|            0|            0|  0.00%|    def setstate(self, state):
   296|         0|            0|            0|  0.00%|        """
   297|         0|            0|            0|  0.00%|        Set the current state of the decoder.
   298|         0|            0|            0|  0.00%|
   299|         0|            0|            0|  0.00%|        state must have been returned by getstate().  The effect of
   300|         0|            0|            0|  0.00%|        setstate((b"", 0)) must be equivalent to reset().
   301|         0|            0|            0|  0.00%|        """
   302|         0|            0|            0|  0.00%|
   303|         0|            0|            0|  0.00%|class BufferedIncrementalDecoder(IncrementalDecoder):
   304|         0|            0|            0|  0.00%|    """
   305|         0|            0|            0|  0.00%|    This subclass of IncrementalDecoder can be used as the baseclass for an
   306|         0|            0|            0|  0.00%|    incremental decoder if the decoder must be able to handle incomplete
   307|         0|            0|            0|  0.00%|    byte sequences.
   308|         0|            0|            0|  0.00%|    """
   309|         0|            0|            0|  0.00%|    def __init__(self, errors='strict'):
   310|         0|            0|            0|  0.00%|        IncrementalDecoder.__init__(self, errors)
   311|         0|            0|            0|  0.00%|        # undecoded input that is kept between calls to decode()
   312|         0|            0|            0|  0.00%|        self.buffer = b""
   313|         0|            0|            0|  0.00%|
   314|         0|            0|            0|  0.00%|    def _buffer_decode(self, input, errors, final):
   315|         0|            0|            0|  0.00%|        # Overwrite this method in subclasses: It must decode input
   316|         0|            0|            0|  0.00%|        # and return an (output, length consumed) tuple
   317|         0|            0|            0|  0.00%|        raise NotImplementedError
   318|         0|            0|            0|  0.00%|
   319|         0|            0|            0|  0.00%|    def decode(self, input, final=False):
   320|         0|            0|            0|  0.00%|        # decode input (taking the buffer into account)
   321|         0|            0|            0|  0.00%|        data = self.buffer + input
   322|         0|            0|            0|  0.00%|        (result, consumed) = self._buffer_decode(data, self.errors, final)
   323|         0|            0|            0|  0.00%|        # keep undecoded input until the next call
   324|         0|            0|            0|  0.00%|        self.buffer = data[consumed:]
   325|         0|            0|            0|  0.00%|        return result
   326|         0|            0|            0|  0.00%|
   327|         0|            0|            0|  0.00%|    def reset(self):
   328|         0|            0|            0|  0.00%|        IncrementalDecoder.reset(self)
   329|         0|            0|            0|  0.00%|        self.buffer = b""
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|    def getstate(self):
   332|         0|            0|            0|  0.00%|        # additional state info is always 0
   333|         0|            0|            0|  0.00%|        return (self.buffer, 0)
   334|         0|            0|            0|  0.00%|
   335|         0|            0|            0|  0.00%|    def setstate(self, state):
   336|         0|            0|            0|  0.00%|        # ignore additional state info
   337|         0|            0|            0|  0.00%|        self.buffer = state[0]
   338|         0|            0|            0|  0.00%|
   339|         0|            0|            0|  0.00%|#
   340|         0|            0|            0|  0.00%|# The StreamWriter and StreamReader class provide generic working
   341|         0|            0|            0|  0.00%|# interfaces which can be used to implement new encoding submodules
   342|         0|            0|            0|  0.00%|# very easily. See encodings/utf_8.py for an example on how this is
   343|         0|            0|            0|  0.00%|# done.
   344|         0|            0|            0|  0.00%|#
   345|         0|            0|            0|  0.00%|
   346|         0|            0|            0|  0.00%|class StreamWriter(Codec):
   347|         0|            0|            0|  0.00%|
   348|         0|            0|            0|  0.00%|    def __init__(self, stream, errors='strict'):
   349|         0|            0|            0|  0.00%|
   350|         0|            0|            0|  0.00%|        """ Creates a StreamWriter instance.
   351|         0|            0|            0|  0.00%|
   352|         0|            0|            0|  0.00%|            stream must be a file-like object open for writing.
   353|         0|            0|            0|  0.00%|
   354|         0|            0|            0|  0.00%|            The StreamWriter may use different error handling
   355|         0|            0|            0|  0.00%|            schemes by providing the errors keyword argument. These
   356|         0|            0|            0|  0.00%|            parameters are predefined:
   357|         0|            0|            0|  0.00%|
   358|         0|            0|            0|  0.00%|             'strict' - raise a ValueError (or a subclass)
   359|         0|            0|            0|  0.00%|             'ignore' - ignore the character and continue with the next
   360|         0|            0|            0|  0.00%|             'replace'- replace with a suitable replacement character
   361|         0|            0|            0|  0.00%|             'xmlcharrefreplace' - Replace with the appropriate XML
   362|         0|            0|            0|  0.00%|                                   character reference.
   363|         0|            0|            0|  0.00%|             'backslashreplace'  - Replace with backslashed escape
   364|         0|            0|            0|  0.00%|                                   sequences.
   365|         0|            0|            0|  0.00%|             'namereplace'       - Replace with \\N{...} escape sequences.
   366|         0|            0|            0|  0.00%|
   367|         0|            0|            0|  0.00%|            The set of allowed parameter values can be extended via
   368|         0|            0|            0|  0.00%|            register_error.
   369|         0|            0|            0|  0.00%|        """
   370|         0|            0|            0|  0.00%|        self.stream = stream
   371|         0|            0|            0|  0.00%|        self.errors = errors
   372|         0|            0|            0|  0.00%|
   373|         0|            0|            0|  0.00%|    def write(self, object):
   374|         0|            0|            0|  0.00%|
   375|         0|            0|            0|  0.00%|        """ Writes the object's contents encoded to self.stream.
   376|         0|            0|            0|  0.00%|        """
   377|         0|            0|            0|  0.00%|        data, consumed = self.encode(object, self.errors)
   378|         0|            0|            0|  0.00%|        self.stream.write(data)
   379|         0|            0|            0|  0.00%|
   380|         0|            0|            0|  0.00%|    def writelines(self, list):
   381|         0|            0|            0|  0.00%|
   382|         0|            0|            0|  0.00%|        """ Writes the concatenated list of strings to the stream
   383|         0|            0|            0|  0.00%|            using .write().
   384|         0|            0|            0|  0.00%|        """
   385|         0|            0|            0|  0.00%|        self.write(''.join(list))
   386|         0|            0|            0|  0.00%|
   387|         0|            0|            0|  0.00%|    def reset(self):
   388|         0|            0|            0|  0.00%|
   389|         0|            0|            0|  0.00%|        """ Resets the codec buffers used for keeping internal state.
   390|         0|            0|            0|  0.00%|
   391|         0|            0|            0|  0.00%|            Calling this method should ensure that the data on the
   392|         0|            0|            0|  0.00%|            output is put into a clean state, that allows appending
   393|         0|            0|            0|  0.00%|            of new fresh data without having to rescan the whole
   394|         0|            0|            0|  0.00%|            stream to recover state.
   395|         0|            0|            0|  0.00%|
   396|         0|            0|            0|  0.00%|        """
   397|         0|            0|            0|  0.00%|        pass
   398|         0|            0|            0|  0.00%|
   399|         0|            0|            0|  0.00%|    def seek(self, offset, whence=0):
   400|         0|            0|            0|  0.00%|        self.stream.seek(offset, whence)
   401|         0|            0|            0|  0.00%|        if whence == 0 and offset == 0:
   402|         0|            0|            0|  0.00%|            self.reset()
   403|         0|            0|            0|  0.00%|
   404|         0|            0|            0|  0.00%|    def __getattr__(self, name,
   405|         0|            0|            0|  0.00%|                    getattr=getattr):
   406|         0|            0|            0|  0.00%|
   407|         0|            0|            0|  0.00%|        """ Inherit all other methods from the underlying stream.
   408|         0|            0|            0|  0.00%|        """
   409|         0|            0|            0|  0.00%|        return getattr(self.stream, name)
   410|         0|            0|            0|  0.00%|
   411|         0|            0|            0|  0.00%|    def __enter__(self):
   412|         0|            0|            0|  0.00%|        return self
   413|         0|            0|            0|  0.00%|
   414|         0|            0|            0|  0.00%|    def __exit__(self, type, value, tb):
   415|         0|            0|            0|  0.00%|        self.stream.close()
   416|         0|            0|            0|  0.00%|
   417|         0|            0|            0|  0.00%|###
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|class StreamReader(Codec):
   420|         0|            0|            0|  0.00%|
   421|         0|            0|            0|  0.00%|    charbuffertype = str
   422|         0|            0|            0|  0.00%|
   423|         0|            0|            0|  0.00%|    def __init__(self, stream, errors='strict'):
   424|         0|            0|            0|  0.00%|
   425|         0|            0|            0|  0.00%|        """ Creates a StreamReader instance.
   426|         0|            0|            0|  0.00%|
   427|         0|            0|            0|  0.00%|            stream must be a file-like object open for reading.
   428|         0|            0|            0|  0.00%|
   429|         0|            0|            0|  0.00%|            The StreamReader may use different error handling
   430|         0|            0|            0|  0.00%|            schemes by providing the errors keyword argument. These
   431|         0|            0|            0|  0.00%|            parameters are predefined:
   432|         0|            0|            0|  0.00%|
   433|         0|            0|            0|  0.00%|             'strict' - raise a ValueError (or a subclass)
   434|         0|            0|            0|  0.00%|             'ignore' - ignore the character and continue with the next
   435|         0|            0|            0|  0.00%|             'replace'- replace with a suitable replacement character
   436|         0|            0|            0|  0.00%|             'backslashreplace' - Replace with backslashed escape sequences;
   437|         0|            0|            0|  0.00%|
   438|         0|            0|            0|  0.00%|            The set of allowed parameter values can be extended via
   439|         0|            0|            0|  0.00%|            register_error.
   440|         0|            0|            0|  0.00%|        """
   441|         0|            0|            0|  0.00%|        self.stream = stream
   442|         0|            0|            0|  0.00%|        self.errors = errors
   443|         0|            0|            0|  0.00%|        self.bytebuffer = b""
   444|         0|            0|            0|  0.00%|        self._empty_charbuffer = self.charbuffertype()
   445|         0|            0|            0|  0.00%|        self.charbuffer = self._empty_charbuffer
   446|         0|            0|            0|  0.00%|        self.linebuffer = None
   447|         0|            0|            0|  0.00%|
   448|         0|            0|            0|  0.00%|    def decode(self, input, errors='strict'):
   449|         0|            0|            0|  0.00%|        raise NotImplementedError
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|    def read(self, size=-1, chars=-1, firstline=False):
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|        """ Decodes data from the stream self.stream and returns the
   454|         0|            0|            0|  0.00%|            resulting object.
   455|         0|            0|            0|  0.00%|
   456|         0|            0|            0|  0.00%|            chars indicates the number of decoded code points or bytes to
   457|         0|            0|            0|  0.00%|            return. read() will never return more data than requested,
   458|         0|            0|            0|  0.00%|            but it might return less, if there is not enough available.
   459|         0|            0|            0|  0.00%|
   460|         0|            0|            0|  0.00%|            size indicates the approximate maximum number of decoded
   461|         0|            0|            0|  0.00%|            bytes or code points to read for decoding. The decoder
   462|         0|            0|            0|  0.00%|            can modify this setting as appropriate. The default value
   463|         0|            0|            0|  0.00%|            -1 indicates to read and decode as much as possible.  size
   464|         0|            0|            0|  0.00%|            is intended to prevent having to decode huge files in one
   465|         0|            0|            0|  0.00%|            step.
   466|         0|            0|            0|  0.00%|
   467|         0|            0|            0|  0.00%|            If firstline is true, and a UnicodeDecodeError happens
   468|         0|            0|            0|  0.00%|            after the first line terminator in the input only the first line
   469|         0|            0|            0|  0.00%|            will be returned, the rest of the input will be kept until the
   470|         0|            0|            0|  0.00%|            next call to read().
   471|         0|            0|            0|  0.00%|
   472|         0|            0|            0|  0.00%|            The method should use a greedy read strategy, meaning that
   473|         0|            0|            0|  0.00%|            it should read as much data as is allowed within the
   474|         0|            0|            0|  0.00%|            definition of the encoding and the given size, e.g.  if
   475|         0|            0|            0|  0.00%|            optional encoding endings or state markers are available
   476|         0|            0|            0|  0.00%|            on the stream, these should be read too.
   477|         0|            0|            0|  0.00%|        """
   478|         0|            0|            0|  0.00%|        # If we have lines cached, first merge them back into characters
   479|         0|            0|            0|  0.00%|        if self.linebuffer:
   480|         0|            0|            0|  0.00%|            self.charbuffer = self._empty_charbuffer.join(self.linebuffer)
   481|         0|            0|            0|  0.00%|            self.linebuffer = None
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|        if chars < 0:
   484|         0|            0|            0|  0.00%|            # For compatibility with other read() methods that take a
   485|         0|            0|            0|  0.00%|            # single argument
   486|         0|            0|            0|  0.00%|            chars = size
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|        # read until we get the required number of characters (if available)
   489|         0|            0|            0|  0.00%|        while True:
   490|         0|            0|            0|  0.00%|            # can the request be satisfied from the character buffer?
   491|         0|            0|            0|  0.00%|            if chars >= 0:
   492|         0|            0|            0|  0.00%|                if len(self.charbuffer) >= chars:
   493|         0|            0|            0|  0.00%|                    break
   494|         0|            0|            0|  0.00%|            # we need more data
   495|         0|            0|            0|  0.00%|            if size < 0:
   496|         0|            0|            0|  0.00%|                newdata = self.stream.read()
   497|         0|            0|            0|  0.00%|            else:
   498|         0|            0|            0|  0.00%|                newdata = self.stream.read(size)
   499|         0|            0|            0|  0.00%|            # decode bytes (those remaining from the last call included)
   500|         0|            0|            0|  0.00%|            data = self.bytebuffer + newdata
   501|         0|            0|            0|  0.00%|            if not data:
   502|         0|            0|            0|  0.00%|                break
   503|         0|            0|            0|  0.00%|            try:
   504|         0|            0|            0|  0.00%|                newchars, decodedbytes = self.decode(data, self.errors)
   505|         0|            0|            0|  0.00%|            except UnicodeDecodeError as exc:
   506|         0|            0|            0|  0.00%|                if firstline:
   507|         0|            0|            0|  0.00%|                    newchars, decodedbytes = \
   508|         0|            0|            0|  0.00%|                        self.decode(data[:exc.start], self.errors)
   509|         0|            0|            0|  0.00%|                    lines = newchars.splitlines(keepends=True)
   510|         0|            0|            0|  0.00%|                    if len(lines)<=1:
   511|         0|            0|            0|  0.00%|                        raise
   512|         0|            0|            0|  0.00%|                else:
   513|         0|            0|            0|  0.00%|                    raise
   514|         0|            0|            0|  0.00%|            # keep undecoded bytes until the next call
   515|         0|            0|            0|  0.00%|            self.bytebuffer = data[decodedbytes:]
   516|         0|            0|            0|  0.00%|            # put new characters in the character buffer
   517|         0|            0|            0|  0.00%|            self.charbuffer += newchars
   518|         0|            0|            0|  0.00%|            # there was no data available
   519|         0|            0|            0|  0.00%|            if not newdata:
   520|         0|            0|            0|  0.00%|                break
   521|         0|            0|            0|  0.00%|        if chars < 0:
   522|         0|            0|            0|  0.00%|            # Return everything we've got
   523|         0|            0|            0|  0.00%|            result = self.charbuffer
   524|         0|            0|            0|  0.00%|            self.charbuffer = self._empty_charbuffer
   525|         0|            0|            0|  0.00%|        else:
   526|         0|            0|            0|  0.00%|            # Return the first chars characters
   527|         0|            0|            0|  0.00%|            result = self.charbuffer[:chars]
   528|         0|            0|            0|  0.00%|            self.charbuffer = self.charbuffer[chars:]
   529|         0|            0|            0|  0.00%|        return result
   530|         0|            0|            0|  0.00%|
   531|         0|            0|            0|  0.00%|    def readline(self, size=None, keepends=True):
   532|         0|            0|            0|  0.00%|
   533|         0|            0|            0|  0.00%|        """ Read one line from the input stream and return the
   534|         0|            0|            0|  0.00%|            decoded data.
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|            size, if given, is passed as size argument to the
   537|         0|            0|            0|  0.00%|            read() method.
   538|         0|            0|            0|  0.00%|
   539|         0|            0|            0|  0.00%|        """
   540|         0|            0|            0|  0.00%|        # If we have lines cached from an earlier read, return
   541|         0|            0|            0|  0.00%|        # them unconditionally
   542|         0|            0|            0|  0.00%|        if self.linebuffer:
   543|         0|            0|            0|  0.00%|            line = self.linebuffer[0]
   544|         0|            0|            0|  0.00%|            del self.linebuffer[0]
   545|         0|            0|            0|  0.00%|            if len(self.linebuffer) == 1:
   546|         0|            0|            0|  0.00%|                # revert to charbuffer mode; we might need more data
   547|         0|            0|            0|  0.00%|                # next time
   548|         0|            0|            0|  0.00%|                self.charbuffer = self.linebuffer[0]
   549|         0|            0|            0|  0.00%|                self.linebuffer = None
   550|         0|            0|            0|  0.00%|            if not keepends:
   551|         0|            0|            0|  0.00%|                line = line.splitlines(keepends=False)[0]
   552|         0|            0|            0|  0.00%|            return line
   553|         0|            0|            0|  0.00%|
   554|         0|            0|            0|  0.00%|        readsize = size or 72
   555|         0|            0|            0|  0.00%|        line = self._empty_charbuffer
   556|         0|            0|            0|  0.00%|        # If size is given, we call read() only once
   557|         0|            0|            0|  0.00%|        while True:
   558|         0|            0|            0|  0.00%|            data = self.read(readsize, firstline=True)
   559|         0|            0|            0|  0.00%|            if data:
   560|         0|            0|            0|  0.00%|                # If we're at a "\r" read one extra character (which might
   561|         0|            0|            0|  0.00%|                # be a "\n") to get a proper line ending. If the stream is
   562|         0|            0|            0|  0.00%|                # temporarily exhausted we return the wrong line ending.
   563|         0|            0|            0|  0.00%|                if (isinstance(data, str) and data.endswith("\r")) or \
   564|         0|            0|            0|  0.00%|                   (isinstance(data, bytes) and data.endswith(b"\r")):
   565|         0|            0|            0|  0.00%|                    data += self.read(size=1, chars=1)
   566|         0|            0|            0|  0.00%|
   567|         0|            0|            0|  0.00%|            line += data
   568|         0|            0|            0|  0.00%|            lines = line.splitlines(keepends=True)
   569|         0|            0|            0|  0.00%|            if lines:
   570|         0|            0|            0|  0.00%|                if len(lines) > 1:
   571|         0|            0|            0|  0.00%|                    # More than one line result; the first line is a full line
   572|         0|            0|            0|  0.00%|                    # to return
   573|         0|            0|            0|  0.00%|                    line = lines[0]
   574|         0|            0|            0|  0.00%|                    del lines[0]
   575|         0|            0|            0|  0.00%|                    if len(lines) > 1:
   576|         0|            0|            0|  0.00%|                        # cache the remaining lines
   577|         0|            0|            0|  0.00%|                        lines[-1] += self.charbuffer
   578|         0|            0|            0|  0.00%|                        self.linebuffer = lines
   579|         0|            0|            0|  0.00%|                        self.charbuffer = None
   580|         0|            0|            0|  0.00%|                    else:
   581|         0|            0|            0|  0.00%|                        # only one remaining line, put it back into charbuffer
   582|         0|            0|            0|  0.00%|                        self.charbuffer = lines[0] + self.charbuffer
   583|         0|            0|            0|  0.00%|                    if not keepends:
   584|         0|            0|            0|  0.00%|                        line = line.splitlines(keepends=False)[0]
   585|         0|            0|            0|  0.00%|                    break
   586|         0|            0|            0|  0.00%|                line0withend = lines[0]
   587|         0|            0|            0|  0.00%|                line0withoutend = lines[0].splitlines(keepends=False)[0]
   588|         0|            0|            0|  0.00%|                if line0withend != line0withoutend: # We really have a line end
   589|         0|            0|            0|  0.00%|                    # Put the rest back together and keep it until the next call
   590|         0|            0|            0|  0.00%|                    self.charbuffer = self._empty_charbuffer.join(lines[1:]) + \
   591|         0|            0|            0|  0.00%|                                      self.charbuffer
   592|         0|            0|            0|  0.00%|                    if keepends:
   593|         0|            0|            0|  0.00%|                        line = line0withend
   594|         0|            0|            0|  0.00%|                    else:
   595|         0|            0|            0|  0.00%|                        line = line0withoutend
   596|         0|            0|            0|  0.00%|                    break
   597|         0|            0|            0|  0.00%|            # we didn't get anything or this was our only try
   598|         0|            0|            0|  0.00%|            if not data or size is not None:
   599|         0|            0|            0|  0.00%|                if line and not keepends:
   600|         0|            0|            0|  0.00%|                    line = line.splitlines(keepends=False)[0]
   601|         0|            0|            0|  0.00%|                break
   602|         0|            0|            0|  0.00%|            if readsize < 8000:
   603|         0|            0|            0|  0.00%|                readsize *= 2
   604|         0|            0|            0|  0.00%|        return line
   605|         0|            0|            0|  0.00%|
   606|         0|            0|            0|  0.00%|    def readlines(self, sizehint=None, keepends=True):
   607|         0|            0|            0|  0.00%|
   608|         0|            0|            0|  0.00%|        """ Read all lines available on the input stream
   609|         0|            0|            0|  0.00%|            and return them as a list.
   610|         0|            0|            0|  0.00%|
   611|         0|            0|            0|  0.00%|            Line breaks are implemented using the codec's decoder
   612|         0|            0|            0|  0.00%|            method and are included in the list entries.
   613|         0|            0|            0|  0.00%|
   614|         0|            0|            0|  0.00%|            sizehint, if given, is ignored since there is no efficient
   615|         0|            0|            0|  0.00%|            way to finding the true end-of-line.
   616|         0|            0|            0|  0.00%|
   617|         0|            0|            0|  0.00%|        """
   618|         0|            0|            0|  0.00%|        data = self.read()
   619|         0|            0|            0|  0.00%|        return data.splitlines(keepends)
   620|         0|            0|            0|  0.00%|
   621|         0|            0|            0|  0.00%|    def reset(self):
   622|         0|            0|            0|  0.00%|
   623|         0|            0|            0|  0.00%|        """ Resets the codec buffers used for keeping internal state.
   624|         0|            0|            0|  0.00%|
   625|         0|            0|            0|  0.00%|            Note that no stream repositioning should take place.
   626|         0|            0|            0|  0.00%|            This method is primarily intended to be able to recover
   627|         0|            0|            0|  0.00%|            from decoding errors.
   628|         0|            0|            0|  0.00%|
   629|         0|            0|            0|  0.00%|        """
   630|         0|            0|            0|  0.00%|        self.bytebuffer = b""
   631|         0|            0|            0|  0.00%|        self.charbuffer = self._empty_charbuffer
   632|         0|            0|            0|  0.00%|        self.linebuffer = None
   633|         0|            0|            0|  0.00%|
   634|         0|            0|            0|  0.00%|    def seek(self, offset, whence=0):
   635|         0|            0|            0|  0.00%|        """ Set the input stream's current position.
   636|         0|            0|            0|  0.00%|
   637|         0|            0|            0|  0.00%|            Resets the codec buffers used for keeping state.
   638|         0|            0|            0|  0.00%|        """
   639|         0|            0|            0|  0.00%|        self.stream.seek(offset, whence)
   640|         0|            0|            0|  0.00%|        self.reset()
   641|         0|            0|            0|  0.00%|
   642|         0|            0|            0|  0.00%|    def __next__(self):
   643|         0|            0|            0|  0.00%|
   644|         0|            0|            0|  0.00%|        """ Return the next decoded line from the input stream."""
   645|         0|            0|            0|  0.00%|        line = self.readline()
   646|         0|            0|            0|  0.00%|        if line:
   647|         0|            0|            0|  0.00%|            return line
   648|         0|            0|            0|  0.00%|        raise StopIteration
   649|         0|            0|            0|  0.00%|
   650|         0|            0|            0|  0.00%|    def __iter__(self):
   651|         0|            0|            0|  0.00%|        return self
   652|         0|            0|            0|  0.00%|
   653|         0|            0|            0|  0.00%|    def __getattr__(self, name,
   654|         0|            0|            0|  0.00%|                    getattr=getattr):
   655|         0|            0|            0|  0.00%|
   656|         0|            0|            0|  0.00%|        """ Inherit all other methods from the underlying stream.
   657|         0|            0|            0|  0.00%|        """
   658|         0|            0|            0|  0.00%|        return getattr(self.stream, name)
   659|         0|            0|            0|  0.00%|
   660|         0|            0|            0|  0.00%|    def __enter__(self):
   661|         0|            0|            0|  0.00%|        return self
   662|         0|            0|            0|  0.00%|
   663|         0|            0|            0|  0.00%|    def __exit__(self, type, value, tb):
   664|         0|            0|            0|  0.00%|        self.stream.close()
   665|         0|            0|            0|  0.00%|
   666|         0|            0|            0|  0.00%|###
   667|         0|            0|            0|  0.00%|
   668|         0|            0|            0|  0.00%|class StreamReaderWriter:
   669|         0|            0|            0|  0.00%|
   670|         0|            0|            0|  0.00%|    """ StreamReaderWriter instances allow wrapping streams which
   671|         0|            0|            0|  0.00%|        work in both read and write modes.
   672|         0|            0|            0|  0.00%|
   673|         0|            0|            0|  0.00%|        The design is such that one can use the factory functions
   674|         0|            0|            0|  0.00%|        returned by the codec.lookup() function to construct the
   675|         0|            0|            0|  0.00%|        instance.
   676|         0|            0|            0|  0.00%|
   677|         0|            0|            0|  0.00%|    """
   678|         0|            0|            0|  0.00%|    # Optional attributes set by the file wrappers below
   679|         0|            0|            0|  0.00%|    encoding = 'unknown'
   680|         0|            0|            0|  0.00%|
   681|         0|            0|            0|  0.00%|    def __init__(self, stream, Reader, Writer, errors='strict'):
   682|         0|            0|            0|  0.00%|
   683|         0|            0|            0|  0.00%|        """ Creates a StreamReaderWriter instance.
   684|         0|            0|            0|  0.00%|
   685|         0|            0|            0|  0.00%|            stream must be a Stream-like object.
   686|         0|            0|            0|  0.00%|
   687|         0|            0|            0|  0.00%|            Reader, Writer must be factory functions or classes
   688|         0|            0|            0|  0.00%|            providing the StreamReader, StreamWriter interface resp.
   689|         0|            0|            0|  0.00%|
   690|         0|            0|            0|  0.00%|            Error handling is done in the same way as defined for the
   691|         0|            0|            0|  0.00%|            StreamWriter/Readers.
   692|         0|            0|            0|  0.00%|
   693|         0|            0|            0|  0.00%|        """
   694|         0|            0|            0|  0.00%|        self.stream = stream
   695|         0|            0|            0|  0.00%|        self.reader = Reader(stream, errors)
   696|         0|            0|            0|  0.00%|        self.writer = Writer(stream, errors)
   697|         0|            0|            0|  0.00%|        self.errors = errors
   698|         0|            0|            0|  0.00%|
   699|         0|            0|            0|  0.00%|    def read(self, size=-1):
   700|         0|            0|            0|  0.00%|
   701|         0|            0|            0|  0.00%|        return self.reader.read(size)
   702|         0|            0|            0|  0.00%|
   703|         0|            0|            0|  0.00%|    def readline(self, size=None):
   704|         0|            0|            0|  0.00%|
   705|         0|            0|            0|  0.00%|        return self.reader.readline(size)
   706|         0|            0|            0|  0.00%|
   707|         0|            0|            0|  0.00%|    def readlines(self, sizehint=None):
   708|         0|            0|            0|  0.00%|
   709|         0|            0|            0|  0.00%|        return self.reader.readlines(sizehint)
   710|         0|            0|            0|  0.00%|
   711|         0|            0|            0|  0.00%|    def __next__(self):
   712|         0|            0|            0|  0.00%|
   713|         0|            0|            0|  0.00%|        """ Return the next decoded line from the input stream."""
   714|         0|            0|            0|  0.00%|        return next(self.reader)
   715|         0|            0|            0|  0.00%|
   716|         0|            0|            0|  0.00%|    def __iter__(self):
   717|         0|            0|            0|  0.00%|        return self
   718|         0|            0|            0|  0.00%|
   719|         0|            0|            0|  0.00%|    def write(self, data):
   720|         0|            0|            0|  0.00%|
   721|         0|            0|            0|  0.00%|        return self.writer.write(data)
   722|         0|            0|            0|  0.00%|
   723|         0|            0|            0|  0.00%|    def writelines(self, list):
   724|         0|            0|            0|  0.00%|
   725|         0|            0|            0|  0.00%|        return self.writer.writelines(list)
   726|         0|            0|            0|  0.00%|
   727|         0|            0|            0|  0.00%|    def reset(self):
   728|         0|            0|            0|  0.00%|
   729|         0|            0|            0|  0.00%|        self.reader.reset()
   730|         0|            0|            0|  0.00%|        self.writer.reset()
   731|         0|            0|            0|  0.00%|
   732|         0|            0|            0|  0.00%|    def seek(self, offset, whence=0):
   733|         0|            0|            0|  0.00%|        self.stream.seek(offset, whence)
   734|         0|            0|            0|  0.00%|        self.reader.reset()
   735|         0|            0|            0|  0.00%|        if whence == 0 and offset == 0:
   736|         0|            0|            0|  0.00%|            self.writer.reset()
   737|         0|            0|            0|  0.00%|
   738|         0|            0|            0|  0.00%|    def __getattr__(self, name,
   739|         0|            0|            0|  0.00%|                    getattr=getattr):
   740|         0|            0|            0|  0.00%|
   741|         0|            0|            0|  0.00%|        """ Inherit all other methods from the underlying stream.
   742|         0|            0|            0|  0.00%|        """
   743|         0|            0|            0|  0.00%|        return getattr(self.stream, name)
   744|         0|            0|            0|  0.00%|
   745|         0|            0|            0|  0.00%|    # these are needed to make "with StreamReaderWriter(...)" work properly
   746|         0|            0|            0|  0.00%|
   747|         0|            0|            0|  0.00%|    def __enter__(self):
   748|         0|            0|            0|  0.00%|        return self
   749|         0|            0|            0|  0.00%|
   750|         0|            0|            0|  0.00%|    def __exit__(self, type, value, tb):
   751|         0|            0|            0|  0.00%|        self.stream.close()
   752|         0|            0|            0|  0.00%|
   753|         0|            0|            0|  0.00%|###
   754|         0|            0|            0|  0.00%|
   755|         0|            0|            0|  0.00%|class StreamRecoder:
   756|         0|            0|            0|  0.00%|
   757|         0|            0|            0|  0.00%|    """ StreamRecoder instances translate data from one encoding to another.
   758|         0|            0|            0|  0.00%|
   759|         0|            0|            0|  0.00%|        They use the complete set of APIs returned by the
   760|         0|            0|            0|  0.00%|        codecs.lookup() function to implement their task.
   761|         0|            0|            0|  0.00%|
   762|         0|            0|            0|  0.00%|        Data written to the StreamRecoder is first decoded into an
   763|         0|            0|            0|  0.00%|        intermediate format (depending on the "decode" codec) and then
   764|         0|            0|            0|  0.00%|        written to the underlying stream using an instance of the provided
   765|         0|            0|            0|  0.00%|        Writer class.
   766|         0|            0|            0|  0.00%|
   767|         0|            0|            0|  0.00%|        In the other direction, data is read from the underlying stream using
   768|         0|            0|            0|  0.00%|        a Reader instance and then encoded and returned to the caller.
   769|         0|            0|            0|  0.00%|
   770|         0|            0|            0|  0.00%|    """
   771|         0|            0|            0|  0.00%|    # Optional attributes set by the file wrappers below
   772|         0|            0|            0|  0.00%|    data_encoding = 'unknown'
   773|         0|            0|            0|  0.00%|    file_encoding = 'unknown'
   774|         0|            0|            0|  0.00%|
   775|         0|            0|            0|  0.00%|    def __init__(self, stream, encode, decode, Reader, Writer,
   776|         0|            0|            0|  0.00%|                 errors='strict'):
   777|         0|            0|            0|  0.00%|
   778|         0|            0|            0|  0.00%|        """ Creates a StreamRecoder instance which implements a two-way
   779|         0|            0|            0|  0.00%|            conversion: encode and decode work on the frontend (the
   780|         0|            0|            0|  0.00%|            data visible to .read() and .write()) while Reader and Writer
   781|         0|            0|            0|  0.00%|            work on the backend (the data in stream).
   782|         0|            0|            0|  0.00%|
   783|         0|            0|            0|  0.00%|            You can use these objects to do transparent
   784|         0|            0|            0|  0.00%|            transcodings from e.g. latin-1 to utf-8 and back.
   785|         0|            0|            0|  0.00%|
   786|         0|            0|            0|  0.00%|            stream must be a file-like object.
   787|         0|            0|            0|  0.00%|
   788|         0|            0|            0|  0.00%|            encode and decode must adhere to the Codec interface; Reader and
   789|         0|            0|            0|  0.00%|            Writer must be factory functions or classes providing the
   790|         0|            0|            0|  0.00%|            StreamReader and StreamWriter interfaces resp.
   791|         0|            0|            0|  0.00%|
   792|         0|            0|            0|  0.00%|            Error handling is done in the same way as defined for the
   793|         0|            0|            0|  0.00%|            StreamWriter/Readers.
   794|         0|            0|            0|  0.00%|
   795|         0|            0|            0|  0.00%|        """
   796|         0|            0|            0|  0.00%|        self.stream = stream
   797|         0|            0|            0|  0.00%|        self.encode = encode
   798|         0|            0|            0|  0.00%|        self.decode = decode
   799|         0|            0|            0|  0.00%|        self.reader = Reader(stream, errors)
   800|         0|            0|            0|  0.00%|        self.writer = Writer(stream, errors)
   801|         0|            0|            0|  0.00%|        self.errors = errors
   802|         0|            0|            0|  0.00%|
   803|         0|            0|            0|  0.00%|    def read(self, size=-1):
   804|         0|            0|            0|  0.00%|
   805|         0|            0|            0|  0.00%|        data = self.reader.read(size)
   806|         0|            0|            0|  0.00%|        data, bytesencoded = self.encode(data, self.errors)
   807|         0|            0|            0|  0.00%|        return data
   808|         0|            0|            0|  0.00%|
   809|         0|            0|            0|  0.00%|    def readline(self, size=None):
   810|         0|            0|            0|  0.00%|
   811|         0|            0|            0|  0.00%|        if size is None:
   812|         0|            0|            0|  0.00%|            data = self.reader.readline()
   813|         0|            0|            0|  0.00%|        else:
   814|         0|            0|            0|  0.00%|            data = self.reader.readline(size)
   815|         0|            0|            0|  0.00%|        data, bytesencoded = self.encode(data, self.errors)
   816|         0|            0|            0|  0.00%|        return data
   817|         0|            0|            0|  0.00%|
   818|         0|            0|            0|  0.00%|    def readlines(self, sizehint=None):
   819|         0|            0|            0|  0.00%|
   820|         0|            0|            0|  0.00%|        data = self.reader.read()
   821|         0|            0|            0|  0.00%|        data, bytesencoded = self.encode(data, self.errors)
   822|         0|            0|            0|  0.00%|        return data.splitlines(keepends=True)
   823|         0|            0|            0|  0.00%|
   824|         0|            0|            0|  0.00%|    def __next__(self):
   825|         0|            0|            0|  0.00%|
   826|         0|            0|            0|  0.00%|        """ Return the next decoded line from the input stream."""
   827|         0|            0|            0|  0.00%|        data = next(self.reader)
   828|         0|            0|            0|  0.00%|        data, bytesencoded = self.encode(data, self.errors)
   829|         0|            0|            0|  0.00%|        return data
   830|         0|            0|            0|  0.00%|
   831|         0|            0|            0|  0.00%|    def __iter__(self):
   832|         0|            0|            0|  0.00%|        return self
   833|         0|            0|            0|  0.00%|
   834|         0|            0|            0|  0.00%|    def write(self, data):
   835|         0|            0|            0|  0.00%|
   836|         0|            0|            0|  0.00%|        data, bytesdecoded = self.decode(data, self.errors)
   837|         0|            0|            0|  0.00%|        return self.writer.write(data)
   838|         0|            0|            0|  0.00%|
   839|         0|            0|            0|  0.00%|    def writelines(self, list):
   840|         0|            0|            0|  0.00%|
   841|         0|            0|            0|  0.00%|        data = b''.join(list)
   842|         0|            0|            0|  0.00%|        data, bytesdecoded = self.decode(data, self.errors)
   843|         0|            0|            0|  0.00%|        return self.writer.write(data)
   844|         0|            0|            0|  0.00%|
   845|         0|            0|            0|  0.00%|    def reset(self):
   846|         0|            0|            0|  0.00%|
   847|         0|            0|            0|  0.00%|        self.reader.reset()
   848|         0|            0|            0|  0.00%|        self.writer.reset()
   849|         0|            0|            0|  0.00%|
   850|         0|            0|            0|  0.00%|    def seek(self, offset, whence=0):
   851|         0|            0|            0|  0.00%|        # Seeks must be propagated to both the readers and writers
   852|         0|            0|            0|  0.00%|        # as they might need to reset their internal buffers.
   853|         0|            0|            0|  0.00%|        self.reader.seek(offset, whence)
   854|         0|            0|            0|  0.00%|        self.writer.seek(offset, whence)
   855|         0|            0|            0|  0.00%|
   856|         0|            0|            0|  0.00%|    def __getattr__(self, name,
   857|         0|            0|            0|  0.00%|                    getattr=getattr):
   858|         0|            0|            0|  0.00%|
   859|         0|            0|            0|  0.00%|        """ Inherit all other methods from the underlying stream.
   860|         0|            0|            0|  0.00%|        """
   861|         0|            0|            0|  0.00%|        return getattr(self.stream, name)
   862|         0|            0|            0|  0.00%|
   863|         0|            0|            0|  0.00%|    def __enter__(self):
   864|         0|            0|            0|  0.00%|        return self
   865|         0|            0|            0|  0.00%|
   866|         0|            0|            0|  0.00%|    def __exit__(self, type, value, tb):
   867|         0|            0|            0|  0.00%|        self.stream.close()
   868|         0|            0|            0|  0.00%|
   869|         0|            0|            0|  0.00%|### Shortcuts
   870|         0|            0|            0|  0.00%|
   871|         0|            0|            0|  0.00%|def open(filename, mode='r', encoding=None, errors='strict', buffering=-1):
   872|         0|            0|            0|  0.00%|
   873|         0|            0|            0|  0.00%|    """ Open an encoded file using the given mode and return
   874|         0|            0|            0|  0.00%|        a wrapped version providing transparent encoding/decoding.
   875|         0|            0|            0|  0.00%|
   876|         0|            0|            0|  0.00%|        Note: The wrapped version will only accept the object format
   877|         0|            0|            0|  0.00%|        defined by the codecs, i.e. Unicode objects for most builtin
   878|         0|            0|            0|  0.00%|        codecs. Output is also codec dependent and will usually be
   879|         0|            0|            0|  0.00%|        Unicode as well.
   880|         0|            0|            0|  0.00%|
   881|         0|            0|            0|  0.00%|        Underlying encoded files are always opened in binary mode.
   882|         0|            0|            0|  0.00%|        The default file mode is 'r', meaning to open the file in read mode.
   883|         0|            0|            0|  0.00%|
   884|         0|            0|            0|  0.00%|        encoding specifies the encoding which is to be used for the
   885|         0|            0|            0|  0.00%|        file.
   886|         0|            0|            0|  0.00%|
   887|         0|            0|            0|  0.00%|        errors may be given to define the error handling. It defaults
   888|         0|            0|            0|  0.00%|        to 'strict' which causes ValueErrors to be raised in case an
   889|         0|            0|            0|  0.00%|        encoding error occurs.
   890|         0|            0|            0|  0.00%|
   891|         0|            0|            0|  0.00%|        buffering has the same meaning as for the builtin open() API.
   892|         0|            0|            0|  0.00%|        It defaults to -1 which means that the default buffer size will
   893|         0|            0|            0|  0.00%|        be used.
   894|         0|            0|            0|  0.00%|
   895|         0|            0|            0|  0.00%|        The returned wrapped file object provides an extra attribute
   896|         0|            0|            0|  0.00%|        .encoding which allows querying the used encoding. This
   897|         0|            0|            0|  0.00%|        attribute is only available if an encoding was specified as
   898|         0|            0|            0|  0.00%|        parameter.
   899|         0|            0|            0|  0.00%|
   900|         0|            0|            0|  0.00%|    """
   901|         0|            0|            0|  0.00%|    if encoding is not None and \
   902|         0|            0|            0|  0.00%|       'b' not in mode:
   903|         0|            0|            0|  0.00%|        # Force opening of the file in binary mode
   904|         0|            0|            0|  0.00%|        mode = mode + 'b'
   905|         0|            0|            0|  0.00%|    file = builtins.open(filename, mode, buffering)
   906|         0|            0|            0|  0.00%|    if encoding is None:
   907|         0|            0|            0|  0.00%|        return file
   908|         0|            0|            0|  0.00%|
   909|         0|            0|            0|  0.00%|    try:
   910|         0|            0|            0|  0.00%|        info = lookup(encoding)
   911|         0|            0|            0|  0.00%|        srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)
   912|         0|            0|            0|  0.00%|        # Add attributes to simplify introspection
   913|         0|            0|            0|  0.00%|        srw.encoding = encoding
   914|         0|            0|            0|  0.00%|        return srw
   915|         0|            0|            0|  0.00%|    except:
   916|         0|            0|            0|  0.00%|        file.close()
   917|         0|            0|            0|  0.00%|        raise
   918|         0|            0|            0|  0.00%|
   919|         0|            0|            0|  0.00%|def EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):
   920|         0|            0|            0|  0.00%|
   921|         0|            0|            0|  0.00%|    """ Return a wrapped version of file which provides transparent
   922|         0|            0|            0|  0.00%|        encoding translation.
   923|         0|            0|            0|  0.00%|
   924|         0|            0|            0|  0.00%|        Data written to the wrapped file is decoded according
   925|         0|            0|            0|  0.00%|        to the given data_encoding and then encoded to the underlying
   926|         0|            0|            0|  0.00%|        file using file_encoding. The intermediate data type
   927|         0|            0|            0|  0.00%|        will usually be Unicode but depends on the specified codecs.
   928|         0|            0|            0|  0.00%|
   929|         0|            0|            0|  0.00%|        Bytes read from the file are decoded using file_encoding and then
   930|         0|            0|            0|  0.00%|        passed back to the caller encoded using data_encoding.
   931|         0|            0|            0|  0.00%|
   932|         0|            0|            0|  0.00%|        If file_encoding is not given, it defaults to data_encoding.
   933|         0|            0|            0|  0.00%|
   934|         0|            0|            0|  0.00%|        errors may be given to define the error handling. It defaults
   935|         0|            0|            0|  0.00%|        to 'strict' which causes ValueErrors to be raised in case an
   936|         0|            0|            0|  0.00%|        encoding error occurs.
   937|         0|            0|            0|  0.00%|
   938|         0|            0|            0|  0.00%|        The returned wrapped file object provides two extra attributes
   939|         0|            0|            0|  0.00%|        .data_encoding and .file_encoding which reflect the given
   940|         0|            0|            0|  0.00%|        parameters of the same name. The attributes can be used for
   941|         0|            0|            0|  0.00%|        introspection by Python programs.
   942|         0|            0|            0|  0.00%|
   943|         0|            0|            0|  0.00%|    """
   944|         0|            0|            0|  0.00%|    if file_encoding is None:
   945|         0|            0|            0|  0.00%|        file_encoding = data_encoding
   946|         0|            0|            0|  0.00%|    data_info = lookup(data_encoding)
   947|         0|            0|            0|  0.00%|    file_info = lookup(file_encoding)
   948|         0|            0|            0|  0.00%|    sr = StreamRecoder(file, data_info.encode, data_info.decode,
   949|         0|            0|            0|  0.00%|                       file_info.streamreader, file_info.streamwriter, errors)
   950|         0|            0|            0|  0.00%|    # Add attributes to simplify introspection
   951|         0|            0|            0|  0.00%|    sr.data_encoding = data_encoding
   952|         0|            0|            0|  0.00%|    sr.file_encoding = file_encoding
   953|         0|            0|            0|  0.00%|    return sr
   954|         0|            0|            0|  0.00%|
   955|         0|            0|            0|  0.00%|### Helpers for codec lookup
   956|         0|            0|            0|  0.00%|
   957|         0|            0|            0|  0.00%|def getencoder(encoding):
   958|         0|            0|            0|  0.00%|
   959|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   960|         0|            0|            0|  0.00%|        its encoder function.
   961|         0|            0|            0|  0.00%|
   962|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found.
   963|         0|            0|            0|  0.00%|
   964|         0|            0|            0|  0.00%|    """
   965|         0|            0|            0|  0.00%|    return lookup(encoding).encode
   966|         0|            0|            0|  0.00%|
   967|         0|            0|            0|  0.00%|def getdecoder(encoding):
   968|         0|            0|            0|  0.00%|
   969|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   970|         0|            0|            0|  0.00%|        its decoder function.
   971|         0|            0|            0|  0.00%|
   972|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found.
   973|         0|            0|            0|  0.00%|
   974|         0|            0|            0|  0.00%|    """
   975|         0|            0|            0|  0.00%|    return lookup(encoding).decode
   976|         0|            0|            0|  0.00%|
   977|         0|            0|            0|  0.00%|def getincrementalencoder(encoding):
   978|         0|            0|            0|  0.00%|
   979|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   980|         0|            0|            0|  0.00%|        its IncrementalEncoder class or factory function.
   981|         0|            0|            0|  0.00%|
   982|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found
   983|         0|            0|            0|  0.00%|        or the codecs doesn't provide an incremental encoder.
   984|         0|            0|            0|  0.00%|
   985|         0|            0|            0|  0.00%|    """
   986|         0|            0|            0|  0.00%|    encoder = lookup(encoding).incrementalencoder
   987|         0|            0|            0|  0.00%|    if encoder is None:
   988|         0|            0|            0|  0.00%|        raise LookupError(encoding)
   989|         0|            0|            0|  0.00%|    return encoder
   990|         0|            0|            0|  0.00%|
   991|         0|            0|            0|  0.00%|def getincrementaldecoder(encoding):
   992|         0|            0|            0|  0.00%|
   993|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
   994|         0|            0|            0|  0.00%|        its IncrementalDecoder class or factory function.
   995|         0|            0|            0|  0.00%|
   996|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found
   997|         0|            0|            0|  0.00%|        or the codecs doesn't provide an incremental decoder.
   998|         0|            0|            0|  0.00%|
   999|         0|            0|            0|  0.00%|    """
  1000|         0|            0|            0|  0.00%|    decoder = lookup(encoding).incrementaldecoder
  1001|         0|            0|            0|  0.00%|    if decoder is None:
  1002|         0|            0|            0|  0.00%|        raise LookupError(encoding)
  1003|         0|            0|            0|  0.00%|    return decoder
  1004|         0|            0|            0|  0.00%|
  1005|         0|            0|            0|  0.00%|def getreader(encoding):
  1006|         0|            0|            0|  0.00%|
  1007|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
  1008|         0|            0|            0|  0.00%|        its StreamReader class or factory function.
  1009|         0|            0|            0|  0.00%|
  1010|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found.
  1011|         0|            0|            0|  0.00%|
  1012|         0|            0|            0|  0.00%|    """
  1013|         0|            0|            0|  0.00%|    return lookup(encoding).streamreader
  1014|         0|            0|            0|  0.00%|
  1015|         0|            0|            0|  0.00%|def getwriter(encoding):
  1016|         0|            0|            0|  0.00%|
  1017|         0|            0|            0|  0.00%|    """ Lookup up the codec for the given encoding and return
  1018|         0|            0|            0|  0.00%|        its StreamWriter class or factory function.
  1019|         0|            0|            0|  0.00%|
  1020|         0|            0|            0|  0.00%|        Raises a LookupError in case the encoding cannot be found.
  1021|         0|            0|            0|  0.00%|
  1022|         0|            0|            0|  0.00%|    """
  1023|         0|            0|            0|  0.00%|    return lookup(encoding).streamwriter
  1024|         0|            0|            0|  0.00%|
  1025|         0|            0|            0|  0.00%|def iterencode(iterator, encoding, errors='strict', **kwargs):
  1026|         0|            0|            0|  0.00%|    """
  1027|         0|            0|            0|  0.00%|    Encoding iterator.
  1028|         0|            0|            0|  0.00%|
  1029|         0|            0|            0|  0.00%|    Encodes the input strings from the iterator using an IncrementalEncoder.
  1030|         0|            0|            0|  0.00%|
  1031|         0|            0|            0|  0.00%|    errors and kwargs are passed through to the IncrementalEncoder
  1032|         0|            0|            0|  0.00%|    constructor.
  1033|         0|            0|            0|  0.00%|    """
  1034|         0|            0|            0|  0.00%|    encoder = getincrementalencoder(encoding)(errors, **kwargs)
  1035|         0|            0|            0|  0.00%|    for input in iterator:
  1036|         0|            0|            0|  0.00%|        output = encoder.encode(input)
  1037|         0|            0|            0|  0.00%|        if output:
  1038|         0|            0|            0|  0.00%|            yield output
  1039|         0|            0|            0|  0.00%|    output = encoder.encode("", True)
  1040|         0|            0|            0|  0.00%|    if output:
  1041|         0|            0|            0|  0.00%|        yield output
  1042|         0|            0|            0|  0.00%|
  1043|         0|            0|            0|  0.00%|def iterdecode(iterator, encoding, errors='strict', **kwargs):
  1044|         0|            0|            0|  0.00%|    """
  1045|         0|            0|            0|  0.00%|    Decoding iterator.
  1046|         0|            0|            0|  0.00%|
  1047|         0|            0|            0|  0.00%|    Decodes the input strings from the iterator using an IncrementalDecoder.
  1048|         0|            0|            0|  0.00%|
  1049|         0|            0|            0|  0.00%|    errors and kwargs are passed through to the IncrementalDecoder
  1050|         0|            0|            0|  0.00%|    constructor.
  1051|         0|            0|            0|  0.00%|    """
  1052|         0|            0|            0|  0.00%|    decoder = getincrementaldecoder(encoding)(errors, **kwargs)
  1053|         0|            0|            0|  0.00%|    for input in iterator:
  1054|         0|            0|            0|  0.00%|        output = decoder.decode(input)
  1055|         0|            0|            0|  0.00%|        if output:
  1056|         0|            0|            0|  0.00%|            yield output
  1057|         0|            0|            0|  0.00%|    output = decoder.decode(b"", True)
  1058|         0|            0|            0|  0.00%|    if output:
  1059|         0|            0|            0|  0.00%|        yield output
  1060|         0|            0|            0|  0.00%|
  1061|         0|            0|            0|  0.00%|### Helpers for charmap-based codecs
  1062|         0|            0|            0|  0.00%|
  1063|         0|            0|            0|  0.00%|def make_identity_dict(rng):
  1064|         0|            0|            0|  0.00%|
  1065|         0|            0|            0|  0.00%|    """ make_identity_dict(rng) -> dict
  1066|         0|            0|            0|  0.00%|
  1067|         0|            0|            0|  0.00%|        Return a dictionary where elements of the rng sequence are
  1068|         0|            0|            0|  0.00%|        mapped to themselves.
  1069|         0|            0|            0|  0.00%|
  1070|         0|            0|            0|  0.00%|    """
  1071|         0|            0|            0|  0.00%|    return {i:i for i in rng}
  1072|         0|            0|            0|  0.00%|
  1073|         0|            0|            0|  0.00%|def make_encoding_map(decoding_map):
  1074|         0|            0|            0|  0.00%|
  1075|         0|            0|            0|  0.00%|    """ Creates an encoding map from a decoding map.
  1076|         0|            0|            0|  0.00%|
  1077|         0|            0|            0|  0.00%|        If a target mapping in the decoding map occurs multiple
  1078|         0|            0|            0|  0.00%|        times, then that target is mapped to None (undefined mapping),
  1079|         0|            0|            0|  0.00%|        causing an exception when encountered by the charmap codec
  1080|         0|            0|            0|  0.00%|        during translation.
  1081|         0|            0|            0|  0.00%|
  1082|         0|            0|            0|  0.00%|        One example where this happens is cp875.py which decodes
  1083|         0|            0|            0|  0.00%|        multiple character to \\u001a.
  1084|         0|            0|            0|  0.00%|
  1085|         0|            0|            0|  0.00%|    """
  1086|         0|            0|            0|  0.00%|    m = {}
  1087|         0|            0|            0|  0.00%|    for k,v in decoding_map.items():
  1088|         0|            0|            0|  0.00%|        if not v in m:
  1089|         0|            0|            0|  0.00%|            m[v] = k
  1090|         0|            0|            0|  0.00%|        else:
  1091|         0|            0|            0|  0.00%|            m[v] = None
  1092|         0|            0|            0|  0.00%|    return m
  1093|         0|            0|            0|  0.00%|
  1094|         0|            0|            0|  0.00%|### error handlers
  1095|         0|            0|            0|  0.00%|
  1096|         0|            0|            0|  0.00%|try:
  1097|         0|            0|            0|  0.00%|    strict_errors = lookup_error("strict")
  1098|         0|            0|            0|  0.00%|    ignore_errors = lookup_error("ignore")
  1099|         0|            0|            0|  0.00%|    replace_errors = lookup_error("replace")
  1100|         0|            0|            0|  0.00%|    xmlcharrefreplace_errors = lookup_error("xmlcharrefreplace")
  1101|         0|            0|            0|  0.00%|    backslashreplace_errors = lookup_error("backslashreplace")
  1102|         0|            0|            0|  0.00%|    namereplace_errors = lookup_error("namereplace")
  1103|         0|            0|            0|  0.00%|except LookupError:
  1104|         0|            0|            0|  0.00%|    # In --disable-unicode builds, these error handler are missing
  1105|         0|            0|            0|  0.00%|    strict_errors = None
  1106|         0|            0|            0|  0.00%|    ignore_errors = None
  1107|         0|            0|            0|  0.00%|    replace_errors = None
  1108|         0|            0|            0|  0.00%|    xmlcharrefreplace_errors = None
  1109|         0|            0|            0|  0.00%|    backslashreplace_errors = None
  1110|         0|            0|            0|  0.00%|    namereplace_errors = None
  1111|         0|            0|            0|  0.00%|
  1112|         0|            0|            0|  0.00%|# Tell modulefinder that using codecs probably needs the encodings
  1113|         0|            0|            0|  0.00%|# package
  1114|         0|            0|            0|  0.00%|_false = 0
  1115|         0|            0|            0|  0.00%|if _false:
  1116|         0|            0|            0|  0.00%|    import encodings
  1117|         0|            0|            0|  0.00%|
  1118|         0|            0|            0|  0.00%|### Tests
  1119|         0|            0|            0|  0.00%|
  1120|         0|            0|            0|  0.00%|if __name__ == '__main__':
  1121|         0|            0|            0|  0.00%|
  1122|         0|            0|            0|  0.00%|    # Make stdout translate Latin-1 output into UTF-8 output
  1123|         0|            0|            0|  0.00%|    sys.stdout = EncodedFile(sys.stdout, 'latin-1', 'utf-8')
  1124|         0|            0|            0|  0.00%|
  1125|         0|            0|            0|  0.00%|    # Have stdin translate Latin-1 input into UTF-8 input
  1126|         0|            0|            0|  0.00%|    sys.stdin = EncodedFile(sys.stdin, 'utf-8', 'latin-1')
File: <string>_0
File duration: 4.98295e-05s (0.02%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|        10|  4.98295e-05|  4.98295e-06|  0.02%|
File: /usr/lib/python3.10/io.py
File duration: 2.19345e-05s (0.01%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|"""The io module provides the Python interfaces to stream handling. The
     2|         0|            0|            0|  0.00%|builtin open function is defined in this module.
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|At the top of the I/O hierarchy is the abstract base class IOBase. It
     5|         0|            0|            0|  0.00%|defines the basic interface to a stream. Note, however, that there is no
     6|         0|            0|            0|  0.00%|separation between reading and writing to streams; implementations are
     7|         0|            0|            0|  0.00%|allowed to raise an OSError if they do not support a given operation.
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|Extending IOBase is RawIOBase which deals simply with the reading and
    10|         0|            0|            0|  0.00%|writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
    11|         0|            0|            0|  0.00%|an interface to OS files.
    12|         0|            0|            0|  0.00%|
    13|         0|            0|            0|  0.00%|BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
    14|         0|            0|            0|  0.00%|subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
    15|         0|            0|            0|  0.00%|streams that are readable, writable, and both respectively.
    16|         0|            0|            0|  0.00%|BufferedRandom provides a buffered interface to random access
    17|         0|            0|            0|  0.00%|streams. BytesIO is a simple stream of in-memory bytes.
    18|         0|            0|            0|  0.00%|
    19|         0|            0|            0|  0.00%|Another IOBase subclass, TextIOBase, deals with the encoding and decoding
    20|         0|            0|            0|  0.00%|of streams into text. TextIOWrapper, which extends it, is a buffered text
    21|         0|            0|            0|  0.00%|interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
    22|         0|            0|            0|  0.00%|is an in-memory stream for text.
    23|         0|            0|            0|  0.00%|
    24|         0|            0|            0|  0.00%|Argument names are not part of the specification, and only the arguments
    25|         0|            0|            0|  0.00%|of open() are intended to be used as keyword arguments.
    26|         0|            0|            0|  0.00%|
    27|         0|            0|            0|  0.00%|data:
    28|         0|            0|            0|  0.00%|
    29|         0|            0|            0|  0.00%|DEFAULT_BUFFER_SIZE
    30|         0|            0|            0|  0.00%|
    31|         0|            0|            0|  0.00%|   An int containing the default buffer size used by the module's buffered
    32|         0|            0|            0|  0.00%|   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
    33|         0|            0|            0|  0.00%|   possible.
    34|         0|            0|            0|  0.00%|"""
    35|         0|            0|            0|  0.00%|# New I/O library conforming to PEP 3116.
    36|         0|            0|            0|  0.00%|
    37|         0|            0|            0|  0.00%|__author__ = ("Guido van Rossum <guido@python.org>, "
    38|         0|            0|            0|  0.00%|              "Mike Verdone <mike.verdone@gmail.com>, "
    39|         0|            0|            0|  0.00%|              "Mark Russell <mark.russell@zen.co.uk>, "
    40|         0|            0|            0|  0.00%|              "Antoine Pitrou <solipsis@pitrou.net>, "
    41|         0|            0|            0|  0.00%|              "Amaury Forgeot d'Arc <amauryfa@gmail.com>, "
    42|         0|            0|            0|  0.00%|              "Benjamin Peterson <benjamin@python.org>")
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|__all__ = ["BlockingIOError", "open", "open_code", "IOBase", "RawIOBase",
    45|         0|            0|            0|  0.00%|           "FileIO", "BytesIO", "StringIO", "BufferedIOBase",
    46|         0|            0|            0|  0.00%|           "BufferedReader", "BufferedWriter", "BufferedRWPair",
    47|         0|            0|            0|  0.00%|           "BufferedRandom", "TextIOBase", "TextIOWrapper",
    48|         0|            0|            0|  0.00%|           "UnsupportedOperation", "SEEK_SET", "SEEK_CUR", "SEEK_END"]
    49|         0|            0|            0|  0.00%|
    50|         0|            0|            0|  0.00%|
    51|         0|            0|            0|  0.00%|import _io
    52|         0|            0|            0|  0.00%|import abc
    53|         0|            0|            0|  0.00%|
    54|         0|            0|            0|  0.00%|from _io import (DEFAULT_BUFFER_SIZE, BlockingIOError, UnsupportedOperation,
    55|         0|            0|            0|  0.00%|                 open, open_code, FileIO, BytesIO, StringIO, BufferedReader,
    56|         0|            0|            0|  0.00%|                 BufferedWriter, BufferedRWPair, BufferedRandom,
    57|         0|            0|            0|  0.00%|                 IncrementalNewlineDecoder, text_encoding, TextIOWrapper)
    58|         0|            0|            0|  0.00%|
    59|         0|            0|            0|  0.00%|
    60|         1|  8.58307e-06|  8.58307e-06|  0.00%|def __getattr__(name):
    61|         1|  8.34465e-06|  8.34465e-06|  0.00%|    if name == "OpenWrapper":
    62|         0|            0|            0|  0.00%|        # bpo-43680: Until Python 3.9, _pyio.open was not a static method and
    63|         0|            0|            0|  0.00%|        # builtins.open was set to OpenWrapper to not become a bound method
    64|         0|            0|            0|  0.00%|        # when set to a class variable. _io.open is a built-in function whereas
    65|         0|            0|            0|  0.00%|        # _pyio.open is a Python function. In Python 3.10, _pyio.open() is now
    66|         0|            0|            0|  0.00%|        # a static method, and builtins.open() is now io.open().
    67|         0|            0|            0|  0.00%|        import warnings
    68|         0|            0|            0|  0.00%|        warnings.warn('OpenWrapper is deprecated, use open instead',
    69|         0|            0|            0|  0.00%|                      DeprecationWarning, stacklevel=2)
    70|         0|            0|            0|  0.00%|        global OpenWrapper
    71|         0|            0|            0|  0.00%|        OpenWrapper = open
    72|         0|            0|            0|  0.00%|        return OpenWrapper
    73|         1|  5.00679e-06|  5.00679e-06|  0.00%|    raise AttributeError(name)
    74|         0|            0|            0|  0.00%|
    75|         0|            0|            0|  0.00%|
    76|         0|            0|            0|  0.00%|# Pretend this exception was created here.
    77|         0|            0|            0|  0.00%|UnsupportedOperation.__module__ = "io"
    78|         0|            0|            0|  0.00%|
    79|         0|            0|            0|  0.00%|# for seek()
    80|         0|            0|            0|  0.00%|SEEK_SET = 0
    81|         0|            0|            0|  0.00%|SEEK_CUR = 1
    82|         0|            0|            0|  0.00%|SEEK_END = 2
    83|         0|            0|            0|  0.00%|
    84|         0|            0|            0|  0.00%|# Declaring ABCs in C is tricky so we do it here.
    85|         0|            0|            0|  0.00%|# Method descriptions and default implementations are inherited from the C
    86|         0|            0|            0|  0.00%|# version however.
    87|         0|            0|            0|  0.00%|class IOBase(_io._IOBase, metaclass=abc.ABCMeta):
    88|         0|            0|            0|  0.00%|    __doc__ = _io._IOBase.__doc__
    89|         0|            0|            0|  0.00%|
    90|         0|            0|            0|  0.00%|class RawIOBase(_io._RawIOBase, IOBase):
    91|         0|            0|            0|  0.00%|    __doc__ = _io._RawIOBase.__doc__
    92|         0|            0|            0|  0.00%|
    93|         0|            0|            0|  0.00%|class BufferedIOBase(_io._BufferedIOBase, IOBase):
    94|         0|            0|            0|  0.00%|    __doc__ = _io._BufferedIOBase.__doc__
    95|         0|            0|            0|  0.00%|
    96|         0|            0|            0|  0.00%|class TextIOBase(_io._TextIOBase, IOBase):
    97|         0|            0|            0|  0.00%|    __doc__ = _io._TextIOBase.__doc__
    98|         0|            0|            0|  0.00%|
    99|         0|            0|            0|  0.00%|RawIOBase.register(FileIO)
   100|         0|            0|            0|  0.00%|
   101|         0|            0|            0|  0.00%|for klass in (BytesIO, BufferedReader, BufferedWriter, BufferedRandom,
   102|         0|            0|            0|  0.00%|              BufferedRWPair):
   103|         0|            0|            0|  0.00%|    BufferedIOBase.register(klass)
   104|         0|            0|            0|  0.00%|
   105|         0|            0|            0|  0.00%|for klass in (StringIO, TextIOWrapper):
   106|         0|            0|            0|  0.00%|    TextIOBase.register(klass)
   107|         0|            0|            0|  0.00%|del klass
   108|         0|            0|            0|  0.00%|
   109|         0|            0|            0|  0.00%|try:
   110|         0|            0|            0|  0.00%|    from _io import _WindowsConsoleIO
   111|         0|            0|            0|  0.00%|except ImportError:
   112|         0|            0|            0|  0.00%|    pass
   113|         0|            0|            0|  0.00%|else:
   114|         0|            0|            0|  0.00%|    RawIOBase.register(_WindowsConsoleIO)
File: /usr/lib/python3.10/email/_parseaddr.py
File duration: 1.4782e-05s (0.01%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         0|            0|            0|  0.00%|# Copyright (C) 2002-2007 Python Software Foundation
     2|         0|            0|            0|  0.00%|# Contact: email-sig@python.org
     3|         0|            0|            0|  0.00%|
     4|         0|            0|            0|  0.00%|"""Email address parsing code.
     5|         0|            0|            0|  0.00%|
     6|         0|            0|            0|  0.00%|Lifted directly from rfc822.py.  This should eventually be rewritten.
     7|         0|            0|            0|  0.00%|"""
     8|         0|            0|            0|  0.00%|
     9|         0|            0|            0|  0.00%|__all__ = [
    10|         0|            0|            0|  0.00%|    'mktime_tz',
    11|         0|            0|            0|  0.00%|    'parsedate',
    12|         0|            0|            0|  0.00%|    'parsedate_tz',
    13|         0|            0|            0|  0.00%|    'quote',
    14|         0|            0|            0|  0.00%|    ]
    15|         0|            0|            0|  0.00%|
    16|         0|            0|            0|  0.00%|import time, calendar
    17|         0|            0|            0|  0.00%|
    18|         0|            0|            0|  0.00%|SPACE = ' '
    19|         0|            0|            0|  0.00%|EMPTYSTRING = ''
    20|         0|            0|            0|  0.00%|COMMASPACE = ', '
    21|         0|            0|            0|  0.00%|
    22|         0|            0|            0|  0.00%|# Parse a date field
    23|         0|            0|            0|  0.00%|_monthnames = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul',
    24|         0|            0|            0|  0.00%|               'aug', 'sep', 'oct', 'nov', 'dec',
    25|         0|            0|            0|  0.00%|               'january', 'february', 'march', 'april', 'may', 'june', 'july',
    26|         0|            0|            0|  0.00%|               'august', 'september', 'october', 'november', 'december']
    27|         0|            0|            0|  0.00%|
    28|         0|            0|            0|  0.00%|_daynames = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
    29|         0|            0|            0|  0.00%|
    30|         0|            0|            0|  0.00%|# The timezone table does not include the military time zones defined
    31|         0|            0|            0|  0.00%|# in RFC822, other than Z.  According to RFC1123, the description in
    32|         0|            0|            0|  0.00%|# RFC822 gets the signs wrong, so we can't rely on any such time
    33|         0|            0|            0|  0.00%|# zones.  RFC1123 recommends that numeric timezone indicators be used
    34|         0|            0|            0|  0.00%|# instead of timezone names.
    35|         0|            0|            0|  0.00%|
    36|         0|            0|            0|  0.00%|_timezones = {'UT':0, 'UTC':0, 'GMT':0, 'Z':0,
    37|         0|            0|            0|  0.00%|              'AST': -400, 'ADT': -300,  # Atlantic (used in Canada)
    38|         0|            0|            0|  0.00%|              'EST': -500, 'EDT': -400,  # Eastern
    39|         0|            0|            0|  0.00%|              'CST': -600, 'CDT': -500,  # Central
    40|         0|            0|            0|  0.00%|              'MST': -700, 'MDT': -600,  # Mountain
    41|         0|            0|            0|  0.00%|              'PST': -800, 'PDT': -700   # Pacific
    42|         0|            0|            0|  0.00%|              }
    43|         0|            0|            0|  0.00%|
    44|         0|            0|            0|  0.00%|
    45|         0|            0|            0|  0.00%|def parsedate_tz(data):
    46|         0|            0|            0|  0.00%|    """Convert a date string to a time tuple.
    47|         0|            0|            0|  0.00%|
    48|         0|            0|            0|  0.00%|    Accounts for military timezones.
    49|         0|            0|            0|  0.00%|    """
    50|         0|            0|            0|  0.00%|    res = _parsedate_tz(data)
    51|         0|            0|            0|  0.00%|    if not res:
    52|         0|            0|            0|  0.00%|        return
    53|         0|            0|            0|  0.00%|    if res[9] is None:
    54|         0|            0|            0|  0.00%|        res[9] = 0
    55|         0|            0|            0|  0.00%|    return tuple(res)
    56|         0|            0|            0|  0.00%|
    57|         0|            0|            0|  0.00%|def _parsedate_tz(data):
    58|         0|            0|            0|  0.00%|    """Convert date to extended time tuple.
    59|         0|            0|            0|  0.00%|
    60|         0|            0|            0|  0.00%|    The last (additional) element is the time zone offset in seconds, except if
    61|         0|            0|            0|  0.00%|    the timezone was specified as -0000.  In that case the last element is
    62|         0|            0|            0|  0.00%|    None.  This indicates a UTC timestamp that explicitly declaims knowledge of
    63|         0|            0|            0|  0.00%|    the source timezone, as opposed to a +0000 timestamp that indicates the
    64|         0|            0|            0|  0.00%|    source timezone really was UTC.
    65|         0|            0|            0|  0.00%|
    66|         0|            0|            0|  0.00%|    """
    67|         0|            0|            0|  0.00%|    if not data:
    68|         0|            0|            0|  0.00%|        return None
    69|         0|            0|            0|  0.00%|    data = data.split()
    70|         0|            0|            0|  0.00%|    if not data:  # This happens for whitespace-only input.
    71|         0|            0|            0|  0.00%|        return None
    72|         0|            0|            0|  0.00%|    # The FWS after the comma after the day-of-week is optional, so search and
    73|         0|            0|            0|  0.00%|    # adjust for this.
    74|         0|            0|            0|  0.00%|    if data[0].endswith(',') or data[0].lower() in _daynames:
    75|         0|            0|            0|  0.00%|        # There's a dayname here. Skip it
    76|         0|            0|            0|  0.00%|        del data[0]
    77|         0|            0|            0|  0.00%|    else:
    78|         0|            0|            0|  0.00%|        i = data[0].rfind(',')
    79|         0|            0|            0|  0.00%|        if i >= 0:
    80|         0|            0|            0|  0.00%|            data[0] = data[0][i+1:]
    81|         0|            0|            0|  0.00%|    if len(data) == 3: # RFC 850 date, deprecated
    82|         0|            0|            0|  0.00%|        stuff = data[0].split('-')
    83|         0|            0|            0|  0.00%|        if len(stuff) == 3:
    84|         0|            0|            0|  0.00%|            data = stuff + data[1:]
    85|         0|            0|            0|  0.00%|    if len(data) == 4:
    86|         0|            0|            0|  0.00%|        s = data[3]
    87|         0|            0|            0|  0.00%|        i = s.find('+')
    88|         0|            0|            0|  0.00%|        if i == -1:
    89|         0|            0|            0|  0.00%|            i = s.find('-')
    90|         0|            0|            0|  0.00%|        if i > 0:
    91|         0|            0|            0|  0.00%|            data[3:] = [s[:i], s[i:]]
    92|         0|            0|            0|  0.00%|        else:
    93|         0|            0|            0|  0.00%|            data.append('') # Dummy tz
    94|         0|            0|            0|  0.00%|    if len(data) < 5:
    95|         0|            0|            0|  0.00%|        return None
    96|         0|            0|            0|  0.00%|    data = data[:5]
    97|         0|            0|            0|  0.00%|    [dd, mm, yy, tm, tz] = data
    98|         0|            0|            0|  0.00%|    mm = mm.lower()
    99|         0|            0|            0|  0.00%|    if mm not in _monthnames:
   100|         0|            0|            0|  0.00%|        dd, mm = mm, dd.lower()
   101|         0|            0|            0|  0.00%|        if mm not in _monthnames:
   102|         0|            0|            0|  0.00%|            return None
   103|         0|            0|            0|  0.00%|    mm = _monthnames.index(mm) + 1
   104|         0|            0|            0|  0.00%|    if mm > 12:
   105|         0|            0|            0|  0.00%|        mm -= 12
   106|         0|            0|            0|  0.00%|    if dd[-1] == ',':
   107|         0|            0|            0|  0.00%|        dd = dd[:-1]
   108|         0|            0|            0|  0.00%|    i = yy.find(':')
   109|         0|            0|            0|  0.00%|    if i > 0:
   110|         0|            0|            0|  0.00%|        yy, tm = tm, yy
   111|         0|            0|            0|  0.00%|    if yy[-1] == ',':
   112|         0|            0|            0|  0.00%|        yy = yy[:-1]
   113|         0|            0|            0|  0.00%|    if not yy[0].isdigit():
   114|         0|            0|            0|  0.00%|        yy, tz = tz, yy
   115|         0|            0|            0|  0.00%|    if tm[-1] == ',':
   116|         0|            0|            0|  0.00%|        tm = tm[:-1]
   117|         0|            0|            0|  0.00%|    tm = tm.split(':')
   118|         0|            0|            0|  0.00%|    if len(tm) == 2:
   119|         0|            0|            0|  0.00%|        [thh, tmm] = tm
   120|         0|            0|            0|  0.00%|        tss = '0'
   121|         0|            0|            0|  0.00%|    elif len(tm) == 3:
   122|         0|            0|            0|  0.00%|        [thh, tmm, tss] = tm
   123|         0|            0|            0|  0.00%|    elif len(tm) == 1 and '.' in tm[0]:
   124|         0|            0|            0|  0.00%|        # Some non-compliant MUAs use '.' to separate time elements.
   125|         0|            0|            0|  0.00%|        tm = tm[0].split('.')
   126|         0|            0|            0|  0.00%|        if len(tm) == 2:
   127|         0|            0|            0|  0.00%|            [thh, tmm] = tm
   128|         0|            0|            0|  0.00%|            tss = 0
   129|         0|            0|            0|  0.00%|        elif len(tm) == 3:
   130|         0|            0|            0|  0.00%|            [thh, tmm, tss] = tm
   131|         0|            0|            0|  0.00%|        else:
   132|         0|            0|            0|  0.00%|            return None
   133|         0|            0|            0|  0.00%|    else:
   134|         0|            0|            0|  0.00%|        return None
   135|         0|            0|            0|  0.00%|    try:
   136|         0|            0|            0|  0.00%|        yy = int(yy)
   137|         0|            0|            0|  0.00%|        dd = int(dd)
   138|         0|            0|            0|  0.00%|        thh = int(thh)
   139|         0|            0|            0|  0.00%|        tmm = int(tmm)
   140|         0|            0|            0|  0.00%|        tss = int(tss)
   141|         0|            0|            0|  0.00%|    except ValueError:
   142|         0|            0|            0|  0.00%|        return None
   143|         0|            0|            0|  0.00%|    # Check for a yy specified in two-digit format, then convert it to the
   144|         0|            0|            0|  0.00%|    # appropriate four-digit format, according to the POSIX standard. RFC 822
   145|         0|            0|            0|  0.00%|    # calls for a two-digit yy, but RFC 2822 (which obsoletes RFC 822)
   146|         0|            0|            0|  0.00%|    # mandates a 4-digit yy. For more information, see the documentation for
   147|         0|            0|            0|  0.00%|    # the time module.
   148|         0|            0|            0|  0.00%|    if yy < 100:
   149|         0|            0|            0|  0.00%|        # The year is between 1969 and 1999 (inclusive).
   150|         0|            0|            0|  0.00%|        if yy > 68:
   151|         0|            0|            0|  0.00%|            yy += 1900
   152|         0|            0|            0|  0.00%|        # The year is between 2000 and 2068 (inclusive).
   153|         0|            0|            0|  0.00%|        else:
   154|         0|            0|            0|  0.00%|            yy += 2000
   155|         0|            0|            0|  0.00%|    tzoffset = None
   156|         0|            0|            0|  0.00%|    tz = tz.upper()
   157|         0|            0|            0|  0.00%|    if tz in _timezones:
   158|         0|            0|            0|  0.00%|        tzoffset = _timezones[tz]
   159|         0|            0|            0|  0.00%|    else:
   160|         0|            0|            0|  0.00%|        try:
   161|         0|            0|            0|  0.00%|            tzoffset = int(tz)
   162|         0|            0|            0|  0.00%|        except ValueError:
   163|         0|            0|            0|  0.00%|            pass
   164|         0|            0|            0|  0.00%|        if tzoffset==0 and tz.startswith('-'):
   165|         0|            0|            0|  0.00%|            tzoffset = None
   166|         0|            0|            0|  0.00%|    # Convert a timezone offset into seconds ; -0500 -> -18000
   167|         0|            0|            0|  0.00%|    if tzoffset:
   168|         0|            0|            0|  0.00%|        if tzoffset < 0:
   169|         0|            0|            0|  0.00%|            tzsign = -1
   170|         0|            0|            0|  0.00%|            tzoffset = -tzoffset
   171|         0|            0|            0|  0.00%|        else:
   172|         0|            0|            0|  0.00%|            tzsign = 1
   173|         0|            0|            0|  0.00%|        tzoffset = tzsign * ( (tzoffset//100)*3600 + (tzoffset % 100)*60)
   174|         0|            0|            0|  0.00%|    # Daylight Saving Time flag is set to -1, since DST is unknown.
   175|         0|            0|            0|  0.00%|    return [yy, mm, dd, thh, tmm, tss, 0, 1, -1, tzoffset]
   176|         0|            0|            0|  0.00%|
   177|         0|            0|            0|  0.00%|
   178|         0|            0|            0|  0.00%|def parsedate(data):
   179|         0|            0|            0|  0.00%|    """Convert a time string to a time tuple."""
   180|         0|            0|            0|  0.00%|    t = parsedate_tz(data)
   181|         0|            0|            0|  0.00%|    if isinstance(t, tuple):
   182|         0|            0|            0|  0.00%|        return t[:9]
   183|         0|            0|            0|  0.00%|    else:
   184|         0|            0|            0|  0.00%|        return t
   185|         0|            0|            0|  0.00%|
   186|         0|            0|            0|  0.00%|
   187|         0|            0|            0|  0.00%|def mktime_tz(data):
   188|         0|            0|            0|  0.00%|    """Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp."""
   189|         0|            0|            0|  0.00%|    if data[9] is None:
   190|         0|            0|            0|  0.00%|        # No zone info, so localtime is better assumption than GMT
   191|         0|            0|            0|  0.00%|        return time.mktime(data[:8] + (-1,))
   192|         0|            0|            0|  0.00%|    else:
   193|         0|            0|            0|  0.00%|        t = calendar.timegm(data)
   194|         0|            0|            0|  0.00%|        return t - data[9]
   195|         0|            0|            0|  0.00%|
   196|         0|            0|            0|  0.00%|
   197|         1|  4.29153e-06|  4.29153e-06|  0.00%|def quote(str):
   198|         0|            0|            0|  0.00%|    """Prepare string to be used in a quoted string.
   199|         0|            0|            0|  0.00%|
   200|         0|            0|            0|  0.00%|    Turns backslash and double quote characters into quoted pairs.  These
   201|         0|            0|            0|  0.00%|    are the only characters that need to be quoted inside a quoted string.
   202|         0|            0|            0|  0.00%|    Does not add the surrounding double quotes.
   203|         0|            0|            0|  0.00%|    """
   204|         1|  1.04904e-05|  1.04904e-05|  0.00%|    return str.replace('\\', '\\\\').replace('"', '\\"')
   205|         0|            0|            0|  0.00%|
   206|         0|            0|            0|  0.00%|
   207|         0|            0|            0|  0.00%|class AddrlistClass:
   208|         0|            0|            0|  0.00%|    """Address parser class by Ben Escoto.
   209|         0|            0|            0|  0.00%|
   210|         0|            0|            0|  0.00%|    To understand what this class does, it helps to have a copy of RFC 2822 in
   211|         0|            0|            0|  0.00%|    front of you.
   212|         0|            0|            0|  0.00%|
   213|         0|            0|            0|  0.00%|    Note: this class interface is deprecated and may be removed in the future.
   214|         0|            0|            0|  0.00%|    Use email.utils.AddressList instead.
   215|         0|            0|            0|  0.00%|    """
   216|         0|            0|            0|  0.00%|
   217|         0|            0|            0|  0.00%|    def __init__(self, field):
   218|         0|            0|            0|  0.00%|        """Initialize a new instance.
   219|         0|            0|            0|  0.00%|
   220|         0|            0|            0|  0.00%|        `field' is an unparsed address header field, containing
   221|         0|            0|            0|  0.00%|        one or more addresses.
   222|         0|            0|            0|  0.00%|        """
   223|         0|            0|            0|  0.00%|        self.specials = '()<>@,:;.\"[]'
   224|         0|            0|            0|  0.00%|        self.pos = 0
   225|         0|            0|            0|  0.00%|        self.LWS = ' \t'
   226|         0|            0|            0|  0.00%|        self.CR = '\r\n'
   227|         0|            0|            0|  0.00%|        self.FWS = self.LWS + self.CR
   228|         0|            0|            0|  0.00%|        self.atomends = self.specials + self.LWS + self.CR
   229|         0|            0|            0|  0.00%|        # Note that RFC 2822 now specifies `.' as obs-phrase, meaning that it
   230|         0|            0|            0|  0.00%|        # is obsolete syntax.  RFC 2822 requires that we recognize obsolete
   231|         0|            0|            0|  0.00%|        # syntax, so allow dots in phrases.
   232|         0|            0|            0|  0.00%|        self.phraseends = self.atomends.replace('.', '')
   233|         0|            0|            0|  0.00%|        self.field = field
   234|         0|            0|            0|  0.00%|        self.commentlist = []
   235|         0|            0|            0|  0.00%|
   236|         0|            0|            0|  0.00%|    def gotonext(self):
   237|         0|            0|            0|  0.00%|        """Skip white space and extract comments."""
   238|         0|            0|            0|  0.00%|        wslist = []
   239|         0|            0|            0|  0.00%|        while self.pos < len(self.field):
   240|         0|            0|            0|  0.00%|            if self.field[self.pos] in self.LWS + '\n\r':
   241|         0|            0|            0|  0.00%|                if self.field[self.pos] not in '\n\r':
   242|         0|            0|            0|  0.00%|                    wslist.append(self.field[self.pos])
   243|         0|            0|            0|  0.00%|                self.pos += 1
   244|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '(':
   245|         0|            0|            0|  0.00%|                self.commentlist.append(self.getcomment())
   246|         0|            0|            0|  0.00%|            else:
   247|         0|            0|            0|  0.00%|                break
   248|         0|            0|            0|  0.00%|        return EMPTYSTRING.join(wslist)
   249|         0|            0|            0|  0.00%|
   250|         0|            0|            0|  0.00%|    def getaddrlist(self):
   251|         0|            0|            0|  0.00%|        """Parse all addresses.
   252|         0|            0|            0|  0.00%|
   253|         0|            0|            0|  0.00%|        Returns a list containing all of the addresses.
   254|         0|            0|            0|  0.00%|        """
   255|         0|            0|            0|  0.00%|        result = []
   256|         0|            0|            0|  0.00%|        while self.pos < len(self.field):
   257|         0|            0|            0|  0.00%|            ad = self.getaddress()
   258|         0|            0|            0|  0.00%|            if ad:
   259|         0|            0|            0|  0.00%|                result += ad
   260|         0|            0|            0|  0.00%|            else:
   261|         0|            0|            0|  0.00%|                result.append(('', ''))
   262|         0|            0|            0|  0.00%|        return result
   263|         0|            0|            0|  0.00%|
   264|         0|            0|            0|  0.00%|    def getaddress(self):
   265|         0|            0|            0|  0.00%|        """Parse the next address."""
   266|         0|            0|            0|  0.00%|        self.commentlist = []
   267|         0|            0|            0|  0.00%|        self.gotonext()
   268|         0|            0|            0|  0.00%|
   269|         0|            0|            0|  0.00%|        oldpos = self.pos
   270|         0|            0|            0|  0.00%|        oldcl = self.commentlist
   271|         0|            0|            0|  0.00%|        plist = self.getphraselist()
   272|         0|            0|            0|  0.00%|
   273|         0|            0|            0|  0.00%|        self.gotonext()
   274|         0|            0|            0|  0.00%|        returnlist = []
   275|         0|            0|            0|  0.00%|
   276|         0|            0|            0|  0.00%|        if self.pos >= len(self.field):
   277|         0|            0|            0|  0.00%|            # Bad email address technically, no domain.
   278|         0|            0|            0|  0.00%|            if plist:
   279|         0|            0|            0|  0.00%|                returnlist = [(SPACE.join(self.commentlist), plist[0])]
   280|         0|            0|            0|  0.00%|
   281|         0|            0|            0|  0.00%|        elif self.field[self.pos] in '.@':
   282|         0|            0|            0|  0.00%|            # email address is just an addrspec
   283|         0|            0|            0|  0.00%|            # this isn't very efficient since we start over
   284|         0|            0|            0|  0.00%|            self.pos = oldpos
   285|         0|            0|            0|  0.00%|            self.commentlist = oldcl
   286|         0|            0|            0|  0.00%|            addrspec = self.getaddrspec()
   287|         0|            0|            0|  0.00%|            returnlist = [(SPACE.join(self.commentlist), addrspec)]
   288|         0|            0|            0|  0.00%|
   289|         0|            0|            0|  0.00%|        elif self.field[self.pos] == ':':
   290|         0|            0|            0|  0.00%|            # address is a group
   291|         0|            0|            0|  0.00%|            returnlist = []
   292|         0|            0|            0|  0.00%|
   293|         0|            0|            0|  0.00%|            fieldlen = len(self.field)
   294|         0|            0|            0|  0.00%|            self.pos += 1
   295|         0|            0|            0|  0.00%|            while self.pos < len(self.field):
   296|         0|            0|            0|  0.00%|                self.gotonext()
   297|         0|            0|            0|  0.00%|                if self.pos < fieldlen and self.field[self.pos] == ';':
   298|         0|            0|            0|  0.00%|                    self.pos += 1
   299|         0|            0|            0|  0.00%|                    break
   300|         0|            0|            0|  0.00%|                returnlist = returnlist + self.getaddress()
   301|         0|            0|            0|  0.00%|
   302|         0|            0|            0|  0.00%|        elif self.field[self.pos] == '<':
   303|         0|            0|            0|  0.00%|            # Address is a phrase then a route addr
   304|         0|            0|            0|  0.00%|            routeaddr = self.getrouteaddr()
   305|         0|            0|            0|  0.00%|
   306|         0|            0|            0|  0.00%|            if self.commentlist:
   307|         0|            0|            0|  0.00%|                returnlist = [(SPACE.join(plist) + ' (' +
   308|         0|            0|            0|  0.00%|                               ' '.join(self.commentlist) + ')', routeaddr)]
   309|         0|            0|            0|  0.00%|            else:
   310|         0|            0|            0|  0.00%|                returnlist = [(SPACE.join(plist), routeaddr)]
   311|         0|            0|            0|  0.00%|
   312|         0|            0|            0|  0.00%|        else:
   313|         0|            0|            0|  0.00%|            if plist:
   314|         0|            0|            0|  0.00%|                returnlist = [(SPACE.join(self.commentlist), plist[0])]
   315|         0|            0|            0|  0.00%|            elif self.field[self.pos] in self.specials:
   316|         0|            0|            0|  0.00%|                self.pos += 1
   317|         0|            0|            0|  0.00%|
   318|         0|            0|            0|  0.00%|        self.gotonext()
   319|         0|            0|            0|  0.00%|        if self.pos < len(self.field) and self.field[self.pos] == ',':
   320|         0|            0|            0|  0.00%|            self.pos += 1
   321|         0|            0|            0|  0.00%|        return returnlist
   322|         0|            0|            0|  0.00%|
   323|         0|            0|            0|  0.00%|    def getrouteaddr(self):
   324|         0|            0|            0|  0.00%|        """Parse a route address (Return-path value).
   325|         0|            0|            0|  0.00%|
   326|         0|            0|            0|  0.00%|        This method just skips all the route stuff and returns the addrspec.
   327|         0|            0|            0|  0.00%|        """
   328|         0|            0|            0|  0.00%|        if self.field[self.pos] != '<':
   329|         0|            0|            0|  0.00%|            return
   330|         0|            0|            0|  0.00%|
   331|         0|            0|            0|  0.00%|        expectroute = False
   332|         0|            0|            0|  0.00%|        self.pos += 1
   333|         0|            0|            0|  0.00%|        self.gotonext()
   334|         0|            0|            0|  0.00%|        adlist = ''
   335|         0|            0|            0|  0.00%|        while self.pos < len(self.field):
   336|         0|            0|            0|  0.00%|            if expectroute:
   337|         0|            0|            0|  0.00%|                self.getdomain()
   338|         0|            0|            0|  0.00%|                expectroute = False
   339|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '>':
   340|         0|            0|            0|  0.00%|                self.pos += 1
   341|         0|            0|            0|  0.00%|                break
   342|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '@':
   343|         0|            0|            0|  0.00%|                self.pos += 1
   344|         0|            0|            0|  0.00%|                expectroute = True
   345|         0|            0|            0|  0.00%|            elif self.field[self.pos] == ':':
   346|         0|            0|            0|  0.00%|                self.pos += 1
   347|         0|            0|            0|  0.00%|            else:
   348|         0|            0|            0|  0.00%|                adlist = self.getaddrspec()
   349|         0|            0|            0|  0.00%|                self.pos += 1
   350|         0|            0|            0|  0.00%|                break
   351|         0|            0|            0|  0.00%|            self.gotonext()
   352|         0|            0|            0|  0.00%|
   353|         0|            0|            0|  0.00%|        return adlist
   354|         0|            0|            0|  0.00%|
   355|         0|            0|            0|  0.00%|    def getaddrspec(self):
   356|         0|            0|            0|  0.00%|        """Parse an RFC 2822 addr-spec."""
   357|         0|            0|            0|  0.00%|        aslist = []
   358|         0|            0|            0|  0.00%|
   359|         0|            0|            0|  0.00%|        self.gotonext()
   360|         0|            0|            0|  0.00%|        while self.pos < len(self.field):
   361|         0|            0|            0|  0.00%|            preserve_ws = True
   362|         0|            0|            0|  0.00%|            if self.field[self.pos] == '.':
   363|         0|            0|            0|  0.00%|                if aslist and not aslist[-1].strip():
   364|         0|            0|            0|  0.00%|                    aslist.pop()
   365|         0|            0|            0|  0.00%|                aslist.append('.')
   366|         0|            0|            0|  0.00%|                self.pos += 1
   367|         0|            0|            0|  0.00%|                preserve_ws = False
   368|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '"':
   369|         0|            0|            0|  0.00%|                aslist.append('"%s"' % quote(self.getquote()))
   370|         0|            0|            0|  0.00%|            elif self.field[self.pos] in self.atomends:
   371|         0|            0|            0|  0.00%|                if aslist and not aslist[-1].strip():
   372|         0|            0|            0|  0.00%|                    aslist.pop()
   373|         0|            0|            0|  0.00%|                break
   374|         0|            0|            0|  0.00%|            else:
   375|         0|            0|            0|  0.00%|                aslist.append(self.getatom())
   376|         0|            0|            0|  0.00%|            ws = self.gotonext()
   377|         0|            0|            0|  0.00%|            if preserve_ws and ws:
   378|         0|            0|            0|  0.00%|                aslist.append(ws)
   379|         0|            0|            0|  0.00%|
   380|         0|            0|            0|  0.00%|        if self.pos >= len(self.field) or self.field[self.pos] != '@':
   381|         0|            0|            0|  0.00%|            return EMPTYSTRING.join(aslist)
   382|         0|            0|            0|  0.00%|
   383|         0|            0|            0|  0.00%|        aslist.append('@')
   384|         0|            0|            0|  0.00%|        self.pos += 1
   385|         0|            0|            0|  0.00%|        self.gotonext()
   386|         0|            0|            0|  0.00%|        domain = self.getdomain()
   387|         0|            0|            0|  0.00%|        if not domain:
   388|         0|            0|            0|  0.00%|            # Invalid domain, return an empty address instead of returning a
   389|         0|            0|            0|  0.00%|            # local part to denote failed parsing.
   390|         0|            0|            0|  0.00%|            return EMPTYSTRING
   391|         0|            0|            0|  0.00%|        return EMPTYSTRING.join(aslist) + domain
   392|         0|            0|            0|  0.00%|
   393|         0|            0|            0|  0.00%|    def getdomain(self):
   394|         0|            0|            0|  0.00%|        """Get the complete domain name from an address."""
   395|         0|            0|            0|  0.00%|        sdlist = []
   396|         0|            0|            0|  0.00%|        while self.pos < len(self.field):
   397|         0|            0|            0|  0.00%|            if self.field[self.pos] in self.LWS:
   398|         0|            0|            0|  0.00%|                self.pos += 1
   399|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '(':
   400|         0|            0|            0|  0.00%|                self.commentlist.append(self.getcomment())
   401|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '[':
   402|         0|            0|            0|  0.00%|                sdlist.append(self.getdomainliteral())
   403|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '.':
   404|         0|            0|            0|  0.00%|                self.pos += 1
   405|         0|            0|            0|  0.00%|                sdlist.append('.')
   406|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '@':
   407|         0|            0|            0|  0.00%|                # bpo-34155: Don't parse domains with two `@` like
   408|         0|            0|            0|  0.00%|                # `a@malicious.org@important.com`.
   409|         0|            0|            0|  0.00%|                return EMPTYSTRING
   410|         0|            0|            0|  0.00%|            elif self.field[self.pos] in self.atomends:
   411|         0|            0|            0|  0.00%|                break
   412|         0|            0|            0|  0.00%|            else:
   413|         0|            0|            0|  0.00%|                sdlist.append(self.getatom())
   414|         0|            0|            0|  0.00%|        return EMPTYSTRING.join(sdlist)
   415|         0|            0|            0|  0.00%|
   416|         0|            0|            0|  0.00%|    def getdelimited(self, beginchar, endchars, allowcomments=True):
   417|         0|            0|            0|  0.00%|        """Parse a header fragment delimited by special characters.
   418|         0|            0|            0|  0.00%|
   419|         0|            0|            0|  0.00%|        `beginchar' is the start character for the fragment.
   420|         0|            0|            0|  0.00%|        If self is not looking at an instance of `beginchar' then
   421|         0|            0|            0|  0.00%|        getdelimited returns the empty string.
   422|         0|            0|            0|  0.00%|
   423|         0|            0|            0|  0.00%|        `endchars' is a sequence of allowable end-delimiting characters.
   424|         0|            0|            0|  0.00%|        Parsing stops when one of these is encountered.
   425|         0|            0|            0|  0.00%|
   426|         0|            0|            0|  0.00%|        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed
   427|         0|            0|            0|  0.00%|        within the parsed fragment.
   428|         0|            0|            0|  0.00%|        """
   429|         0|            0|            0|  0.00%|        if self.field[self.pos] != beginchar:
   430|         0|            0|            0|  0.00%|            return ''
   431|         0|            0|            0|  0.00%|
   432|         0|            0|            0|  0.00%|        slist = ['']
   433|         0|            0|            0|  0.00%|        quote = False
   434|         0|            0|            0|  0.00%|        self.pos += 1
   435|         0|            0|            0|  0.00%|        while self.pos < len(self.field):
   436|         0|            0|            0|  0.00%|            if quote:
   437|         0|            0|            0|  0.00%|                slist.append(self.field[self.pos])
   438|         0|            0|            0|  0.00%|                quote = False
   439|         0|            0|            0|  0.00%|            elif self.field[self.pos] in endchars:
   440|         0|            0|            0|  0.00%|                self.pos += 1
   441|         0|            0|            0|  0.00%|                break
   442|         0|            0|            0|  0.00%|            elif allowcomments and self.field[self.pos] == '(':
   443|         0|            0|            0|  0.00%|                slist.append(self.getcomment())
   444|         0|            0|            0|  0.00%|                continue        # have already advanced pos from getcomment
   445|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '\\':
   446|         0|            0|            0|  0.00%|                quote = True
   447|         0|            0|            0|  0.00%|            else:
   448|         0|            0|            0|  0.00%|                slist.append(self.field[self.pos])
   449|         0|            0|            0|  0.00%|            self.pos += 1
   450|         0|            0|            0|  0.00%|
   451|         0|            0|            0|  0.00%|        return EMPTYSTRING.join(slist)
   452|         0|            0|            0|  0.00%|
   453|         0|            0|            0|  0.00%|    def getquote(self):
   454|         0|            0|            0|  0.00%|        """Get a quote-delimited fragment from self's field."""
   455|         0|            0|            0|  0.00%|        return self.getdelimited('"', '"\r', False)
   456|         0|            0|            0|  0.00%|
   457|         0|            0|            0|  0.00%|    def getcomment(self):
   458|         0|            0|            0|  0.00%|        """Get a parenthesis-delimited fragment from self's field."""
   459|         0|            0|            0|  0.00%|        return self.getdelimited('(', ')\r', True)
   460|         0|            0|            0|  0.00%|
   461|         0|            0|            0|  0.00%|    def getdomainliteral(self):
   462|         0|            0|            0|  0.00%|        """Parse an RFC 2822 domain-literal."""
   463|         0|            0|            0|  0.00%|        return '[%s]' % self.getdelimited('[', ']\r', False)
   464|         0|            0|            0|  0.00%|
   465|         0|            0|            0|  0.00%|    def getatom(self, atomends=None):
   466|         0|            0|            0|  0.00%|        """Parse an RFC 2822 atom.
   467|         0|            0|            0|  0.00%|
   468|         0|            0|            0|  0.00%|        Optional atomends specifies a different set of end token delimiters
   469|         0|            0|            0|  0.00%|        (the default is to use self.atomends).  This is used e.g. in
   470|         0|            0|            0|  0.00%|        getphraselist() since phrase endings must not include the `.' (which
   471|         0|            0|            0|  0.00%|        is legal in phrases)."""
   472|         0|            0|            0|  0.00%|        atomlist = ['']
   473|         0|            0|            0|  0.00%|        if atomends is None:
   474|         0|            0|            0|  0.00%|            atomends = self.atomends
   475|         0|            0|            0|  0.00%|
   476|         0|            0|            0|  0.00%|        while self.pos < len(self.field):
   477|         0|            0|            0|  0.00%|            if self.field[self.pos] in atomends:
   478|         0|            0|            0|  0.00%|                break
   479|         0|            0|            0|  0.00%|            else:
   480|         0|            0|            0|  0.00%|                atomlist.append(self.field[self.pos])
   481|         0|            0|            0|  0.00%|            self.pos += 1
   482|         0|            0|            0|  0.00%|
   483|         0|            0|            0|  0.00%|        return EMPTYSTRING.join(atomlist)
   484|         0|            0|            0|  0.00%|
   485|         0|            0|            0|  0.00%|    def getphraselist(self):
   486|         0|            0|            0|  0.00%|        """Parse a sequence of RFC 2822 phrases.
   487|         0|            0|            0|  0.00%|
   488|         0|            0|            0|  0.00%|        A phrase is a sequence of words, which are in turn either RFC 2822
   489|         0|            0|            0|  0.00%|        atoms or quoted-strings.  Phrases are canonicalized by squeezing all
   490|         0|            0|            0|  0.00%|        runs of continuous whitespace into one space.
   491|         0|            0|            0|  0.00%|        """
   492|         0|            0|            0|  0.00%|        plist = []
   493|         0|            0|            0|  0.00%|
   494|         0|            0|            0|  0.00%|        while self.pos < len(self.field):
   495|         0|            0|            0|  0.00%|            if self.field[self.pos] in self.FWS:
   496|         0|            0|            0|  0.00%|                self.pos += 1
   497|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '"':
   498|         0|            0|            0|  0.00%|                plist.append(self.getquote())
   499|         0|            0|            0|  0.00%|            elif self.field[self.pos] == '(':
   500|         0|            0|            0|  0.00%|                self.commentlist.append(self.getcomment())
   501|         0|            0|            0|  0.00%|            elif self.field[self.pos] in self.phraseends:
   502|         0|            0|            0|  0.00%|                break
   503|         0|            0|            0|  0.00%|            else:
   504|         0|            0|            0|  0.00%|                plist.append(self.getatom(self.phraseends))
   505|         0|            0|            0|  0.00%|
   506|         0|            0|            0|  0.00%|        return plist
   507|         0|            0|            0|  0.00%|
   508|         0|            0|            0|  0.00%|class AddressList(AddrlistClass):
   509|         0|            0|            0|  0.00%|    """An AddressList encapsulates a list of parsed RFC 2822 addresses."""
   510|         0|            0|            0|  0.00%|    def __init__(self, field):
   511|         0|            0|            0|  0.00%|        AddrlistClass.__init__(self, field)
   512|         0|            0|            0|  0.00%|        if field:
   513|         0|            0|            0|  0.00%|            self.addresslist = self.getaddrlist()
   514|         0|            0|            0|  0.00%|        else:
   515|         0|            0|            0|  0.00%|            self.addresslist = []
   516|         0|            0|            0|  0.00%|
   517|         0|            0|            0|  0.00%|    def __len__(self):
   518|         0|            0|            0|  0.00%|        return len(self.addresslist)
   519|         0|            0|            0|  0.00%|
   520|         0|            0|            0|  0.00%|    def __add__(self, other):
   521|         0|            0|            0|  0.00%|        # Set union
   522|         0|            0|            0|  0.00%|        newaddr = AddressList(None)
   523|         0|            0|            0|  0.00%|        newaddr.addresslist = self.addresslist[:]
   524|         0|            0|            0|  0.00%|        for x in other.addresslist:
   525|         0|            0|            0|  0.00%|            if not x in self.addresslist:
   526|         0|            0|            0|  0.00%|                newaddr.addresslist.append(x)
   527|         0|            0|            0|  0.00%|        return newaddr
   528|         0|            0|            0|  0.00%|
   529|         0|            0|            0|  0.00%|    def __iadd__(self, other):
   530|         0|            0|            0|  0.00%|        # Set union, in-place
   531|         0|            0|            0|  0.00%|        for x in other.addresslist:
   532|         0|            0|            0|  0.00%|            if not x in self.addresslist:
   533|         0|            0|            0|  0.00%|                self.addresslist.append(x)
   534|         0|            0|            0|  0.00%|        return self
   535|         0|            0|            0|  0.00%|
   536|         0|            0|            0|  0.00%|    def __sub__(self, other):
   537|         0|            0|            0|  0.00%|        # Set difference
   538|         0|            0|            0|  0.00%|        newaddr = AddressList(None)
   539|         0|            0|            0|  0.00%|        for x in self.addresslist:
   540|         0|            0|            0|  0.00%|            if not x in other.addresslist:
   541|         0|            0|            0|  0.00%|                newaddr.addresslist.append(x)
   542|         0|            0|            0|  0.00%|        return newaddr
   543|         0|            0|            0|  0.00%|
   544|         0|            0|            0|  0.00%|    def __isub__(self, other):
   545|         0|            0|            0|  0.00%|        # Set difference, in-place
   546|         0|            0|            0|  0.00%|        for x in other.addresslist:
   547|         0|            0|            0|  0.00%|            if x in self.addresslist:
   548|         0|            0|            0|  0.00%|                self.addresslist.remove(x)
   549|         0|            0|            0|  0.00%|        return self
   550|         0|            0|            0|  0.00%|
   551|         0|            0|            0|  0.00%|    def __getitem__(self, index):
   552|         0|            0|            0|  0.00%|        # Make indexing, slices, and 'in' work
   553|         0|            0|            0|  0.00%|        return self.addresslist[index]
File: <string>
File duration: 1.3113e-05s (0.01%)
Line #|      Hits|         Time| Time per hit|      %|Source code
------+----------+-------------+-------------+-------+-----------
     1|         2|   1.3113e-05|  6.55651e-06|  0.01%|
